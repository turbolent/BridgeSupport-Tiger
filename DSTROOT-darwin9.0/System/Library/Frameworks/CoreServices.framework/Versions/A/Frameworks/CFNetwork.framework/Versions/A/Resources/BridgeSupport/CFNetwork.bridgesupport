<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<struct name='CFHostClientContext' type='{CFHostClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{CFHostClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field name='version' declared_type='CFIndex' type='l' type64='q'/>
<field name='info' declared_type='void*' type='^v'/>
<field name='retain' function_pointer='true' declared_type='CFAllocatorRetainCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void*' type='^v' const='true'/>
</field>
<field name='release' function_pointer='true' declared_type='CFAllocatorReleaseCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copyDescription' function_pointer='true' declared_type='CFAllocatorCopyDescriptionCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</field>
</struct>
<struct name='CFNetServiceClientContext' type='{CFNetServiceClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{CFNetServiceClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field name='version' declared_type='CFIndex' type='l' type64='q'/>
<field name='info' declared_type='void*' type='^v'/>
<field name='retain' function_pointer='true' declared_type='CFAllocatorRetainCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void*' type='^v' const='true'/>
</field>
<field name='release' function_pointer='true' declared_type='CFAllocatorReleaseCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copyDescription' function_pointer='true' declared_type='CFAllocatorCopyDescriptionCallBack' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</field>
</struct>
<cftype name='CFHTTPAuthenticationRef' gettypeid_func='CFHTTPAuthenticationGetTypeID' type='^{_CFHTTPAuthentication=}'/>
<cftype name='CFHTTPMessageRef' gettypeid_func='CFHTTPMessageGetTypeID' type='^{__CFHTTPMessage=}'/>
<cftype name='CFHostRef' gettypeid_func='CFHostGetTypeID' type='^{__CFHost=}'/>
<cftype name='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
<cftype name='CFNetServiceBrowserRef' gettypeid_func='CFNetServiceBrowserGetTypeID' type='^{__CFNetServiceBrowser=}'/>
<cftype name='CFNetServiceMonitorRef' gettypeid_func='CFNetServiceMonitorGetTypeID' type='^{__CFNetServiceMonitor=}'/>
<cftype name='CFNetServiceRef' gettypeid_func='CFNetServiceGetTypeID' type='^{__CFNetService=}'/>
<constant name='kCFDNSServiceFailureKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFErrorDomainCFNetwork' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFErrorDomainWinSock' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceGroup' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceLink' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceModDate' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceMode' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceName' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceOwner' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceSize' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPResourceType' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFFTPStatusCodeKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFGetAddrInfoFailureKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationAccountDomain' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationPassword' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationSchemeBasic' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationSchemeDigest' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationSchemeNTLM' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationSchemeNegotiate' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPAuthenticationUsername' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPVersion1_0' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFHTTPVersion1_1' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyAutoConfigurationURLKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyHostNameKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyPasswordKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyPortNumberKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeAutoConfigurationURL' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeFTP' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeHTTP' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeHTTPS' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeNone' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyTypeSOCKS' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFProxyUsernameKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFSOCKSNegotiationMethodKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFSOCKSStatusCodeKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFSOCKSVersionKey' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamErrorDomainFTP' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainHTTP' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainMach' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainNetDB' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainNetServices' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainSOCKS' declared_type='int' type='i' const='true'/>
<constant name='kCFStreamErrorDomainSSL' declared_type='int' type='i' const='true'/>
<constant name='kCFStreamErrorDomainSystemConfiguration' declared_type='SInt32' type='l' type64='i' const='true'/>
<constant name='kCFStreamErrorDomainWinSock' declared_type='CFIndex' type='l' type64='q' const='true'/>
<constant name='kCFStreamPropertyFTPAttemptPersistentConnection' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPFetchResourceInfo' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPFileTransferOffset' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPPassword' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPProxy' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPProxyHost' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPProxyPassword' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPProxyPort' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPProxyUser' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPResourceSize' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPUsePassiveMode' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyFTPUserName' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPAttemptPersistentConnection' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPFinalRequest' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPFinalURL' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPProxy' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPProxyHost' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPProxyPort' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPRequestBytesWrittenCount' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPResponseHeader' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPSProxyHost' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPSProxyPort' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyHTTPShouldAutoredirect' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyProxyLocalBypass' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSPassword' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSProxy' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSProxyHost' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSProxyPort' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSUser' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySOCKSVersion' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySSLPeerCertificates' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySSLSettings' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertyShouldCloseNativeSocket' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySocketRemoteHost' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySocketRemoteNetService' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamPropertySocketSecurityLevel' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLAllowsAnyRoot' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLAllowsExpiredCertificates' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLAllowsExpiredRoots' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLCertificates' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLIsServer' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLLevel' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLPeerName' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSSLValidatesCertificateChain' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSOCKSVersion4' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSOCKSVersion5' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSecurityLevelNegotiatedSSL' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSecurityLevelNone' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSecurityLevelSSLv2' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSecurityLevelSSLv3' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<constant name='kCFStreamSocketSecurityLevelTLSv1' declared_type='CFStringRef' type='^{__CFString=}' const='true'/>
<enum name='kCFErrorHTTPAuthenticationTypeUnsupported' value='300'/>
<enum name='kCFErrorHTTPBadCredentials' value='301'/>
<enum name='kCFErrorHTTPBadProxyCredentials' value='307'/>
<enum name='kCFErrorHTTPBadURL' value='305'/>
<enum name='kCFErrorHTTPConnectionLost' value='302'/>
<enum name='kCFErrorHTTPParseFailure' value='303'/>
<enum name='kCFErrorHTTPProxyConnectionFailure' value='306'/>
<enum name='kCFErrorHTTPRedirectionLoopDetected' value='304'/>
<enum name='kCFErrorPACFileError' value='308'/>
<enum name='kCFFTPErrorUnexpectedStatusCode' value='200'/>
<enum name='kCFHostAddresses' value='0'/>
<enum name='kCFHostErrorHostNotFound' value='1'/>
<enum name='kCFHostErrorUnknown' value='2'/>
<enum name='kCFHostNames' value='1'/>
<enum name='kCFHostReachability' value='2'/>
<enum name='kCFNetDiagnosticConnectionDown' value='-66557'/>
<enum name='kCFNetDiagnosticConnectionIndeterminate' value='-66558'/>
<enum name='kCFNetDiagnosticConnectionUp' value='-66559'/>
<enum name='kCFNetDiagnosticErr' value='-66560'/>
<enum name='kCFNetDiagnosticNoErr' value='0'/>
<enum name='kCFNetServiceErrorBadArgument' value='-72004'/>
<enum name='kCFNetServiceErrorCancel' value='-72005'/>
<enum name='kCFNetServiceErrorCollision' value='-72001'/>
<enum name='kCFNetServiceErrorDNSServiceFailure' value='-73000'/>
<enum name='kCFNetServiceErrorInProgress' value='-72003'/>
<enum name='kCFNetServiceErrorInvalid' value='-72006'/>
<enum name='kCFNetServiceErrorNotFound' value='-72002'/>
<enum name='kCFNetServiceErrorTimeout' value='-72007'/>
<enum name='kCFNetServiceErrorUnknown' value='-72000'/>
<enum name='kCFNetServiceFlagIsDefault' value='4'/>
<enum name='kCFNetServiceFlagIsDomain' value='2'/>
<enum name='kCFNetServiceFlagIsRegistrationDomain' value='4'/>
<enum name='kCFNetServiceFlagMoreComing' value='1'/>
<enum name='kCFNetServiceFlagNoAutoRename' value='1'/>
<enum name='kCFNetServiceFlagRemove' value='8'/>
<enum name='kCFNetServiceMonitorTXT' value='1'/>
<enum name='kCFNetServicesErrorBadArgument' value='-72004'/>
<enum name='kCFNetServicesErrorCancel' value='-72005'/>
<enum name='kCFNetServicesErrorCollision' value='-72001'/>
<enum name='kCFNetServicesErrorInProgress' value='-72003'/>
<enum name='kCFNetServicesErrorInvalid' value='-72006'/>
<enum name='kCFNetServicesErrorNotFound' value='-72002'/>
<enum name='kCFNetServicesErrorTimeout' value='-72007'/>
<enum name='kCFNetServicesErrorUnknown' value='-72000'/>
<enum name='kCFSOCKS4ErrorIdConflict' value='112'/>
<enum name='kCFSOCKS4ErrorIdentdFailed' value='111'/>
<enum name='kCFSOCKS4ErrorRequestFailed' value='110'/>
<enum name='kCFSOCKS4ErrorUnknownStatusCode' value='113'/>
<enum name='kCFSOCKS5ErrorBadCredentials' value='122'/>
<enum name='kCFSOCKS5ErrorBadResponseAddr' value='121'/>
<enum name='kCFSOCKS5ErrorBadState' value='120'/>
<enum name='kCFSOCKS5ErrorNoAcceptableMethod' value='124'/>
<enum name='kCFSOCKS5ErrorUnsupportedNegotiationMethod' value='123'/>
<enum name='kCFSOCKSErrorUnknownClientVersion' value='100'/>
<enum name='kCFSOCKSErrorUnsupportedServerVersion' value='101'/>
<enum name='kCFStreamErrorHTTPAuthenticationBadPassword' value='-1002'/>
<enum name='kCFStreamErrorHTTPAuthenticationBadUserName' value='-1001'/>
<enum name='kCFStreamErrorHTTPAuthenticationTypeUnsupported' value='-1000'/>
<enum name='kCFStreamErrorHTTPBadURL' value='-3'/>
<enum name='kCFStreamErrorHTTPParseFailure' value='-1'/>
<enum name='kCFStreamErrorHTTPRedirectionLoop' value='-2'/>
<enum name='kCFStreamErrorSOCKS4IdConflict' value='93'/>
<enum name='kCFStreamErrorSOCKS4IdentdFailed' value='92'/>
<enum name='kCFStreamErrorSOCKS4RequestFailed' value='91'/>
<enum name='kCFStreamErrorSOCKS4SubDomainResponse' value='2'/>
<enum name='kCFStreamErrorSOCKS5BadResponseAddr' value='1'/>
<enum name='kCFStreamErrorSOCKS5BadState' value='2'/>
<enum name='kCFStreamErrorSOCKS5SubDomainMethod' value='4'/>
<enum name='kCFStreamErrorSOCKS5SubDomainResponse' value='5'/>
<enum name='kCFStreamErrorSOCKS5SubDomainUserPass' value='3'/>
<enum name='kCFStreamErrorSOCKSSubDomainNone' value='0'/>
<enum name='kCFStreamErrorSOCKSSubDomainVersionCode' value='1'/>
<enum name='kCFStreamErrorSOCKSUnknownClientVersion' value='3'/>
<enum name='kCFStreamSocketSecurityNone' value='0'/>
<enum name='kCFStreamSocketSecuritySSLv2' value='1'/>
<enum name='kCFStreamSocketSecuritySSLv23' value='3'/>
<enum name='kCFStreamSocketSecuritySSLv3' value='2'/>
<enum name='kCFStreamSocketSecurityTLSv1' value='4'/>
<enum name='kSOCKS5NoAcceptableMethod' value='255'/>
<function name='CFFTPCreateParsedResourceListing'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='buffer' declared_type='UInt8*' type='*' const='true'/>
<arg name='bufferLength' declared_type='CFIndex' type='l' type64='q'/>
<arg name='parsed' declared_type='CFDictionaryRef*' type='^^{__CFDictionary}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CFHTTPAuthenticationAppliesToRequest'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationCopyDomains'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CFHTTPAuthenticationCopyMethod'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPAuthenticationCopyRealm'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPAuthenticationCreateFromResponse'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='response' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFHTTPAuthenticationRef' already_retained='true' type='^{_CFHTTPAuthentication=}'/>
</function>
<function name='CFHTTPAuthenticationGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHTTPAuthenticationIsValid'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresAccountDomain'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresOrderedRequests'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresUserNameAndPassword'>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageAddAuthentication'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='authenticationFailureResponse' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='username' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='password' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='authenticationScheme' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='forProxy' declared_type='Boolean' type='B'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageAppendBytes'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='newBytes' declared_type='UInt8*' type='*' const='true'/>
<arg name='numBytes' declared_type='CFIndex' type='l' type64='q'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageApplyCredentialDictionary'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<arg name='dict' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageApplyCredentials'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='auth' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<arg name='username' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='password' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageCopyAllHeaderFields'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CFHTTPMessageCopyBody'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CFHTTPMessageCopyHeaderFieldValue'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='headerField' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopyRequestMethod'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopyRequestURL'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFURLRef' already_retained='true' type='^{__CFURL=}'/>
</function>
<function name='CFHTTPMessageCopyResponseStatusLine'>
<arg name='response' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopySerializedMessage'>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CFHTTPMessageCopyVersion'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCreateCopy'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFHTTPMessageRef' already_retained='true' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateEmpty'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='isRequest' declared_type='Boolean' type='B'/>
<retval declared_type='CFHTTPMessageRef' already_retained='true' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateRequest'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='requestMethod' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='httpVersion' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CFHTTPMessageRef' already_retained='true' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateResponse'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='statusCode' declared_type='CFIndex' type='l' type64='q'/>
<arg name='statusDescription' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='httpVersion' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CFHTTPMessageRef' already_retained='true' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageGetResponseStatusCode'>
<arg name='response' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CFHTTPMessageGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHTTPMessageIsHeaderComplete'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageIsRequest'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageSetBody'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='bodyData' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPMessageSetHeaderFieldValue'>
<arg name='message' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='headerField' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='value' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPReadStreamSetProxy'>
<arg name='httpStream' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
<arg name='proxyHost' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='proxyPort' declared_type='CFIndex' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPReadStreamSetRedirectsAutomatically'>
<arg name='httpStream' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
<arg name='shouldAutoRedirect' declared_type='Boolean' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostCancelInfoResolution'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='info' declared_type='CFHostInfoType' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostCreateCopy'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='host' declared_type='CFHostRef' type='^{__CFHost=}'/>
<retval declared_type='CFHostRef' already_retained='true' type='^{__CFHost=}'/>
</function>
<function name='CFHostCreateWithAddress'>
<arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='addr' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='CFHostRef' already_retained='true' type='^{__CFHost=}'/>
</function>
<function name='CFHostCreateWithName'>
<arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='hostname' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='CFHostRef' already_retained='true' type='^{__CFHost=}'/>
</function>
<function name='CFHostGetAddressing'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='hasBeenResolved' declared_type='Boolean*' type='^B'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFHostGetNames'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='hasBeenResolved' declared_type='Boolean*' type='^B'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFHostGetReachability'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='hasBeenResolved' declared_type='Boolean*' type='^B'/>
<retval declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFHostGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHostScheduleWithRunLoop'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostSetClient'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='clientCB' function_pointer='true' declared_type='CFHostClientCallBack' type='^?'>
<arg declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg declared_type='CFHostInfoType' type='i'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFHostClientContext*' type='^{CFHostClientContext=i^v^?^?^?}' type64='^{CFHostClientContext=q^v^?^?^?}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHostStartInfoResolution'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='info' declared_type='CFHostInfoType' type='i'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHostUnscheduleFromRunLoop'>
<arg name='theHost' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetDiagnosticCopyNetworkStatusPassively'>
<arg name='details' declared_type='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
<arg name='description' declared_type='CFStringRef*' type='^^{__CFString}'/>
<retval declared_type='CFNetDiagnosticStatus' type='l' type64='q'/>
</function>
<function name='CFNetDiagnosticCreateWithStreams'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='readStream' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
<arg name='writeStream' declared_type='CFWriteStreamRef' type='^{__CFWriteStream=}'/>
<retval declared_type='CFNetDiagnosticRef' already_retained='true' type='^{__CFNetDiagnostic=}'/>
</function>
<function name='CFNetDiagnosticCreateWithURL'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CFNetDiagnosticRef' already_retained='true' type='^{__CFNetDiagnostic=}'/>
</function>
<function name='CFNetDiagnosticDiagnoseProblemInteractively'>
<arg name='details' declared_type='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
<retval declared_type='CFNetDiagnosticStatus' type='l' type64='q'/>
</function>
<function name='CFNetDiagnosticSetName'>
<arg name='details' declared_type='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserCreate'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='clientCB' function_pointer='true' declared_type='CFNetServiceBrowserClientCallBack' type='^?'>
<arg declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFOptionFlags' type='L' type64='Q'/>
<arg declared_type='CFTypeRef' type='@'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFNetServiceClientContext*' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval declared_type='CFNetServiceBrowserRef' already_retained='true' type='^{__CFNetServiceBrowser=}'/>
</function>
<function name='CFNetServiceBrowserGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceBrowserInvalidate'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserScheduleWithRunLoop'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserSearchForDomains'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg name='registrationDomains' declared_type='Boolean' type='B'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceBrowserSearchForServices'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg name='domain' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='serviceType' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceBrowserStopSearch'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserUnscheduleFromRunLoop'>
<arg name='browser' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceCancel'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceCreate'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='domain' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='serviceType' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='port' declared_type='SInt32' type='l' type64='i'/>
<retval declared_type='CFNetServiceRef' already_retained='true' type='^{__CFNetService=}'/>
</function>
<function name='CFNetServiceCreateCopy'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='service' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFNetServiceRef' already_retained='true' type='^{__CFNetService=}'/>
</function>
<function name='CFNetServiceCreateDictionaryWithTXTData'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='txtRecord' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
</function>
<function name='CFNetServiceCreateTXTDataWithDictionary'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='keyValuePairs' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
</function>
<function name='CFNetServiceGetAddressing'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFNetServiceGetDomain'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetName'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetPortNumber'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function name='CFNetServiceGetProtocolSpecificInformation'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetTXTData'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFNetServiceGetTargetHost'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetType'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceMonitorCreate'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='clientCB' function_pointer='true' declared_type='CFNetServiceMonitorClientCallBack' type='^?'>
<arg declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg declared_type='CFNetServiceMonitorType' type='i'/>
<arg declared_type='CFDataRef' type='^{__CFData=}'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFNetServiceClientContext*' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval declared_type='CFNetServiceMonitorRef' already_retained='true' type='^{__CFNetServiceMonitor=}'/>
</function>
<function name='CFNetServiceMonitorGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceMonitorInvalidate'>
<arg name='monitor' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorScheduleWithRunLoop'>
<arg name='monitor' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorStart'>
<arg name='monitor' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg name='recordType' declared_type='CFNetServiceMonitorType' type='i'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceMonitorStop'>
<arg name='monitor' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorUnscheduleFromRunLoop'>
<arg name='monitor' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceRegister'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceRegisterWithOptions'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='options' declared_type='CFOptionFlags' type='L' type64='Q'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceResolve'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceResolveWithTimeout'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='timeout' declared_type='CFTimeInterval' type='d'/>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceScheduleWithRunLoop'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceSetClient'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='clientCB' function_pointer='true' declared_type='CFNetServiceClientCallBack' type='^?'>
<arg declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFNetServiceClientContext*' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceSetProtocolSpecificInformation'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='theInfo' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceSetTXTData'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='txtRecord' declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceUnscheduleFromRunLoop'>
<arg name='theService' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='runLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='runLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetworkCopyProxiesForAutoConfigurationScript'>
<arg name='proxyAutoConfigurationScript' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='targetURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='error' declared_type='CFErrorRef*' type='^^{__CFError}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CFNetworkCopyProxiesForURL'>
<arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='proxySettings' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
</function>
<function name='CFNetworkExecuteProxyAutoConfigurationScript'>
<arg name='proxyAutoConfigurationScript' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='targetURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='cb' function_pointer='true' declared_type='CFProxyAutoConfigurationResultCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg declared_type='CFErrorRef' type='^{__CFError=}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFStreamClientContext*' type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='CFNetworkExecuteProxyAutoConfigurationURL'>
<arg name='proxyAutoConfigURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='targetURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='cb' function_pointer='true' declared_type='CFProxyAutoConfigurationResultCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg declared_type='CFErrorRef' type='^{__CFError=}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='clientContext' declared_type='CFStreamClientContext*' type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='CFReadStreamCreateForHTTPRequest'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='request' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFReadStreamRef' already_retained='true' type='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamCreateForStreamedHTTPRequest'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='requestHeaders' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<arg name='requestBody' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
<retval declared_type='CFReadStreamRef' already_retained='true' type='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamCreateWithFTPURL'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='ftpURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CFReadStreamRef' already_retained='true' type='^{__CFReadStream=}'/>
</function>
<function name='CFSocketStreamPairSetSecurityProtocol'>
<arg name='socketReadStream' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
<arg name='socketWriteStream' declared_type='CFWriteStreamRef' type='^{__CFWriteStream=}'/>
<arg name='securityProtocol' declared_type='CFStreamSocketSecurityProtocol' type='i'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFSocketStreamSOCKSGetError' inline='true'>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function name='CFSocketStreamSOCKSGetErrorSubdomain' inline='true'>
<arg name='error' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function name='CFStreamCreatePairWithSocketToCFHost'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='host' declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg name='port' declared_type='SInt32' type='l' type64='i'/>
<arg name='readStream' declared_type='CFReadStreamRef*' type='^^{__CFReadStream}'/>
<arg name='writeStream' declared_type='CFWriteStreamRef*' type='^^{__CFWriteStream}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFStreamCreatePairWithSocketToNetService'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='service' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg name='readStream' declared_type='CFReadStreamRef*' type='^^{__CFReadStream}'/>
<arg name='writeStream' declared_type='CFWriteStreamRef*' type='^^{__CFWriteStream}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFWriteStreamCreateWithFTPURL'>
<arg name='alloc' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
<arg name='ftpURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<retval declared_type='CFWriteStreamRef' already_retained='true' type='^{__CFWriteStream=}'/>
</function>
</signatures>
