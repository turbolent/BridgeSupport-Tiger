<?xml version='1.0'?>
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
  <depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
  <struct name='AudioEndianAtom' type='{AudioEndianAtom=&quot;size&quot;l&quot;atomType&quot;I&quot;littleEndian&quot;s}' type64='{AudioEndianAtom=&quot;size&quot;q&quot;atomType&quot;I&quot;littleEndian&quot;s}'>
    <field name='size' declared_type='long' type='l' type64='q'/>
    <field name='atomType' declared_type='OSType' type='L' type64='I'/>
    <field name='littleEndian' declared_type='short' type='s'/>
  </struct>
  <struct name='AudioFormatAtom' type='{AudioFormatAtom=&quot;size&quot;l&quot;atomType&quot;I&quot;format&quot;I}' type64='{AudioFormatAtom=&quot;size&quot;q&quot;atomType&quot;I&quot;format&quot;I}'>
    <field name='size' declared_type='long' type='l' type64='q'/>
    <field name='atomType' declared_type='OSType' type='L' type64='I'/>
    <field name='format' declared_type='OSType' type='L' type64='I'/>
  </struct>
  <struct name='AudioInfo' type='{AudioInfo=&quot;capabilitiesFlags&quot;l&quot;reserved&quot;l&quot;numVolumeSteps&quot;S}' type64='{AudioInfo=&quot;capabilitiesFlags&quot;q&quot;reserved&quot;q&quot;numVolumeSteps&quot;S}'>
    <field name='capabilitiesFlags' declared_type='long' type='l' type64='q'/>
    <field name='reserved' declared_type='long' type='l' type64='q'/>
    <field name='numVolumeSteps' declared_type='unsigned short' type='S'/>
  </struct>
  <struct name='AudioSelection' type='{AudioSelection=&quot;unitType&quot;l&quot;selStart&quot;I&quot;selEnd&quot;I}' type64='{AudioSelection=&quot;unitType&quot;q&quot;selStart&quot;I&quot;selEnd&quot;I}'>
    <field name='unitType' declared_type='long' type='l' type64='q'/>
    <field name='selStart' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='selEnd' declared_type='UnsignedFixed' type='L' type64='I'/>
  </struct>
  <struct name='AudioTerminatorAtom' type='{AudioTerminatorAtom=&quot;size&quot;l&quot;atomType&quot;I}' type64='{AudioTerminatorAtom=&quot;size&quot;q&quot;atomType&quot;I}'>
    <field name='size' declared_type='long' type='l' type64='q'/>
    <field name='atomType' declared_type='OSType' type='L' type64='I'/>
  </struct>
  <struct name='CmpSoundHeader' type='{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;L&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}' type64='{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;Q&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}'>
    <field name='samplePtr' declared_type='Ptr' type='*'/>
    <field name='numChannels' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='loopStart' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='loopEnd' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='encode' declared_type='UInt8' type='C'/>
    <field name='baseFrequency' declared_type='UInt8' type='C'/>
    <field name='numFrames' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='AIFFSampleRate' declared_type='extended80' type='{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}'/>
    <field name='markerChunk' declared_type='Ptr' type='*'/>
    <field name='format' declared_type='OSType' type='L' type64='I'/>
    <field name='futureUse2' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='stateVars' declared_type='StateBlockPtr' type='^{StateBlock=[64s]}'/>
    <field name='leftOverSamples' declared_type='LeftOverBlockPtr' type='^{LeftOverBlock=L[32c]}' type64='^{LeftOverBlock=Q[32c]}'/>
    <field name='compressionID' declared_type='short' type='s'/>
    <field name='packetSize' declared_type='unsigned short' type='S'/>
    <field name='snthID' declared_type='unsigned short' type='S'/>
    <field name='sampleSize' declared_type='unsigned short' type='S'/>
    <field name='sampleArea' declared_type='UInt8*' type='[1C]'/>
  </struct>
  <struct name='CompressionInfo' type='{CompressionInfo=&quot;recordSize&quot;l&quot;format&quot;I&quot;compressionID&quot;s&quot;samplesPerPacket&quot;S&quot;bytesPerPacket&quot;S&quot;bytesPerFrame&quot;S&quot;bytesPerSample&quot;S&quot;futureUse1&quot;S}' type64='{CompressionInfo=&quot;recordSize&quot;q&quot;format&quot;I&quot;compressionID&quot;s&quot;samplesPerPacket&quot;S&quot;bytesPerPacket&quot;S&quot;bytesPerFrame&quot;S&quot;bytesPerSample&quot;S&quot;futureUse1&quot;S}'>
    <field name='recordSize' declared_type='long' type='l' type64='q'/>
    <field name='format' declared_type='OSType' type='L' type64='I'/>
    <field name='compressionID' declared_type='short' type='s'/>
    <field name='samplesPerPacket' declared_type='unsigned short' type='S'/>
    <field name='bytesPerPacket' declared_type='unsigned short' type='S'/>
    <field name='bytesPerFrame' declared_type='unsigned short' type='S'/>
    <field name='bytesPerSample' declared_type='unsigned short' type='S'/>
    <field name='futureUse1' declared_type='unsigned short' type='S'/>
  </struct>
  <struct name='ConversionBlock' type='{ConversionBlock=&quot;destination&quot;s&quot;unused&quot;s&quot;inputPtr&quot;^{CmpSoundHeader}&quot;outputPtr&quot;^{CmpSoundHeader}}'>
    <field name='destination' declared_type='short' type='s'/>
    <field name='unused' declared_type='short' type='s'/>
    <field name='inputPtr' declared_type='CmpSoundHeaderPtr' type='^{CmpSoundHeader=*LILLCCL{Float80=s[4S]}*IL^{StateBlock}^{LeftOverBlock}sSSS[1C]}' type64='^{CmpSoundHeader=*QIQQCCQ{Float80=s[4S]}*IQ^{StateBlock}^{LeftOverBlock}sSSS[1C]}'/>
    <field name='outputPtr' declared_type='CmpSoundHeaderPtr' type='^{CmpSoundHeader=*LILLCCL{Float80=s[4S]}*IL^{StateBlock}^{LeftOverBlock}sSSS[1C]}' type64='^{CmpSoundHeader=*QIQQCCQ{Float80=s[4S]}*IQ^{StateBlock}^{LeftOverBlock}sSSS[1C]}'/>
  </struct>
  <struct name='EQSpectrumBandsRecord' type='{EQSpectrumBandsRecord=&quot;count&quot;s&quot;frequency&quot;^I}'>
    <field name='count' declared_type='short' type='s'/>
    <field name='frequency' declared_type='UnsignedFixedPtr' type='^I'/>
  </struct>
  <struct name='ExtSoundHeader' type='{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;L&quot;futureUse3&quot;L&quot;futureUse4&quot;L&quot;sampleArea&quot;[1C]}' type64='{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;Q&quot;futureUse3&quot;Q&quot;futureUse4&quot;Q&quot;sampleArea&quot;[1C]}'>
    <field name='samplePtr' declared_type='Ptr' type='*'/>
    <field name='numChannels' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='loopStart' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='loopEnd' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='encode' declared_type='UInt8' type='C'/>
    <field name='baseFrequency' declared_type='UInt8' type='C'/>
    <field name='numFrames' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='AIFFSampleRate' declared_type='extended80' type='{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}'/>
    <field name='markerChunk' declared_type='Ptr' type='*'/>
    <field name='instrumentChunks' declared_type='Ptr' type='*'/>
    <field name='AESRecording' declared_type='Ptr' type='*'/>
    <field name='sampleSize' declared_type='unsigned short' type='S'/>
    <field name='futureUse1' declared_type='unsigned short' type='S'/>
    <field name='futureUse2' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='futureUse3' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='futureUse4' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='sampleArea' declared_type='UInt8*' type='[1C]'/>
  </struct>
  <struct name='ExtendedScheduledSoundHeader' type='{ExtendedScheduledSoundHeader=&quot;u&quot;(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;L&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;L&quot;futureUse3&quot;L&quot;futureUse4&quot;L&quot;sampleArea&quot;[1C]})&quot;flags&quot;l&quot;reserved&quot;s&quot;callBackParam1&quot;s&quot;callBackParam2&quot;l&quot;startTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}&quot;recordSize&quot;l&quot;extendedFlags&quot;l&quot;bufferSize&quot;l&quot;frameCount&quot;l&quot;frameSizesArray&quot;^l&quot;commonFrameSize&quot;l&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;l&quot;bufferFlags&quot;L&quot;bufferFlagsMask&quot;L}' type64='{ExtendedScheduledSoundHeader=&quot;u&quot;(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;Q&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;Q&quot;futureUse3&quot;Q&quot;futureUse4&quot;Q&quot;sampleArea&quot;[1C]})&quot;flags&quot;q&quot;reserved&quot;s&quot;callBackParam1&quot;s&quot;callBackParam2&quot;q&quot;startTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}&quot;recordSize&quot;q&quot;extendedFlags&quot;q&quot;bufferSize&quot;q&quot;frameCount&quot;q&quot;frameSizesArray&quot;^q&quot;commonFrameSize&quot;q&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;q&quot;bufferFlags&quot;Q&quot;bufferFlagsMask&quot;Q}'>
    <field name='u' declared_type='SoundHeaderUnion' type='(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;L&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;L&quot;futureUse3&quot;L&quot;futureUse4&quot;L&quot;sampleArea&quot;[1C]})' type64='(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;Q&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;Q&quot;futureUse3&quot;Q&quot;futureUse4&quot;Q&quot;sampleArea&quot;[1C]})'/>
    <field name='flags' declared_type='long' type='l' type64='q'/>
    <field name='reserved' declared_type='short' type='s'/>
    <field name='callBackParam1' declared_type='short' type='s'/>
    <field name='callBackParam2' declared_type='long' type='l' type64='q'/>
    <field name='startTime' declared_type='TimeRecord' type='{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'/>
    <field name='recordSize' declared_type='long' type='l' type64='q'/>
    <field name='extendedFlags' declared_type='long' type='l' type64='q'/>
    <field name='bufferSize' declared_type='long' type='l' type64='q'/>
    <field name='frameCount' declared_type='long' type='l' type64='q'/>
    <field name='frameSizesArray' declared_type='long*' type='^l' type64='^q'/>
    <field name='commonFrameSize' declared_type='long' type='l' type64='q'/>
    <field name='extensionsPtr' declared_type='void*' type='^v'/>
    <field name='extensionsSize' declared_type='long' type='l' type64='q'/>
    <field name='bufferFlags' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='bufferFlagsMask' declared_type='unsigned long' type='L' type64='Q'/>
  </struct>
  <struct name='ExtendedSoundComponentData' type='{ExtendedSoundComponentData=&quot;desc&quot;{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}&quot;recordSize&quot;l&quot;extendedFlags&quot;l&quot;bufferSize&quot;l&quot;frameCount&quot;l&quot;frameSizesArray&quot;^l&quot;commonFrameSize&quot;l&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;l&quot;bufferFlags&quot;L&quot;bufferFlagsMask&quot;L}' type64='{ExtendedSoundComponentData=&quot;desc&quot;{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}&quot;recordSize&quot;q&quot;extendedFlags&quot;q&quot;bufferSize&quot;q&quot;frameCount&quot;q&quot;frameSizesArray&quot;^q&quot;commonFrameSize&quot;q&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;q&quot;bufferFlags&quot;Q&quot;bufferFlagsMask&quot;Q}'>
    <field name='desc' declared_type='SoundComponentData' type='{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}' type64='{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}'/>
    <field name='recordSize' declared_type='long' type='l' type64='q'/>
    <field name='extendedFlags' declared_type='long' type='l' type64='q'/>
    <field name='bufferSize' declared_type='long' type='l' type64='q'/>
    <field name='frameCount' declared_type='long' type='l' type64='q'/>
    <field name='frameSizesArray' declared_type='long*' type='^l' type64='^q'/>
    <field name='commonFrameSize' declared_type='long' type='l' type64='q'/>
    <field name='extensionsPtr' declared_type='void*' type='^v'/>
    <field name='extensionsSize' declared_type='long' type='l' type64='q'/>
    <field name='bufferFlags' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='bufferFlagsMask' declared_type='unsigned long' type='L' type64='Q'/>
  </struct>
  <struct name='ExtendedSoundParamBlock' type='{ExtendedSoundParamBlock=&quot;pb&quot;{SoundParamBlock=&quot;recordSize&quot;l&quot;desc&quot;{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;l&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;l&quot;result&quot;s}&quot;reserved&quot;s&quot;extendedFlags&quot;l&quot;bufferSize&quot;l&quot;frameCount&quot;l&quot;frameSizesArray&quot;^l&quot;commonFrameSize&quot;l&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;l&quot;bufferFlags&quot;L&quot;bufferFlagsMask&quot;L}' type64='{ExtendedSoundParamBlock=&quot;pb&quot;{SoundParamBlock=&quot;recordSize&quot;q&quot;desc&quot;{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;q&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;q&quot;result&quot;s}&quot;reserved&quot;s&quot;extendedFlags&quot;q&quot;bufferSize&quot;q&quot;frameCount&quot;q&quot;frameSizesArray&quot;^q&quot;commonFrameSize&quot;q&quot;extensionsPtr&quot;^v&quot;extensionsSize&quot;q&quot;bufferFlags&quot;Q&quot;bufferFlagsMask&quot;Q}'>
    <field name='pb' declared_type='SoundParamBlock' type='{SoundParamBlock=&quot;recordSize&quot;l&quot;desc&quot;{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;l&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;l&quot;result&quot;s}' type64='{SoundParamBlock=&quot;recordSize&quot;q&quot;desc&quot;{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;q&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;q&quot;result&quot;s}'/>
    <field name='reserved' declared_type='short' type='s'/>
    <field name='extendedFlags' declared_type='long' type='l' type64='q'/>
    <field name='bufferSize' declared_type='long' type='l' type64='q'/>
    <field name='frameCount' declared_type='long' type='l' type64='q'/>
    <field name='frameSizesArray' declared_type='long*' type='^l' type64='^q'/>
    <field name='commonFrameSize' declared_type='long' type='l' type64='q'/>
    <field name='extensionsPtr' declared_type='void*' type='^v'/>
    <field name='extensionsSize' declared_type='long' type='l' type64='q'/>
    <field name='bufferFlags' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='bufferFlagsMask' declared_type='unsigned long' type='L' type64='Q'/>
  </struct>
  <struct name='LeftOverBlock' type='{LeftOverBlock=&quot;count&quot;L&quot;sampleArea&quot;[32c]}' type64='{LeftOverBlock=&quot;count&quot;Q&quot;sampleArea&quot;[32c]}'>
    <field name='count' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='sampleArea' declared_type='SInt8*' type='[32c]'/>
  </struct>
  <struct name='LevelMeterInfo' type='{LevelMeterInfo=&quot;numChannels&quot;s&quot;leftMeter&quot;C&quot;rightMeter&quot;C}'>
    <field name='numChannels' declared_type='short' type='s'/>
    <field name='leftMeter' declared_type='UInt8' type='C'/>
    <field name='rightMeter' declared_type='UInt8' type='C'/>
  </struct>
  <struct name='ModRef' type='{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;l}' type64='{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;q}'>
    <field name='modNumber' declared_type='unsigned short' type='S'/>
    <field name='modInit' declared_type='long' type='l' type64='q'/>
  </struct>
  <struct name='SCStatus' type='{SCStatus=&quot;scStartTime&quot;I&quot;scEndTime&quot;I&quot;scCurrentTime&quot;I&quot;scChannelBusy&quot;B&quot;scChannelDisposed&quot;B&quot;scChannelPaused&quot;B&quot;scUnused&quot;B&quot;scChannelAttributes&quot;L&quot;scCPULoad&quot;l}' type64='{SCStatus=&quot;scStartTime&quot;I&quot;scEndTime&quot;I&quot;scCurrentTime&quot;I&quot;scChannelBusy&quot;B&quot;scChannelDisposed&quot;B&quot;scChannelPaused&quot;B&quot;scUnused&quot;B&quot;scChannelAttributes&quot;Q&quot;scCPULoad&quot;q}'>
    <field name='scStartTime' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='scEndTime' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='scCurrentTime' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='scChannelBusy' declared_type='Boolean' type='B'/>
    <field name='scChannelDisposed' declared_type='Boolean' type='B'/>
    <field name='scChannelPaused' declared_type='Boolean' type='B'/>
    <field name='scUnused' declared_type='Boolean' type='B'/>
    <field name='scChannelAttributes' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='scCPULoad' declared_type='long' type='l' type64='q'/>
  </struct>
  <struct name='SMStatus' type='{SMStatus=&quot;smMaxCPULoad&quot;s&quot;smNumChannels&quot;s&quot;smCurCPULoad&quot;s}'>
    <field name='smMaxCPULoad' declared_type='short' type='s'/>
    <field name='smNumChannels' declared_type='short' type='s'/>
    <field name='smCurCPULoad' declared_type='short' type='s'/>
  </struct>
  <struct name='SPB' type='{SPB=&quot;inRefNum&quot;l&quot;count&quot;L&quot;milliseconds&quot;L&quot;bufferLength&quot;L&quot;bufferPtr&quot;*&quot;completionRoutine&quot;^?&quot;interruptRoutine&quot;^?&quot;userLong&quot;l&quot;error&quot;s&quot;unused1&quot;l}' type64='{SPB=&quot;inRefNum&quot;q&quot;count&quot;Q&quot;milliseconds&quot;Q&quot;bufferLength&quot;Q&quot;bufferPtr&quot;*&quot;completionRoutine&quot;^?&quot;interruptRoutine&quot;^?&quot;userLong&quot;q&quot;error&quot;s&quot;unused1&quot;q}'>
    <field name='inRefNum' declared_type='long' type='l' type64='q'/>
    <field name='count' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='milliseconds' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='bufferLength' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='bufferPtr' declared_type='Ptr' type='*'/>
    <field name='completionRoutine' function_pointer='true' declared_type='SICompletionUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='interruptRoutine' function_pointer='true' declared_type='SIInterruptUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='userLong' declared_type='long' type='l' type64='q'/>
    <field name='error' declared_type='OSErr' type='s'/>
    <field name='unused1' declared_type='long' type='l' type64='q'/>
  </struct>
  <struct name='ScheduledSoundHeader' type='{ScheduledSoundHeader=&quot;u&quot;(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;L&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;L&quot;futureUse3&quot;L&quot;futureUse4&quot;L&quot;sampleArea&quot;[1C]})&quot;flags&quot;l&quot;reserved&quot;s&quot;callBackParam1&quot;s&quot;callBackParam2&quot;l&quot;startTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}}' type64='{ScheduledSoundHeader=&quot;u&quot;(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;Q&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;Q&quot;futureUse3&quot;Q&quot;futureUse4&quot;Q&quot;sampleArea&quot;[1C]})&quot;flags&quot;q&quot;reserved&quot;s&quot;callBackParam1&quot;s&quot;callBackParam2&quot;q&quot;startTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}}'>
    <field name='u' declared_type='SoundHeaderUnion' type='(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;L&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;L&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;L&quot;futureUse3&quot;L&quot;futureUse4&quot;L&quot;sampleArea&quot;[1C]})' type64='(SoundHeaderUnion=&quot;stdHeader&quot;{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}&quot;cmpHeader&quot;{CmpSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;format&quot;I&quot;futureUse2&quot;Q&quot;stateVars&quot;^{StateBlock}&quot;leftOverSamples&quot;^{LeftOverBlock}&quot;compressionID&quot;s&quot;packetSize&quot;S&quot;snthID&quot;S&quot;sampleSize&quot;S&quot;sampleArea&quot;[1C]}&quot;extHeader&quot;{ExtSoundHeader=&quot;samplePtr&quot;*&quot;numChannels&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;numFrames&quot;Q&quot;AIFFSampleRate&quot;{Float80=&quot;exp&quot;s&quot;man&quot;[4S]}&quot;markerChunk&quot;*&quot;instrumentChunks&quot;*&quot;AESRecording&quot;*&quot;sampleSize&quot;S&quot;futureUse1&quot;S&quot;futureUse2&quot;Q&quot;futureUse3&quot;Q&quot;futureUse4&quot;Q&quot;sampleArea&quot;[1C]})'/>
    <field name='flags' declared_type='long' type='l' type64='q'/>
    <field name='reserved' declared_type='short' type='s'/>
    <field name='callBackParam1' declared_type='short' type='s'/>
    <field name='callBackParam2' declared_type='long' type='l' type64='q'/>
    <field name='startTime' declared_type='TimeRecord' type='{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'/>
  </struct>
  <struct name='Snd2ListResource' type='{Snd2ListResource=&quot;format&quot;s&quot;refCount&quot;s&quot;numCommands&quot;s&quot;commandPart&quot;[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]&quot;dataPart&quot;[1C]}' type64='{Snd2ListResource=&quot;format&quot;s&quot;refCount&quot;s&quot;numCommands&quot;s&quot;commandPart&quot;[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]&quot;dataPart&quot;[1C]}'>
    <field name='format' declared_type='short' type='s'/>
    <field name='refCount' declared_type='short' type='s'/>
    <field name='numCommands' declared_type='short' type='s'/>
    <field name='commandPart' declared_type='SndCommand*' type='[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]' type64='[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]'/>
    <field name='dataPart' declared_type='UInt8*' type='[1C]'/>
  </struct>
  <struct name='SndChannel' type='{SndChannel=&quot;nextChan&quot;^{SndChannel}&quot;firstMod&quot;*&quot;callBack&quot;^?&quot;userInfo&quot;l&quot;wait&quot;l&quot;cmdInProgress&quot;{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}&quot;flags&quot;s&quot;qLength&quot;s&quot;qHead&quot;s&quot;qTail&quot;s&quot;queue&quot;[128{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]}' type64='{SndChannel=&quot;nextChan&quot;^{SndChannel}&quot;firstMod&quot;*&quot;callBack&quot;^?&quot;userInfo&quot;q&quot;wait&quot;q&quot;cmdInProgress&quot;{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}&quot;flags&quot;s&quot;qLength&quot;s&quot;qHead&quot;s&quot;qTail&quot;s&quot;queue&quot;[128{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]}'>
    <field name='nextChan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <field name='firstMod' declared_type='Ptr' type='*'/>
    <field name='callBack' function_pointer='true' declared_type='SndCallBackUPP' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='userInfo' declared_type='long' type='l' type64='q'/>
    <field name='wait' declared_type='long' type='l' type64='q'/>
    <field name='cmdInProgress' declared_type='SndCommand' type='{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}' type64='{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}'/>
    <field name='flags' declared_type='short' type='s'/>
    <field name='qLength' declared_type='short' type='s'/>
    <field name='qHead' declared_type='short' type='s'/>
    <field name='qTail' declared_type='short' type='s'/>
    <field name='queue' declared_type='SndCommand*' type='[128{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]' type64='[128{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]'/>
  </struct>
  <struct name='SndCommand' type='{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}' type64='{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}'>
    <field name='cmd' declared_type='unsigned short' type='S'/>
    <field name='param1' declared_type='short' type='s'/>
    <field name='param2' declared_type='long' type='l' type64='q'/>
  </struct>
  <struct name='SndInputCmpParam' type='{SndInputCmpParam=&quot;ioCompletion&quot;^?&quot;ioInterrupt&quot;^?&quot;ioResult&quot;s&quot;pad&quot;s&quot;ioReqCount&quot;L&quot;ioActCount&quot;L&quot;ioBuffer&quot;*&quot;ioMisc&quot;*}' type64='{SndInputCmpParam=&quot;ioCompletion&quot;^?&quot;ioInterrupt&quot;^?&quot;ioResult&quot;s&quot;pad&quot;s&quot;ioReqCount&quot;Q&quot;ioActCount&quot;Q&quot;ioBuffer&quot;*&quot;ioMisc&quot;*}'>
    <field name='ioCompletion' function_pointer='true' declared_type='SICCompletionProcPtr' type='^?'>
      <arg declared_type='SndInputCmpParamPtr' type='^{SndInputCmpParam=^?^?ssLL**}' type64='^{SndInputCmpParam=^?^?ssQQ**}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='ioInterrupt' function_pointer='true' declared_type='SIInterruptProcPtr' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='ioResult' declared_type='OSErr' type='s'/>
    <field name='pad' declared_type='short' type='s'/>
    <field name='ioReqCount' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='ioActCount' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='ioBuffer' declared_type='Ptr' type='*'/>
    <field name='ioMisc' declared_type='Ptr' type='*'/>
  </struct>
  <struct name='SndListResource' type='{SndListResource=&quot;format&quot;s&quot;numModifiers&quot;s&quot;modifierPart&quot;[1{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;l}]&quot;numCommands&quot;s&quot;commandPart&quot;[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]&quot;dataPart&quot;[1C]}' type64='{SndListResource=&quot;format&quot;s&quot;numModifiers&quot;s&quot;modifierPart&quot;[1{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;q}]&quot;numCommands&quot;s&quot;commandPart&quot;[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]&quot;dataPart&quot;[1C]}'>
    <field name='format' declared_type='short' type='s'/>
    <field name='numModifiers' declared_type='short' type='s'/>
    <field name='modifierPart' declared_type='ModRef*' type='[1{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;l}]' type64='[1{ModRef=&quot;modNumber&quot;S&quot;modInit&quot;q}]'/>
    <field name='numCommands' declared_type='short' type='s'/>
    <field name='commandPart' declared_type='SndCommand*' type='[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;l}]' type64='[1{SndCommand=&quot;cmd&quot;S&quot;param1&quot;s&quot;param2&quot;q}]'/>
    <field name='dataPart' declared_type='UInt8*' type='[1C]'/>
  </struct>
  <struct name='SoundAudioCodecPropertyRequestParams' type='{SoundAudioCodecPropertyRequestParams=&quot;propertyClass&quot;I&quot;propertyID&quot;I&quot;propertyDataSize&quot;I&quot;propertyData&quot;^v&quot;propertyRequestFlags&quot;I&quot;propertyDataType&quot;I&quot;propertyRequestResult&quot;i}' type64='{SoundAudioCodecPropertyRequestParams=&quot;propertyClass&quot;I&quot;propertyID&quot;I&quot;propertyDataSize&quot;I&quot;propertyData&quot;^v&quot;propertyRequestFlags&quot;I&quot;propertyDataType&quot;I&quot;propertyRequestResult&quot;q}'>
    <field name='propertyClass' declared_type='UInt32' type='L' type64='I'/>
    <field name='propertyID' declared_type='UInt32' type='L' type64='I'/>
    <field name='propertyDataSize' declared_type='UInt32' type='L' type64='I'/>
    <field name='propertyData' declared_type='void*' type='^v'/>
    <field name='propertyRequestFlags' declared_type='UInt32' type='L' type64='I'/>
    <field name='propertyDataType' declared_type='UInt32' type='L' type64='I'/>
    <field name='propertyRequestResult' declared_type='ComponentResult' type='l' type64='q'/>
  </struct>
  <struct name='SoundComponentData' type='{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}' type64='{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}'>
    <field name='flags' declared_type='long' type='l' type64='q'/>
    <field name='format' declared_type='OSType' type='L' type64='I'/>
    <field name='numChannels' declared_type='short' type='s'/>
    <field name='sampleSize' declared_type='short' type='s'/>
    <field name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='sampleCount' declared_type='long' type='l' type64='q'/>
    <field name='buffer' declared_type='Byte*' type='*'/>
    <field name='reserved' declared_type='long' type='l' type64='q'/>
  </struct>
  <struct name='SoundComponentLink' type='{SoundComponentLink=&quot;description&quot;{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;L&quot;componentFlagsMask&quot;L}&quot;mixerID&quot;^{OpaqueSoundSource}&quot;linkID&quot;^^{OpaqueSoundSource}}' type64='{SoundComponentLink=&quot;description&quot;{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;Q&quot;componentFlagsMask&quot;Q}&quot;mixerID&quot;^{OpaqueSoundSource}&quot;linkID&quot;^^{OpaqueSoundSource}}'>
    <field name='description' declared_type='ComponentDescription' type='{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;L&quot;componentFlagsMask&quot;L}' type64='{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;Q&quot;componentFlagsMask&quot;Q}'/>
    <field name='mixerID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <field name='linkID' declared_type='SoundSource*' type='^^{OpaqueSoundSource}'/>
  </struct>
  <struct name='SoundHeader' type='{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;L&quot;sampleRate&quot;I&quot;loopStart&quot;L&quot;loopEnd&quot;L&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}' type64='{SoundHeader=&quot;samplePtr&quot;*&quot;length&quot;Q&quot;sampleRate&quot;I&quot;loopStart&quot;Q&quot;loopEnd&quot;Q&quot;encode&quot;C&quot;baseFrequency&quot;C&quot;sampleArea&quot;[1C]}'>
    <field name='samplePtr' declared_type='Ptr' type='*'/>
    <field name='length' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='loopStart' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='loopEnd' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='encode' declared_type='UInt8' type='C'/>
    <field name='baseFrequency' declared_type='UInt8' type='C'/>
    <field name='sampleArea' declared_type='UInt8*' type='[1C]'/>
  </struct>
  <struct name='SoundInfoList' type='{SoundInfoList=&quot;count&quot;s&quot;infoHandle&quot;^*}'>
    <field name='count' declared_type='short' type='s'/>
    <field name='infoHandle' declared_type='Handle' type='^*'/>
  </struct>
  <struct name='SoundParamBlock' type='{SoundParamBlock=&quot;recordSize&quot;l&quot;desc&quot;{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;l&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;l&quot;result&quot;s}' type64='{SoundParamBlock=&quot;recordSize&quot;q&quot;desc&quot;{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}&quot;rateMultiplier&quot;I&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;quality&quot;q&quot;filter&quot;^{ComponentInstanceRecord}&quot;moreRtn&quot;^?&quot;completionRtn&quot;^?&quot;refCon&quot;q&quot;result&quot;s}'>
    <field name='recordSize' declared_type='long' type='l' type64='q'/>
    <field name='desc' declared_type='SoundComponentData' type='{SoundComponentData=&quot;flags&quot;l&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;l&quot;buffer&quot;*&quot;reserved&quot;l}' type64='{SoundComponentData=&quot;flags&quot;q&quot;format&quot;I&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;sampleRate&quot;I&quot;sampleCount&quot;q&quot;buffer&quot;*&quot;reserved&quot;q}'/>
    <field name='rateMultiplier' declared_type='UnsignedFixed' type='L' type64='I'/>
    <field name='leftVolume' declared_type='short' type='s'/>
    <field name='rightVolume' declared_type='short' type='s'/>
    <field name='quality' declared_type='long' type='l' type64='q'/>
    <field name='filter' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <field name='moreRtn' function_pointer='true' declared_type='SoundParamUPP' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </field>
    <field name='completionRtn' function_pointer='true' declared_type='SoundParamUPP' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </field>
    <field name='refCon' declared_type='long' type='l' type64='q'/>
    <field name='result' declared_type='short' type='s'/>
  </struct>
  <struct name='SoundSlopeAndInterceptRecord' type='{SoundSlopeAndInterceptRecord=&quot;slope&quot;d&quot;intercept&quot;d&quot;minClip&quot;d&quot;maxClip&quot;d}'>
    <field name='slope' declared_type='Float64' type='d'/>
    <field name='intercept' declared_type='Float64' type='d'/>
    <field name='minClip' declared_type='Float64' type='d'/>
    <field name='maxClip' declared_type='Float64' type='d'/>
  </struct>
  <struct name='StateBlock' type='{StateBlock=&quot;stateVar&quot;[64s]}'>
    <field name='stateVar' declared_type='short*' type='[64s]'/>
  </struct>
  <opaque name='SoundConverter' type='^{OpaqueSoundConverter=}'/>
  <opaque name='SoundSource' type='^{OpaqueSoundSource=}'/>
  <enum name='audioAllChannels' value='0'/>
  <enum name='audioDoesIndependentChannels' value='4'/>
  <enum name='audioDoesMono' value='1'/>
  <enum name='audioDoesStereo' value='2'/>
  <enum name='audioLeftChannel' value='1'/>
  <enum name='audioMuted' value='1'/>
  <enum name='audioRightChannel' value='2'/>
  <enum name='audioUnmuted' value='0'/>
  <enum name='availableCmd' value='24'/>
  <enum name='bufferCmd' value='81'/>
  <enum name='callBackCmd' value='13'/>
  <enum name='clockComponentCmd' value='50'/>
  <enum name='cmpSH' value='254'/>
  <enum name='dataOffsetFlag' value='32768'/>
  <enum name='eightToThree' value='2'/>
  <enum name='extSH' value='255'/>
  <enum name='firstSoundFormat' value='1'/>
  <enum name='fixedCompression' value='-1'/>
  <enum name='flushCmd' value='4'/>
  <enum name='getClockComponentCmd' value='51'/>
  <enum name='getRateMultiplierCmd' value='87'/>
  <enum name='getVolumeCmd' value='47'/>
  <enum name='initChanLeft' value='2'/>
  <enum name='initChanRight' value='3'/>
  <enum name='initCompMask' value='65280'/>
  <enum name='initMACE3' value='768'/>
  <enum name='initMACE6' value='1024'/>
  <enum name='initMono' value='128'/>
  <enum name='initNoDrop' value='8'/>
  <enum name='initNoInterp' value='4'/>
  <enum name='initPanMask' value='3'/>
  <enum name='initSRateMask' value='48'/>
  <enum name='initStereo' value='192'/>
  <enum name='initStereoMask' value='192'/>
  <enum name='k16BitBigEndianFormat' value='1953984371'/>
  <enum name='k16BitIn' value='4'/>
  <enum name='k16BitLittleEndianFormat' value='1936684916'/>
  <enum name='k16BitNativeEndianFormat' value='1936684916'/>
  <enum name='k16BitNonNativeEndianFormat' value='1953984371'/>
  <enum name='k16BitOut' value='1024'/>
  <enum name='k24BitFormat' value='1768829492'/>
  <enum name='k32BitFormat' value='1768829746'/>
  <enum name='k32BitLittleEndianFormat' value='842231401'/>
  <enum name='k8BitOffsetBinaryFormat' value='1918990112'/>
  <enum name='k8BitRawIn' value='1'/>
  <enum name='k8BitRawOut' value='256'/>
  <enum name='k8BitTwosIn' value='2'/>
  <enum name='k8BitTwosOut' value='512'/>
  <enum name='kALawCompression' value='1634492791'/>
  <enum name='kASCSubType' value='1634951968'/>
  <enum name='kAVDisplayHeadphoneInsert' value='1'/>
  <enum name='kAVDisplayHeadphoneRemove' value='0'/>
  <enum name='kAVDisplayPlainTalkInsert' value='3'/>
  <enum name='kAVDisplayPlainTalkRemove' value='2'/>
  <enum name='kActionMask' value='16711680'/>
  <enum name='kAudioComponentType' value='1633970543'/>
  <enum name='kAudioEndianAtomType' value='1701733473'/>
  <enum name='kAudioFormatAtomType' value='1718775137'/>
  <enum name='kAudioTerminatorAtomType' value='0'/>
  <enum name='kAudioVBRAtomType' value='1986163297'/>
  <enum name='kAudioVisionHeadphoneSubType' value='1952803944'/>
  <enum name='kAudioVisionSpeakerSubType' value='1952803939'/>
  <enum name='kAwacsPhoneSubType' value='1752197230'/>
  <enum name='kAwacsSubType' value='1635213667'/>
  <enum name='kBestQuality' value='1'/>
  <enum name='kBlueBoxSubType' value='1651732068'/>
  <enum name='kCDSource' value='1667506208'/>
  <enum name='kCDXA2Compression' value='1667528754'/>
  <enum name='kCDXA4Compression' value='1667528756'/>
  <enum name='kClassicSubType' value='1668047219'/>
  <enum name='kConverterSubType' value='1668247158'/>
  <enum name='kCreateSoundSource' value='262144'/>
  <enum name='kDAVInSource' value='1768186230'/>
  <enum name='kDSPSubType' value='1685286944'/>
  <enum name='kDVAudioFormat' value='1685480289'/>
  <enum name='kDVDSource' value='1685480545'/>
  <enum name='kDVIIntelIMAFormat' value='1836253201'/>
  <enum name='kDelegatedSoundComponentSelectors' value='256'/>
  <enum name='kDirectSoundSnifferSubType' value='1685287790'/>
  <enum name='kDirectSoundSubType' value='1685286500'/>
  <enum name='kEqualizerSubType' value='1701929324'/>
  <enum name='kExtMicSource' value='1701669219'/>
  <enum name='kExtendedSoundBufferFlagsValid' value='32'/>
  <enum name='kExtendedSoundBufferIsDiscontinuous' value='1'/>
  <enum name='kExtendedSoundBufferIsFirstBuffer' value='2'/>
  <enum name='kExtendedSoundBufferSizeValid' value='2'/>
  <enum name='kExtendedSoundCommonFrameSizeValid' value='8'/>
  <enum name='kExtendedSoundData' value='16384'/>
  <enum name='kExtendedSoundExtensionsValid' value='16'/>
  <enum name='kExtendedSoundFrameSizesValid' value='4'/>
  <enum name='kExtendedSoundSampleCountNotValid' value='1'/>
  <enum name='kFloat32Format' value='1718367026'/>
  <enum name='kFloat64Format' value='1718367796'/>
  <enum name='kFullMPEGLay3Format' value='778924083'/>
  <enum name='kFullVolume' value='256'/>
  <enum name='kGCAwacsSubType' value='1635215203'/>
  <enum name='kHALCustomComponentSubType' value='1751215224'/>
  <enum name='kHighQuality' value='4194304'/>
  <enum name='kIMACompression' value='1768775988'/>
  <enum name='kInputMask' value='255'/>
  <enum name='kIntMicSource' value='1768778083'/>
  <enum name='kInvalidSource' value64='4294967295' value='-1'/>
  <enum name='kLittleEndianFormat' value='1936684916'/>
  <enum name='kMACE3Compression' value='1296122675'/>
  <enum name='kMACE6Compression' value='1296122678'/>
  <enum name='kMPEG4AudioFormat' value='1836069985'/>
  <enum name='kMPEGLayer3Format' value='1836253269'/>
  <enum name='kMediaBaySource' value='1835164025'/>
  <enum name='kMicrophoneArray' value='1835623265'/>
  <enum name='kMicrosoftADPCMFormat' value='1836253186'/>
  <enum name='kMicrosoftGSMCompression' value='1836253233'/>
  <enum name='kMiddleC' value='60'/>
  <enum name='kMixer16SubType' value='1835628663'/>
  <enum name='kMixer8SubType' value='1835628642'/>
  <enum name='kMixerType' value='1835628658'/>
  <enum name='kModemSource' value='1836016749'/>
  <enum name='kNoChannelConversion' value='16'/>
  <enum name='kNoDecompression' value='32'/>
  <enum name='kNoMixing' value='1'/>
  <enum name='kNoRealtimeProcessing' value='128'/>
  <enum name='kNoSampleFormatConversion' value='8'/>
  <enum name='kNoSampleRateConversion' value='2'/>
  <enum name='kNoSampleSizeConversion' value='4'/>
  <enum name='kNoSoundComponentChain' value='131072'/>
  <enum name='kNoSoundComponentType' value='707406378'/>
  <enum name='kNoSource' value='1852796517'/>
  <enum name='kNoVolume' value='0'/>
  <enum name='kNoVolumeConversion' value='64'/>
  <enum name='kNonInterleavedBuffer' value='512'/>
  <enum name='kNonPagingMixer' value='1024'/>
  <enum name='kNonRealTime' value='8388608'/>
  <enum name='kOffsetBinary' value='1918990112'/>
  <enum name='kOutputMask' value='65280'/>
  <enum name='kOutputShift' value='8'/>
  <enum name='kPCCardSource' value='1885564192'/>
  <enum name='kPagingMixer' value='4096'/>
  <enum name='kPassThrough' value='65536'/>
  <enum name='kPhilipsFaderSubType' value='1953915254'/>
  <enum name='kQDesign2Compression' value='1363430706'/>
  <enum name='kQDesignCompression' value='1363430723'/>
  <enum name='kQUALCOMMCompression' value='1365470320'/>
  <enum name='kRCAInSource' value='1769104225'/>
  <enum name='kRate16SubType' value='1918989431'/>
  <enum name='kRate8SubType' value='1918989410'/>
  <enum name='kRateConvert' value='131072'/>
  <enum name='kReverse' value='65536'/>
  <enum name='kSGSToneSubType' value='1936159536'/>
  <enum name='kSSpLocalizationSubType' value='1936614451'/>
  <enum name='kScheduledSoundDoCallBack' value='2'/>
  <enum name='kScheduledSoundDoScheduled' value='1'/>
  <enum name='kScheduledSoundExtendedHdr' value='4'/>
  <enum name='kScheduledSource' value='256'/>
  <enum name='kSimpleBeepID' value='1'/>
  <enum name='kSinger2SubType' value='1936615218'/>
  <enum name='kSingerSubType' value='1936289383'/>
  <enum name='kSndInputGetDeviceInfoSelect' value='7'/>
  <enum name='kSndInputGetStatusSelect' value='6'/>
  <enum name='kSndInputInitHardwareSelect' value='9'/>
  <enum name='kSndInputPauseRecordingSelect' value='3'/>
  <enum name='kSndInputReadAsyncSelect' value='1'/>
  <enum name='kSndInputReadSyncSelect' value='2'/>
  <enum name='kSndInputResumeRecordingSelect' value='4'/>
  <enum name='kSndInputSetDeviceInfoSelect' value='8'/>
  <enum name='kSndInputStopRecordingSelect' value='5'/>
  <enum name='kSndSourceSubType' value='1936684402'/>
  <enum name='kSoundAudioCodecPropertyWritableFlag' value='1'/>
  <enum name='kSoundBlasterSubType' value='1935830131'/>
  <enum name='kSoundCodecInfoCanChangeOutputRate' value='8'/>
  <enum name='kSoundCodecInfoFixedCompression' value='1'/>
  <enum name='kSoundCodecInfoHasRestrictedInputRates' value='4'/>
  <enum name='kSoundCodecInfoRequiresExternalFraming' value='16'/>
  <enum name='kSoundCodecInfoResourceType' value='1936615023'/>
  <enum name='kSoundCodecInfoVariableCompression' value='2'/>
  <enum name='kSoundCodecInfoVariableDuration' value='32'/>
  <enum name='kSoundComponentAddSourceSelect' value='257'/>
  <enum name='kSoundComponentBits' value='16777215'/>
  <enum name='kSoundComponentGetInfoSelect' value='259'/>
  <enum name='kSoundComponentGetSourceDataSelect' value='4'/>
  <enum name='kSoundComponentGetSourceSelect' value='3'/>
  <enum name='kSoundComponentInitOutputDeviceSelect' value='1'/>
  <enum name='kSoundComponentPPCType' value='1852401268'/>
  <enum name='kSoundComponentPauseSourceSelect' value='263'/>
  <enum name='kSoundComponentPlaySourceBufferSelect' value='264'/>
  <enum name='kSoundComponentRemoveSourceSelect' value='258'/>
  <enum name='kSoundComponentSetInfoSelect' value='260'/>
  <enum name='kSoundComponentSetOutputSelect' value='5'/>
  <enum name='kSoundComponentSetSourceSelect' value='2'/>
  <enum name='kSoundComponentStartSourceSelect' value='261'/>
  <enum name='kSoundComponentStopSourceSelect' value='262'/>
  <enum name='kSoundComponentType' value='1936287348'/>
  <enum name='kSoundCompressor' value='1935896429'/>
  <enum name='kSoundConverterDidntFillBuffer' value='1'/>
  <enum name='kSoundConverterHasLeftOverData' value='2'/>
  <enum name='kSoundConverterMixer' value='2048'/>
  <enum name='kSoundDecompressor' value='1935959395'/>
  <enum name='kSoundEffectsType' value='1936615032'/>
  <enum name='kSoundInSource' value='1936289386'/>
  <enum name='kSoundInputDeviceType' value='1936289392'/>
  <enum name='kSoundNotCompressed' value='1313820229'/>
  <enum name='kSoundOutputDeviceType' value='1935959414'/>
  <enum name='kSourcePaused' value='1'/>
  <enum name='kStereoIn' value='8'/>
  <enum name='kStereoOut' value='2048'/>
  <enum name='kTVFMTunerSource' value='1953916525'/>
  <enum name='kTwosComplement' value='1953984371'/>
  <enum name='kULawCompression' value='1970037111'/>
  <enum name='kUNIXsdevSubType' value='1970155896'/>
  <enum name='kUSBSubType' value='1970496032'/>
  <enum name='kUseOptionalOutputDevice' value='-1'/>
  <enum name='kVMAwareMixer' value='8192'/>
  <enum name='kVMAwareness' value='2097152'/>
  <enum name='kVariableDurationDVAudioFormat' value='1986295393'/>
  <enum name='kWaveInSnifferSubType' value='2003399534'/>
  <enum name='kWaveInSubType' value='2002876009'/>
  <enum name='kWaveOutSnifferSubType' value='2003792750'/>
  <enum name='kWaveOutSubType' value='2002876015'/>
  <enum name='kWhitSubType' value='2003331444'/>
  <enum name='kZoomVideoSource' value='2054582371'/>
  <enum name='leftOverBlockSize' value='32'/>
  <enum name='linkSoundComponentsCmd' value='53'/>
  <enum name='notCompressed' value='0'/>
  <enum name='nullCmd' value='0'/>
  <enum name='pauseCmd' value='11'/>
  <enum name='quietCmd' value='3'/>
  <enum name='rate11025hz' value='722534400'/>
  <enum name='rate11khz' value='729236945'/>
  <enum name='rate16khz' value='1048576000'/>
  <enum name='rate22050hz' value='1445068800'/>
  <enum name='rate22khz' value='1458473891'/>
  <enum name='rate32khz' value='2097152000'/>
  <enum name='rate44khz' value64='2890137600' value='-1404829696'/>
  <enum name='rate48khz' value64='3145728000' value='-1149239296'/>
  <enum name='rate8khz' value='524288000'/>
  <enum name='rateMultiplierCmd' value='86'/>
  <enum name='reInitCmd' value='5'/>
  <enum name='resumeCmd' value='12'/>
  <enum name='sampledSynth' value='5'/>
  <enum name='scheduledSoundCmd' value='52'/>
  <enum name='secondSoundFormat' value='2'/>
  <enum name='siAGCOnOff' value='1634165536'/>
  <enum name='siAVDisplayBehavior' value='1635148898'/>
  <enum name='siActiveChannels' value='1667785059'/>
  <enum name='siActiveLevels' value='1819107683'/>
  <enum name='siAsync' value='1634957678'/>
  <enum name='siAudioCodecPropertyInfo' value='1936746862'/>
  <enum name='siAudioCodecPropertyValue' value='1936750177'/>
  <enum name='siBestQuality' value='1650815860'/>
  <enum name='siBetterQuality' value='1650816114'/>
  <enum name='siCDQuality' value='1667506208'/>
  <enum name='siChannelAvailable' value='1667785078'/>
  <enum name='siClientAcceptsVBR' value='1668702834'/>
  <enum name='siCloseDriver' value='1668050803'/>
  <enum name='siCompressionAvailable' value='1668112758'/>
  <enum name='siCompressionChannels' value='1668309876'/>
  <enum name='siCompressionConfiguration' value='1667458663'/>
  <enum name='siCompressionFactor' value='1668114017'/>
  <enum name='siCompressionHeader' value='1668114532'/>
  <enum name='siCompressionInputRateList' value='1668445292'/>
  <enum name='siCompressionMaxPacketSize' value='1668118640'/>
  <enum name='siCompressionNames' value='1668178285'/>
  <enum name='siCompressionOutputSampleRate' value='1668248180'/>
  <enum name='siCompressionParams' value='1702257015'/>
  <enum name='siCompressionSampleRate' value='1668313716'/>
  <enum name='siCompressionType' value='1668246896'/>
  <enum name='siContinuous' value='1668247156'/>
  <enum name='siDecompressionConfiguration' value='1684235879'/>
  <enum name='siDecompressionParams' value='2002876005'/>
  <enum name='siDeviceBufferInfo' value='1684171118'/>
  <enum name='siDeviceConnected' value='1684238190'/>
  <enum name='siDeviceIcon' value='1768124270'/>
  <enum name='siDeviceIsConnected' value='1'/>
  <enum name='siDeviceName' value='1851878757'/>
  <enum name='siDeviceNotConnected' value='0'/>
  <enum name='siDontKnowIfConnected' value='-1'/>
  <enum name='siEQSpectrumBands' value='1701933922'/>
  <enum name='siEQSpectrumLevels' value='1701932150'/>
  <enum name='siEQSpectrumOnOff' value='1701932143'/>
  <enum name='siEQSpectrumResolution' value='1701933683'/>
  <enum name='siEQToneControlGain' value='1701934183'/>
  <enum name='siEQToneControlOnOff' value='1701934179'/>
  <enum name='siGoodQuality' value='1735356260'/>
  <enum name='siHALAudioDeviceID' value='1751935332'/>
  <enum name='siHALAudioDeviceUniqueID' value='1752525156'/>
  <enum name='siHardwareBalance' value='1751277932'/>
  <enum name='siHardwareBalanceSteps' value='1751280755'/>
  <enum name='siHardwareBass' value='1751277939'/>
  <enum name='siHardwareBassSteps' value='1751282548'/>
  <enum name='siHardwareBusy' value='1752654451'/>
  <enum name='siHardwareFormat' value='1752655469'/>
  <enum name='siHardwareMute' value='1752003956'/>
  <enum name='siHardwareMuteNoPrefs' value='1752002160'/>
  <enum name='siHardwareTreble' value='1752461922'/>
  <enum name='siHardwareTrebleSteps' value='1752659059'/>
  <enum name='siHardwareVolume' value='1752592236'/>
  <enum name='siHardwareVolumeSteps' value='1752396912'/>
  <enum name='siHeadphoneMute' value='1886221684'/>
  <enum name='siHeadphoneVolume' value='1886809964'/>
  <enum name='siHeadphoneVolumeSteps' value='1751413620'/>
  <enum name='siInitializeDriver' value='1768843636'/>
  <enum name='siInputAvailable' value='1768841590'/>
  <enum name='siInputGain' value='1734437230'/>
  <enum name='siInputSource' value='1936684402'/>
  <enum name='siInputSourceNames' value='1936613741'/>
  <enum name='siLevelMeterOnOff' value='1819108724'/>
  <enum name='siMediaContextID' value='1970628964'/>
  <enum name='siModemGain' value='1835491689'/>
  <enum name='siMonitorAvailable' value='1835950454'/>
  <enum name='siMonitorSource' value='1836019315'/>
  <enum name='siNoneQuality' value='1852796517'/>
  <enum name='siNumberChannels' value='1667785070'/>
  <enum name='siOSTypeInputAvailable' value='1768841590'/>
  <enum name='siOSTypeInputSource' value='1768845428'/>
  <enum name='siOptionsDialog' value='1869640804'/>
  <enum name='siOutputDeviceName' value='1869504877'/>
  <enum name='siOutputLatency' value='1869378661'/>
  <enum name='siPauseRecording' value='1885435251'/>
  <enum name='siPlayThruOnOff' value='1886155880'/>
  <enum name='siPostMixerSoundComponent' value='1886612856'/>
  <enum name='siPreMixerSoundComponent' value='1886547320'/>
  <enum name='siQuality' value='1903518060'/>
  <enum name='siRateConverterRollOffSlope' value='1919116386'/>
  <enum name='siRateMultiplier' value='1919776108'/>
  <enum name='siReadPermission' value='0'/>
  <enum name='siRecordingQuality' value='1903518060'/>
  <enum name='siSSpCPULoadLimit' value='862219372'/>
  <enum name='siSSpLocalization' value='862218598'/>
  <enum name='siSSpSpeakerSetup' value='862221172'/>
  <enum name='siSampleRate' value='1936875892'/>
  <enum name='siSampleRateAvailable' value='1936875894'/>
  <enum name='siSampleSize' value='1936943482'/>
  <enum name='siSampleSizeAvailable' value='1936941430'/>
  <enum name='siSetupCDAudio' value='1937072996'/>
  <enum name='siSetupModemAudio' value='1937075556'/>
  <enum name='siSlopeAndIntercept' value='1718378864'/>
  <enum name='siSoundClock' value='1935895659'/>
  <enum name='siSourceIsExhausted' value='1936876408'/>
  <enum name='siSpeakerMute' value='1936553332'/>
  <enum name='siSpeakerVolume' value='1937141612'/>
  <enum name='siStereoInputGain' value='1936154985'/>
  <enum name='siSubwooferMute' value='1651340660'/>
  <enum name='siSupportedExtendedFlags' value='1702389356'/>
  <enum name='siTerminalType' value='1953790320'/>
  <enum name='siTwosComplementOnOff' value='1953984371'/>
  <enum name='siUseThisSoundClock' value='1935895651'/>
  <enum name='siUserInterruptProc' value='1970496882'/>
  <enum name='siVendorProduct' value='1987080815'/>
  <enum name='siVolume' value='1987013749'/>
  <enum name='siVoxRecordInfo' value='1987016818'/>
  <enum name='siVoxStopInfo' value='1987016819'/>
  <enum name='siWideStereo' value='2003395685'/>
  <enum name='siWritePermission' value='1'/>
  <enum name='sixToOne' value='4'/>
  <enum name='sixToOnePacketSize' value='8'/>
  <enum name='soundCmd' value='80'/>
  <enum name='soundListRsrc' value='1936614432'/>
  <enum name='stateBlockSize' value='64'/>
  <enum name='stdQLength' value='128'/>
  <enum name='stdSH' value='0'/>
  <enum name='syncCmd' value='14'/>
  <enum name='sysBeepDisable' value='0'/>
  <enum name='sysBeepEnable' value='1'/>
  <enum name='sysBeepSynchronous' value='2'/>
  <enum name='threeToOne' value='3'/>
  <enum name='threeToOnePacketSize' value='16'/>
  <enum name='twelfthRootTwo' value='1.05946309435'/>
  <enum name='twoToOne' value='1'/>
  <enum name='unitTypeNoSelection' value='65535'/>
  <enum name='unitTypeSeconds' value='0'/>
  <enum name='variableCompression' value='-2'/>
  <enum name='versionCmd' value='25'/>
  <enum name='volumeCmd' value='46'/>
  <enum name='waitCmd' value='10'/>
  <function name='CloseMixerSoundComponent'>
    <arg name='ci' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='DisposeSICompletionUPP'>
    <arg name='userUPP' function_pointer='true' declared_type='SICompletionUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='DisposeSIInterruptUPP'>
    <arg name='userUPP' function_pointer='true' declared_type='SIInterruptUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='DisposeSndCallBackUPP'>
    <arg name='userUPP' function_pointer='true' declared_type='SndCallBackUPP' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='DisposeSoundConverterFillBufferDataUPP'>
    <arg name='userUPP' function_pointer='true' declared_type='SoundConverterFillBufferDataUPP' type='^?'>
      <arg declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='DisposeSoundParamUPP'>
    <arg name='userUPP' function_pointer='true' declared_type='SoundParamUPP' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='GetCompressionInfo'>
    <arg name='compressionID' declared_type='short' type='s'/>
    <arg name='format' declared_type='OSType' type='L' type64='I'/>
    <arg name='numChannels' declared_type='short' type='s'/>
    <arg name='sampleSize' declared_type='short' type='s'/>
    <arg name='cp' declared_type='CompressionInfoPtr' type='^{CompressionInfo=lIsSSSSS}' type64='^{CompressionInfo=qIsSSSSS}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetCompressionName'>
    <arg name='compressionType' declared_type='OSType' type='L' type64='I'/>
    <arg name='compressionName' declared_type='unsigned char*' type='*'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetDefaultOutputVolume'>
    <arg name='level' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetSoundHeaderOffset'>
    <arg name='sndHandle' declared_type='SndListHandle' type='^^{SndListResource}'/>
    <arg name='offset' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetSoundOutputInfo'>
    <arg name='outputDevice' declared_type='Component' type='^{ComponentRecord=[1l]}' type64='^{ComponentRecord=[1q]}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetSoundPreference'>
    <arg name='theType' declared_type='OSType' type='L' type64='I'/>
    <arg name='name' declared_type='unsigned char*' type='*'/>
    <arg name='settings' declared_type='Handle' type='^*'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='GetSysBeepVolume'>
    <arg name='level' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='InvokeSICompletionUPP'>
    <arg name='inParamPtr' declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
    <arg name='userUPP' function_pointer='true' declared_type='SICompletionUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='InvokeSIInterruptUPP'>
    <arg name='inParamPtr' declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
    <arg name='dataBuffer' declared_type='Ptr' type='*'/>
    <arg name='peakAmplitude' declared_type='short' type='s'/>
    <arg name='sampleSize' declared_type='long' type='l' type64='q'/>
    <arg name='userUPP' function_pointer='true' declared_type='SIInterruptUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='InvokeSndCallBackUPP'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='cmd' declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
    <arg name='userUPP' function_pointer='true' declared_type='SndCallBackUPP' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='InvokeSoundConverterFillBufferDataUPP'>
    <arg name='data' declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
    <arg name='refCon' declared_type='void*' type='^v'/>
    <arg name='userUPP' function_pointer='true' declared_type='SoundConverterFillBufferDataUPP' type='^?'>
      <arg declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval declared_type='Boolean' type='B'/>
  </function>
  <function name='InvokeSoundParamUPP'>
    <arg name='pb' declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
    <arg name='userUPP' function_pointer='true' declared_type='SoundParamUPP' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval declared_type='Boolean' type='B'/>
  </function>
  <function name='NewSICompletionUPP'>
    <arg name='userRoutine' function_pointer='true' declared_type='SICompletionProcPtr' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval function_pointer='true' declared_type='SICompletionUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <retval declared_type='void' type='v'/>
    </retval>
  </function>
  <function name='NewSIInterruptUPP'>
    <arg name='userRoutine' function_pointer='true' declared_type='SIInterruptProcPtr' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval function_pointer='true' declared_type='SIInterruptUPP' type='^?'>
      <arg declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
      <arg declared_type='Ptr' type='*'/>
      <arg declared_type='short' type='s'/>
      <arg declared_type='long' type='l' type64='q'/>
      <retval declared_type='void' type='v'/>
    </retval>
  </function>
  <function name='NewSndCallBackUPP'>
    <arg name='userRoutine' function_pointer='true' declared_type='SndCallBackProcPtr' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval function_pointer='true' declared_type='SndCallBackUPP' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </retval>
  </function>
  <function name='NewSoundConverterFillBufferDataUPP'>
    <arg name='userRoutine' function_pointer='true' declared_type='SoundConverterFillBufferDataProcPtr' type='^?'>
      <arg declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval function_pointer='true' declared_type='SoundConverterFillBufferDataUPP' type='^?'>
      <arg declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='Boolean' type='B'/>
    </retval>
  </function>
  <function name='NewSoundParamUPP'>
    <arg name='userRoutine' function_pointer='true' declared_type='SoundParamProcPtr' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <retval function_pointer='true' declared_type='SoundParamUPP' type='^?'>
      <arg declared_type='SoundParamBlockPtr*' type='^^{SoundParamBlock}'/>
      <retval declared_type='Boolean' type='B'/>
    </retval>
  </function>
  <function name='OpenMixerSoundComponent'>
    <arg name='outputDescription' declared_type='SoundComponentDataPtr' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}'/>
    <arg name='outputFlags' declared_type='long' type='l' type64='q'/>
    <arg name='mixerComponent' declared_type='ComponentInstance*' type='^^{ComponentInstanceRecord}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='ParseAIFFHeader'>
    <arg name='fRefNum' declared_type='short' type='s'/>
    <arg name='sndInfo' declared_type='SoundComponentData*' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}'/>
    <arg name='numFrames' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='dataOffset' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='ParseSndHeader'>
    <arg name='sndHandle' declared_type='SndListHandle' type='^^{SndListResource}'/>
    <arg name='sndInfo' declared_type='SoundComponentData*' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}'/>
    <arg name='numFrames' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='dataOffset' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBBytesToMilliseconds'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <arg name='byteCount' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBCloseDevice'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBGetDeviceInfo'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <arg name='infoType' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoData' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBGetIndexedDevice'>
    <arg name='count' declared_type='short' type='s'/>
    <arg name='deviceName' declared_type='unsigned char*' type='*'/>
    <arg name='deviceIconHandle' declared_type='Handle*' type='^^*'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBGetRecordingStatus'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <arg name='recordingStatus' declared_type='short*' type='^s'/>
    <arg name='meterLevel' declared_type='short*' type='^s'/>
    <arg name='totalSamplesToRecord' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='numberOfSamplesRecorded' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='totalMsecsToRecord' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='numberOfMsecsRecorded' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBMillisecondsToBytes'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <arg name='milliseconds' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBOpenDevice'>
    <arg name='deviceName' declared_type='ConstStr255Param' type='*'/>
    <arg name='permission' declared_type='short' type='s'/>
    <arg name='inRefNum' declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBPauseRecording'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBRecord'>
    <arg name='inParamPtr' declared_type='SPBPtr' type='^{SPB=lLLL*^?^?lsl}' type64='^{SPB=qQQQ*^?^?qsq}'/>
    <arg name='asynchFlag' declared_type='Boolean' type='B'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBResumeRecording'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBSetDeviceInfo'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <arg name='infoType' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoData' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBSignInDevice'>
    <arg name='deviceRefNum' declared_type='short' type='s'/>
    <arg name='deviceName' declared_type='ConstStr255Param' type='*'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBSignOutDevice'>
    <arg name='deviceRefNum' declared_type='short' type='s'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBStopRecording'>
    <arg name='inRefNum' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SPBVersion'>
    <retval declared_type='NumVersion' type='{NumVersion=CCCC}'/>
  </function>
  <function name='SetDefaultOutputVolume'>
    <arg name='level' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SetSoundOutputInfo'>
    <arg name='outputDevice' declared_type='Component' type='^{ComponentRecord=[1l]}' type64='^{ComponentRecord=[1q]}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SetSoundPreference'>
    <arg name='theType' declared_type='OSType' type='L' type64='I'/>
    <arg name='name' declared_type='unsigned char*' type='*'/>
    <arg name='settings' declared_type='Handle' type='^*'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SetSysBeepVolume'>
    <arg name='level' declared_type='long' type='l' type64='q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SetupAIFFHeader'>
    <arg name='fRefNum' declared_type='short' type='s'/>
    <arg name='numChannels' declared_type='short' type='s'/>
    <arg name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <arg name='sampleSize' declared_type='short' type='s'/>
    <arg name='compressionType' declared_type='OSType' type='L' type64='I'/>
    <arg name='numBytes' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='numFrames' declared_type='unsigned long' type='L' type64='Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SetupSndHeader'>
    <arg name='sndHandle' declared_type='SndListHandle' type='^^{SndListResource}'/>
    <arg name='numChannels' declared_type='short' type='s'/>
    <arg name='sampleRate' declared_type='UnsignedFixed' type='L' type64='I'/>
    <arg name='sampleSize' declared_type='short' type='s'/>
    <arg name='compressionType' declared_type='OSType' type='L' type64='I'/>
    <arg name='baseNote' declared_type='short' type='s'/>
    <arg name='numBytes' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='headerLen' declared_type='short*' type='^s'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndChannelStatus'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='theLength' declared_type='short' type='s'/>
    <arg name='theStatus' declared_type='SCStatusPtr' type='^{SCStatus=IIIBBBBLl}' type64='^{SCStatus=IIIBBBBQq}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndDisposeChannel'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='quietNow' declared_type='Boolean' type='B'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndDoCommand'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='cmd' declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}' const='true'/>
    <arg name='noWait' declared_type='Boolean' type='B'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndDoImmediate'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='cmd' declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}' const='true'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndGetInfo'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndGetSysBeepState'>
    <arg name='sysBeepState' declared_type='short*' type='^s'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='SndInputGetDeviceInfo'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='infoType' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoData' declared_type='void*' type='^v'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputGetStatus'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='recordingStatus' declared_type='short*' type='^s'/>
    <arg name='totalSamplesToRecord' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='numberOfSamplesRecorded' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputInitHardware'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputPauseRecording'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputReadAsync'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='SICParmPtr' declared_type='SndInputCmpParamPtr' type='^{SndInputCmpParam=^?^?ssLL**}' type64='^{SndInputCmpParam=^?^?ssQQ**}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputReadSync'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='SICParmPtr' declared_type='SndInputCmpParamPtr' type='^{SndInputCmpParam=^?^?ssLL**}' type64='^{SndInputCmpParam=^?^?ssQQ**}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputResumeRecording'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputSetDeviceInfo'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='infoType' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoData' declared_type='void*' type='^v'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndInputStopRecording'>
    <arg name='self' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SndManagerStatus'>
    <arg name='theLength' declared_type='short' type='s'/>
    <arg name='theStatus' declared_type='SMStatusPtr' type='^{SMStatus=sss}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndNewChannel'>
    <arg name='chan' declared_type='SndChannelPtr*' type='^^{SndChannel}'/>
    <arg name='synth' declared_type='short' type='s'/>
    <arg name='init' declared_type='long' type='l' type64='q'/>
    <arg name='userRoutine' function_pointer='true' declared_type='SndCallBackUPP' type='^?'>
      <arg declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
      <arg declared_type='SndCommand*' type='^{SndCommand=Ssl}' type64='^{SndCommand=Ssq}'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndPlay'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='sndHandle' declared_type='SndListHandle' type='^^{SndListResource}'/>
    <arg name='async' declared_type='Boolean' type='B'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndRecord'>
    <arg name='filterProc' function_pointer='true' declared_type='ModalFilterUPP' type='^?'>
      <arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
      <arg declared_type='EventRecord*' type='^{EventRecord=SII{Point=ss}S}'/>
      <arg declared_type='DialogItemIndex*' type='^s'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <arg name='corner' declared_type='Point' type='{Point=ss}'/>
    <arg name='quality' declared_type='OSType' type='L' type64='I'/>
    <arg name='sndHandle' declared_type='SndListHandle*' type='^^^{SndListResource}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndSetInfo'>
    <arg name='chan' declared_type='SndChannelPtr' type='^{SndChannel=^{SndChannel}*^?ll{SndCommand=Ssl}ssss[128{SndCommand=Ssl}]}' type64='^{SndChannel=^{SndChannel}*^?qq{SndCommand=Ssq}ssss[128{SndCommand=Ssq}]}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndSetSysBeepState'>
    <arg name='sysBeepState' declared_type='short' type='s'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SndSoundManagerVersion'>
    <retval declared_type='NumVersion' type='{NumVersion=CCCC}'/>
  </function>
  <function name='SoundComponentAddSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource*' type='^^{OpaqueSoundSource}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentGetInfo'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentGetSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <arg name='source' declared_type='ComponentInstance*' type='^^{ComponentInstanceRecord}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentGetSourceData'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceData' declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentInitOutputDevice'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='actions' declared_type='long' type='l' type64='q'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentPauseSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='count' declared_type='short' type='s'/>
    <arg name='sources' declared_type='SoundSource*' type='^^{OpaqueSoundSource}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentPlaySourceBuffer'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <arg name='pb' declared_type='SoundParamBlockPtr' type='^{SoundParamBlock=l{SoundComponentData=lIssIl*l}Issl^{ComponentInstanceRecord}^?^?ls}' type64='^{SoundParamBlock=q{SoundComponentData=qIssIq*q}Issq^{ComponentInstanceRecord}^?^?qs}'/>
    <arg name='actions' declared_type='long' type='l' type64='q'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentRemoveSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentSetInfo'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentSetOutput'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='requested' declared_type='SoundComponentDataPtr' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}'/>
    <arg name='actual' declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentSetSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='sourceID' declared_type='SoundSource' type='^{OpaqueSoundSource=}'/>
    <arg name='source' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentStartSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='count' declared_type='short' type='s'/>
    <arg name='sources' declared_type='SoundSource*' type='^^{OpaqueSoundSource}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundComponentStopSource'>
    <arg name='ti' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
    <arg name='count' declared_type='short' type='s'/>
    <arg name='sources' declared_type='SoundSource*' type='^^{OpaqueSoundSource}'/>
    <retval declared_type='ComponentResult' type='l' type64='q'/>
  </function>
  <function name='SoundConverterBeginConversion'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterClose'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterConvertBuffer'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='inputPtr' declared_type='void*' type='^v' const='true'/>
    <arg name='inputFrames' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='outputPtr' declared_type='void*' type='^v'/>
    <arg name='outputFrames' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='outputBytes' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterEndConversion'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='outputPtr' declared_type='void*' type='^v'/>
    <arg name='outputFrames' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='outputBytes' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterFillBuffer'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='fillBufferDataUPP' function_pointer='true' declared_type='SoundConverterFillBufferDataUPP' type='^?'>
      <arg declared_type='SoundComponentDataPtr*' type='^^{SoundComponentData}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='Boolean' type='B'/>
    </arg>
    <arg name='fillBufferDataRefCon' declared_type='void*' type='^v'/>
    <arg name='outputBuffer' declared_type='void*' type='^v'/>
    <arg name='outputBufferByteSize' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='bytesWritten' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='framesWritten' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='outputFlags' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterGetBufferSizes'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='inputBytesTarget' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='inputFrames' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='inputBytes' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <arg name='outputBytes' declared_type='unsigned long*' type='^L' type64='^Q'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterGetInfo'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterOpen'>
    <arg name='inputFormat' declared_type='SoundComponentData*' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}' const='true'/>
    <arg name='outputFormat' declared_type='SoundComponentData*' type='^{SoundComponentData=lIssIl*l}' type64='^{SoundComponentData=qIssIq*q}' const='true'/>
    <arg name='sc' declared_type='SoundConverter*' type='^^{OpaqueSoundConverter}'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundConverterSetInfo'>
    <arg name='sc' declared_type='SoundConverter' type='^{OpaqueSoundConverter=}'/>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundManagerGetInfo'>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SoundManagerSetInfo'>
    <arg name='selector' declared_type='OSType' type='L' type64='I'/>
    <arg name='infoPtr' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='OSErr' type='s'/>
  </function>
  <function name='SysBeep'>
    <arg name='duration' declared_type='short' type='s'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='UnsignedFixedMulDiv'>
    <arg name='value' declared_type='UnsignedFixed' type='L' type64='I'/>
    <arg name='multiplier' declared_type='UnsignedFixed' type='L' type64='I'/>
    <arg name='divisor' declared_type='UnsignedFixed' type='L' type64='I'/>
    <retval declared_type='UnsignedFixed' type='L' type64='I'/>
  </function>
</signatures>
