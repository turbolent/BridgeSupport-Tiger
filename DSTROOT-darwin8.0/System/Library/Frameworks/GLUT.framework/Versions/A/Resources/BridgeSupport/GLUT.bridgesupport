<?xml version='1.0'?>
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
  <depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
  <depends_on path='/System/Library/Frameworks/IOKit.framework'/>
  <depends_on path='/System/Library/Frameworks/OpenGL.framework'/>
  <depends_on path='/System/Library/Frameworks/AppKit.framework'/>
  <depends_on path='/System/Library/Frameworks/Foundation.framework'/>
  <struct name='BitmapCharPtr' type='{_BitmapCharPtr=&quot;width&quot;i&quot;height&quot;i&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}' type64='{_BitmapCharPtr=&quot;width&quot;q&quot;height&quot;q&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}'>
    <field name='width' declared_type='GLsizei' type='l' type64='q' const='true'/>
    <field name='height' declared_type='GLsizei' type='l' type64='q' const='true'/>
    <field name='xorig' declared_type='GLfloat' type='f' const='true'/>
    <field name='yorig' declared_type='GLfloat' type='f' const='true'/>
    <field name='advance' declared_type='GLfloat' type='f' const='true'/>
    <field name='bitmap' declared_type='GLubyte*' type='*' const='true'/>
  </struct>
  <struct name='BitmapCharRec' type='{_BitmapCharRec=&quot;width&quot;i&quot;height&quot;i&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}' type64='{_BitmapCharRec=&quot;width&quot;q&quot;height&quot;q&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}'>
    <field name='width' declared_type='GLsizei' type='l' type64='q' const='true'/>
    <field name='height' declared_type='GLsizei' type='l' type64='q' const='true'/>
    <field name='xorig' declared_type='GLfloat' type='f' const='true'/>
    <field name='yorig' declared_type='GLfloat' type='f' const='true'/>
    <field name='advance' declared_type='GLfloat' type='f' const='true'/>
    <field name='bitmap' declared_type='GLubyte*' type='*' const='true'/>
  </struct>
  <struct name='BitmapFontPtr' type='{_BitmapFontPtr=&quot;name&quot;*&quot;num_chars&quot;i&quot;first&quot;i&quot;ch&quot;^^{?}}'>
    <field name='name' declared_type='char*' type='*' const='true'/>
    <field name='num_chars' declared_type='int' type='i' const='true'/>
    <field name='first' declared_type='int' type='i' const='true'/>
    <field name='ch' declared_type='BitmapCharRec **' type='^^{?}' const='true'/>
  </struct>
  <struct name='BitmapFontRec' type='{_BitmapFontRec=&quot;name&quot;*&quot;num_chars&quot;i&quot;first&quot;i&quot;ch&quot;^^{?}}'>
    <field name='name' declared_type='char*' type='*' const='true'/>
    <field name='num_chars' declared_type='int' type='i' const='true'/>
    <field name='first' declared_type='int' type='i' const='true'/>
    <field name='ch' declared_type='BitmapCharRec **' type='^^{?}' const='true'/>
  </struct>
  <struct name='CoordPtr' type='{_CoordPtr=&quot;x&quot;f&quot;y&quot;f}'>
    <field name='x' declared_type='float' type='f'/>
    <field name='y' declared_type='float' type='f'/>
  </struct>
  <struct name='CoordRec' type='{_CoordRec=&quot;x&quot;f&quot;y&quot;f}'>
    <field name='x' declared_type='float' type='f'/>
    <field name='y' declared_type='float' type='f'/>
  </struct>
  <struct name='STXY' type='{_STXY=&quot;s&quot;f&quot;t&quot;f&quot;x&quot;f&quot;y&quot;f}'>
    <field name='s' declared_type='GLfloat' type='f'/>
    <field name='t' declared_type='GLfloat' type='f'/>
    <field name='x' declared_type='GLfloat' type='f'/>
    <field name='y' declared_type='GLfloat' type='f'/>
  </struct>
  <struct name='SphereMap' type='{_SphereMap=&quot;mesh&quot;^{_SphereMapMesh}&quot;smapTexObj&quot;I&quot;viewTexObjs&quot;[6L]&quot;viewTexObj&quot;I&quot;flags&quot;i&quot;viewTexDim&quot;i&quot;smapTexDim&quot;i&quot;viewOrigin&quot;[2i]&quot;smapOrigin&quot;[2i]&quot;eye&quot;[3f]&quot;up&quot;[3f]&quot;obj&quot;[3f]&quot;viewNear&quot;f&quot;viewFar&quot;f&quot;positionLights&quot;^?&quot;drawView&quot;^?&quot;context&quot;^v}' type64='{_SphereMap=&quot;mesh&quot;^{_SphereMapMesh}&quot;smapTexObj&quot;Q&quot;viewTexObjs&quot;[6Q]&quot;viewTexObj&quot;Q&quot;flags&quot;i&quot;viewTexDim&quot;i&quot;smapTexDim&quot;i&quot;viewOrigin&quot;[2i]&quot;smapOrigin&quot;[2i]&quot;eye&quot;[3f]&quot;up&quot;[3f]&quot;obj&quot;[3f]&quot;viewNear&quot;f&quot;viewFar&quot;f&quot;positionLights&quot;^?&quot;drawView&quot;^?&quot;context&quot;^v}'>
    <field name='mesh' declared_type='SphereMapMesh*' type='^{_SphereMapMesh=iiii^{_STXY}^{_STXY}}'/>
    <field name='smapTexObj' declared_type='GLuint' type='L' type64='Q'/>
    <field name='viewTexObjs' declared_type='GLuint*' type='[6L]' type64='[6Q]'/>
    <field name='viewTexObj' declared_type='GLuint' type='L' type64='Q'/>
    <field name='flags' declared_type='SphereMapFlags' type='i'/>
    <field name='viewTexDim' declared_type='int' type='i'/>
    <field name='smapTexDim' declared_type='int' type='i'/>
    <field name='viewOrigin' declared_type='int*' type='[2i]'/>
    <field name='smapOrigin' declared_type='int*' type='[2i]'/>
    <field name='eye' declared_type='GLfloat*' type='[3f]'/>
    <field name='up' declared_type='GLfloat*' type='[3f]'/>
    <field name='obj' declared_type='GLfloat*' type='[3f]'/>
    <field name='viewNear' declared_type='GLfloat' type='f'/>
    <field name='viewFar' declared_type='GLfloat' type='f'/>
    <field name='positionLights' function_pointer='true' declared_type='void (*)(int, void *)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='drawView' function_pointer='true' declared_type='void (*)(int, void *)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='context' declared_type='void*' type='^v'/>
  </struct>
  <struct name='SphereMapMesh' type='{_SphereMapMesh=&quot;refcnt&quot;i&quot;steps&quot;i&quot;rings&quot;i&quot;edgeExtend&quot;i&quot;face&quot;^{_STXY}&quot;back&quot;^{_STXY}}'>
    <field name='refcnt' declared_type='int' type='i'/>
    <field name='steps' declared_type='int' type='i'/>
    <field name='rings' declared_type='int' type='i'/>
    <field name='edgeExtend' declared_type='int' type='i'/>
    <field name='face' declared_type='STXY*' type='^{_STXY=ffff}'/>
    <field name='back' declared_type='STXY*' type='^{_STXY=ffff}'/>
  </struct>
  <struct name='StrokeCharPtr' type='{_StrokeCharPtr=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'>
    <field name='num_strokes' declared_type='int' type='i'/>
    <field name='stroke' declared_type='StrokeRec*' type='^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}' const='true'/>
    <field name='center' declared_type='float' type='f'/>
    <field name='right' declared_type='float' type='f'/>
  </struct>
  <struct name='StrokeCharRec' type='{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'>
    <field name='num_strokes' declared_type='int' type='i'/>
    <field name='stroke' declared_type='StrokeRec*' type='^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}' const='true'/>
    <field name='center' declared_type='float' type='f'/>
    <field name='right' declared_type='float' type='f'/>
  </struct>
  <struct name='StrokeFontPtr' type='{_StrokeFontPtr=&quot;name&quot;*&quot;num_chars&quot;i&quot;ch&quot;^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}&quot;top&quot;f&quot;bottom&quot;f}'>
    <field name='name' declared_type='char*' type='*' const='true'/>
    <field name='num_chars' declared_type='int' type='i'/>
    <field name='ch' declared_type='StrokeCharRec*' type='^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}' const='true'/>
    <field name='top' declared_type='float' type='f'/>
    <field name='bottom' declared_type='float' type='f'/>
  </struct>
  <struct name='StrokeFontRec' type='{_StrokeFontRec=&quot;name&quot;*&quot;num_chars&quot;i&quot;ch&quot;^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}&quot;top&quot;f&quot;bottom&quot;f}'>
    <field name='name' declared_type='char*' type='*' const='true'/>
    <field name='num_chars' declared_type='int' type='i'/>
    <field name='ch' declared_type='StrokeCharRec*' type='^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}' const='true'/>
    <field name='top' declared_type='float' type='f'/>
    <field name='bottom' declared_type='float' type='f'/>
  </struct>
  <struct name='StrokePtr' type='{_StrokePtr=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'>
    <field name='num_coords' declared_type='int' type='i'/>
    <field name='coord' declared_type='CoordRec*' type='^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}' const='true'/>
  </struct>
  <struct name='StrokeRec' type='{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'>
    <field name='num_coords' declared_type='int' type='i'/>
    <field name='coord' declared_type='CoordRec*' type='^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}' const='true'/>
  </struct>
  <struct name='gleGC' type='{_gleGC=&quot;bgn_gen_texture&quot;^?&quot;n3f_gen_texture&quot;^?&quot;n3d_gen_texture&quot;^?&quot;v3f_gen_texture&quot;^?&quot;v3d_gen_texture&quot;^?&quot;end_gen_texture&quot;^?&quot;join_style&quot;i&quot;ncp&quot;i&quot;contour&quot;^[2d]&quot;cont_normal&quot;^[2d]&quot;up&quot;^d&quot;npoints&quot;i&quot;point_array&quot;^[3d]&quot;color_array&quot;^[3f]&quot;xform_array&quot;^[2[3d]]&quot;num_vert&quot;i&quot;segment_number&quot;i&quot;segment_length&quot;d&quot;accum_seg_len&quot;d&quot;prev_x&quot;d&quot;prev_y&quot;d&quot;save_bgn_gen_texture&quot;^?&quot;save_n3f_gen_texture&quot;^?&quot;save_n3d_gen_texture&quot;^?&quot;save_v3f_gen_texture&quot;^?&quot;save_v3d_gen_texture&quot;^?&quot;save_end_gen_texture&quot;^?}'>
    <field name='bgn_gen_texture' function_pointer='true' declared_type='void (*)(int, double)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='double' type='d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='n3f_gen_texture' function_pointer='true' declared_type='void (*)(float *)' type='^?'>
      <arg declared_type='float*' type='^f'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='n3d_gen_texture' function_pointer='true' declared_type='void (*)(double *)' type='^?'>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='v3f_gen_texture' function_pointer='true' declared_type='void (*)(float *, int, int)' type='^?'>
      <arg declared_type='float*' type='^f'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='v3d_gen_texture' function_pointer='true' declared_type='void (*)(double *, int, int)' type='^?'>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='end_gen_texture' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='join_style' declared_type='int' type='i'/>
    <field name='ncp' declared_type='int' type='i'/>
    <field name='contour' declared_type='gleTwoVec*' type='^[2d]'/>
    <field name='cont_normal' declared_type='gleTwoVec*' type='^[2d]'/>
    <field name='up' declared_type='double*' type='^d'/>
    <field name='npoints' declared_type='int' type='i'/>
    <field name='point_array' declared_type='gleVector*' type='^[3d]'/>
    <field name='color_array' declared_type='gleColor*' type='^[3f]'/>
    <field name='xform_array' declared_type='gleAffine*' type='^[2[3d]]'/>
    <field name='num_vert' declared_type='int' type='i'/>
    <field name='segment_number' declared_type='int' type='i'/>
    <field name='segment_length' declared_type='double' type='d'/>
    <field name='accum_seg_len' declared_type='double' type='d'/>
    <field name='prev_x' declared_type='double' type='d'/>
    <field name='prev_y' declared_type='double' type='d'/>
    <field name='save_bgn_gen_texture' function_pointer='true' declared_type='void (*)(int, double)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='double' type='d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='save_n3f_gen_texture' function_pointer='true' declared_type='void (*)(float *)' type='^?'>
      <arg declared_type='float*' type='^f'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='save_n3d_gen_texture' function_pointer='true' declared_type='void (*)(double *)' type='^?'>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='save_v3f_gen_texture' function_pointer='true' declared_type='void (*)(float *, int, int)' type='^?'>
      <arg declared_type='float*' type='^f'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='save_v3d_gen_texture' function_pointer='true' declared_type='void (*)(double *, int, int)' type='^?'>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='save_end_gen_texture' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <constant name='glutBitmap8By13' declared_type='void*' type='^v'/>
  <constant name='glutBitmap9By15' declared_type='void*' type='^v'/>
  <constant name='glutBitmapHelvetica10' declared_type='void*' type='^v'/>
  <constant name='glutBitmapHelvetica12' declared_type='void*' type='^v'/>
  <constant name='glutBitmapHelvetica18' declared_type='void*' type='^v'/>
  <constant name='glutBitmapTimesRoman10' declared_type='void*' type='^v'/>
  <constant name='glutBitmapTimesRoman24' declared_type='void*' type='^v'/>
  <constant name='glutStrokeMonoRoman' declared_type='void*' type='^v'/>
  <constant name='glutStrokeRoman' declared_type='void*' type='^v'/>
  <enum name='BACKWARDS_INTERSECT' value='2'/>
  <enum name='BACK_CAP' value='4'/>
  <enum name='DEGENERATE_TOLERANCE' value='0.000002'/>
  <enum name='FILLET' value='5'/>
  <enum name='FRONT' value='1'/>
  <enum name='FRONT_CAP' value='3'/>
  <enum name='GLE_API_VERSION' value='228'/>
  <enum name='GLE_TEXTURE_ENABLE' value='65536'/>
  <enum name='GLE_TEXTURE_NORMAL_CYL' value='4'/>
  <enum name='GLE_TEXTURE_NORMAL_FLAT' value='2'/>
  <enum name='GLE_TEXTURE_NORMAL_MODEL_CYL' value='10'/>
  <enum name='GLE_TEXTURE_NORMAL_MODEL_FLAT' value='8'/>
  <enum name='GLE_TEXTURE_NORMAL_MODEL_SPH' value='12'/>
  <enum name='GLE_TEXTURE_NORMAL_SPH' value='6'/>
  <enum name='GLE_TEXTURE_STYLE_MASK' value='255'/>
  <enum name='GLE_TEXTURE_VERTEX_CYL' value='3'/>
  <enum name='GLE_TEXTURE_VERTEX_FLAT' value='1'/>
  <enum name='GLE_TEXTURE_VERTEX_MODEL_CYL' value='9'/>
  <enum name='GLE_TEXTURE_VERTEX_MODEL_FLAT' value='7'/>
  <enum name='GLE_TEXTURE_VERTEX_MODEL_SPH' value='11'/>
  <enum name='GLE_TEXTURE_VERTEX_SPH' value='5'/>
  <enum name='GLUT_ACCUM' value='4'/>
  <enum name='GLUT_ACTIVE_ALT' value='4'/>
  <enum name='GLUT_ACTIVE_CTRL' value='2'/>
  <enum name='GLUT_ACTIVE_SHIFT' value='1'/>
  <enum name='GLUT_ALPHA' value='8'/>
  <enum name='GLUT_API_VERSION' value='5'/>
  <enum name='GLUT_BLUE' value='2'/>
  <enum name='GLUT_CURSOR_BOTTOM_LEFT_CORNER' value='19'/>
  <enum name='GLUT_CURSOR_BOTTOM_RIGHT_CORNER' value='18'/>
  <enum name='GLUT_CURSOR_BOTTOM_SIDE' value='13'/>
  <enum name='GLUT_CURSOR_CROSSHAIR' value='9'/>
  <enum name='GLUT_CURSOR_CYCLE' value='5'/>
  <enum name='GLUT_CURSOR_DESTROY' value='3'/>
  <enum name='GLUT_CURSOR_FULL_CROSSHAIR' value='102'/>
  <enum name='GLUT_CURSOR_HELP' value='4'/>
  <enum name='GLUT_CURSOR_INFO' value='2'/>
  <enum name='GLUT_CURSOR_INHERIT' value='100'/>
  <enum name='GLUT_CURSOR_LEFT_ARROW' value='1'/>
  <enum name='GLUT_CURSOR_LEFT_RIGHT' value='11'/>
  <enum name='GLUT_CURSOR_LEFT_SIDE' value='14'/>
  <enum name='GLUT_CURSOR_NONE' value='101'/>
  <enum name='GLUT_CURSOR_RIGHT_ARROW' value='0'/>
  <enum name='GLUT_CURSOR_RIGHT_SIDE' value='15'/>
  <enum name='GLUT_CURSOR_SPRAY' value='6'/>
  <enum name='GLUT_CURSOR_TEXT' value='8'/>
  <enum name='GLUT_CURSOR_TOP_LEFT_CORNER' value='16'/>
  <enum name='GLUT_CURSOR_TOP_RIGHT_CORNER' value='17'/>
  <enum name='GLUT_CURSOR_TOP_SIDE' value='12'/>
  <enum name='GLUT_CURSOR_UP_DOWN' value='10'/>
  <enum name='GLUT_CURSOR_WAIT' value='7'/>
  <enum name='GLUT_DEPTH' value='16'/>
  <enum name='GLUT_DEVICE_IGNORE_KEY_REPEAT' value='610'/>
  <enum name='GLUT_DEVICE_KEY_REPEAT' value='611'/>
  <enum name='GLUT_DISPLAY_MODE_POSSIBLE' value='400'/>
  <enum name='GLUT_DOUBLE' value='2'/>
  <enum name='GLUT_DOWN' value='0'/>
  <enum name='GLUT_ELAPSED_TIME' value='700'/>
  <enum name='GLUT_ENTERED' value='1'/>
  <enum name='GLUT_FCB_BUTTON_BOX' value='12'/>
  <enum name='GLUT_FCB_DIALS' value='13'/>
  <enum name='GLUT_FCB_DISPLAY' value='0'/>
  <enum name='GLUT_FCB_ENTRY' value='5'/>
  <enum name='GLUT_FCB_JOYSTICK' value='19'/>
  <enum name='GLUT_FCB_KEYBOARD' value='6'/>
  <enum name='GLUT_FCB_KEYBOARD_UP' value='7'/>
  <enum name='GLUT_FCB_MOTION' value='3'/>
  <enum name='GLUT_FCB_MOUSE' value='2'/>
  <enum name='GLUT_FCB_OVERLAY_DISPLAY' value='100'/>
  <enum name='GLUT_FCB_PASSIVE' value='4'/>
  <enum name='GLUT_FCB_RESHAPE' value='1'/>
  <enum name='GLUT_FCB_SELECT' value='101'/>
  <enum name='GLUT_FCB_SPACE_BUTTON' value='16'/>
  <enum name='GLUT_FCB_SPACE_MOTION' value='14'/>
  <enum name='GLUT_FCB_SPACE_ROTATE' value='15'/>
  <enum name='GLUT_FCB_SPECIAL' value='10'/>
  <enum name='GLUT_FCB_SPECIAL_UP' value='11'/>
  <enum name='GLUT_FCB_TABLET_BUTTON' value='18'/>
  <enum name='GLUT_FCB_TABLET_MOTION' value='17'/>
  <enum name='GLUT_FCB_TIMER' value='102'/>
  <enum name='GLUT_FCB_VISIBILITY' value='9'/>
  <enum name='GLUT_FCB_WINDOW_STATUS' value='8'/>
  <enum name='GLUT_FCB_WMCLOSE' value='20'/>
  <enum name='GLUT_FULLY_COVERED' value='3'/>
  <enum name='GLUT_FULLY_RETAINED' value='1'/>
  <enum name='GLUT_GAME_MODE_ACTIVE' value='0'/>
  <enum name='GLUT_GAME_MODE_DISPLAY_CHANGED' value='6'/>
  <enum name='GLUT_GAME_MODE_HEIGHT' value='3'/>
  <enum name='GLUT_GAME_MODE_PIXEL_DEPTH' value='4'/>
  <enum name='GLUT_GAME_MODE_POSSIBLE' value='1'/>
  <enum name='GLUT_GAME_MODE_REFRESH_RATE' value='5'/>
  <enum name='GLUT_GAME_MODE_WIDTH' value='2'/>
  <enum name='GLUT_GREEN' value='1'/>
  <enum name='GLUT_HAS_DIAL_AND_BUTTON_BOX' value='603'/>
  <enum name='GLUT_HAS_JOYSTICK' value='612'/>
  <enum name='GLUT_HAS_KEYBOARD' value='600'/>
  <enum name='GLUT_HAS_MOUSE' value='601'/>
  <enum name='GLUT_HAS_OVERLAY' value='802'/>
  <enum name='GLUT_HAS_SPACEBALL' value='602'/>
  <enum name='GLUT_HAS_TABLET' value='604'/>
  <enum name='GLUT_HIDDEN' value='0'/>
  <enum name='GLUT_INDEX' value='1'/>
  <enum name='GLUT_INIT_DISPLAY_MODE' value='504'/>
  <enum name='GLUT_INIT_WINDOW_HEIGHT' value='503'/>
  <enum name='GLUT_INIT_WINDOW_WIDTH' value='502'/>
  <enum name='GLUT_INIT_WINDOW_X' value='500'/>
  <enum name='GLUT_INIT_WINDOW_Y' value='501'/>
  <enum name='GLUT_JOYSTICK_AXES' value='615'/>
  <enum name='GLUT_JOYSTICK_BUTTONS' value='614'/>
  <enum name='GLUT_JOYSTICK_BUTTON_A' value='1'/>
  <enum name='GLUT_JOYSTICK_BUTTON_B' value='2'/>
  <enum name='GLUT_JOYSTICK_BUTTON_C' value='4'/>
  <enum name='GLUT_JOYSTICK_BUTTON_D' value='8'/>
  <enum name='GLUT_JOYSTICK_POLL_RATE' value='616'/>
  <enum name='GLUT_KEY_DOWN' value='103'/>
  <enum name='GLUT_KEY_END' value='107'/>
  <enum name='GLUT_KEY_F1' value='1'/>
  <enum name='GLUT_KEY_F10' value='10'/>
  <enum name='GLUT_KEY_F11' value='11'/>
  <enum name='GLUT_KEY_F12' value='12'/>
  <enum name='GLUT_KEY_F2' value='2'/>
  <enum name='GLUT_KEY_F3' value='3'/>
  <enum name='GLUT_KEY_F4' value='4'/>
  <enum name='GLUT_KEY_F5' value='5'/>
  <enum name='GLUT_KEY_F6' value='6'/>
  <enum name='GLUT_KEY_F7' value='7'/>
  <enum name='GLUT_KEY_F8' value='8'/>
  <enum name='GLUT_KEY_F9' value='9'/>
  <enum name='GLUT_KEY_HOME' value='106'/>
  <enum name='GLUT_KEY_INSERT' value='108'/>
  <enum name='GLUT_KEY_LEFT' value='100'/>
  <enum name='GLUT_KEY_PAGE_DOWN' value='105'/>
  <enum name='GLUT_KEY_PAGE_UP' value='104'/>
  <enum name='GLUT_KEY_REPEAT_DEFAULT' value='2'/>
  <enum name='GLUT_KEY_REPEAT_OFF' value='0'/>
  <enum name='GLUT_KEY_REPEAT_ON' value='1'/>
  <enum name='GLUT_KEY_RIGHT' value='102'/>
  <enum name='GLUT_KEY_UP' value='101'/>
  <enum name='GLUT_LAYER_IN_USE' value='801'/>
  <enum name='GLUT_LEFT' value='0'/>
  <enum name='GLUT_LEFT_BUTTON' value='0'/>
  <enum name='GLUT_LUMINANCE' value='512'/>
  <enum name='GLUT_MACOSX_IMPLEMENTATION' value='2'/>
  <enum name='GLUT_MENU_IN_USE' value='1'/>
  <enum name='GLUT_MENU_NOT_IN_USE' value='0'/>
  <enum name='GLUT_MENU_NUM_ITEMS' value='300'/>
  <enum name='GLUT_MIDDLE_BUTTON' value='1'/>
  <enum name='GLUT_MULTISAMPLE' value='128'/>
  <enum name='GLUT_NORMAL' value='0'/>
  <enum name='GLUT_NORMAL_DAMAGED' value='804'/>
  <enum name='GLUT_NOT_VISIBLE' value='0'/>
  <enum name='GLUT_NO_RECOVERY' value='1024'/>
  <enum name='GLUT_NUM_BUTTON_BOX_BUTTONS' value='607'/>
  <enum name='GLUT_NUM_DIALS' value='608'/>
  <enum name='GLUT_NUM_MOUSE_BUTTONS' value='605'/>
  <enum name='GLUT_NUM_SPACEBALL_BUTTONS' value='606'/>
  <enum name='GLUT_NUM_TABLET_BUTTONS' value='609'/>
  <enum name='GLUT_OVERLAY' value='1'/>
  <enum name='GLUT_OVERLAY_DAMAGED' value='805'/>
  <enum name='GLUT_OVERLAY_POSSIBLE' value='800'/>
  <enum name='GLUT_OWNS_JOYSTICK' value='613'/>
  <enum name='GLUT_PARTIALLY_RETAINED' value='2'/>
  <enum name='GLUT_RED' value='0'/>
  <enum name='GLUT_RGB' value='0'/>
  <enum name='GLUT_RGBA' value='0'/>
  <enum name='GLUT_RIGHT_BUTTON' value='2'/>
  <enum name='GLUT_SCREEN_HEIGHT' value='201'/>
  <enum name='GLUT_SCREEN_HEIGHT_MM' value='203'/>
  <enum name='GLUT_SCREEN_WIDTH' value='200'/>
  <enum name='GLUT_SCREEN_WIDTH_MM' value='202'/>
  <enum name='GLUT_SINGLE' value='0'/>
  <enum name='GLUT_STENCIL' value='32'/>
  <enum name='GLUT_STEREO' value='256'/>
  <enum name='GLUT_TRANSPARENT_INDEX' value='803'/>
  <enum name='GLUT_UP' value='1'/>
  <enum name='GLUT_VIDEO_RESIZE_HEIGHT' value='909'/>
  <enum name='GLUT_VIDEO_RESIZE_HEIGHT_DELTA' value='905'/>
  <enum name='GLUT_VIDEO_RESIZE_IN_USE' value='901'/>
  <enum name='GLUT_VIDEO_RESIZE_POSSIBLE' value='900'/>
  <enum name='GLUT_VIDEO_RESIZE_WIDTH' value='908'/>
  <enum name='GLUT_VIDEO_RESIZE_WIDTH_DELTA' value='904'/>
  <enum name='GLUT_VIDEO_RESIZE_X' value='906'/>
  <enum name='GLUT_VIDEO_RESIZE_X_DELTA' value='902'/>
  <enum name='GLUT_VIDEO_RESIZE_Y' value='907'/>
  <enum name='GLUT_VIDEO_RESIZE_Y_DELTA' value='903'/>
  <enum name='GLUT_VISIBLE' value='1'/>
  <enum name='GLUT_WINDOW_ACCUM_ALPHA_SIZE' value='114'/>
  <enum name='GLUT_WINDOW_ACCUM_BLUE_SIZE' value='113'/>
  <enum name='GLUT_WINDOW_ACCUM_GREEN_SIZE' value='112'/>
  <enum name='GLUT_WINDOW_ACCUM_RED_SIZE' value='111'/>
  <enum name='GLUT_WINDOW_ALPHA_SIZE' value='110'/>
  <enum name='GLUT_WINDOW_BLUE_SIZE' value='109'/>
  <enum name='GLUT_WINDOW_BUFFER_SIZE' value='104'/>
  <enum name='GLUT_WINDOW_COLORMAP_SIZE' value='119'/>
  <enum name='GLUT_WINDOW_CURSOR' value='122'/>
  <enum name='GLUT_WINDOW_DEPTH_SIZE' value='106'/>
  <enum name='GLUT_WINDOW_DOUBLEBUFFER' value='115'/>
  <enum name='GLUT_WINDOW_FORMAT_ID' value='123'/>
  <enum name='GLUT_WINDOW_GREEN_SIZE' value='108'/>
  <enum name='GLUT_WINDOW_HEIGHT' value='103'/>
  <enum name='GLUT_WINDOW_NUM_CHILDREN' value='118'/>
  <enum name='GLUT_WINDOW_NUM_SAMPLES' value='120'/>
  <enum name='GLUT_WINDOW_PARENT' value='117'/>
  <enum name='GLUT_WINDOW_RED_SIZE' value='107'/>
  <enum name='GLUT_WINDOW_RGBA' value='116'/>
  <enum name='GLUT_WINDOW_STENCIL_SIZE' value='105'/>
  <enum name='GLUT_WINDOW_STEREO' value='121'/>
  <enum name='GLUT_WINDOW_WIDTH' value='102'/>
  <enum name='GLUT_WINDOW_X' value='100'/>
  <enum name='GLUT_WINDOW_Y' value='101'/>
  <enum name='GLUT_XLIB_IMPLEMENTATION' value='15'/>
  <enum name='SMAP_BACK' value='5'/>
  <enum name='SMAP_BOTTOM' value='2'/>
  <enum name='SMAP_CLEAR_SMAP_TEXTURE' value='1'/>
  <enum name='SMAP_FRONT' value='0'/>
  <enum name='SMAP_GENERATE_MIPMAPS' value='6'/>
  <enum name='SMAP_GENERATE_SMAP_MIPMAPS' value='4'/>
  <enum name='SMAP_GENERATE_VIEW_MIPMAPS' value='2'/>
  <enum name='SMAP_LEFT' value='3'/>
  <enum name='SMAP_RIGHT' value='4'/>
  <enum name='SMAP_TOP' value='1'/>
  <enum name='TUBE_CONTOUR_CLOSED' value='4096'/>
  <enum name='TUBE_JN_ANGLE' value='2'/>
  <enum name='TUBE_JN_CAP' value='16'/>
  <enum name='TUBE_JN_CUT' value='3'/>
  <enum name='TUBE_JN_MASK' value='15'/>
  <enum name='TUBE_JN_RAW' value='1'/>
  <enum name='TUBE_JN_ROUND' value='4'/>
  <enum name='TUBE_NORM_EDGE' value='512'/>
  <enum name='TUBE_NORM_FACET' value='256'/>
  <enum name='TUBE_NORM_MASK' value='3840'/>
  <enum name='TUBE_NORM_PATH_EDGE' value='1024'/>
  <enum name='X' value='0'/>
  <enum name='Y' value='1'/>
  <enum name='Z' value='2'/>
  <function name='bisecting_plane'>
    <arg name='n' declared_type='double*' type='^d'/>
    <arg name='v1' declared_type='double*' type='^d'/>
    <arg name='v2' declared_type='double*' type='^d'/>
    <arg name='v3' declared_type='double*' type='^d'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='draw_angle_style_back_cap'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='bi' declared_type='double*' type='^d'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_angle_style_front_cap'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='bi' declared_type='double*' type='^d'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_binorm_segment_c_and_edge_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='front_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_last' declared_type='float*' type='^f'/>
    <arg name='color_next' declared_type='float*' type='^f'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_binorm_segment_c_and_facet_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='front_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_last' declared_type='float*' type='^f'/>
    <arg name='color_next' declared_type='float*' type='^f'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_binorm_segment_edge_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='front_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_binorm_segment_facet_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='front_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_norm' declared_type='double (*)*' type='^[3d]'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_raw_style_end_cap'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='zval' declared_type='double' type='d'/>
    <arg name='frontwards' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_round_style_cap_callback'>
    <arg name='iloop' declared_type='int' type='i'/>
    <arg name='cap' declared_type='double (*)*' type='^[3d]'/>
    <arg name='face_color' declared_type='float*' type='^f'/>
    <arg name='cut_vector' declared_type='double*' type='^d'/>
    <arg name='bisect_vector' declared_type='double*' type='^d'/>
    <arg name='norms' declared_type='double (*)*' type='^[3d]'/>
    <arg name='frontwards' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_c_and_edge_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='norm_cont' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_last' declared_type='float*' type='^f'/>
    <arg name='color_next' declared_type='float*' type='^f'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_c_and_facet_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='norm_cont' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_last' declared_type='float*' type='^f'/>
    <arg name='color_next' declared_type='float*' type='^f'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_color'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_last' declared_type='float*' type='^f'/>
    <arg name='color_next' declared_type='float*' type='^f'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_edge_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='norm_cont' declared_type='double (*)*' type='^[3d]'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_facet_n'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='norm_cont' declared_type='double (*)*' type='^[3d]'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='draw_segment_plain'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='front_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='back_contour' declared_type='double (*)*' type='^[3d]'/>
    <arg name='inext' declared_type='int' type='i'/>
    <arg name='len' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='extrusion_angle_join'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='xform_array' declared_type='double (*)**' type='^[2[3d]]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='extrusion_raw_join'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='xform_array' declared_type='double (*)**' type='^[2[3d]]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='extrusion_round_or_cut_join'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='xform_array' declared_type='double (*)**' type='^[2[3d]]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleCreateGC'>
    <retval declared_type='gleGC*' type='^{_gleGC=^?^?^?^?^?^?ii^[2d]^[2d]^di^[3d]^[3f]^[2[3d]]iidddd^?^?^?^?^?^?}'/>
  </function>
  <function name='gleExtrusion'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleGetJoinStyle'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='gleGetNumSlices'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='gleHelicoid'>
    <arg name='rToroid' declared_type='double' type='d'/>
    <arg name='startRadius' declared_type='double' type='d'/>
    <arg name='drdTheta' declared_type='double' type='d'/>
    <arg name='startZ' declared_type='double' type='d'/>
    <arg name='dzdTheta' declared_type='double' type='d'/>
    <arg name='startXform' declared_type='double (*)*' type='^[3d]'/>
    <arg name='dXformdTheta' declared_type='double (*)*' type='^[3d]'/>
    <arg name='startTheta' declared_type='double' type='d'/>
    <arg name='sweepTheta' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleLathe'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='startRadius' declared_type='double' type='d'/>
    <arg name='drdTheta' declared_type='double' type='d'/>
    <arg name='startZ' declared_type='double' type='d'/>
    <arg name='dzdTheta' declared_type='double' type='d'/>
    <arg name='startXform' declared_type='double (*)*' type='^[3d]'/>
    <arg name='dXformdTheta' declared_type='double (*)*' type='^[3d]'/>
    <arg name='startTheta' declared_type='double' type='d'/>
    <arg name='sweepTheta' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glePolyCone'>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='radius_array' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glePolyCylinder'>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='radius' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleScrew'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='startz' declared_type='double' type='d'/>
    <arg name='endz' declared_type='double' type='d'/>
    <arg name='twist' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleSetJoinStyle'>
    <arg name='style' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleSetNumSlices'>
    <arg name='slices' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleSpiral'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='startRadius' declared_type='double' type='d'/>
    <arg name='drdTheta' declared_type='double' type='d'/>
    <arg name='startZ' declared_type='double' type='d'/>
    <arg name='dzdTheta' declared_type='double' type='d'/>
    <arg name='startXform' declared_type='double (*)*' type='^[3d]'/>
    <arg name='dXformdTheta' declared_type='double (*)*' type='^[3d]'/>
    <arg name='startTheta' declared_type='double' type='d'/>
    <arg name='sweepTheta' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleSuperExtrusion'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='xform_array' declared_type='double (*)**' type='^[2[3d]]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleTextureMode'>
    <arg name='mode' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleToroid'>
    <arg name='rToroid' declared_type='double' type='d'/>
    <arg name='startRadius' declared_type='double' type='d'/>
    <arg name='drdTheta' declared_type='double' type='d'/>
    <arg name='startZ' declared_type='double' type='d'/>
    <arg name='dzdTheta' declared_type='double' type='d'/>
    <arg name='startXform' declared_type='double (*)*' type='^[3d]'/>
    <arg name='dXformdTheta' declared_type='double (*)*' type='^[3d]'/>
    <arg name='startTheta' declared_type='double' type='d'/>
    <arg name='sweepTheta' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='gleTwistExtrusion'>
    <arg name='ncp' declared_type='int' type='i'/>
    <arg name='contour' declared_type='double (*)*' type='^[2d]'/>
    <arg name='cont_normal' declared_type='double (*)*' type='^[2d]'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <arg name='color_array' declared_type='float (*)*' type='^[3f]'/>
    <arg name='twist_array' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutAddMenuEntry'>
    <arg name='label' declared_type='char*' type='*' const='true'/>
    <arg name='value' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutAddSubMenu'>
    <arg name='label' declared_type='char*' type='*' const='true'/>
    <arg name='submenu' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutAttachMenu'>
    <arg name='button' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutBitmapCharacter'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='character' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutBitmapLength'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='string' declared_type='unsigned char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutBitmapWidth'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='character' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutButtonBoxFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutChangeToMenuEntry'>
    <arg name='item' declared_type='int' type='i'/>
    <arg name='label' declared_type='char*' type='*' const='true'/>
    <arg name='value' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutChangeToSubMenu'>
    <arg name='item' declared_type='int' type='i'/>
    <arg name='label' declared_type='char*' type='*' const='true'/>
    <arg name='submenu' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutCheckLoop'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutCopyColormap'>
    <arg name='win' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutCreateMenu'>
    <arg function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutCreateSubWindow'>
    <arg name='win' declared_type='int' type='i'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutCreateWindow'>
    <arg name='title' declared_type='char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutDestroyMenu'>
    <arg name='menu' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutDestroyWindow'>
    <arg name='win' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutDetachMenu'>
    <arg name='button' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutDeviceGet'>
    <arg name='type' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutDialsFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutDisplayFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutEnterGameMode'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutEntryFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutEstablishOverlay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutExtensionSupported'>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutForceJoystickFunc'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutFullScreen'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutGameModeGet'>
    <arg name='mode' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutGameModeString'>
    <arg name='string' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutGet'>
    <arg name='type' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutGetColor'>
    <arg name='ndx' declared_type='int' type='i'/>
    <arg name='component' declared_type='int' type='i'/>
    <retval declared_type='GLfloat' type='f'/>
  </function>
  <function name='glutGetMenu'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutGetModifiers'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutGetProcAddress'>
    <arg name='procName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='glutGetWindow'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutHideOverlay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutHideWindow'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutIconifyWindow'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutIdleFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutIgnoreKeyRepeat'>
    <arg name='ignore' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutInit'>
    <arg name='argcp' declared_type='int*' type='^i'/>
    <arg name='argv' declared_type='char**' type='^*'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutInitDisplayMode'>
    <arg name='mode' declared_type='unsigned int' type='I'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutInitDisplayString'>
    <arg name='string' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutInitWindowPosition'>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutInitWindowSize'>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutJoystickFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(unsigned int, int, int, int)' type='^?'>
      <arg declared_type='unsigned int' type='I'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='pollInterval' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutKeyboardFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(unsigned char, int, int)' type='^?'>
      <arg declared_type='unsigned char' type='C'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutKeyboardUpFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(unsigned char, int, int)' type='^?'>
      <arg declared_type='unsigned char' type='C'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutLayerGet'>
    <arg name='type' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutLeaveGameMode'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutMainLoop'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutMenuStateFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutMenuStatusFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutMotionFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutMouseFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutOverlayDisplayFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPassiveMotionFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPopWindow'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPositionWindow'>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPostOverlayRedisplay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPostRedisplay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPostWindowOverlayRedisplay'>
    <arg name='win' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPostWindowRedisplay'>
    <arg name='win' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutPushWindow'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutRemoveMenuItem'>
    <arg name='item' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutRemoveOverlay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutReportErrors'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutReshapeFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutReshapeWindow'>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetColor'>
    <arg declared_type='int' type='i'/>
    <arg name='red' declared_type='GLfloat' type='f'/>
    <arg name='green' declared_type='GLfloat' type='f'/>
    <arg name='blue' declared_type='GLfloat' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetCursor'>
    <arg name='cursor' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetIconTitle'>
    <arg name='title' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetKeyRepeat'>
    <arg name='repeatMode' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetMenu'>
    <arg name='menu' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetWindow'>
    <arg name='win' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetWindowTitle'>
    <arg name='title' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSetupVideoResizing'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutShowOverlay'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutShowWindow'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidCone'>
    <arg name='base' declared_type='GLdouble' type='d'/>
    <arg name='height' declared_type='GLdouble' type='d'/>
    <arg name='slices' declared_type='GLint' type='l' type64='q'/>
    <arg name='stacks' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidCube'>
    <arg name='size' declared_type='GLdouble' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidDodecahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidIcosahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidOctahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidSphere'>
    <arg name='radius' declared_type='GLdouble' type='d'/>
    <arg name='slices' declared_type='GLint' type='l' type64='q'/>
    <arg name='stacks' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidTeapot'>
    <arg name='size' declared_type='GLdouble' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidTetrahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSolidTorus'>
    <arg name='innerRadius' declared_type='GLdouble' type='d'/>
    <arg name='outerRadius' declared_type='GLdouble' type='d'/>
    <arg name='sides' declared_type='GLint' type='l' type64='q'/>
    <arg name='rings' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSpaceballButtonFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSpaceballMotionFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSpaceballRotateFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSpecialFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSpecialUpFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutStopVideoResizing'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutStrokeCharacter'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='character' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutStrokeLength'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='string' declared_type='unsigned char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutStrokeWidth'>
    <arg name='font' declared_type='void*' type='^v'/>
    <arg name='character' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutSurfaceTexture'>
    <arg name='target' declared_type='GLenum' type='L' type64='Q'/>
    <arg name='internalformat' declared_type='GLenum' type='L' type64='Q'/>
    <arg name='surfacewin' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutSwapBuffers'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutTabletButtonFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int, int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutTabletMotionFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int, int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutTimerFunc'>
    <arg name='millis' declared_type='unsigned int' type='I'/>
    <arg name='func' function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='value' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutUseLayer'>
    <arg name='layer' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutVideoPan'>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutVideoResize'>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutVideoResizeGet'>
    <arg name='param' declared_type='GLenum' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='glutVisibilityFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWMCloseFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWarpPointer'>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWindowStatusFunc'>
    <arg name='func' function_pointer='true' declared_type='void (*)(int)' type='^?'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireCone'>
    <arg name='base' declared_type='GLdouble' type='d'/>
    <arg name='height' declared_type='GLdouble' type='d'/>
    <arg name='slices' declared_type='GLint' type='l' type64='q'/>
    <arg name='stacks' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireCube'>
    <arg name='size' declared_type='GLdouble' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireDodecahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireIcosahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireOctahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireSphere'>
    <arg name='radius' declared_type='GLdouble' type='d'/>
    <arg name='slices' declared_type='GLint' type='l' type64='q'/>
    <arg name='stacks' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireTeapot'>
    <arg name='size' declared_type='GLdouble' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireTetrahedron'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='glutWireTorus'>
    <arg name='innerRadius' declared_type='GLdouble' type='d'/>
    <arg name='outerRadius' declared_type='GLdouble' type='d'/>
    <arg name='sides' declared_type='GLint' type='l' type64='q'/>
    <arg name='rings' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_about_axis_d'>
    <arg name='angle' declared_type='double' type='d'/>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_about_axis_f'>
    <arg name='angle' declared_type='float' type='f'/>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_axis_d'>
    <arg name='omega' declared_type='double' type='d'/>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_axis_f'>
    <arg name='omega' declared_type='float' type='f'/>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_omega_d'>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='rot_omega_f'>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapConfigureSphereMapMesh'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='steps' declared_type='int' type='i'/>
    <arg name='rings' declared_type='int' type='i'/>
    <arg name='edgeExtend' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapCreateSphereMap'>
    <arg name='shareSmap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
  </function>
  <function name='smapDestroySphereMap'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGenSphereMap'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGenSphereMapFromViewTexs'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGenSphereMapWithOneViewTex'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGenViewTex'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='view' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGenViewTexs'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetContextData'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='context' declared_type='void**' type='^^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetDrawViewFunc'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='drawView' declared_type='void (**)(int, void *)' type='^^?'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetEye'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='eyex' declared_type='GLfloat*' type='^f'/>
    <arg name='eyey' declared_type='GLfloat*' type='^f'/>
    <arg name='eyez' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetEyeVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='eye' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetFlags'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='flags' declared_type='SphereMapFlags*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetNearFar'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='viewNear' declared_type='GLfloat*' type='^f'/>
    <arg name='viewFar' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetObject'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='objx' declared_type='GLfloat*' type='^f'/>
    <arg name='objy' declared_type='GLfloat*' type='^f'/>
    <arg name='objz' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetObjectVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='obj' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetPositionLightsFunc'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='positionLights' declared_type='void (**)(int, void *)' type='^^?'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetSphereMapOrigin'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='x' declared_type='GLint*' type='^i' type64='^q'/>
    <arg name='y' declared_type='GLint*' type='^i' type64='^q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetSphereMapTexDim'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texdim' declared_type='GLsizei*' type='^i' type64='^q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetSphereMapTexObj'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobj' declared_type='GLuint*' type='^I' type64='^Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetUp'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='upx' declared_type='GLfloat*' type='^f'/>
    <arg name='upy' declared_type='GLfloat*' type='^f'/>
    <arg name='upz' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetUpVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='up' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetViewOrigin'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='x' declared_type='GLint*' type='^i' type64='^q'/>
    <arg name='y' declared_type='GLint*' type='^i' type64='^q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetViewTexDim'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texdim' declared_type='GLsizei*' type='^i' type64='^q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetViewTexObj'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobj' declared_type='GLuint*' type='^I' type64='^Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapGetViewTexObjs'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobjs' declared_type='GLuint*' type='^I' type64='^Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapRvecToSt'>
    <arg name='rvec' declared_type='float*' type='^f'/>
    <arg name='st' declared_type='float*' type='^f'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='smapSetContextData'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='context' declared_type='void*' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetDrawViewFunc'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='drawView' function_pointer='true' declared_type='void (*)(int, void *)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetEye'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='eyex' declared_type='GLfloat' type='f'/>
    <arg name='eyey' declared_type='GLfloat' type='f'/>
    <arg name='eyez' declared_type='GLfloat' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetEyeVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='eye' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetFlags'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='flags' declared_type='SphereMapFlags' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetNearFar'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='viewNear' declared_type='GLfloat' type='f'/>
    <arg name='viewFar' declared_type='GLfloat' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetObject'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='objx' declared_type='GLfloat' type='f'/>
    <arg name='objy' declared_type='GLfloat' type='f'/>
    <arg name='objz' declared_type='GLfloat' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetObjectVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='obj' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetPositionLightsFunc'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='positionLights' function_pointer='true' declared_type='void (*)(int, void *)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetSphereMapOrigin'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='x' declared_type='GLint' type='l' type64='q'/>
    <arg name='y' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetSphereMapTexDim'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texdim' declared_type='GLsizei' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetSphereMapTexObj'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobj' declared_type='GLuint' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetUp'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='upx' declared_type='GLfloat' type='f'/>
    <arg name='upy' declared_type='GLfloat' type='f'/>
    <arg name='upz' declared_type='GLfloat' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetUpVector'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='up' declared_type='GLfloat*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetViewOrigin'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='x' declared_type='GLint' type='l' type64='q'/>
    <arg name='y' declared_type='GLint' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetViewTexDim'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texdim' declared_type='GLsizei' type='l' type64='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetViewTexObj'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobj' declared_type='GLuint' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapSetViewTexObjs'>
    <arg name='smap' declared_type='SphereMap*' type='^{_SphereMap=^{_SphereMapMesh}I[6L]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}' type64='^{_SphereMap=^{_SphereMapMesh}Q[6Q]Qiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
    <arg name='texobjs' declared_type='GLuint*' type='^I' type64='^Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='smapStToRvec'>
    <arg name='st' declared_type='float*' type='^f'/>
    <arg name='rvec' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='up_sanity_check'>
    <arg name='up' declared_type='double*' type='^d'/>
    <arg name='npoints' declared_type='int' type='i'/>
    <arg name='point_array' declared_type='double (*)*' type='^[3d]'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_about_axis_d'>
    <arg name='m' declared_type='double (*)*' type='^[4d]'/>
    <arg name='angle' declared_type='double' type='d'/>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_about_axis_f'>
    <arg name='m' declared_type='float (*)*' type='^[4f]'/>
    <arg name='angle' declared_type='float' type='f'/>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_axis_d'>
    <arg name='m' declared_type='double (*)*' type='^[4d]'/>
    <arg name='omega' declared_type='double' type='d'/>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_axis_f'>
    <arg name='m' declared_type='float (*)*' type='^[4f]'/>
    <arg name='omega' declared_type='float' type='f'/>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_omega_d'>
    <arg name='m' declared_type='double (*)*' type='^[4d]'/>
    <arg name='axis' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='urot_omega_f'>
    <arg name='m' declared_type='float (*)*' type='^[4f]'/>
    <arg name='axis' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='uview_direction_d'>
    <arg name='m' declared_type='double (*)*' type='^[4d]'/>
    <arg name='v21' declared_type='double*' type='^d'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='uview_direction_f'>
    <arg name='m' declared_type='float (*)*' type='^[4f]'/>
    <arg name='v21' declared_type='float*' type='^f'/>
    <arg name='up' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='uviewpoint_d'>
    <arg name='m' declared_type='double (*)*' type='^[4d]'/>
    <arg name='v1' declared_type='double*' type='^d'/>
    <arg name='v2' declared_type='double*' type='^d'/>
    <arg name='up' declared_type='double*' type='^d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='uviewpoint_f'>
    <arg name='m' declared_type='float (*)*' type='^[4f]'/>
    <arg name='v1' declared_type='float*' type='^f'/>
    <arg name='v2' declared_type='float*' type='^f'/>
    <arg name='up' declared_type='float*' type='^f'/>
    <retval declared_type='void' type='v'/>
  </function>
</signatures>
