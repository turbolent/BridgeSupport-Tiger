<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
<depends_on path='/System/Library/Frameworks/AudioUnit.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/vecLib.framework'/>
<struct name='AUNodeConnection' type='{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}'>
<field name='sourceNode' declared_type='AUNode' type='l' type64='i'/>
<field name='sourceOutputNumber' declared_type='UInt32' type='L' type64='I'/>
<field name='destNode' declared_type='AUNode' type='l' type64='i'/>
<field name='destInputNumber' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AUNodeInteraction' type='{AUNodeInteraction=&quot;nodeInteractionType&quot;I&quot;nodeInteraction&quot;(?=&quot;connection&quot;{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}&quot;inputCallback&quot;{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}})}'>
<field name='nodeInteractionType' declared_type='UInt32' type='L' type64='I'/>
<field name='nodeInteraction' declared_type='union AUNodeInteraction::' type='(?=&quot;connection&quot;{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}&quot;inputCallback&quot;{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}})'/>
</struct>
<struct name='AUNodeRenderCallback' type='{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}}'>
<field name='destNode' declared_type='AUNode' type='l' type64='i'/>
<field name='destInputNumber' declared_type='AudioUnitElement' type='L' type64='I'/>
<field name='cback' declared_type='AURenderCallbackStruct' type='{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}'/>
</struct>
<struct name='AUPresetEvent' type='{AUPresetEvent=&quot;scope&quot;I&quot;element&quot;I&quot;preset&quot;^v}'>
<field name='scope' declared_type='AudioUnitScope' type='L' type64='I'/>
<field name='element' declared_type='AudioUnitElement' type='L' type64='I'/>
<field name='preset' declared_type='CFPropertyListRef' type='@'/>
</struct>
<struct name='AudioBalanceFade' type='{AudioBalanceFade=&quot;mLeftRightBalance&quot;f&quot;mBackFrontFade&quot;f&quot;mType&quot;I&quot;mChannelLayout&quot;^{AudioChannelLayout}}'>
<field name='mLeftRightBalance' declared_type='Float32' type='f'/>
<field name='mBackFrontFade' declared_type='Float32' type='f'/>
<field name='mType' declared_type='UInt32' type='L' type64='I'/>
<field name='mChannelLayout' declared_type='AudioChannelLayout*' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}' const='true'/>
</struct>
<struct name='AudioConverterPrimeInfo' type='{AudioConverterPrimeInfo=&quot;leadingFrames&quot;I&quot;trailingFrames&quot;I}'>
<field name='leadingFrames' declared_type='UInt32' type='L' type64='I'/>
<field name='trailingFrames' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AudioFileFDFTable' type='{AudioFileFDFTable=&quot;mComponentStorage&quot;^v&quot;mReadBytesFDF&quot;^?&quot;mWriteBytesFDF&quot;^?&quot;mReadPacketsFDF&quot;^?&quot;mWritePacketsFDF&quot;^?&quot;mGetPropertyInfoFDF&quot;^?&quot;mGetPropertyFDF&quot;^?&quot;mSetPropertyFDF&quot;^?&quot;mCountUserDataFDF&quot;^?&quot;mGetUserDataSizeFDF&quot;^?&quot;mGetUserDataFDF&quot;^?&quot;mSetUserDataFDF&quot;^?}'>
<field name='mComponentStorage' declared_type='void*' type='^v'/>
<field name='mReadBytesFDF' function_pointer='true' declared_type='ReadBytesFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean' type='B'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mWriteBytesFDF' function_pointer='true' declared_type='WriteBytesFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean' type='B'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mReadPacketsFDF' function_pointer='true' declared_type='ReadPacketsFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean' type='B'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mWritePacketsFDF' function_pointer='true' declared_type='WritePacketsFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean' type='B'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mGetPropertyInfoFDF' function_pointer='true' declared_type='GetPropertyInfoFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mGetPropertyFDF' function_pointer='true' declared_type='GetPropertyFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mSetPropertyFDF' function_pointer='true' declared_type='SetPropertyFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mCountUserDataFDF' function_pointer='true' declared_type='CountUserDataFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mGetUserDataSizeFDF' function_pointer='true' declared_type='GetUserDataSizeFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mGetUserDataFDF' function_pointer='true' declared_type='GetUserDataFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='mSetUserDataFDF' function_pointer='true' declared_type='SetUserDataFDF' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
</struct>
<struct name='AudioFileMarker' type='{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}'>
<field name='mFramePosition' declared_type='Float64' type='d'/>
<field name='mName' declared_type='CFStringRef' type='^{__CFString=}'/>
<field name='mMarkerID' declared_type='SInt32' type='l' type64='i'/>
<field name='mSMPTETime' declared_type='AudioFile_SMPTE_Time' type='{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}'/>
<field name='mType' declared_type='UInt32' type='L' type64='I'/>
<field name='mReserved' declared_type='UInt16' type='S'/>
<field name='mChannel' declared_type='UInt16' type='S'/>
</struct>
<struct name='AudioFileMarkerList' type='{AudioFileMarkerList=&quot;mSMPTE_TimeType&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}'>
<field name='mSMPTE_TimeType' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberMarkers' declared_type='UInt32' type='L' type64='I'/>
<field name='mMarkers' declared_type='AudioFileMarker*' type='[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]'/>
</struct>
<struct name='AudioFilePacketTableInfo' type='{AudioFilePacketTableInfo=&quot;mNumberValidFrames&quot;q&quot;mPrimingFrames&quot;i&quot;mRemainderFrames&quot;i}'>
<field name='mNumberValidFrames' declared_type='SInt64' type='q'/>
<field name='mPrimingFrames' declared_type='SInt32' type='l' type64='i'/>
<field name='mRemainderFrames' declared_type='SInt32' type='l' type64='i'/>
</struct>
<struct name='AudioFileRegion' type='{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}'>
<field name='mRegionID' declared_type='UInt32' type='L' type64='I'/>
<field name='mName' declared_type='CFStringRef' type='^{__CFString=}'/>
<field name='mFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberMarkers' declared_type='UInt32' type='L' type64='I'/>
<field name='mMarkers' declared_type='AudioFileMarker*' type='[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]'/>
</struct>
<struct name='AudioFileRegionList' type='{AudioFileRegionList=&quot;mSMPTE_TimeType&quot;I&quot;mNumberRegions&quot;I&quot;mRegions&quot;[1{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}]}'>
<field name='mSMPTE_TimeType' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberRegions' declared_type='UInt32' type='L' type64='I'/>
<field name='mRegions' declared_type='AudioFileRegion*' type='[1{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}]'/>
</struct>
<struct name='AudioFileTypeAndFormatID' type='{AudioFileTypeAndFormatID=&quot;mFileType&quot;I&quot;mFormatID&quot;I}'>
<field name='mFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<field name='mFormatID' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AudioFile_SMPTE_Time' type='{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}'>
<field name='mHours' declared_type='SInt8' type='c'/>
<field name='mMinutes' declared_type='UInt8' type='C'/>
<field name='mSeconds' declared_type='UInt8' type='C'/>
<field name='mFrames' declared_type='UInt8' type='C'/>
<field name='mSubFrameSampleOffset' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AudioFormatInfo' type='{AudioFormatInfo=&quot;mASBD&quot;{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}&quot;mMagicCookie&quot;^v&quot;mMagicCookieSize&quot;I}'>
<field name='mASBD' declared_type='AudioStreamBasicDescription' type='{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}'/>
<field name='mMagicCookie' declared_type='void*' type='^v' const='true'/>
<field name='mMagicCookieSize' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AudioFormatListItem' type='{AudioFormatListItem=&quot;mASBD&quot;{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}&quot;mChannelLayoutTag&quot;I}'>
<field name='mASBD' declared_type='AudioStreamBasicDescription' type='{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}'/>
<field name='mChannelLayoutTag' declared_type='AudioChannelLayoutTag' type='L' type64='I'/>
</struct>
<struct name='AudioFramePacketTranslation' type='{AudioFramePacketTranslation=&quot;mFrame&quot;q&quot;mPacket&quot;q&quot;mFrameOffsetInPacket&quot;I}'>
<field name='mFrame' declared_type='SInt64' type='q'/>
<field name='mPacket' declared_type='SInt64' type='q'/>
<field name='mFrameOffsetInPacket' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AudioPanningInfo' type='{AudioPanningInfo=&quot;mPanningMode&quot;I&quot;mCoordinateFlags&quot;I&quot;mCoordinates&quot;[3f]&quot;mGainScale&quot;f&quot;mOutputChannelMap&quot;^{AudioChannelLayout}}'>
<field name='mPanningMode' declared_type='UInt32' type='L' type64='I'/>
<field name='mCoordinateFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='mCoordinates' declared_type='Float32*' type='[3f]'/>
<field name='mGainScale' declared_type='Float32' type='f'/>
<field name='mOutputChannelMap' declared_type='AudioChannelLayout*' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}' const='true'/>
</struct>
<struct name='AudioQueueBuffer' type='{AudioQueueBuffer=&quot;mAudioDataBytesCapacity&quot;I&quot;mAudioData&quot;^v&quot;mAudioDataByteSize&quot;I&quot;mUserData&quot;^v}'>
<field name='mAudioDataBytesCapacity' declared_type='UInt32' type='L' type64='I' const='true'/>
<field name='mAudioData' declared_type='void*' type='^v' const='true'/>
<field name='mAudioDataByteSize' declared_type='UInt32' type='L' type64='I'/>
<field name='mUserData' declared_type='void*' type='^v'/>
</struct>
<struct name='AudioQueueLevelMeterState' type='{AudioQueueLevelMeterState=&quot;mAveragePower&quot;f&quot;mPeakPower&quot;f}'>
<field name='mAveragePower' declared_type='Float32' type='f'/>
<field name='mPeakPower' declared_type='Float32' type='f'/>
</struct>
<struct name='AudioQueueParameterEvent' type='{AudioQueueParameterEvent=&quot;mID&quot;I&quot;mValue&quot;f}'>
<field name='mID' declared_type='AudioQueueParameterID' type='L' type64='I'/>
<field name='mValue' declared_type='AudioQueueParameterValue' type='f'/>
</struct>
<struct name='AudioUnitEvent' type='{AudioUnitEvent=&quot;mEventType&quot;I&quot;mArgument&quot;(?=&quot;mParameter&quot;{AudioUnitParameter=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mParameterID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I}&quot;mProperty&quot;{AudioUnitProperty=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mPropertyID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I})}'>
<field name='mEventType' declared_type='AudioUnitEventType' type='L' type64='I'/>
<field name='mArgument' declared_type='union AudioUnitEvent::' type='(?=&quot;mParameter&quot;{AudioUnitParameter=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mParameterID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I}&quot;mProperty&quot;{AudioUnitProperty=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mPropertyID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I})'/>
</struct>
<struct name='AudioUnitNodeConnection' type='{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}'>
<field name='sourceNode' declared_type='AUNode' type='l' type64='i'/>
<field name='sourceOutputNumber' declared_type='UInt32' type='L' type64='I'/>
<field name='destNode' declared_type='AUNode' type='l' type64='i'/>
<field name='destInputNumber' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CABarBeatTime' type='{CABarBeatTime=&quot;bar&quot;i&quot;beat&quot;S&quot;subbeat&quot;S&quot;subbeatDivisor&quot;S&quot;reserved&quot;S}'>
<field name='bar' declared_type='SInt32' type='l' type64='i'/>
<field name='beat' declared_type='UInt16' type='S'/>
<field name='subbeat' declared_type='UInt16' type='S'/>
<field name='subbeatDivisor' declared_type='UInt16' type='S'/>
<field name='reserved' declared_type='UInt16' type='S'/>
</struct>
<struct name='CAClockTime' type='{CAClockTime=&quot;format&quot;I&quot;reserved&quot;I&quot;time&quot;(?=&quot;hostTime&quot;Q&quot;samples&quot;d&quot;beats&quot;d&quot;seconds&quot;d&quot;smpte&quot;{SMPTETime=&quot;mSubframes&quot;s&quot;mSubframeDivisor&quot;s&quot;mCounter&quot;I&quot;mType&quot;I&quot;mFlags&quot;I&quot;mHours&quot;s&quot;mMinutes&quot;s&quot;mSeconds&quot;s&quot;mFrames&quot;s})}'>
<field name='format' declared_type='CAClockTimeFormat' type='L' type64='I'/>
<field name='reserved' declared_type='UInt32' type='L' type64='I'/>
<field name='time' declared_type='union CAClockTime::' type='(?=&quot;hostTime&quot;Q&quot;samples&quot;d&quot;beats&quot;d&quot;seconds&quot;d&quot;smpte&quot;{SMPTETime=&quot;mSubframes&quot;s&quot;mSubframeDivisor&quot;s&quot;mCounter&quot;I&quot;mType&quot;I&quot;mFlags&quot;I&quot;mHours&quot;s&quot;mMinutes&quot;s&quot;mSeconds&quot;s&quot;mFrames&quot;s})'/>
</struct>
<struct name='CAFAudioDescription' type='{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}'>
<field name='mSampleRate' declared_type='Float64' type='d'/>
<field name='mFormatID' declared_type='UInt32' type='L' type64='I'/>
<field name='mFormatFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='mBytesPerPacket' declared_type='UInt32' type='L' type64='I'/>
<field name='mFramesPerPacket' declared_type='UInt32' type='L' type64='I'/>
<field name='mChannelsPerFrame' declared_type='UInt32' type='L' type64='I'/>
<field name='mBitsPerChannel' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAFAudioFormatListItem' type='{CAFAudioFormatListItem=&quot;mFormat&quot;{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}&quot;mChannelLayoutTag&quot;I}'>
<field name='mFormat' declared_type='CAFAudioDescription' type='{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}'/>
<field name='mChannelLayoutTag' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAFChunkHeader' type='{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}'>
<field name='mChunkType' declared_type='UInt32' type='L' type64='I'/>
<field name='mChunkSize' declared_type='SInt64' type='q'/>
</struct>
<struct name='CAFDataChunk' type='{CAFDataChunk=&quot;mEditCount&quot;I&quot;mData&quot;[1C]}'>
<field name='mEditCount' declared_type='UInt32' type='L' type64='I'/>
<field name='mData' declared_type='UInt8*' type='[1C]'/>
</struct>
<struct name='CAFFileHeader' type='{CAFFileHeader=&quot;mFileType&quot;I&quot;mFileVersion&quot;S&quot;mFileFlags&quot;S}'>
<field name='mFileType' declared_type='UInt32' type='L' type64='I'/>
<field name='mFileVersion' declared_type='UInt16' type='S'/>
<field name='mFileFlags' declared_type='UInt16' type='S'/>
</struct>
<struct name='CAFInfoStrings' type='{CAFInfoStrings=&quot;mNumEntries&quot;I}'>
<field name='mNumEntries' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAFInstrumentChunk' type='{CAFInstrumentChunk=&quot;mBaseNote&quot;f&quot;mMIDILowNote&quot;C&quot;mMIDIHighNote&quot;C&quot;mMIDILowVelocity&quot;C&quot;mMIDIHighVelocity&quot;C&quot;mdBGain&quot;f&quot;mStartRegionID&quot;I&quot;mSustainRegionID&quot;I&quot;mReleaseRegionID&quot;I&quot;mInstrumentID&quot;I}'>
<field name='mBaseNote' declared_type='Float32' type='f'/>
<field name='mMIDILowNote' declared_type='UInt8' type='C'/>
<field name='mMIDIHighNote' declared_type='UInt8' type='C'/>
<field name='mMIDILowVelocity' declared_type='UInt8' type='C'/>
<field name='mMIDIHighVelocity' declared_type='UInt8' type='C'/>
<field name='mdBGain' declared_type='Float32' type='f'/>
<field name='mStartRegionID' declared_type='UInt32' type='L' type64='I'/>
<field name='mSustainRegionID' declared_type='UInt32' type='L' type64='I'/>
<field name='mReleaseRegionID' declared_type='UInt32' type='L' type64='I'/>
<field name='mInstrumentID' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAFMarker' type='{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}'>
<field name='mType' declared_type='UInt32' type='L' type64='I'/>
<field name='mFramePosition' declared_type='Float64' type='d'/>
<field name='mMarkerID' declared_type='UInt32' type='L' type64='I'/>
<field name='mSMPTETime' declared_type='CAF_SMPTE_Time' type='{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}'/>
<field name='mChannel' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAFMarkerChunk' type='{CAFMarkerChunk=&quot;mSMPTE_TimeType&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}'>
<field name='mSMPTE_TimeType' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberMarkers' declared_type='UInt32' type='L' type64='I'/>
<field name='mMarkers' declared_type='CAFMarker*' type='[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]'/>
</struct>
<struct name='CAFOverviewChunk' type='{CAFOverviewChunk=&quot;mEditCount&quot;I&quot;mNumFramesPerOVWSample&quot;I&quot;mData&quot;[1{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}]}'>
<field name='mEditCount' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumFramesPerOVWSample' declared_type='UInt32' type='L' type64='I'/>
<field name='mData' declared_type='CAFOverviewSample*' type='[1{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}]'/>
</struct>
<struct name='CAFOverviewSample' type='{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}'>
<field name='mMinValue' declared_type='SInt16' type='s'/>
<field name='mMaxValue' declared_type='SInt16' type='s'/>
</struct>
<struct name='CAFPacketTableHeader' type='{CAFPacketTableHeader=&quot;mNumberPackets&quot;q&quot;mNumberValidFrames&quot;q&quot;mPrimingFrames&quot;i&quot;mRemainderFrames&quot;i&quot;mPacketDescriptions&quot;[1C]}'>
<field name='mNumberPackets' declared_type='SInt64' type='q'/>
<field name='mNumberValidFrames' declared_type='SInt64' type='q'/>
<field name='mPrimingFrames' declared_type='SInt32' type='l' type64='i'/>
<field name='mRemainderFrames' declared_type='SInt32' type='l' type64='i'/>
<field name='mPacketDescriptions' declared_type='UInt8*' type='[1C]'/>
</struct>
<struct name='CAFPeakChunk' type='{CAFPeakChunk=&quot;mEditCount&quot;I&quot;mPeaks&quot;[1{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}]}'>
<field name='mEditCount' declared_type='UInt32' type='L' type64='I'/>
<field name='mPeaks' declared_type='CAFPositionPeak*' type='[1{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}]'/>
</struct>
<struct name='CAFPositionPeak' type='{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}'>
<field name='mValue' declared_type='Float32' type='f'/>
<field name='mFrameNumber' declared_type='UInt64' type='Q'/>
</struct>
<struct name='CAFRegion' type='{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}'>
<field name='mRegionID' declared_type='UInt32' type='L' type64='I'/>
<field name='mFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberMarkers' declared_type='UInt32' type='L' type64='I'/>
<field name='mMarkers' declared_type='CAFMarker*' type='[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]'/>
</struct>
<struct name='CAFRegionChunk' type='{CAFRegionChunk=&quot;mSMPTE_TimeType&quot;I&quot;mNumberRegions&quot;I&quot;mRegions&quot;[1{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}]}'>
<field name='mSMPTE_TimeType' declared_type='UInt32' type='L' type64='I'/>
<field name='mNumberRegions' declared_type='UInt32' type='L' type64='I'/>
<field name='mRegions' declared_type='CAFRegion*' type='[1{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}]'/>
</struct>
<struct name='CAFStringID' type='{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}'>
<field name='mStringID' declared_type='UInt32' type='L' type64='I'/>
<field name='mStringStartByteOffset' declared_type='SInt64' type='q'/>
</struct>
<struct name='CAFStrings' type='{CAFStrings=&quot;mNumEntries&quot;I&quot;mStringsIDs&quot;[1{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}]}'>
<field name='mNumEntries' declared_type='UInt32' type='L' type64='I'/>
<field name='mStringsIDs' declared_type='CAFStringID*' type='[1{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}]'/>
</struct>
<struct name='CAFUMIDChunk' type='{CAFUMIDChunk=&quot;mBytes&quot;[64C]}'>
<field name='mBytes' declared_type='UInt8*' type='[64C]'/>
</struct>
<struct name='CAF_SMPTE_Time' type='{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}'>
<field name='mHours' declared_type='SInt8' type='c'/>
<field name='mMinutes' declared_type='SInt8' type='c'/>
<field name='mSeconds' declared_type='SInt8' type='c'/>
<field name='mFrames' declared_type='SInt8' type='c'/>
<field name='mSubFrameSampleOffset' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='CAF_UUID_ChunkHeader' type='{CAF_UUID_ChunkHeader=&quot;mHeader&quot;{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}&quot;mUUID&quot;[16C]}'>
<field name='mHeader' declared_type='CAFChunkHeader' type='{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}'/>
<field name='mUUID' declared_type='UInt8*' type='[16C]'/>
</struct>
<struct name='CAMeterTrackEntry' type='{CAMeterTrackEntry=&quot;beats&quot;d&quot;meterNumer&quot;S&quot;meterDenom&quot;S}'>
<field name='beats' declared_type='CAClockBeats' type='d'/>
<field name='meterNumer' declared_type='UInt16' type='S'/>
<field name='meterDenom' declared_type='UInt16' type='S'/>
</struct>
<struct name='CATempoMapEntry' type='{CATempoMapEntry=&quot;beats&quot;d&quot;tempoBPM&quot;d}'>
<field name='beats' declared_type='CAClockBeats' type='d'/>
<field name='tempoBPM' declared_type='CAClockTempo' type='d'/>
</struct>
<struct name='ExtendedControlEvent' type='{ExtendedControlEvent=&quot;groupID&quot;I&quot;controlID&quot;I&quot;value&quot;f}'>
<field name='groupID' declared_type='MusicDeviceGroupID' type='L' type64='I'/>
<field name='controlID' declared_type='AudioUnitParameterID' type='L' type64='I'/>
<field name='value' declared_type='AudioUnitParameterValue' type='f'/>
</struct>
<struct name='ExtendedNoteOnEvent' type='{ExtendedNoteOnEvent=&quot;instrumentID&quot;I&quot;groupID&quot;I&quot;duration&quot;f&quot;extendedParams&quot;{MusicDeviceNoteParams=&quot;argCount&quot;I&quot;mPitch&quot;f&quot;mVelocity&quot;f&quot;mControls&quot;[1{NoteParamsControlValue=&quot;mID&quot;I&quot;mValue&quot;f}]}}'>
<field name='instrumentID' declared_type='MusicDeviceInstrumentID' type='L' type64='I'/>
<field name='groupID' declared_type='MusicDeviceGroupID' type='L' type64='I'/>
<field name='duration' declared_type='Float32' type='f'/>
<field name='extendedParams' declared_type='MusicDeviceNoteParams' type='{MusicDeviceNoteParams=&quot;argCount&quot;I&quot;mPitch&quot;f&quot;mVelocity&quot;f&quot;mControls&quot;[1{NoteParamsControlValue=&quot;mID&quot;I&quot;mValue&quot;f}]}'/>
</struct>
<struct name='ExtendedTempoEvent' type='{ExtendedTempoEvent=&quot;bpm&quot;d}'>
<field name='bpm' declared_type='Float64' type='d'/>
</struct>
<struct name='MIDIChannelMessage' type='{MIDIChannelMessage=&quot;status&quot;C&quot;data1&quot;C&quot;data2&quot;C&quot;reserved&quot;C}'>
<field name='status' declared_type='UInt8' type='C'/>
<field name='data1' declared_type='UInt8' type='C'/>
<field name='data2' declared_type='UInt8' type='C'/>
<field name='reserved' declared_type='UInt8' type='C'/>
</struct>
<struct name='MIDIMetaEvent' type='{MIDIMetaEvent=&quot;metaEventType&quot;C&quot;unused1&quot;C&quot;unused2&quot;C&quot;unused3&quot;C&quot;dataLength&quot;I&quot;data&quot;[1C]}'>
<field name='metaEventType' declared_type='UInt8' type='C'/>
<field name='unused1' declared_type='UInt8' type='C'/>
<field name='unused2' declared_type='UInt8' type='C'/>
<field name='unused3' declared_type='UInt8' type='C'/>
<field name='dataLength' declared_type='UInt32' type='L' type64='I'/>
<field name='data' declared_type='UInt8*' type='[1C]'/>
</struct>
<struct name='MIDINoteMessage' type='{MIDINoteMessage=&quot;channel&quot;C&quot;note&quot;C&quot;velocity&quot;C&quot;releaseVelocity&quot;C&quot;duration&quot;f}'>
<field name='channel' declared_type='UInt8' type='C'/>
<field name='note' declared_type='UInt8' type='C'/>
<field name='velocity' declared_type='UInt8' type='C'/>
<field name='releaseVelocity' declared_type='UInt8' type='C'/>
<field name='duration' declared_type='Float32' type='f'/>
</struct>
<struct name='MIDIRawData' type='{MIDIRawData=&quot;length&quot;I&quot;data&quot;[1C]}'>
<field name='length' declared_type='UInt32' type='L' type64='I'/>
<field name='data' declared_type='UInt8*' type='[1C]'/>
</struct>
<struct name='MusicEventUserData' type='{MusicEventUserData=&quot;length&quot;I&quot;data&quot;[1C]}'>
<field name='length' declared_type='UInt32' type='L' type64='I'/>
<field name='data' declared_type='UInt8*' type='[1C]'/>
</struct>
<struct name='MusicTrackLoopInfo' type='{MusicTrackLoopInfo=&quot;loopDuration&quot;d&quot;numberOfLoops&quot;i}'>
<field name='loopDuration' declared_type='MusicTimeStamp' type='d'/>
<field name='numberOfLoops' declared_type='SInt32' type='l' type64='i'/>
</struct>
<struct name='ParameterEvent' type='{ParameterEvent=&quot;parameterID&quot;I&quot;scope&quot;I&quot;element&quot;I&quot;value&quot;f}'>
<field name='parameterID' declared_type='AudioUnitParameterID' type='L' type64='I'/>
<field name='scope' declared_type='AudioUnitScope' type='L' type64='I'/>
<field name='element' declared_type='AudioUnitElement' type='L' type64='I'/>
<field name='value' declared_type='AudioUnitParameterValue' type='f'/>
</struct>
<cftype name='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<cftype name='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<cftype name='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<cftype name='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<cftype name='AudioQueueTimelineRef' type='^{OpaqueAudioQueueTimeline=}'/>
<cftype name='CAClockRef' type='^{OpaqueCAClock=}'/>
<cftype name='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<opaque name='AUGraph' type='^{OpaqueAUGraph=}'/>
<opaque name='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<opaque name='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<opaque name='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<opaque name='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<opaque name='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<opaque name='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<string_constant name='kAFInfoDictionary_Album' value='album'/>
<string_constant name='kAFInfoDictionary_ApproximateDurationInSeconds' value='approximate duration in seconds'/>
<string_constant name='kAFInfoDictionary_Artist' value='artist'/>
<string_constant name='kAFInfoDictionary_ChannelLayout' value='channel layout'/>
<string_constant name='kAFInfoDictionary_Comments' value='comments'/>
<string_constant name='kAFInfoDictionary_Composer' value='composer'/>
<string_constant name='kAFInfoDictionary_Copyright' value='copyright'/>
<string_constant name='kAFInfoDictionary_EncodingApplication' value='encoding application'/>
<string_constant name='kAFInfoDictionary_Genre' value='genre'/>
<string_constant name='kAFInfoDictionary_KeySignature' value='key signature'/>
<string_constant name='kAFInfoDictionary_Lyricist' value='lyricist'/>
<string_constant name='kAFInfoDictionary_NominalBitRate' value='nominal bit rate'/>
<string_constant name='kAFInfoDictionary_RecordedDate' value='recorded date'/>
<string_constant name='kAFInfoDictionary_SourceEncoder' value='source encoder'/>
<string_constant name='kAFInfoDictionary_Tempo' value='tempo'/>
<string_constant name='kAFInfoDictionary_TimeSignature' value='time signature'/>
<string_constant name='kAFInfoDictionary_Title' value='title'/>
<string_constant name='kAFInfoDictionary_TrackNumber' value='track number'/>
<string_constant name='kAFInfoDictionary_Year' value='year'/>
<enum name='kAUGraphErr_CannotDoInCurrentContext' value='-10863'/>
<enum name='kAUGraphErr_InvalidAudioUnit' value='-10864'/>
<enum name='kAUGraphErr_InvalidConnection' value='-10861'/>
<enum name='kAUGraphErr_NodeNotFound' value='-10860'/>
<enum name='kAUGraphErr_OutputNodeErr' value='-10862'/>
<enum name='kAUNodeInteraction_Connection' value='1'/>
<enum name='kAUNodeInteraction_InputCallback' value='2'/>
<enum name='kAUParameterListener_AnyParameter' value='4294967295'/>
<enum name='kAudioBalanceFadeType_EqualPower' value='1'/>
<enum name='kAudioBalanceFadeType_MaxUnityGain' value='0'/>
<enum name='kAudioConverterApplicableEncodeBitRates' value='1634034290'/>
<enum name='kAudioConverterApplicableEncodeSampleRates' value='1634038642'/>
<enum name='kAudioConverterAvailableEncodeBitRates' value='1986355826'/>
<enum name='kAudioConverterAvailableEncodeChannelLayoutTags' value='1634034540'/>
<enum name='kAudioConverterAvailableEncodeSampleRates' value='1986360178'/>
<enum name='kAudioConverterChannelMap' value='1667788144'/>
<enum name='kAudioConverterCodecQuality' value='1667527029'/>
<enum name='kAudioConverterCompressionMagicCookie' value='1668114275'/>
<enum name='kAudioConverterCurrentInputStreamDescription' value='1633904996'/>
<enum name='kAudioConverterCurrentOutputStreamDescription' value='1633906532'/>
<enum name='kAudioConverterDecompressionMagicCookie' value='1684891491'/>
<enum name='kAudioConverterEncodeAdjustableSampleRate' value='1634366322'/>
<enum name='kAudioConverterEncodeBitRate' value='1651663220'/>
<enum name='kAudioConverterErr_BadPropertySizeError' value='561211770'/>
<enum name='kAudioConverterErr_FormatNotSupported' value='1718449215'/>
<enum name='kAudioConverterErr_InputSampleRateOutOfRange' value='560558962'/>
<enum name='kAudioConverterErr_InvalidInputSize' value='1768846202'/>
<enum name='kAudioConverterErr_InvalidOutputSize' value='1869902714'/>
<enum name='kAudioConverterErr_OperationNotSupported' value='1869627199'/>
<enum name='kAudioConverterErr_OutputSampleRateOutOfRange' value='560952178'/>
<enum name='kAudioConverterErr_PropertyNotSupported' value='1886547824'/>
<enum name='kAudioConverterErr_RequiresPacketDescriptionsError' value='561015652'/>
<enum name='kAudioConverterErr_UnspecifiedError' value='2003329396'/>
<enum name='kAudioConverterInputChannelLayout' value='1768123424'/>
<enum name='kAudioConverterOutputChannelLayout' value='1868786720'/>
<enum name='kAudioConverterPrimeInfo' value='1886546285'/>
<enum name='kAudioConverterPrimeMethod' value='1886547309'/>
<enum name='kAudioConverterPropertyBitDepthHint' value='1633903204'/>
<enum name='kAudioConverterPropertyCalculateInputBufferSize' value='1667850867'/>
<enum name='kAudioConverterPropertyCalculateOutputBufferSize' value='1668244083'/>
<enum name='kAudioConverterPropertyFormatList' value='1718383476'/>
<enum name='kAudioConverterPropertyInputCodecParameters' value='1768121456'/>
<enum name='kAudioConverterPropertyMaximumInputBufferSize' value='2020172403'/>
<enum name='kAudioConverterPropertyMaximumInputPacketSize' value='2020175987'/>
<enum name='kAudioConverterPropertyMaximumOutputPacketSize' value='2020569203'/>
<enum name='kAudioConverterPropertyMinimumInputBufferSize' value='1835623027'/>
<enum name='kAudioConverterPropertyMinimumOutputBufferSize' value='1836016243'/>
<enum name='kAudioConverterPropertyOutputCodecParameters' value='1868784752'/>
<enum name='kAudioConverterPropertySettings' value='1633906803'/>
<enum name='kAudioConverterQuality_High' value='96'/>
<enum name='kAudioConverterQuality_Low' value='32'/>
<enum name='kAudioConverterQuality_Max' value='127'/>
<enum name='kAudioConverterQuality_Medium' value='64'/>
<enum name='kAudioConverterQuality_Min' value='0'/>
<enum name='kAudioConverterSampleRateConverterAlgorithm' value='1936876393'/>
<enum name='kAudioConverterSampleRateConverterComplexity' value='1936876385'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Linear' value='1818848869'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Mastering' value='1650553971'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Normal' value='1852797549'/>
<enum name='kAudioConverterSampleRateConverterInitialPhase' value='1936876400'/>
<enum name='kAudioConverterSampleRateConverterQuality' value='1936876401'/>
<enum name='kAudioFile3GP2Type' value='862416946'/>
<enum name='kAudioFile3GPType' value='862417008'/>
<enum name='kAudioFileAAC_ADTSType' value='1633973363'/>
<enum name='kAudioFileAC3Type' value='1633889587'/>
<enum name='kAudioFileAIFCType' value='1095321155'/>
<enum name='kAudioFileAIFFType' value='1095321158'/>
<enum name='kAudioFileAMRType' value='1634562662'/>
<enum name='kAudioFileBadPropertySizeError' value='561211770'/>
<enum name='kAudioFileCAFType' value='1667327590'/>
<enum name='kAudioFileCloseSelect' value='6'/>
<enum name='kAudioFileComponent_AvailableFormatIDs' value='1718446436'/>
<enum name='kAudioFileComponent_AvailableStreamDescriptionsForFormat' value='1935960420'/>
<enum name='kAudioFileComponent_CanRead' value='1668182628'/>
<enum name='kAudioFileComponent_CanWrite' value='1668183922'/>
<enum name='kAudioFileComponent_ExtensionsForType' value='1717926004'/>
<enum name='kAudioFileComponent_FastDispatchTable' value='1717855860'/>
<enum name='kAudioFileComponent_FileTypeName' value='1718906477'/>
<enum name='kAudioFileComponent_HFSTypeCodesForType' value='1718118003'/>
<enum name='kAudioFileCountUserDataSelect' value='20'/>
<enum name='kAudioFileCreateSelect' value='1'/>
<enum name='kAudioFileCreateURLSelect' value='25'/>
<enum name='kAudioFileDataIsThisFormatSelect' value='17'/>
<enum name='kAudioFileDoesNotAllow64BitDataSizeError' value='1868981823'/>
<enum name='kAudioFileExtensionIsThisFormatSelect' value='15'/>
<enum name='kAudioFileFileDataIsThisFormatSelect' value='27'/>
<enum name='kAudioFileFileIsThisFormatSelect' value='16'/>
<enum name='kAudioFileFlags_DontPageAlignAudioData' value='2'/>
<enum name='kAudioFileFlags_EraseFile' value='1'/>
<enum name='kAudioFileGetGlobalInfoSelect' value='19'/>
<enum name='kAudioFileGetGlobalInfoSizeSelect' value='18'/>
<enum name='kAudioFileGetPropertyInfoSelect' value='12'/>
<enum name='kAudioFileGetPropertySelect' value='13'/>
<enum name='kAudioFileGetUserDataSelect' value='22'/>
<enum name='kAudioFileGetUserDataSizeSelect' value='21'/>
<enum name='kAudioFileGlobalInfo_AllExtensions' value='1634498676'/>
<enum name='kAudioFileGlobalInfo_AllHFSTypeCodes' value='1634231923'/>
<enum name='kAudioFileGlobalInfo_AllMIMETypes' value='1634560365'/>
<enum name='kAudioFileGlobalInfo_AllUTIs' value='1635087465'/>
<enum name='kAudioFileGlobalInfo_AvailableFormatIDs' value='1718446436'/>
<enum name='kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat' value='1935960420'/>
<enum name='kAudioFileGlobalInfo_ExtensionsForType' value='1717926004'/>
<enum name='kAudioFileGlobalInfo_FileTypeName' value='1718906477'/>
<enum name='kAudioFileGlobalInfo_HFSTypeCodesForType' value='1718118003'/>
<enum name='kAudioFileGlobalInfo_MIMETypesForType' value='1718446445'/>
<enum name='kAudioFileGlobalInfo_ReadableTypes' value='1634103910'/>
<enum name='kAudioFileGlobalInfo_TypesForExtension' value='1952807028'/>
<enum name='kAudioFileGlobalInfo_TypesForHFSTypeCode' value='1952999027'/>
<enum name='kAudioFileGlobalInfo_TypesForMIMEType' value='1953327469'/>
<enum name='kAudioFileGlobalInfo_TypesForUTI' value='1953854569'/>
<enum name='kAudioFileGlobalInfo_UTIsForType' value='1718973545'/>
<enum name='kAudioFileGlobalInfo_WritableTypes' value='1634105190'/>
<enum name='kAudioFileInitializeSelect' value='3'/>
<enum name='kAudioFileInitializeWithCallbacksSelect' value='5'/>
<enum name='kAudioFileInvalidChunkError' value='1667787583'/>
<enum name='kAudioFileInvalidFileError' value='1685348671'/>
<enum name='kAudioFileInvalidPacketOffsetError' value='1885563711'/>
<enum name='kAudioFileLoopDirection_Backward' value='3'/>
<enum name='kAudioFileLoopDirection_Forward' value='1'/>
<enum name='kAudioFileLoopDirection_ForwardAndBackward' value='2'/>
<enum name='kAudioFileLoopDirection_NoLooping' value='0'/>
<enum name='kAudioFileM4AType' value='1832149350'/>
<enum name='kAudioFileMP1Type' value='1297106737'/>
<enum name='kAudioFileMP2Type' value='1297106738'/>
<enum name='kAudioFileMP3Type' value='1297106739'/>
<enum name='kAudioFileMPEG4Type' value='1836069990'/>
<enum name='kAudioFileMarkerType_Generic' value='0'/>
<enum name='kAudioFileNextType' value='1315264596'/>
<enum name='kAudioFileNotOptimizedError' value='1869640813'/>
<enum name='kAudioFileOpenSelect' value='2'/>
<enum name='kAudioFileOpenURLSelect' value='26'/>
<enum name='kAudioFileOpenWithCallbacksSelect' value='4'/>
<enum name='kAudioFileOperationNotSupportedError' value='1869627199'/>
<enum name='kAudioFileOptimizeSelect' value='7'/>
<enum name='kAudioFilePermissionsError' value='1886547263'/>
<enum name='kAudioFilePropertyAudioDataByteCount' value='1650683508'/>
<enum name='kAudioFilePropertyAudioDataPacketCount' value='1885564532'/>
<enum name='kAudioFilePropertyBitRate' value='1651663220'/>
<enum name='kAudioFilePropertyChannelLayout' value='1668112752'/>
<enum name='kAudioFilePropertyChunkIDs' value='1667787108'/>
<enum name='kAudioFilePropertyDataFormat' value='1684434292'/>
<enum name='kAudioFilePropertyDataFormatName' value='1718512997'/>
<enum name='kAudioFilePropertyDataOffset' value='1685022310'/>
<enum name='kAudioFilePropertyDeferSizeUpdates' value='1685289589'/>
<enum name='kAudioFilePropertyEstimatedDuration' value='1701082482'/>
<enum name='kAudioFilePropertyFileFormat' value='1717988724'/>
<enum name='kAudioFilePropertyFormatList' value='1718383476'/>
<enum name='kAudioFilePropertyFrameToPacket' value='1718775915'/>
<enum name='kAudioFilePropertyInfoDictionary' value='1768842863'/>
<enum name='kAudioFilePropertyIsOptimized' value='1869640813'/>
<enum name='kAudioFilePropertyMagicCookieData' value='1835493731'/>
<enum name='kAudioFilePropertyMarkerList' value='1835756659'/>
<enum name='kAudioFilePropertyMaximumPacketSize' value='1886616165'/>
<enum name='kAudioFilePropertyPacketSizeUpperBound' value='1886090594'/>
<enum name='kAudioFilePropertyPacketTableInfo' value='1886283375'/>
<enum name='kAudioFilePropertyPacketToFrame' value='1886086770'/>
<enum name='kAudioFilePropertyRegionList' value='1919380595'/>
<enum name='kAudioFilePropertyReserveDuration' value='1920168566'/>
<enum name='kAudioFileReadBytesSelect' value='8'/>
<enum name='kAudioFileReadPacketsSelect' value='10'/>
<enum name='kAudioFileRegionFlag_LoopEnable' value='1'/>
<enum name='kAudioFileRegionFlag_PlayBackward' value='4'/>
<enum name='kAudioFileRegionFlag_PlayForward' value='2'/>
<enum name='kAudioFileRemoveUserDataSelect' value='24'/>
<enum name='kAudioFileSetPropertySelect' value='14'/>
<enum name='kAudioFileSetUserDataSelect' value='23'/>
<enum name='kAudioFileSoundDesigner2Type' value='1399075430'/>
<enum name='kAudioFileStreamError_BadPropertySize' value='561211770'/>
<enum name='kAudioFileStreamError_DataUnavailable' value='1836020325'/>
<enum name='kAudioFileStreamError_DiscontinuityCantRecover' value='1685283617'/>
<enum name='kAudioFileStreamError_IllegalOperation' value='1852797029'/>
<enum name='kAudioFileStreamError_InvalidFile' value='1685348671'/>
<enum name='kAudioFileStreamError_InvalidPacketOffset' value='1885563711'/>
<enum name='kAudioFileStreamError_NotOptimized' value='1869640813'/>
<enum name='kAudioFileStreamError_UnspecifiedError' value='2003334207'/>
<enum name='kAudioFileStreamError_UnsupportedDataFormat' value='1718449215'/>
<enum name='kAudioFileStreamError_UnsupportedFileType' value='1954115647'/>
<enum name='kAudioFileStreamError_UnsupportedProperty' value='1886681407'/>
<enum name='kAudioFileStreamError_ValueUnknown' value='1970170687'/>
<enum name='kAudioFileStreamParseFlag_Discontinuity' value='1'/>
<enum name='kAudioFileStreamPropertyFlag_CacheProperty' value='2'/>
<enum name='kAudioFileStreamPropertyFlag_PropertyIsCached' value='1'/>
<enum name='kAudioFileStreamProperty_AudioDataByteCount' value='1650683508'/>
<enum name='kAudioFileStreamProperty_AudioDataPacketCount' value='1885564532'/>
<enum name='kAudioFileStreamProperty_BitRate' value='1651663220'/>
<enum name='kAudioFileStreamProperty_ChannelLayout' value='1668112752'/>
<enum name='kAudioFileStreamProperty_DataFormat' value='1684434292'/>
<enum name='kAudioFileStreamProperty_DataOffset' value='1685022310'/>
<enum name='kAudioFileStreamProperty_FileFormat' value='1717988724'/>
<enum name='kAudioFileStreamProperty_FormatList' value='1718383476'/>
<enum name='kAudioFileStreamProperty_FrameToPacket' value='1718775915'/>
<enum name='kAudioFileStreamProperty_MagicCookieData' value='1835493731'/>
<enum name='kAudioFileStreamProperty_MaximumPacketSize' value='1886616165'/>
<enum name='kAudioFileStreamProperty_PacketSizeUpperBound' value='1886090594'/>
<enum name='kAudioFileStreamProperty_PacketTableInfo' value='1886283375'/>
<enum name='kAudioFileStreamProperty_PacketToFrame' value='1886086770'/>
<enum name='kAudioFileStreamProperty_ReadyToProducePackets' value='1919247481'/>
<enum name='kAudioFileStreamSeekFlag_OffsetIsEstimated' value='1'/>
<enum name='kAudioFileUnspecifiedError' value='2003334207'/>
<enum name='kAudioFileUnsupportedDataFormatError' value='1718449215'/>
<enum name='kAudioFileUnsupportedFileTypeError' value='1954115647'/>
<enum name='kAudioFileUnsupportedPropertyError' value='1886681407'/>
<enum name='kAudioFileWAVEType' value='1463899717'/>
<enum name='kAudioFileWriteBytesSelect' value='9'/>
<enum name='kAudioFileWritePacketsSelect' value='11'/>
<enum name='kAudioFormatBadPropertySizeError' value='561211770'/>
<enum name='kAudioFormatBadSpecifierSizeError' value='561213539'/>
<enum name='kAudioFormatProperty_ASBDFromESDS' value='1702064996'/>
<enum name='kAudioFormatProperty_ASBDFromMPEGPacket' value='1633971568'/>
<enum name='kAudioFormatProperty_AvailableEncodeBitRates' value='1634034290'/>
<enum name='kAudioFormatProperty_AvailableEncodeChannelLayoutTags' value='1634034540'/>
<enum name='kAudioFormatProperty_AvailableEncodeNumberChannels' value='1635151459'/>
<enum name='kAudioFormatProperty_AvailableEncodeSampleRates' value='1634038642'/>
<enum name='kAudioFormatProperty_BalanceFade' value='1650551910'/>
<enum name='kAudioFormatProperty_BitmapForLayoutTag' value='1651340391'/>
<enum name='kAudioFormatProperty_ChannelLayoutForBitmap' value='1668116578'/>
<enum name='kAudioFormatProperty_ChannelLayoutForTag' value='1668116588'/>
<enum name='kAudioFormatProperty_ChannelLayoutFromESDS' value='1702060908'/>
<enum name='kAudioFormatProperty_ChannelLayoutName' value='1819242093'/>
<enum name='kAudioFormatProperty_ChannelMap' value='1667788144'/>
<enum name='kAudioFormatProperty_ChannelName' value='1668178285'/>
<enum name='kAudioFormatProperty_ChannelShortName' value='1668509293'/>
<enum name='kAudioFormatProperty_DecodeFormatIDs' value='1633904998'/>
<enum name='kAudioFormatProperty_Decoders' value='1635148901'/>
<enum name='kAudioFormatProperty_EncodeFormatIDs' value='1633906534'/>
<enum name='kAudioFormatProperty_Encoders' value='1635149166'/>
<enum name='kAudioFormatProperty_FormatInfo' value='1718449257'/>
<enum name='kAudioFormatProperty_FormatIsExternallyFramed' value='1717925990'/>
<enum name='kAudioFormatProperty_FormatIsVBR' value='1719034482'/>
<enum name='kAudioFormatProperty_FormatList' value='1718383476'/>
<enum name='kAudioFormatProperty_FormatName' value='1718509933'/>
<enum name='kAudioFormatProperty_MatrixMixMap' value='1835884912'/>
<enum name='kAudioFormatProperty_NumberOfChannelsForLayout' value='1852008557'/>
<enum name='kAudioFormatProperty_OutputFormatList' value='1868983411'/>
<enum name='kAudioFormatProperty_PanningMatrix' value='1885433453'/>
<enum name='kAudioFormatProperty_TagForChannelLayout' value='1668116596'/>
<enum name='kAudioFormatProperty_TagsForNumberOfChannels' value='1952540515'/>
<enum name='kAudioFormatUnknownFormatError' value='560360820'/>
<enum name='kAudioFormatUnspecifiedError' value='2003329396'/>
<enum name='kAudioFormatUnsupportedDataFormatError' value='1718449215'/>
<enum name='kAudioFormatUnsupportedPropertyError' value='1886547824'/>
<enum name='kAudioHardwareServiceDeviceProperty_VirtualMasterBalance' value='1986880099'/>
<enum name='kAudioHardwareServiceDeviceProperty_VirtualMasterVolume' value='1986885219'/>
<enum name='kAudioHardwareServiceProperty_ServiceRestarted' value='1936880500'/>
<enum name='kAudioQueueDeviceProperty_NumberChannels' value='1634821219'/>
<enum name='kAudioQueueDeviceProperty_SampleRate' value='1634825074'/>
<enum name='kAudioQueueErr_BufferEmpty' value='-66686'/>
<enum name='kAudioQueueErr_BufferInQueue' value='-66679'/>
<enum name='kAudioQueueErr_CannotStart' value='-66681'/>
<enum name='kAudioQueueErr_DisposalPending' value='-66685'/>
<enum name='kAudioQueueErr_InvalidBuffer' value='-66687'/>
<enum name='kAudioQueueErr_InvalidDevice' value='-66680'/>
<enum name='kAudioQueueErr_InvalidParameter' value='-66682'/>
<enum name='kAudioQueueErr_InvalidProperty' value='-66684'/>
<enum name='kAudioQueueErr_InvalidPropertySize' value='-66683'/>
<enum name='kAudioQueueErr_InvalidQueueType' value='-66677'/>
<enum name='kAudioQueueErr_InvalidRunState' value='-66678'/>
<enum name='kAudioQueueParam_Volume' value='1'/>
<enum name='kAudioQueueProperty_ChannelLayout' value='1634820972'/>
<enum name='kAudioQueueProperty_CurrentDevice' value='1634820964'/>
<enum name='kAudioQueueProperty_CurrentLevelMeter' value='1634823542'/>
<enum name='kAudioQueueProperty_CurrentLevelMeterDB' value='1634823524'/>
<enum name='kAudioQueueProperty_EnableLevelMetering' value='1634823525'/>
<enum name='kAudioQueueProperty_IsRunning' value='1634824814'/>
<enum name='kAudioQueueProperty_MagicCookie' value='1634823523'/>
<enum name='kAudioServicesBadPropertySizeError' value='561211770'/>
<enum name='kAudioServicesBadSpecifierSizeError' value='561213539'/>
<enum name='kAudioServicesNoError' value='0'/>
<enum name='kAudioServicesPropertyCompletePlaybackIfAppDies' value='1768318057'/>
<enum name='kAudioServicesPropertyIsUISound' value='1769174377'/>
<enum name='kAudioServicesSystemSoundClientTimedOutError' value='-1501'/>
<enum name='kAudioServicesSystemSoundUnspecifiedError' value='-1500'/>
<enum name='kAudioServicesUnsupportedPropertyError' value='1886681407'/>
<enum name='kAudioToolboxErr_CannotDoInCurrentContext' value='-10863'/>
<enum name='kAudioToolboxErr_EndOfTrack' value='-10857'/>
<enum name='kAudioToolboxErr_IllegalTrackDestination' value='-10855'/>
<enum name='kAudioToolboxErr_InvalidEventType' value='-10853'/>
<enum name='kAudioToolboxErr_InvalidPlayerState' value='-10852'/>
<enum name='kAudioToolboxErr_InvalidSequenceType' value='-10846'/>
<enum name='kAudioToolboxErr_NoSequence' value='-10854'/>
<enum name='kAudioToolboxErr_StartOfTrack' value='-10856'/>
<enum name='kAudioToolboxErr_TrackIndexError' value='-10859'/>
<enum name='kAudioToolboxErr_TrackNotFound' value='-10858'/>
<enum name='kAudioUnitEvent_BeginParameterChangeGesture' value='1'/>
<enum name='kAudioUnitEvent_EndParameterChangeGesture' value='2'/>
<enum name='kAudioUnitEvent_ParameterValueChange' value='0'/>
<enum name='kAudioUnitEvent_PropertyChange' value='3'/>
<enum name='kCAClockMessage_Armed' value='1634889060'/>
<enum name='kCAClockMessage_Disarmed' value='1684107885'/>
<enum name='kCAClockMessage_PropertyChanged' value='1885562983'/>
<enum name='kCAClockMessage_StartTimeSet' value='1937009005'/>
<enum name='kCAClockMessage_Started' value='1937011316'/>
<enum name='kCAClockMessage_Stopped' value='1937010544'/>
<enum name='kCAClockMessage_WrongSMPTEFormat' value='1064529264'/>
<enum name='kCAClockProperty_InternalTimebase' value='1768846434'/>
<enum name='kCAClockProperty_MIDIClockDestinations' value='1835164516'/>
<enum name='kCAClockProperty_MTCDestinations' value='1836344164'/>
<enum name='kCAClockProperty_MTCFreewheelTime' value='1836344951'/>
<enum name='kCAClockProperty_MeterTrack' value='1835365490'/>
<enum name='kCAClockProperty_Name' value='1851878757'/>
<enum name='kCAClockProperty_SMPTEFormat' value='1936552038'/>
<enum name='kCAClockProperty_SMPTEOffset' value='1936552047'/>
<enum name='kCAClockProperty_SyncMode' value='1937337965'/>
<enum name='kCAClockProperty_SyncSource' value='1937337971'/>
<enum name='kCAClockProperty_TempoMap' value='1953329263'/>
<enum name='kCAClockProperty_TimebaseSource' value='1769235059'/>
<enum name='kCAClockSyncMode_Internal' value='1768846450'/>
<enum name='kCAClockSyncMode_MIDIClockTransport' value='1835232363'/>
<enum name='kCAClockSyncMode_MTCTransport' value='1835889763'/>
<enum name='kCAClockTimeFormat_Beats' value='1650811252'/>
<enum name='kCAClockTimeFormat_HostTime' value='1752134516'/>
<enum name='kCAClockTimeFormat_SMPTESeconds' value='1936552051'/>
<enum name='kCAClockTimeFormat_SMPTETime' value='1936552052'/>
<enum name='kCAClockTimeFormat_Samples' value='1935764848'/>
<enum name='kCAClockTimeFormat_Seconds' value='1936024435'/>
<enum name='kCAClockTimebase_AudioDevice' value='1635083369'/>
<enum name='kCAClockTimebase_AudioOutputUnit' value='1635086197'/>
<enum name='kCAClockTimebase_HostTime' value='1752134516'/>
<enum name='kCAClock_CannotSetTimeError' value='-66805'/>
<enum name='kCAClock_InvalidPlayRateError' value='-66806'/>
<enum name='kCAClock_InvalidPropertySizeError' value='-66815'/>
<enum name='kCAClock_InvalidSMPTEFormatError' value='-66809'/>
<enum name='kCAClock_InvalidSMPTEOffsetError' value='-66808'/>
<enum name='kCAClock_InvalidSyncModeError' value='-66813'/>
<enum name='kCAClock_InvalidSyncSourceError' value='-66812'/>
<enum name='kCAClock_InvalidTimeFormatError' value='-66814'/>
<enum name='kCAClock_InvalidTimebaseError' value='-66811'/>
<enum name='kCAClock_InvalidTimebaseSourceError' value='-66810'/>
<enum name='kCAClock_InvalidUnitError' value='-66807'/>
<enum name='kCAClock_UnknownPropertyError' value='-66816'/>
<enum name='kCAFLinearPCMFormatFlagIsFloat' value='1'/>
<enum name='kCAFLinearPCMFormatFlagIsLittleEndian' value='2'/>
<enum name='kCAFMarkerChunkHdrSize' value='8'/>
<enum name='kCAFMarkerType_EditDestinationBegin' value='1684170087'/>
<enum name='kCAFMarkerType_EditDestinationEnd' value='1684368996'/>
<enum name='kCAFMarkerType_EditSourceBegin' value='1667392871'/>
<enum name='kCAFMarkerType_EditSourceEnd' value='1667591780'/>
<enum name='kCAFMarkerType_Generic' value='0'/>
<enum name='kCAFMarkerType_Index' value='1768842360'/>
<enum name='kCAFMarkerType_ProgramEnd' value='1885695588'/>
<enum name='kCAFMarkerType_ProgramStart' value='1885496679'/>
<enum name='kCAFMarkerType_RegionEnd' value='1919250020'/>
<enum name='kCAFMarkerType_RegionStart' value='1919051111'/>
<enum name='kCAFMarkerType_RegionSyncPoint' value='1920170339'/>
<enum name='kCAFMarkerType_ReleaseLoopEnd' value='1919706478'/>
<enum name='kCAFMarkerType_ReleaseLoopStart' value='1919705703'/>
<enum name='kCAFMarkerType_SavedPlayPosition' value='1936747641'/>
<enum name='kCAFMarkerType_SelectionEnd' value='1936027236'/>
<enum name='kCAFMarkerType_SelectionStart' value='1935828327'/>
<enum name='kCAFMarkerType_SustainLoopEnd' value='1936483694'/>
<enum name='kCAFMarkerType_SustainLoopStart' value='1936482919'/>
<enum name='kCAFMarkerType_TrackEnd' value='1952804452'/>
<enum name='kCAFMarkerType_TrackStart' value='1952605543'/>
<enum name='kCAFRegionChunkHdrSize' value='8'/>
<enum name='kCAFRegionFlag_LoopEnable' value='1'/>
<enum name='kCAFRegionFlag_PlayBackward' value='4'/>
<enum name='kCAFRegionFlag_PlayForward' value='2'/>
<enum name='kCAF_AudioDataChunkID' value='1684108385'/>
<enum name='kCAF_ChannelLayoutChunkID' value='1667785070'/>
<enum name='kCAF_EditCommentsChunkID' value='1701077876'/>
<enum name='kCAF_FileType' value='1667327590'/>
<enum name='kCAF_FileVersion_Initial' value='1'/>
<enum name='kCAF_FillerChunkID' value='1718773093'/>
<enum name='kCAF_FormatListID' value='1818522467'/>
<enum name='kCAF_InfoStringsChunkID' value='1768842863'/>
<enum name='kCAF_InstrumentChunkID' value='1768846196'/>
<enum name='kCAF_MIDIChunkID' value='1835623529'/>
<enum name='kCAF_MagicCookieID' value='1802857321'/>
<enum name='kCAF_MarkerChunkID' value='1835102827'/>
<enum name='kCAF_OverviewChunkID' value='1870034551'/>
<enum name='kCAF_PacketTableChunkID' value='1885432692'/>
<enum name='kCAF_PeakChunkID' value='1885692267'/>
<enum name='kCAF_RegionChunkID' value='1919248238'/>
<enum name='kCAF_SMPTE_TimeType2398' value='12'/>
<enum name='kCAF_SMPTE_TimeType24' value='1'/>
<enum name='kCAF_SMPTE_TimeType25' value='2'/>
<enum name='kCAF_SMPTE_TimeType2997' value='5'/>
<enum name='kCAF_SMPTE_TimeType2997Drop' value='6'/>
<enum name='kCAF_SMPTE_TimeType30' value='4'/>
<enum name='kCAF_SMPTE_TimeType30Drop' value='3'/>
<enum name='kCAF_SMPTE_TimeType50' value='11'/>
<enum name='kCAF_SMPTE_TimeType5994' value='8'/>
<enum name='kCAF_SMPTE_TimeType5994Drop' value='10'/>
<enum name='kCAF_SMPTE_TimeType60' value='7'/>
<enum name='kCAF_SMPTE_TimeType60Drop' value='9'/>
<enum name='kCAF_SMPTE_TimeTypeNone' value='0'/>
<enum name='kCAF_StreamDescriptionChunkID' value='1684370275'/>
<enum name='kCAF_StringsChunkID' value='1937011303'/>
<enum name='kCAF_UMIDChunkID' value='1970104676'/>
<enum name='kCAF_UUIDChunkID' value='1970628964'/>
<enum name='kConverterPrimeMethod_None' value='2'/>
<enum name='kConverterPrimeMethod_Normal' value='1'/>
<enum name='kConverterPrimeMethod_Pre' value='0'/>
<enum name='kExtAudioFileError_AsyncWriteBufferOverflow' value='-66570'/>
<enum name='kExtAudioFileError_AsyncWriteTooLarge' value='-66569'/>
<enum name='kExtAudioFileError_InvalidChannelMap' value='-66564'/>
<enum name='kExtAudioFileError_InvalidDataFormat' value='-66566'/>
<enum name='kExtAudioFileError_InvalidOperationOrder' value='-66565'/>
<enum name='kExtAudioFileError_InvalidProperty' value='-66561'/>
<enum name='kExtAudioFileError_InvalidPropertySize' value='-66562'/>
<enum name='kExtAudioFileError_InvalidSeek' value='-66568'/>
<enum name='kExtAudioFileError_MaxPacketSizeUnknown' value='-66567'/>
<enum name='kExtAudioFileError_NonPCMClientFormat' value='-66563'/>
<enum name='kExtAudioFileProperty_AudioConverter' value='1633906294'/>
<enum name='kExtAudioFileProperty_AudioFile' value='1634101612'/>
<enum name='kExtAudioFileProperty_ClientChannelLayout' value='1667460207'/>
<enum name='kExtAudioFileProperty_ClientDataFormat' value='1667657076'/>
<enum name='kExtAudioFileProperty_ClientMaxPacketSize' value='1668116595'/>
<enum name='kExtAudioFileProperty_ConverterConfig' value='1633903462'/>
<enum name='kExtAudioFileProperty_FileChannelLayout' value='1717791855'/>
<enum name='kExtAudioFileProperty_FileDataFormat' value='1717988724'/>
<enum name='kExtAudioFileProperty_FileLengthFrames' value='593916525'/>
<enum name='kExtAudioFileProperty_FileMaxPacketSize' value='1718448243'/>
<enum name='kExtAudioFileProperty_IOBuffer' value='1768907366'/>
<enum name='kExtAudioFileProperty_IOBufferSizeBytes' value='1768907379'/>
<enum name='kMusicEventType_AUPreset' value='10'/>
<enum name='kMusicEventType_ExtendedControl' value='2'/>
<enum name='kMusicEventType_ExtendedNote' value='1'/>
<enum name='kMusicEventType_ExtendedTempo' value='3'/>
<enum name='kMusicEventType_Last' value='11'/>
<enum name='kMusicEventType_MIDIChannelMessage' value='7'/>
<enum name='kMusicEventType_MIDINoteMessage' value='6'/>
<enum name='kMusicEventType_MIDIRawData' value='8'/>
<enum name='kMusicEventType_Meta' value='5'/>
<enum name='kMusicEventType_NULL' value='0'/>
<enum name='kMusicEventType_Parameter' value='9'/>
<enum name='kMusicEventType_User' value='4'/>
<enum name='kMusicSequenceFileFlags_EraseFile' value='1'/>
<enum name='kMusicSequenceFile_MIDIType' value='1835623529'/>
<enum name='kMusicSequenceFile_iMelodyType' value='1768777068'/>
<enum name='kMusicSequenceLoadSMF_ChannelsToTracks' value='1'/>
<enum name='kMusicSequenceType_Beats' value='1650811252'/>
<enum name='kMusicSequenceType_Samples' value='1935764848'/>
<enum name='kMusicSequenceType_Seconds' value='1936024435'/>
<enum name='kMusicTimeStamp_EndOfTrack' value='1.797693134862316E+308'/>
<enum name='kPanningMode_SoundField' value='3'/>
<enum name='kPanningMode_VectorBasedPanning' value='4'/>
<enum name='kSequenceTrackProperty_AutomatedParameters' value='4'/>
<enum name='kSequenceTrackProperty_LoopInfo' value='0'/>
<enum name='kSequenceTrackProperty_MuteStatus' value='2'/>
<enum name='kSequenceTrackProperty_OffsetTime' value='1'/>
<enum name='kSequenceTrackProperty_SoloStatus' value='3'/>
<enum name='kSequenceTrackProperty_TimeResolution' value='6'/>
<enum name='kSequenceTrackProperty_TrackLength' value='5'/>
<enum name='kUserPreferredAlert' value='4096'/>
<function name='AUEventListenerAddEventType'>
<arg name='inListener' declared_type='AUEventListenerRef' type='^{AUListenerBase=}'/>
<arg name='inObject' declared_type='void*' type='^v'/>
<arg name='inEvent' declared_type='AudioUnitEvent*' type='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUEventListenerCreate'>
<arg name='inProc' function_pointer='true' declared_type='AUEventListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioUnitEvent*' type='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}' const='true'/>
<arg declared_type='UInt64' type='Q'/>
<arg declared_type='AudioUnitParameterValue' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inCallbackRefCon' declared_type='void*' type='^v'/>
<arg name='inRunLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='inRunLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inNotificationInterval' declared_type='Float32' type='f'/>
<arg name='inValueChangeGranularity' declared_type='Float32' type='f'/>
<arg name='outListener' declared_type='AUEventListenerRef*' type='^^{AUListenerBase}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUEventListenerNotify'>
<arg name='inSendingListener' declared_type='AUEventListenerRef' type='^{AUListenerBase=}'/>
<arg name='inSendingObject' declared_type='void*' type='^v'/>
<arg name='inEvent' declared_type='AudioUnitEvent*' type='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUEventListenerRemoveEventType'>
<arg name='inListener' declared_type='AUEventListenerRef' type='^{AUListenerBase=}'/>
<arg name='inObject' declared_type='void*' type='^v'/>
<arg name='inEvent' declared_type='AudioUnitEvent*' type='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphAddNode'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inDescription' declared_type='ComponentDescription*' type='^{ComponentDescription=IIIII}' const='true'/>
<arg name='outNode' declared_type='AUNode*' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphAddRenderNotify'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inCallback' function_pointer='true' declared_type='AURenderCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioUnitRenderActionFlags*' type='^I'/>
<arg declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inRefCon' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphClearConnections'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphClose'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphConnectNodeInput'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inSourceNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='inSourceOutputNumber' declared_type='UInt32' type='L' type64='I'/>
<arg name='inDestNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='inDestInputNumber' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphCountNodeConnections'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outNumConnections' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphCountNodeInteractions'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outNumInteractions' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphDisconnectNodeInput'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inDestNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='inDestInputNumber' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetCPULoad'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outAverageCPULoad' declared_type='Float32*' type='^f'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetConnectionInfo'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inConnectionIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outSourceNode' declared_type='AUNode*' type='^i'/>
<arg name='outSourceOutputNumber' declared_type='UInt32*' type='^I'/>
<arg name='outDestNode' declared_type='AUNode*' type='^i'/>
<arg name='outDestInputNumber' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetIndNode'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNode' declared_type='AUNode*' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetInteractionInfo'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inInteractionIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outInteraction' declared_type='AUNodeInteraction*' type='^{AUNodeInteraction=I(?={AudioUnitNodeConnection=iIiI}{AUNodeRenderCallback=iI{AURenderCallbackStruct=^?^v}})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetMaxCPULoad'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outMaxLoad' declared_type='Float32*' type='^f'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNodeConnections'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outConnections' declared_type='AudioUnitNodeConnection*' type='^{AudioUnitNodeConnection=iIiI}'/>
<arg name='ioNumConnections' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNodeCount'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outNumberOfNodes' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNodeInfo'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outDescription' declared_type='ComponentDescription*' type='^{ComponentDescription=IIIII}'/>
<arg name='outClassDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outClassData' declared_type='void**' type='^^v'/>
<arg name='outAudioUnit' declared_type='AudioUnit*' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNodeInfoSubGraph'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}' const='true'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outSubGraph' declared_type='AUGraph*' type='^^{OpaqueAUGraph}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNodeInteractions'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='ioNumInteractions' declared_type='UInt32*' type='^I'/>
<arg name='outInteractions' declared_type='AUNodeInteraction*' type='^{AUNodeInteraction=I(?={AudioUnitNodeConnection=iIiI}{AUNodeRenderCallback=iI{AURenderCallbackStruct=^?^v}})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNumberOfConnections'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outNumConnections' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphGetNumberOfInteractions'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outNumInteractions' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphInitialize'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphIsInitialized'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outIsInitialized' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphIsNodeSubGraph'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}' const='true'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outFlag' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphIsOpen'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outIsOpen' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphIsRunning'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outIsRunning' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphNewNode'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inDescription' declared_type='ComponentDescription*' type='^{ComponentDescription=IIIII}' const='true'/>
<arg name='inClassDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inClassData' declared_type='void*' type='^v' const='true'/>
<arg name='outNode' declared_type='AUNode*' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphNewNodeSubGraph'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outNode' declared_type='AUNode*' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphNodeInfo'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='outDescription' declared_type='ComponentDescription*' type='^{ComponentDescription=IIIII}'/>
<arg name='outAudioUnit' declared_type='AudioUnit*' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphOpen'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphRemoveNode'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphRemoveRenderNotify'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inCallback' function_pointer='true' declared_type='AURenderCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioUnitRenderActionFlags*' type='^I'/>
<arg declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inRefCon' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphSetNodeInputCallback'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='inDestNode' declared_type='AUNode' type='l' type64='i'/>
<arg name='inDestInputNumber' declared_type='UInt32' type='L' type64='I'/>
<arg name='inInputCallback' declared_type='AURenderCallbackStruct*' type='^{AURenderCallbackStruct=^?^v}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphStart'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphStop'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphUninitialize'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUGraphUpdate'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<arg name='outIsUpdated' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUListenerAddParameter'>
<arg name='inListener' declared_type='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<arg name='inObject' declared_type='void*' type='^v'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUListenerCreate'>
<arg name='inProc' function_pointer='true' declared_type='AUParameterListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<arg declared_type='AudioUnitParameterValue' type='f'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inRefCon' declared_type='void*' type='^v'/>
<arg name='inRunLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='inRunLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inNotificationInterval' declared_type='Float32' type='f'/>
<arg name='outListener' declared_type='AUParameterListenerRef*' type='^^{AUListenerBase}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUListenerDispose'>
<arg name='inListener' declared_type='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUListenerRemoveParameter'>
<arg name='inListener' declared_type='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<arg name='inObject' declared_type='void*' type='^v'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUParameterFormatValue'>
<arg name='inParameterValue' declared_type='Float64' type='d'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<arg name='inTextBuffer' declared_type='char*' type='*'/>
<arg name='inDigits' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='AUParameterListenerNotify'>
<arg name='inSendingListener' declared_type='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<arg name='inSendingObject' declared_type='void*' type='^v'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUParameterSet'>
<arg name='inSendingListener' declared_type='AUParameterListenerRef' type='^{AUListenerBase=}'/>
<arg name='inSendingObject' declared_type='void*' type='^v'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<arg name='inValue' declared_type='AudioUnitParameterValue' type='f'/>
<arg name='inBufferOffsetInFrames' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AUParameterValueFromLinear'>
<arg name='inLinearValue' declared_type='Float32' type='f'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<retval declared_type='AudioUnitParameterValue' type='f'/>
</function>
<function name='AUParameterValueToLinear'>
<arg name='inParameterValue' declared_type='AudioUnitParameterValue' type='f'/>
<arg name='inParameter' declared_type='AudioUnitParameter*' type='^{AudioUnitParameter=^{ComponentInstanceRecord}III}' const='true'/>
<retval declared_type='Float32' type='f'/>
</function>
<function name='AudioConverterConvertBuffer'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inInputDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inInputData' declared_type='void*' type='^v' const='true'/>
<arg name='ioOutputDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outOutputData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterDispose'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterFillBuffer'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inInputDataProc' function_pointer='true' declared_type='AudioConverterInputDataProc' type='^?'>
<arg declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inInputDataProcUserData' declared_type='void*' type='^v'/>
<arg name='ioOutputDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outOutputData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterFillComplexBuffer'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inInputDataProc' function_pointer='true' declared_type='AudioConverterComplexInputDataProc' type='^?'>
<arg declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type='AudioStreamPacketDescription**' type='^^{AudioStreamPacketDescription}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inInputDataProcUserData' declared_type='void*' type='^v'/>
<arg name='ioOutputDataPacketSize' declared_type='UInt32*' type='^I'/>
<arg name='outOutputData' declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg name='outPacketDescription' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterGetProperty'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inPropertyID' declared_type='AudioConverterPropertyID' type='L' type64='I'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterGetPropertyInfo'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inPropertyID' declared_type='AudioConverterPropertyID' type='L' type64='I'/>
<arg name='outSize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterNew'>
<arg name='inSourceFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inDestinationFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='outAudioConverter' declared_type='AudioConverterRef*' type='^^{OpaqueAudioConverter}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterNewSpecific'>
<arg name='inSourceFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inDestinationFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inNumberClassDescriptions' declared_type='UInt32' type='L' type64='I'/>
<arg name='inClassDescriptions' declared_type='AudioClassDescription*' type='^{AudioClassDescription=III}'/>
<arg name='outAudioConverter' declared_type='AudioConverterRef*' type='^^{OpaqueAudioConverter}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterReset'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioConverterSetProperty'>
<arg name='inAudioConverter' declared_type='AudioConverterRef' type='^{OpaqueAudioConverter=}'/>
<arg name='inPropertyID' declared_type='AudioConverterPropertyID' type='L' type64='I'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileClose'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileComponentCloseFile'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentCountUserData'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNumberItems' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentCreate'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inParentRef' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFileName' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNewFileRef' declared_type='FSRef*' type='^{FSRef=[80C]}'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentCreateURL'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileComponentDataIsThisFormat'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inReadFunc' function_pointer='true' declared_type='AudioFile_ReadProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inWriteFunc' function_pointer='true' declared_type='AudioFile_WriteProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inGetSizeFunc' function_pointer='true' declared_type='AudioFile_GetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='SInt64' type='q'/>
</arg>
<arg name='inSetSizeFunc' function_pointer='true' declared_type='AudioFile_SetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='outResult' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentExtensionIsThisFormat'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inExtension' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='outResult' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentFileDataIsThisFormat'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inDataByteSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inData' declared_type='void*' type='^v' const='true'/>
<arg name='outResult' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentFileIsThisFormat'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inFileRefNum' declared_type='SInt16' type='s'/>
<arg name='outResult' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetGlobalInfo'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inPropertyID' declared_type='AudioFileComponentPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetGlobalInfoSize'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inPropertyID' declared_type='AudioFileComponentPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='outPropertySize' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetProperty'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inPropertyID' declared_type='AudioFileComponentPropertyID' type='L' type64='I'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetPropertyInfo'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inPropertyID' declared_type='AudioFileComponentPropertyID' type='L' type64='I'/>
<arg name='outPropertySize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetUserData'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='ioUserDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outUserData' declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentGetUserDataSize'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outUserDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentInitialize'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inFileRef' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentInitializeWithCallbacks'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inReadFunc' function_pointer='true' declared_type='AudioFile_ReadProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inWriteFunc' function_pointer='true' declared_type='AudioFile_WriteProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inGetSizeFunc' function_pointer='true' declared_type='AudioFile_GetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='SInt64' type='q'/>
</arg>
<arg name='inSetSizeFunc' function_pointer='true' declared_type='AudioFile_SetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inFileType' declared_type='UInt32' type='L' type64='I'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentOpenFile'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inFileRef' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inPermissions' declared_type='SInt8' type='c'/>
<arg name='inRefNum' declared_type='SInt16' type='s'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentOpenURL'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inPermissions' declared_type='SInt8' type='c'/>
<arg name='inFileDescriptor' declared_type='int' type='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileComponentOpenWithCallbacks'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inReadFunc' function_pointer='true' declared_type='AudioFile_ReadProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inWriteFunc' function_pointer='true' declared_type='AudioFile_WriteProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inGetSizeFunc' function_pointer='true' declared_type='AudioFile_GetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='SInt64' type='q'/>
</arg>
<arg name='inSetSizeFunc' function_pointer='true' declared_type='AudioFile_SetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentOptimize'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentReadBytes'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inStartingByte' declared_type='SInt64' type='q'/>
<arg name='ioNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='outBuffer' declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentReadPackets'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='outNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='outPacketDescriptions' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<arg name='inStartingPacket' declared_type='SInt64' type='q'/>
<arg name='ioNumPackets' declared_type='UInt32*' type='^I'/>
<arg name='outBuffer' declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentRemoveUserData'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentSetProperty'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inPropertyID' declared_type='AudioFileComponentPropertyID' type='L' type64='I'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentSetUserData'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='inUserDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inUserData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentWriteBytes'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inStartingByte' declared_type='SInt64' type='q'/>
<arg name='ioNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='inBuffer' declared_type='void*' type='^v' const='true'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileComponentWritePackets'>
<arg name='inComponent' declared_type='AudioFileComponent' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inNumBytes' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPacketDescriptions' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<arg name='inStartingPacket' declared_type='SInt64' type='q'/>
<arg name='ioNumPackets' declared_type='UInt32*' type='^I'/>
<arg name='inBuffer' declared_type='void*' type='^v' const='true'/>
<retval declared_type='ComponentResult' type='l' type64='i'/>
</function>
<function name='AudioFileCountUserData'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNumberItems' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileCreate'>
<arg name='inParentRef' declared_type='struct FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFileName' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNewFileRef' declared_type='struct FSRef*' type='^{FSRef=[80C]}'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileCreateWithURL'>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetGlobalInfo'>
<arg name='inPropertyID' declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v'/>
<arg name='ioDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetGlobalInfoSize'>
<arg name='inPropertyID' declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v'/>
<arg name='outDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetProperty'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inPropertyID' declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg name='ioDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetPropertyInfo'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inPropertyID' declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg name='outDataSize' declared_type='UInt32*' type='^I'/>
<arg name='isWritable' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetUserData'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='ioUserDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outUserData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileGetUserDataSize'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outUserDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileInitialize'>
<arg name='inFileRef' declared_type='struct FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileInitializeWithCallbacks'>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inReadFunc' function_pointer='true' declared_type='AudioFile_ReadProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inWriteFunc' function_pointer='true' declared_type='AudioFile_WriteProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inGetSizeFunc' function_pointer='true' declared_type='AudioFile_GetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='SInt64' type='q'/>
</arg>
<arg name='inSetSizeFunc' function_pointer='true' declared_type='AudioFile_SetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileOpen'>
<arg name='inFileRef' declared_type='struct FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inPermissions' declared_type='SInt8' type='c'/>
<arg name='inFileTypeHint' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileOpenURL'>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inPermissions' declared_type='SInt8' type='c'/>
<arg name='inFileTypeHint' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileOpenWithCallbacks'>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inReadFunc' function_pointer='true' declared_type='AudioFile_ReadProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inWriteFunc' function_pointer='true' declared_type='AudioFile_WriteProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inGetSizeFunc' function_pointer='true' declared_type='AudioFile_GetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='SInt64' type='q'/>
</arg>
<arg name='inSetSizeFunc' function_pointer='true' declared_type='AudioFile_SetSizeProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inFileTypeHint' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='outAudioFile' declared_type='AudioFileID*' type='^^{OpaqueAudioFileID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileOptimize'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileReadBytes'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inStartingByte' declared_type='SInt64' type='q'/>
<arg name='ioNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='outBuffer' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileReadPackets'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='outNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='outPacketDescriptions' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<arg name='inStartingPacket' declared_type='SInt64' type='q'/>
<arg name='ioNumPackets' declared_type='UInt32*' type='^I'/>
<arg name='outBuffer' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileRemoveUserData'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileSetProperty'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inPropertyID' declared_type='AudioFilePropertyID' type='L' type64='I'/>
<arg name='inDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileSetUserData'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUserDataID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='inUserDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inUserData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamClose'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamGetProperty'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg name='inPropertyID' declared_type='AudioFileStreamPropertyID' type='L' type64='I'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamGetPropertyInfo'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg name='inPropertyID' declared_type='AudioFileStreamPropertyID' type='L' type64='I'/>
<arg name='outPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamOpen'>
<arg name='inClientData' declared_type='void*' type='^v'/>
<arg name='inPropertyListenerProc' function_pointer='true' declared_type='AudioFileStream_PropertyListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type='AudioFileStreamPropertyID' type='L' type64='I'/>
<arg declared_type='UInt32*' type='^I'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inPacketsProc' function_pointer='true' declared_type='AudioFileStream_PacketsProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inFileTypeHint' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='outAudioFileStream' declared_type='AudioFileStreamID*' type='^^{OpaqueAudioFileStreamID}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamParseBytes'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg name='inDataByteSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inData' declared_type='void*' type='^v' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamSeek'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg name='inAbsolutePacketOffset' declared_type='SInt64' type='q'/>
<arg name='outAbsoluteByteOffset' declared_type='SInt64*' type='^q'/>
<arg name='ioFlags' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileStreamSetProperty'>
<arg name='inAudioFileStream' declared_type='AudioFileStreamID' type='^{OpaqueAudioFileStreamID=}'/>
<arg name='inPropertyID' declared_type='AudioFileStreamPropertyID' type='L' type64='I'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileWriteBytes'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inStartingByte' declared_type='SInt64' type='q'/>
<arg name='ioNumBytes' declared_type='UInt32*' type='^I'/>
<arg name='inBuffer' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFileWritePackets'>
<arg name='inAudioFile' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inUseCache' declared_type='Boolean' type='B'/>
<arg name='inNumBytes' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPacketDescriptions' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<arg name='inStartingPacket' declared_type='SInt64' type='q'/>
<arg name='ioNumPackets' declared_type='UInt32*' type='^I'/>
<arg name='inBuffer' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFormatGetProperty'>
<arg name='inPropertyID' declared_type='AudioFormatPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioFormatGetPropertyInfo'>
<arg name='inPropertyID' declared_type='AudioFormatPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='outPropertyDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceAddPropertyListener'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='inListener' function_pointer='true' declared_type='AudioObjectPropertyListenerProc' type='^?'>
<arg declared_type='AudioObjectID' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inClientData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceGetPropertyData'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='inQualifierDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inQualifierData' declared_type='void*' type='^v' const='true'/>
<arg name='ioDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceGetPropertyDataSize'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='inQualifierDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inQualifierData' declared_type='void*' type='^v' const='true'/>
<arg name='outDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceHasProperty'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='AudioHardwareServiceIsPropertySettable'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='outIsSettable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceRemovePropertyListener'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='inListener' function_pointer='true' declared_type='AudioObjectPropertyListenerProc' type='^?'>
<arg declared_type='AudioObjectID' type='L' type64='I'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='inClientData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioHardwareServiceSetPropertyData'>
<arg name='inObjectID' declared_type='AudioObjectID' type='L' type64='I'/>
<arg name='inAddress' declared_type='AudioObjectPropertyAddress*' type='^{AudioObjectPropertyAddress=III}' const='true'/>
<arg name='inQualifierDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inQualifierData' declared_type='void*' type='^v' const='true'/>
<arg name='inDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueAddPropertyListener'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inID' declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<arg name='inProc' function_pointer='true' declared_type='AudioQueuePropertyListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueAllocateBuffer'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inBufferByteSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='outBuffer' declared_type='AudioQueueBufferRef*' type='^^{AudioQueueBuffer}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueCreateTimeline'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='outTimeline' declared_type='AudioQueueTimelineRef*' type='^^{OpaqueAudioQueueTimeline}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueDeviceGetCurrentTime'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='outTimeStamp' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueDeviceGetNearestStartTime'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='ioRequestedStartTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueDeviceTranslateTime'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg name='outTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueDispose'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inImmediate' declared_type='Boolean' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueDisposeTimeline'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inTimeline' declared_type='AudioQueueTimelineRef' type='^{OpaqueAudioQueueTimeline=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueEnqueueBuffer'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inBuffer' declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<arg name='inNumPacketDescs' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPacketDescs' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueEnqueueBufferWithParameters'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inBuffer' declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<arg name='inNumPacketDescs' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPacketDescs' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<arg name='inTrimFramesAtStart' declared_type='UInt32' type='L' type64='I'/>
<arg name='inTrimFramesAtEnd' declared_type='UInt32' type='L' type64='I'/>
<arg name='inNumParamValues' declared_type='UInt32' type='L' type64='I'/>
<arg name='inParamValues' declared_type='AudioQueueParameterEvent*' type='^{AudioQueueParameterEvent=If}' const='true'/>
<arg name='inStartTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg name='outActualStartTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueFlush'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueFreeBuffer'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inBuffer' declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueGetCurrentTime'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inTimeline' declared_type='AudioQueueTimelineRef' type='^{OpaqueAudioQueueTimeline=}'/>
<arg name='outTimeStamp' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg name='outTimelineDiscontinuity' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueGetParameter'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inParamID' declared_type='AudioQueueParameterID' type='L' type64='I'/>
<arg name='outValue' declared_type='AudioQueueParameterValue*' type='^f'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueGetProperty'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inID' declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<arg name='outData' declared_type='void*' type='^v'/>
<arg name='ioDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueGetPropertySize'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inID' declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<arg name='outDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueNewInput'>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inCallbackProc' function_pointer='true' declared_type='AudioQueueInputCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<arg declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<arg name='inCallbackRunLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='inCallbackRunLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outAQ' declared_type='AudioQueueRef*' type='^^{OpaqueAudioQueue}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueNewOutput'>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inCallbackProc' function_pointer='true' declared_type='AudioQueueOutputCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<arg name='inCallbackRunLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='inCallbackRunLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outAQ' declared_type='AudioQueueRef*' type='^^{OpaqueAudioQueue}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueOfflineRender'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inTimestamp' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<arg name='ioBuffer' declared_type='AudioQueueBufferRef' type='^{AudioQueueBuffer=I^vI^v}'/>
<arg name='inNumberFrames' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueuePause'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueuePrime'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inNumberOfFramesToPrepare' declared_type='UInt32' type='L' type64='I'/>
<arg name='outNumberOfFramesPrepared' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueRemovePropertyListener'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inID' declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<arg name='inProc' function_pointer='true' declared_type='AudioQueuePropertyListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueReset'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueSetOfflineRenderFormat'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inFormat' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inLayout' declared_type='AudioChannelLayout*' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueSetParameter'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inParamID' declared_type='AudioQueueParameterID' type='L' type64='I'/>
<arg name='inValue' declared_type='AudioQueueParameterValue' type='f'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueSetProperty'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inID' declared_type='AudioQueuePropertyID' type='L' type64='I'/>
<arg name='inData' declared_type='void*' type='^v' const='true'/>
<arg name='inDataSize' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueStart'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inStartTime' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioQueueStop'>
<arg name='inAQ' declared_type='AudioQueueRef' type='^{OpaqueAudioQueue=}'/>
<arg name='inImmediate' declared_type='Boolean' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesAddSystemSoundCompletion'>
<arg name='inSystemSoundID' declared_type='SystemSoundID' type='L' type64='I'/>
<arg name='inRunLoop' declared_type='CFRunLoopRef' type='^{__CFRunLoop=}'/>
<arg name='inRunLoopMode' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inCompletionRoutine' function_pointer='true' declared_type='AudioServicesSystemSoundCompletionProc' type='^?'>
<arg declared_type='SystemSoundID' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inClientData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesCreateSystemSoundID'>
<arg name='inFileURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outSystemSoundID' declared_type='SystemSoundID*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesDisposeSystemSoundID'>
<arg name='inSystemSoundID' declared_type='SystemSoundID' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesGetProperty'>
<arg name='inPropertyID' declared_type='AudioServicesPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesGetPropertyInfo'>
<arg name='inPropertyID' declared_type='AudioServicesPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='outPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AudioServicesPlayAlertSound'>
<arg name='inSystemSoundID' declared_type='SystemSoundID' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AudioServicesPlaySystemSound'>
<arg name='inSystemSoundID' declared_type='SystemSoundID' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AudioServicesRemoveSystemSoundCompletion'>
<arg name='inSystemSoundID' declared_type='SystemSoundID' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AudioServicesSetProperty'>
<arg name='inPropertyID' declared_type='AudioServicesPropertyID' type='L' type64='I'/>
<arg name='inSpecifierSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inSpecifier' declared_type='void*' type='^v' const='true'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockAddListener'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inListenerProc' function_pointer='true' declared_type='CAClockListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CAClockMessage' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockArm'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockBarBeatTimeToBeats'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inBarBeatTime' declared_type='CABarBeatTime*' type='^{CABarBeatTime=iSSSS}' const='true'/>
<arg name='outBeats' declared_type='CAClockBeats*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockBeatsToBarBeatTime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inBeats' declared_type='CAClockBeats' type='d'/>
<arg name='inSubbeatDivisor' declared_type='UInt16' type='S'/>
<arg name='outBarBeatTime' declared_type='CABarBeatTime*' type='^{CABarBeatTime=iSSSS}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockDisarm'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockDispose'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetCurrentTempo'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='outTempo' declared_type='CAClockTempo*' type='^d'/>
<arg name='outTimestamp' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetCurrentTime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inTimeFormat' declared_type='CAClockTimeFormat' type='L' type64='I'/>
<arg name='outTime' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetPlayRate'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='outPlayRate' declared_type='Float64*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetProperty'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inPropertyID' declared_type='CAClockPropertyID' type='L' type64='I'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetPropertyInfo'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inPropertyID' declared_type='CAClockPropertyID' type='L' type64='I'/>
<arg name='outSize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockGetStartTime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inTimeFormat' declared_type='CAClockTimeFormat' type='L' type64='I'/>
<arg name='outTime' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockNew'>
<arg name='inReservedFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outCAClock' declared_type='CAClockRef*' type='^^{OpaqueCAClock}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockParseMIDI'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inMIDIPacketList' declared_type='struct MIDIPacketList*' type='^{MIDIPacketList=I[1{MIDIPacket=QS[256C]}]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockRemoveListener'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inListenerProc' function_pointer='true' declared_type='CAClockListenerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CAClockMessage' type='L' type64='I'/>
<arg declared_type='void*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inUserData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSMPTETimeToSeconds'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inSMPTETime' declared_type='SMPTETime*' type='^{SMPTETime=ssIIIssss}' const='true'/>
<arg name='outSeconds' declared_type='CAClockSeconds*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSecondsToSMPTETime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inSeconds' declared_type='CAClockSeconds' type='d'/>
<arg name='inSubframeDivisor' declared_type='UInt16' type='S'/>
<arg name='outSMPTETime' declared_type='SMPTETime*' type='^{SMPTETime=ssIIIssss}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSetCurrentTempo'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inTempo' declared_type='CAClockTempo' type='d'/>
<arg name='inTimestamp' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSetCurrentTime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inTime' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSetPlayRate'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inPlayRate' declared_type='Float64' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockSetProperty'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inPropertyID' declared_type='CAClockPropertyID' type='L' type64='I'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockStart'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockStop'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAClockTranslateTime'>
<arg name='inCAClock' declared_type='CAClockRef' type='^{OpaqueCAClock=}'/>
<arg name='inTime' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}' const='true'/>
<arg name='inOutputTimeFormat' declared_type='CAClockTimeFormat' type='L' type64='I'/>
<arg name='outTime' declared_type='CAClockTime*' type='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CAShow'>
<arg name='inObject' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CAShowFile'>
<arg name='inObject' declared_type='void*' type='^v'/>
<arg name='inFile' declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CopyNameFromSoundBank'>
<arg name='inURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outName' declared_type='CFStringRef*' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='DisposeAUGraph'>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='DisposeMusicEventIterator'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='DisposeMusicPlayer'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='DisposeMusicSequence'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileCreateNew'>
<arg name='inParentDir' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFileName' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inStreamDesc' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inChannelLayout' declared_type='AudioChannelLayout*' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}' const='true'/>
<arg name='outExtAudioFile' declared_type='ExtAudioFileRef*' type='^^{OpaqueExtAudioFile}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileCreateWithURL'>
<arg name='inURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inFileType' declared_type='AudioFileTypeID' type='L' type64='I'/>
<arg name='inStreamDesc' declared_type='AudioStreamBasicDescription*' type='^{AudioStreamBasicDescription=dIIIIIIII}' const='true'/>
<arg name='inChannelLayout' declared_type='AudioChannelLayout*' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}' const='true'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<arg name='outExtAudioFile' declared_type='ExtAudioFileRef*' type='^^{OpaqueExtAudioFile}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileDispose'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileGetProperty'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inPropertyID' declared_type='ExtAudioFilePropertyID' type='L' type64='I'/>
<arg name='ioPropertyDataSize' declared_type='UInt32*' type='^I'/>
<arg name='outPropertyData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileGetPropertyInfo'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inPropertyID' declared_type='ExtAudioFilePropertyID' type='L' type64='I'/>
<arg name='outSize' declared_type='UInt32*' type='^I'/>
<arg name='outWritable' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileOpen'>
<arg name='inFSRef' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='outExtAudioFile' declared_type='ExtAudioFileRef*' type='^^{OpaqueExtAudioFile}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileOpenURL'>
<arg name='inURL' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='outExtAudioFile' declared_type='ExtAudioFileRef*' type='^^{OpaqueExtAudioFile}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileRead'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='ioNumberFrames' declared_type='UInt32*' type='^I'/>
<arg name='ioData' declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileSeek'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inFrameOffset' declared_type='SInt64' type='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileSetProperty'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inPropertyID' declared_type='ExtAudioFilePropertyID' type='L' type64='I'/>
<arg name='inPropertyDataSize' declared_type='UInt32' type='L' type64='I'/>
<arg name='inPropertyData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileTell'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='outFrameOffset' declared_type='SInt64*' type='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileWrapAudioFileID'>
<arg name='inFileID' declared_type='AudioFileID' type='^{OpaqueAudioFileID=}'/>
<arg name='inForWriting' declared_type='Boolean' type='B'/>
<arg name='outExtAudioFile' declared_type='ExtAudioFileRef*' type='^^{OpaqueExtAudioFile}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileWrite'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inNumberFrames' declared_type='UInt32' type='L' type64='I'/>
<arg name='ioData' declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ExtAudioFileWriteAsync'>
<arg name='inExtAudioFile' declared_type='ExtAudioFileRef' type='^{OpaqueExtAudioFile=}'/>
<arg name='inNumberFrames' declared_type='UInt32' type='L' type64='I'/>
<arg name='ioData' declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='GetNameFromSoundBank'>
<arg name='inSoundBankRef' declared_type='struct FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='outName' declared_type='CFStringRef*' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorDeleteEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorGetEventInfo'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='outTimeStamp' declared_type='MusicTimeStamp*' type='^d'/>
<arg name='outEventType' declared_type='MusicEventType*' type='^I'/>
<arg name='outEventData' declared_type='void**' type='^^v' const='true'/>
<arg name='outEventDataSize' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorHasCurrentEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='outHasCurEvent' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorHasNextEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='outHasNextEvent' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorHasPreviousEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='outHasPrevEvent' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorNextEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorPreviousEvent'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorSeek'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorSetEventInfo'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='inEventType' declared_type='MusicEventType' type='L' type64='I'/>
<arg name='inEventData' declared_type='void*' type='^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicEventIteratorSetEventTime'>
<arg name='inIterator' declared_type='MusicEventIterator' type='^{OpaqueMusicEventIterator=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerGetBeatsForHostTime'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='inHostTime' declared_type='UInt64' type='Q'/>
<arg name='outBeats' declared_type='MusicTimeStamp*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerGetHostTimeForBeats'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='inBeats' declared_type='MusicTimeStamp' type='d'/>
<arg name='outHostTime' declared_type='UInt64*' type='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerGetPlayRateScalar'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='outScaleRate' declared_type='Float64*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerGetSequence'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='outSequence' declared_type='MusicSequence*' type='^^{OpaqueMusicSequence}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerGetTime'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='outTime' declared_type='MusicTimeStamp*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerIsPlaying'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='outIsPlaying' declared_type='Boolean*' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerPreroll'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerSetPlayRateScalar'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='inScaleRate' declared_type='Float64' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerSetSequence'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerSetTime'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<arg name='inTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerStart'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicPlayerStop'>
<arg name='inPlayer' declared_type='MusicPlayer' type='^{OpaqueMusicPlayer=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceBarBeatTimeToBeats'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inBarBeatTime' declared_type='CABarBeatTime*' type='^{CABarBeatTime=iSSSS}' const='true'/>
<arg name='outBeats' declared_type='MusicTimeStamp*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceBeatsToBarBeatTime'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inBeats' declared_type='MusicTimeStamp' type='d'/>
<arg name='inSubbeatDivisor' declared_type='UInt32' type='L' type64='I'/>
<arg name='outBarBeatTime' declared_type='CABarBeatTime*' type='^{CABarBeatTime=iSSSS}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceDisposeTrack'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceFileCreate'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inFileType' declared_type='MusicSequenceFileTypeID' type='L' type64='I'/>
<arg name='inFlags' declared_type='MusicSequenceFileFlags' type='L' type64='I'/>
<arg name='inResolution' declared_type='SInt16' type='s'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceFileCreateData'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inFileType' declared_type='MusicSequenceFileTypeID' type='L' type64='I'/>
<arg name='inFlags' declared_type='MusicSequenceFileFlags' type='L' type64='I'/>
<arg name='inResolution' declared_type='SInt16' type='s'/>
<arg name='outData' declared_type='CFDataRef*' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceFileLoad'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inFileRef' declared_type='CFURLRef' type='^{__CFURL=}'/>
<arg name='inFileTypeHint' declared_type='MusicSequenceFileTypeID' type='L' type64='I'/>
<arg name='inFlags' declared_type='MusicSequenceLoadFlags' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceFileLoadData'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inData' declared_type='CFDataRef' type='^{__CFData=}'/>
<arg name='inFileTypeHint' declared_type='MusicSequenceFileTypeID' type='L' type64='I'/>
<arg name='inFlags' declared_type='MusicSequenceLoadFlags' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetAUGraph'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outGraph' declared_type='AUGraph*' type='^^{OpaqueAUGraph}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetBeatsForSeconds'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inSeconds' declared_type='Float64' type='d'/>
<arg name='outBeats' declared_type='MusicTimeStamp*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetIndTrack'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inTrackIndex' declared_type='UInt32' type='L' type64='I'/>
<arg name='outTrack' declared_type='MusicTrack*' type='^^{OpaqueMusicTrack}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetInfoDictionary'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='MusicSequenceGetSMPTEResolution' inline='true'>
<arg name='inRes' declared_type='SInt16' type='s'/>
<arg name='fps' declared_type='SignedByte*' type='*'/>
<arg name='ticks' declared_type='Byte*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MusicSequenceGetSecondsForBeats'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inBeats' declared_type='MusicTimeStamp' type='d'/>
<arg name='outSeconds' declared_type='Float64*' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetSequenceType'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outType' declared_type='MusicSequenceType*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetTempoTrack'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outTrack' declared_type='MusicTrack*' type='^^{OpaqueMusicTrack}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetTrackCount'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outNumberOfTracks' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceGetTrackIndex'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='outTrackIndex' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceLoadSMFDataWithFlags'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inData' declared_type='CFDataRef' type='^{__CFData=}'/>
<arg name='inFlags' declared_type='MusicSequenceLoadFlags' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceLoadSMFWithFlags'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inFileRef' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFlags' declared_type='MusicSequenceLoadFlags' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceNewTrack'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outTrack' declared_type='MusicTrack*' type='^^{OpaqueMusicTrack}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceReverse'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSaveMIDIFile'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inParentDirectory' declared_type='FSRef*' type='^{FSRef=[80C]}' const='true'/>
<arg name='inFileName' declared_type='CFStringRef' type='^{__CFString=}'/>
<arg name='inResolution' declared_type='UInt16' type='S'/>
<arg name='inFlags' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSaveSMFData'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='outData' declared_type='CFDataRef*' type='^^{__CFData}'/>
<arg name='inResolution' declared_type='UInt16' type='S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSetAUGraph'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inGraph' declared_type='AUGraph' type='^{OpaqueAUGraph=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSetMIDIEndpoint'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inEndpoint' declared_type='MIDIEndpointRef' type='^{OpaqueMIDIEndpoint=}' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSetSMPTEResolution' inline='true'>
<arg name='fps' declared_type='SignedByte' type='c'/>
<arg name='ticks' declared_type='Byte' type='C'/>
<retval declared_type='SInt16' type='s'/>
</function>
<function name='MusicSequenceSetSequenceType'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inType' declared_type='MusicSequenceType' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicSequenceSetUserCallback'>
<arg name='inSequence' declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg name='inCallback' function_pointer='true' declared_type='MusicSequenceUserCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MusicSequence' type='^{OpaqueMusicSequence=}'/>
<arg declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg declared_type='MusicTimeStamp' type='d'/>
<arg declared_type='MusicEventUserData*' type='^{MusicEventUserData=I[1C]}' const='true'/>
<arg declared_type='MusicTimeStamp' type='d'/>
<arg declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='void' type='v'/>
</arg>
<arg name='inClientData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackClear'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inEndTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackCopyInsert'>
<arg name='inSourceTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inSourceStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inSourceEndTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inDestTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inDestInsertTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackCut'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inEndTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackGetDestMIDIEndpoint'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='outEndpoint' declared_type='MIDIEndpointRef*' type='^^{OpaqueMIDIEndpoint}' type64='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackGetDestNode'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='outNode' declared_type='AUNode*' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackGetProperty'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inPropertyID' declared_type='UInt32' type='L' type64='I'/>
<arg name='outData' declared_type='void*' type='^v'/>
<arg name='ioLength' declared_type='UInt32*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackGetSequence'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='outSequence' declared_type='MusicSequence*' type='^^{OpaqueMusicSequence}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackMerge'>
<arg name='inSourceTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inSourceStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inSourceEndTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inDestTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inDestInsertTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackMoveEvents'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inEndTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inMoveTime' declared_type='MusicTimeStamp' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewAUPresetEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inPresetEvent' declared_type='AUPresetEvent*' type='^{AUPresetEvent=II^v}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewExtendedControlEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inInfo' declared_type='ExtendedControlEvent*' type='^{ExtendedControlEvent=IIf}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewExtendedNoteEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inInfo' declared_type='ExtendedNoteOnEvent*' type='^{ExtendedNoteOnEvent=IIf{MusicDeviceNoteParams=Iff[1{NoteParamsControlValue=If}]}}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewExtendedTempoEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inBPM' declared_type='Float64' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewMIDIChannelEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inMessage' declared_type='MIDIChannelMessage*' type='^{MIDIChannelMessage=CCCC}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewMIDINoteEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inMessage' declared_type='MIDINoteMessage*' type='^{MIDINoteMessage=CCCCf}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewMIDIRawDataEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inRawData' declared_type='MIDIRawData*' type='^{MIDIRawData=I[1C]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewMetaEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inMetaEvent' declared_type='MIDIMetaEvent*' type='^{MIDIMetaEvent=CCCCI[1C]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewParameterEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inInfo' declared_type='ParameterEvent*' type='^{ParameterEvent=IIIf}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackNewUserEvent'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inTimeStamp' declared_type='MusicTimeStamp' type='d'/>
<arg name='inUserData' declared_type='MusicEventUserData*' type='^{MusicEventUserData=I[1C]}' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackSetDestMIDIEndpoint'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inEndpoint' declared_type='MIDIEndpointRef' type='^{OpaqueMIDIEndpoint=}' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackSetDestNode'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inNode' declared_type='AUNode' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='MusicTrackSetProperty'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inPropertyID' declared_type='UInt32' type='L' type64='I'/>
<arg name='inData' declared_type='void*' type='^v'/>
<arg name='inLength' declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewAUGraph'>
<arg name='outGraph' declared_type='AUGraph*' type='^^{OpaqueAUGraph}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewMusicEventIterator'>
<arg name='inTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='outIterator' declared_type='MusicEventIterator*' type='^^{OpaqueMusicEventIterator}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewMusicPlayer'>
<arg name='outPlayer' declared_type='MusicPlayer*' type='^^{OpaqueMusicPlayer}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewMusicSequence'>
<arg name='outSequence' declared_type='MusicSequence*' type='^^{OpaqueMusicSequence}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewMusicTrackFrom'>
<arg name='inSourceTrack' declared_type='MusicTrack' type='^{OpaqueMusicTrack=}'/>
<arg name='inSourceStartTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='inSourceEndTime' declared_type='MusicTimeStamp' type='d'/>
<arg name='outNewTrack' declared_type='MusicTrack*' type='^^{OpaqueMusicTrack}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
</signatures>
