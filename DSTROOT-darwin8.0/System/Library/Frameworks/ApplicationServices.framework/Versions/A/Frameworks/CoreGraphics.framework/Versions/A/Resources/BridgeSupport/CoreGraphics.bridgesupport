<?xml version='1.0'?>
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/IOKit.framework'/>
  <depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
  <depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
  <struct name='CGAffineTransform' type='{CGAffineTransform=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f&quot;tx&quot;f&quot;ty&quot;f}'>
    <field name='a' declared_type='float' type='f'/>
    <field name='b' declared_type='float' type='f'/>
    <field name='c' declared_type='float' type='f'/>
    <field name='d' declared_type='float' type='f'/>
    <field name='tx' declared_type='float' type='f'/>
    <field name='ty' declared_type='float' type='f'/>
  </struct>
  <struct name='CGDataConsumerCallbacks' type='{CGDataConsumerCallbacks=&quot;putBytes&quot;^?&quot;releaseConsumer&quot;^?}'>
    <field name='putBytes' function_pointer='true' declared_type='CGDataConsumerPutBytesCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <retval declared_type='size_t' type='L' type64='Q'/>
    </field>
    <field name='releaseConsumer' function_pointer='true' declared_type='CGDataConsumerReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGDataProviderCallbacks' type='{CGDataProviderCallbacks=&quot;getBytes&quot;^?&quot;skipBytes&quot;^?&quot;rewind&quot;^?&quot;releaseProvider&quot;^?}'>
    <field name='getBytes' function_pointer='true' declared_type='CGDataProviderGetBytesCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <retval declared_type='size_t' type='L' type64='Q'/>
    </field>
    <field name='skipBytes' function_pointer='true' declared_type='CGDataProviderSkipBytesCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='rewind' function_pointer='true' declared_type='CGDataProviderRewindCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='releaseProvider' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGDataProviderDirectAccessCallbacks' type='{CGDataProviderDirectAccessCallbacks=&quot;getBytePointer&quot;^?&quot;releaseBytePointer&quot;^?&quot;getBytes&quot;^?&quot;releaseProvider&quot;^?}'>
    <field name='getBytePointer' function_pointer='true' declared_type='CGDataProviderGetBytePointerCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v' const='true'/>
    </field>
    <field name='releaseBytePointer' function_pointer='true' declared_type='CGDataProviderReleaseBytePointerCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='getBytes' function_pointer='true' declared_type='CGDataProviderGetBytesAtOffsetCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <retval declared_type='size_t' type='L' type64='Q'/>
    </field>
    <field name='releaseProvider' function_pointer='true' declared_type='CGDataProviderReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGDeviceByteColor' type='{_CGDeviceByteColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C}'>
    <field name='red' declared_type='CGByteValue' type='C'/>
    <field name='green' declared_type='CGByteValue' type='C'/>
    <field name='blue' declared_type='CGByteValue' type='C'/>
  </struct>
  <struct name='CGDeviceColor' type='{_CGDeviceColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f}'>
    <field name='red' declared_type='float' type='f'/>
    <field name='green' declared_type='float' type='f'/>
    <field name='blue' declared_type='float' type='f'/>
  </struct>
  <struct name='CGEventTapInformation' type='{CGEventTapInformation=&quot;eventTapID&quot;I&quot;tapPoint&quot;I&quot;options&quot;I&quot;eventsOfInterest&quot;Q&quot;tappingProcess&quot;i&quot;processBeingTapped&quot;i&quot;enabled&quot;B&quot;minUsecLatency&quot;f&quot;avgUsecLatency&quot;f&quot;maxUsecLatency&quot;f}'>
    <field name='eventTapID' declared_type='uint32_t' type='I'/>
    <field name='tapPoint' declared_type='CGEventTapLocation' type='I'/>
    <field name='options' declared_type='CGEventTapOptions' type='I'/>
    <field name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
    <field name='tappingProcess' declared_type='pid_t' type='i'/>
    <field name='processBeingTapped' declared_type='pid_t' type='i'/>
    <field name='enabled' declared_type='_Bool' type='B'/>
    <field name='minUsecLatency' declared_type='float' type='f'/>
    <field name='avgUsecLatency' declared_type='float' type='f'/>
    <field name='maxUsecLatency' declared_type='float' type='f'/>
  </struct>
  <struct name='CGFunctionCallbacks' type='{CGFunctionCallbacks=&quot;version&quot;I&quot;evaluate&quot;^?&quot;releaseInfo&quot;^?}'>
    <field name='version' declared_type='unsigned int' type='I'/>
    <field name='evaluate' function_pointer='true' declared_type='CGFunctionEvaluateCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='float*' type='^f' const='true'/>
      <arg declared_type='float*' type='^f'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='releaseInfo' function_pointer='true' declared_type='CGFunctionReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGPSConverterCallbacks' type='{CGPSConverterCallbacks=&quot;version&quot;I&quot;beginDocument&quot;^?&quot;endDocument&quot;^?&quot;beginPage&quot;^?&quot;endPage&quot;^?&quot;noteProgress&quot;^?&quot;noteMessage&quot;^?&quot;releaseInfo&quot;^?}'>
    <field name='version' declared_type='unsigned int' type='I'/>
    <field name='beginDocument' function_pointer='true' declared_type='CGPSConverterBeginDocumentCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='endDocument' function_pointer='true' declared_type='CGPSConverterEndDocumentCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='_Bool' type='B'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='beginPage' function_pointer='true' declared_type='CGPSConverterBeginPageCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='endPage' function_pointer='true' declared_type='CGPSConverterEndPageCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='noteProgress' function_pointer='true' declared_type='CGPSConverterProgressCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='noteMessage' function_pointer='true' declared_type='CGPSConverterMessageCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CFStringRef' type='^{__CFString=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='releaseInfo' function_pointer='true' declared_type='CGPSConverterReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGPathElement' type='{CGPathElement=&quot;type&quot;i&quot;points&quot;^{CGPoint}}'>
    <field name='type' declared_type='CGPathElementType' type='i'/>
    <field name='points' declared_type='CGPoint*' type='^{CGPoint=ff}'/>
  </struct>
  <struct name='CGPatternCallbacks' type='{CGPatternCallbacks=&quot;version&quot;I&quot;drawPattern&quot;^?&quot;releaseInfo&quot;^?}'>
    <field name='version' declared_type='unsigned int' type='I'/>
    <field name='drawPattern' function_pointer='true' declared_type='CGPatternDrawPatternCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CGContextRef' type='^{CGContext=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='releaseInfo' function_pointer='true' declared_type='CGPatternReleaseInfoCallback' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'>
    <field name='x' declared_type='float' type='f'/>
    <field name='y' declared_type='float' type='f'/>
  </struct>
  <struct name='CGRect' type='{CGRect=&quot;origin&quot;{CGPoint=&quot;x&quot;f&quot;y&quot;f}&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}}'>
    <field name='origin' declared_type='CGPoint' type='{CGPoint=&quot;x&quot;f&quot;y&quot;f}'/>
    <field name='size' declared_type='CGSize' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}'/>
  </struct>
  <struct name='CGScreenUpdateMoveDelta' type='{_CGScreenUpdateMoveDelta=&quot;dX&quot;i&quot;dY&quot;i}'>
    <field name='dX' declared_type='int32_t' type='i'/>
    <field name='dY' declared_type='int32_t' type='i'/>
  </struct>
  <struct name='CGSize' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}'>
    <field name='width' declared_type='float' type='f'/>
    <field name='height' declared_type='float' type='f'/>
  </struct>
  <cftype name='CGColorRef' gettypeid_func='CGColorGetTypeID' type='^{CGColor=}'/>
  <cftype name='CGColorSpaceRef' gettypeid_func='CGColorSpaceGetTypeID' type='^{CGColorSpace=}'/>
  <cftype name='CGContextRef' gettypeid_func='CGContextGetTypeID' type='^{CGContext=}'/>
  <cftype name='CGDataConsumerRef' gettypeid_func='CGDataConsumerGetTypeID' type='^{CGDataConsumer=}'/>
  <cftype name='CGDataProviderRef' gettypeid_func='CGDataProviderGetTypeID' type='^{CGDataProvider=}'/>
  <cftype name='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
  <cftype name='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
  <cftype name='CGEventRef' gettypeid_func='CGEventGetTypeID' type='^{__CGEvent=}'/>
  <cftype name='CGEventSourceRef' gettypeid_func='CGEventSourceGetTypeID' type='^{__CGEventSource=}'/>
  <cftype name='CGFontRef' gettypeid_func='CGFontGetTypeID' type='^{CGFont=}'/>
  <cftype name='CGFunctionRef' gettypeid_func='CGFunctionGetTypeID' type='^{CGFunction=}'/>
  <cftype name='CGImageRef' gettypeid_func='CGImageGetTypeID' type='^{CGImage=}'/>
  <cftype name='CGLayerRef' gettypeid_func='CGLayerGetTypeID' type='^{CGLayer=}'/>
  <cftype name='CGMutablePathRef' gettypeid_func='CGPathGetTypeID' type='^{CGPath=}'/>
  <cftype name='CGPDFArrayRef' type='^{CGPDFArray=}'/>
  <cftype name='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
  <cftype name='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
  <cftype name='CGPDFDocumentRef' gettypeid_func='CGPDFDocumentGetTypeID' type='^{CGPDFDocument=}'/>
  <cftype name='CGPDFObjectRef' type='^(CGPDFObject=)'/>
  <cftype name='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
  <cftype name='CGPDFPageRef' gettypeid_func='CGPDFPageGetTypeID' type='^{CGPDFPage=}'/>
  <cftype name='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
  <cftype name='CGPDFStreamRef' type='^{CGPDFStream=}'/>
  <cftype name='CGPDFStringRef' type='^{CGPDFString=}'/>
  <cftype name='CGPSConverterRef' gettypeid_func='CGPSConverterGetTypeID' type='^{CGPSConverter=}'/>
  <cftype name='CGPathRef' gettypeid_func='CGPathGetTypeID' type='^{CGPath=}'/>
  <cftype name='CGPatternRef' gettypeid_func='CGPatternGetTypeID' type='^{CGPattern=}'/>
  <cftype name='CGShadingRef' gettypeid_func='CGShadingGetTypeID' type='^{CGShading=}'/>
  <opaque name='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
  <opaque name='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
  <constant name='CGAffineTransformIdentity' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' const='true'/>
  <constant name='CGPointZero' declared_type='CGPoint' type='{CGPoint=ff}' const='true'/>
  <constant name='CGRectInfinite' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
  <constant name='CGRectNull' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
  <constant name='CGRectZero' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
  <constant name='CGSizeZero' declared_type='CGSize' type='{CGSize=ff}' const='true'/>
  <constant name='kCGColorSpaceGenericCMYK' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGColorSpaceGenericGray' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGColorSpaceGenericRGB' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGFontVariationAxisDefaultValue' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGFontVariationAxisMaxValue' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGFontVariationAxisMinValue' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGFontVariationAxisName' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextAllowsCopying' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextAllowsPrinting' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextArtBox' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextAuthor' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextBleedBox' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextCreator' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextCropBox' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextMediaBox' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextOutputIntent' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextOutputIntents' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextOwnerPassword' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextTitle' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextTrimBox' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFContextUserPassword' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXDestinationOutputProfile' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXInfo' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXOutputCondition' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXOutputConditionIdentifier' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXOutputIntentSubtype' declared_type='CFStringRef' type='^{__CFString=}'/>
  <constant name='kCGPDFXRegistryName' declared_type='CFStringRef' type='^{__CFString=}'/>
  <string_constant name='kCGColorSpaceUserCMYK' nsstring='true' value='kCGColorSpaceUserCMYK'/>
  <string_constant name='kCGColorSpaceUserGray' nsstring='true' value='kCGColorSpaceUserGray'/>
  <string_constant name='kCGColorSpaceUserRGB' nsstring='true' value='kCGColorSpaceUserRGB'/>
  <string_constant name='kCGDisplayBitsPerPixel' nsstring='true' value='BitsPerPixel'/>
  <string_constant name='kCGDisplayBitsPerSample' nsstring='true' value='BitsPerSample'/>
  <string_constant name='kCGDisplayBytesPerRow' nsstring='true' value='kCGDisplayBytesPerRow'/>
  <string_constant name='kCGDisplayHeight' nsstring='true' value='Height'/>
  <string_constant name='kCGDisplayIOFlags' nsstring='true' value='IOFlags'/>
  <string_constant name='kCGDisplayMode' nsstring='true' value='Mode'/>
  <string_constant name='kCGDisplayModeIsInterlaced' nsstring='true' value='kCGDisplayModeIsInterlaced'/>
  <string_constant name='kCGDisplayModeIsSafeForHardware' nsstring='true' value='kCGDisplayModeIsSafeForHardware'/>
  <string_constant name='kCGDisplayModeIsStretched' nsstring='true' value='kCGDisplayModeIsStretched'/>
  <string_constant name='kCGDisplayModeIsTelevisionOutput' nsstring='true' value='kCGDisplayModeIsTelevisionOutput'/>
  <string_constant name='kCGDisplayModeUsableForDesktopGUI' nsstring='true' value='UsableForDesktopGUI'/>
  <string_constant name='kCGDisplayRefreshRate' nsstring='true' value='RefreshRate'/>
  <string_constant name='kCGDisplaySamplesPerPixel' nsstring='true' value='SamplesPerPixel'/>
  <string_constant name='kCGDisplayWidth' nsstring='true' value='Width'/>
  <string_constant name='kCGNotifyEventTapAdded' value='com.apple.coregraphics.eventTapAdded'/>
  <string_constant name='kCGNotifyEventTapRemoved' value='com.apple.coregraphics.eventTapRemoved'/>
  <string_constant name='kCGNotifyGUIConsoleSessionChanged' value='com.apple.coregraphics.GUIConsoleSessionChanged'/>
  <string_constant name='kCGNotifyGUISessionUserChanged' value='com.apple.coregraphics.GUISessionUserChanged'/>
  <string_constant name='kCGSessionConsoleSetKey' nsstring='true' value='kCGSSessionConsoleSetKey'/>
  <string_constant name='kCGSessionLoginDoneKey' nsstring='true' value='kCGSessionLoginDoneKey'/>
  <string_constant name='kCGSessionOnConsoleKey' nsstring='true' value='kCGSSessionOnConsoleKey'/>
  <string_constant name='kCGSessionUserIDKey' nsstring='true' value='kCGSSessionUserIDKey'/>
  <string_constant name='kCGSessionUserNameKey' nsstring='true' value='kCGSSessionUserNameKey'/>
  <enum name='CGDisplayNoErr' value='0'/>
  <enum name='CGEventNoErr' value='0'/>
  <enum name='CGGlyphMax' value='65534'/>
  <enum name='CGGlyphMin' value='0'/>
  <enum name='CGPDFDataFormatJPEG2000' value='2'/>
  <enum name='CGPDFDataFormatJPEGEncoded' value='1'/>
  <enum name='CGPDFDataFormatRaw' value='0'/>
  <enum name='CGRectMaxXEdge' value='2'/>
  <enum name='CGRectMaxYEdge' value='3'/>
  <enum name='CGRectMinXEdge' value='0'/>
  <enum name='CGRectMinYEdge' value='1'/>
  <enum name='kCGAnnotatedSessionEventTap' value='2'/>
  <enum name='kCGAnyInputEventType' value='4294967295'/>
  <enum name='kCGAssistiveTechHighWindowLevel' value='1500'/>
  <enum name='kCGAssistiveTechHighWindowLevelKey' value='20'/>
  <enum name='kCGBackstopMenuLevel' value='-20'/>
  <enum name='kCGBackstopMenuLevelKey' value='3'/>
  <enum name='kCGBaseWindowLevel' value='-2147483648'/>
  <enum name='kCGBaseWindowLevelKey' value='0'/>
  <enum name='kCGBitmapAlphaInfoMask' value='31'/>
  <enum name='kCGBitmapByteOrder16Big' value='12288'/>
  <enum name='kCGBitmapByteOrder16Host' value='4096'/>
  <enum name='kCGBitmapByteOrder16Little' value='4096'/>
  <enum name='kCGBitmapByteOrder32Big' value='16384'/>
  <enum name='kCGBitmapByteOrder32Host' value='8192'/>
  <enum name='kCGBitmapByteOrder32Little' value='8192'/>
  <enum name='kCGBitmapByteOrderDefault' value='0'/>
  <enum name='kCGBitmapByteOrderMask' value='28672'/>
  <enum name='kCGBitmapFloatComponents' value='256'/>
  <enum name='kCGBlendModeColor' value='14'/>
  <enum name='kCGBlendModeColorBurn' value='7'/>
  <enum name='kCGBlendModeColorDodge' value='6'/>
  <enum name='kCGBlendModeDarken' value='4'/>
  <enum name='kCGBlendModeDifference' value='10'/>
  <enum name='kCGBlendModeExclusion' value='11'/>
  <enum name='kCGBlendModeHardLight' value='9'/>
  <enum name='kCGBlendModeHue' value='12'/>
  <enum name='kCGBlendModeLighten' value='5'/>
  <enum name='kCGBlendModeLuminosity' value='15'/>
  <enum name='kCGBlendModeMultiply' value='1'/>
  <enum name='kCGBlendModeNormal' value='0'/>
  <enum name='kCGBlendModeOverlay' value='3'/>
  <enum name='kCGBlendModeSaturation' value='13'/>
  <enum name='kCGBlendModeScreen' value='2'/>
  <enum name='kCGBlendModeSoftLight' value='8'/>
  <enum name='kCGCaptureNoFill' value='1'/>
  <enum name='kCGCaptureNoOptions' value='0'/>
  <enum name='kCGConfigureForAppOnly' value='0'/>
  <enum name='kCGConfigureForSession' value='1'/>
  <enum name='kCGConfigurePermanently' value='2'/>
  <enum name='kCGCursorWindowLevel' value='2000'/>
  <enum name='kCGCursorWindowLevelKey' value='19'/>
  <enum name='kCGDesktopIconWindowLevel' value='-2147483607'/>
  <enum name='kCGDesktopIconWindowLevelKey' value='18'/>
  <enum name='kCGDesktopWindowLevel' value='-2147483627'/>
  <enum name='kCGDesktopWindowLevelKey' value='2'/>
  <enum name='kCGDirectMainDisplay' ignore='true' suggestion='Call CGMainDisplayID.'/>
  <enum name='kCGDisplayAddFlag' value='16'/>
  <enum name='kCGDisplayBeginConfigurationFlag' value='1'/>
  <enum name='kCGDisplayBlendNormal' value='0.0'/>
  <enum name='kCGDisplayBlendSolidColor' value='1.0'/>
  <enum name='kCGDisplayDisabledFlag' value='512'/>
  <enum name='kCGDisplayEnabledFlag' value='256'/>
  <enum name='kCGDisplayFadeReservationInvalidToken' value='0'/>
  <enum name='kCGDisplayMirrorFlag' value='1024'/>
  <enum name='kCGDisplayMovedFlag' value='2'/>
  <enum name='kCGDisplayRemoveFlag' value='32'/>
  <enum name='kCGDisplaySetMainFlag' value='4'/>
  <enum name='kCGDisplaySetModeFlag' value='8'/>
  <enum name='kCGDisplayUnMirrorFlag' value='2048'/>
  <enum name='kCGDockWindowLevel' value='20'/>
  <enum name='kCGDockWindowLevelKey' value='7'/>
  <enum name='kCGDraggingWindowLevel' value='500'/>
  <enum name='kCGDraggingWindowLevelKey' value='12'/>
  <enum name='kCGEncodingFontSpecific' value='0'/>
  <enum name='kCGEncodingMacRoman' value='1'/>
  <enum name='kCGErrorApplicationAlreadyRunning' value='1025'/>
  <enum name='kCGErrorApplicationCanOnlyBeRunInOneSessionAtATime' value='1026'/>
  <enum name='kCGErrorApplicationIncorrectExecutableFormatFound' value='1023'/>
  <enum name='kCGErrorApplicationIsLaunching' value='1024'/>
  <enum name='kCGErrorApplicationNotPermittedToExecute' value='1016'/>
  <enum name='kCGErrorApplicationRequiresNewerSystem' value='1015'/>
  <enum name='kCGErrorCannotComplete' value='1004'/>
  <enum name='kCGErrorClassicApplicationsMustBeLaunchedByClassic' value='1027'/>
  <enum name='kCGErrorFailure' value='1000'/>
  <enum name='kCGErrorFirst' value='1000'/>
  <enum name='kCGErrorForkFailed' value='1028'/>
  <enum name='kCGErrorIllegalArgument' value='1001'/>
  <enum name='kCGErrorInvalidConnection' value='1002'/>
  <enum name='kCGErrorInvalidContext' value='1003'/>
  <enum name='kCGErrorInvalidOperation' value='1010'/>
  <enum name='kCGErrorLast' value='1028'/>
  <enum name='kCGErrorNameTooLong' value='1005'/>
  <enum name='kCGErrorNoCurrentPoint' value='1009'/>
  <enum name='kCGErrorNoneAvailable' value='1011'/>
  <enum name='kCGErrorNotImplemented' value='1006'/>
  <enum name='kCGErrorRangeCheck' value='1007'/>
  <enum name='kCGErrorSuccess' value='0'/>
  <enum name='kCGErrorTypeCheck' value='1008'/>
  <enum name='kCGEventFilterMaskPermitAllEvents' value='7'/>
  <enum name='kCGEventFilterMaskPermitLocalKeyboardEvents' value='2'/>
  <enum name='kCGEventFilterMaskPermitLocalMouseEvents' value='1'/>
  <enum name='kCGEventFilterMaskPermitSystemDefinedEvents' value='4'/>
  <enum name='kCGEventFlagMaskAlphaShift' value='65536'/>
  <enum name='kCGEventFlagMaskAlternate' value='524288'/>
  <enum name='kCGEventFlagMaskCommand' value='1048576'/>
  <enum name='kCGEventFlagMaskControl' value='262144'/>
  <enum name='kCGEventFlagMaskHelp' value='4194304'/>
  <enum name='kCGEventFlagMaskNonCoalesced' value='256'/>
  <enum name='kCGEventFlagMaskNumericPad' value='2097152'/>
  <enum name='kCGEventFlagMaskSecondaryFn' value='8388608'/>
  <enum name='kCGEventFlagMaskShift' value='131072'/>
  <enum name='kCGEventFlagsChanged' value='12'/>
  <enum name='kCGEventKeyDown' value='10'/>
  <enum name='kCGEventKeyUp' value='11'/>
  <enum name='kCGEventLeftMouseDown' value='1'/>
  <enum name='kCGEventLeftMouseDragged' value='6'/>
  <enum name='kCGEventLeftMouseUp' value='2'/>
  <enum name='kCGEventMaskForAllEvents' value='18446744073709551615'/>
  <enum name='kCGEventMouseMoved' value='5'/>
  <enum name='kCGEventMouseSubtypeDefault' value='0'/>
  <enum name='kCGEventMouseSubtypeTabletPoint' value='1'/>
  <enum name='kCGEventMouseSubtypeTabletProximity' value='2'/>
  <enum name='kCGEventNull' value='0'/>
  <enum name='kCGEventOtherMouseDown' value='25'/>
  <enum name='kCGEventOtherMouseDragged' value='27'/>
  <enum name='kCGEventOtherMouseUp' value='26'/>
  <enum name='kCGEventRightMouseDown' value='3'/>
  <enum name='kCGEventRightMouseDragged' value='7'/>
  <enum name='kCGEventRightMouseUp' value='4'/>
  <enum name='kCGEventScrollWheel' value='22'/>
  <enum name='kCGEventSourceGroupID' value='44'/>
  <enum name='kCGEventSourceStateCombinedSessionState' value='0'/>
  <enum name='kCGEventSourceStateHIDSystemState' value='1'/>
  <enum name='kCGEventSourceStateID' value='45'/>
  <enum name='kCGEventSourceStatePrivate' value='-1'/>
  <enum name='kCGEventSourceUnixProcessID' value='41'/>
  <enum name='kCGEventSourceUserData' value='42'/>
  <enum name='kCGEventSourceUserID' value='43'/>
  <enum name='kCGEventSuppressionStateRemoteMouseDrag' value='1'/>
  <enum name='kCGEventSuppressionStateSuppressionInterval' value='0'/>
  <enum name='kCGEventSupressionStateRemoteMouseDrag' value='1'/>
  <enum name='kCGEventSupressionStateSupressionInterval' value='0'/>
  <enum name='kCGEventTabletPointer' value='23'/>
  <enum name='kCGEventTabletProximity' value='24'/>
  <enum name='kCGEventTapDisabledByTimeout' value='4294967294'/>
  <enum name='kCGEventTapDisabledByUserInput' value='4294967295'/>
  <enum name='kCGEventTapOptionListenOnly' value='1'/>
  <enum name='kCGEventTargetProcessSerialNumber' value='39'/>
  <enum name='kCGEventTargetUnixProcessID' value='40'/>
  <enum name='kCGFloatingWindowLevel' value='3'/>
  <enum name='kCGFloatingWindowLevelKey' value='5'/>
  <enum name='kCGFontIndexInvalid' value='65535'/>
  <enum name='kCGFontIndexMax' value='65534'/>
  <enum name='kCGFontPostScriptFormatType1' value='1'/>
  <enum name='kCGFontPostScriptFormatType3' value='3'/>
  <enum name='kCGFontPostScriptFormatType42' value='42'/>
  <enum name='kCGGlyphMax' value='65534'/>
  <enum name='kCGHIDEventTap' value='0'/>
  <enum name='kCGHeadInsertEventTap' value='0'/>
  <enum name='kCGHelpWindowLevel' value='102'/>
  <enum name='kCGHelpWindowLevelKey' value='16'/>
  <enum name='kCGImageAlphaFirst' value='4'/>
  <enum name='kCGImageAlphaLast' value='3'/>
  <enum name='kCGImageAlphaNone' value='0'/>
  <enum name='kCGImageAlphaNoneSkipFirst' value='6'/>
  <enum name='kCGImageAlphaNoneSkipLast' value='5'/>
  <enum name='kCGImageAlphaOnly' value='7'/>
  <enum name='kCGImageAlphaPremultipliedFirst' value='2'/>
  <enum name='kCGImageAlphaPremultipliedLast' value='1'/>
  <enum name='kCGInterpolationDefault' value='0'/>
  <enum name='kCGInterpolationHigh' value='3'/>
  <enum name='kCGInterpolationLow' value='2'/>
  <enum name='kCGInterpolationNone' value='1'/>
  <enum name='kCGKeyboardEventAutorepeat' value='8'/>
  <enum name='kCGKeyboardEventKeyboardType' value='10'/>
  <enum name='kCGKeyboardEventKeycode' value='9'/>
  <enum name='kCGLineCapButt' value='0'/>
  <enum name='kCGLineCapRound' value='1'/>
  <enum name='kCGLineCapSquare' value='2'/>
  <enum name='kCGLineJoinBevel' value='2'/>
  <enum name='kCGLineJoinMiter' value='0'/>
  <enum name='kCGLineJoinRound' value='1'/>
  <enum name='kCGMainMenuWindowLevel' value='24'/>
  <enum name='kCGMainMenuWindowLevelKey' value='8'/>
  <enum name='kCGMaxDisplayReservationInterval' value='15.0'/>
  <enum name='kCGMaximumWindowLevel' value='2147483631'/>
  <enum name='kCGMaximumWindowLevelKey' value='14'/>
  <enum name='kCGMinimumWindowLevel' value='-2147483647'/>
  <enum name='kCGMinimumWindowLevelKey' value='1'/>
  <enum name='kCGModalPanelWindowLevel' value='8'/>
  <enum name='kCGModalPanelWindowLevelKey' value='10'/>
  <enum name='kCGMouseButtonCenter' value='2'/>
  <enum name='kCGMouseButtonLeft' value='0'/>
  <enum name='kCGMouseButtonRight' value='1'/>
  <enum name='kCGMouseDownEventMaskingDeadSwitchTimeout' value='60.0'/>
  <enum name='kCGMouseEventButtonNumber' value='3'/>
  <enum name='kCGMouseEventClickState' value='1'/>
  <enum name='kCGMouseEventDeltaX' value='4'/>
  <enum name='kCGMouseEventDeltaY' value='5'/>
  <enum name='kCGMouseEventInstantMouser' value='6'/>
  <enum name='kCGMouseEventNumber' value='0'/>
  <enum name='kCGMouseEventPressure' value='2'/>
  <enum name='kCGMouseEventSubtype' value='7'/>
  <enum name='kCGNormalWindowLevel' value='0'/>
  <enum name='kCGNormalWindowLevelKey' value='4'/>
  <enum name='kCGNumReservedWindowLevels' value='16'/>
  <enum name='kCGNumberOfEventSuppressionStates' value='2'/>
  <enum name='kCGNumberOfEventSupressionStates' value='2'/>
  <enum name='kCGNumberOfWindowLevelKeys' value='21'/>
  <enum name='kCGOverlayWindowLevel' value='102'/>
  <enum name='kCGOverlayWindowLevelKey' value='15'/>
  <enum name='kCGPDFArtBox' value='4'/>
  <enum name='kCGPDFBleedBox' value='2'/>
  <enum name='kCGPDFCropBox' value='1'/>
  <enum name='kCGPDFMediaBox' value='0'/>
  <enum name='kCGPDFObjectTypeArray' value='7'/>
  <enum name='kCGPDFObjectTypeBoolean' value='2'/>
  <enum name='kCGPDFObjectTypeDictionary' value='8'/>
  <enum name='kCGPDFObjectTypeInteger' value='3'/>
  <enum name='kCGPDFObjectTypeName' value='5'/>
  <enum name='kCGPDFObjectTypeNull' value='1'/>
  <enum name='kCGPDFObjectTypeReal' value='4'/>
  <enum name='kCGPDFObjectTypeStream' value='9'/>
  <enum name='kCGPDFObjectTypeString' value='6'/>
  <enum name='kCGPDFTrimBox' value='3'/>
  <enum name='kCGPathEOFill' value='1'/>
  <enum name='kCGPathEOFillStroke' value='4'/>
  <enum name='kCGPathElementAddCurveToPoint' value='3'/>
  <enum name='kCGPathElementAddLineToPoint' value='1'/>
  <enum name='kCGPathElementAddQuadCurveToPoint' value='2'/>
  <enum name='kCGPathElementCloseSubpath' value='4'/>
  <enum name='kCGPathElementMoveToPoint' value='0'/>
  <enum name='kCGPathFill' value='0'/>
  <enum name='kCGPathFillStroke' value='3'/>
  <enum name='kCGPathStroke' value='2'/>
  <enum name='kCGPatternTilingConstantSpacing' value='2'/>
  <enum name='kCGPatternTilingConstantSpacingMinimalDistortion' value='1'/>
  <enum name='kCGPatternTilingNoDistortion' value='0'/>
  <enum name='kCGPopUpMenuWindowLevel' value='101'/>
  <enum name='kCGPopUpMenuWindowLevelKey' value='11'/>
  <enum name='kCGRenderingIntentAbsoluteColorimetric' value='1'/>
  <enum name='kCGRenderingIntentDefault' value='0'/>
  <enum name='kCGRenderingIntentPerceptual' value='3'/>
  <enum name='kCGRenderingIntentRelativeColorimetric' value='2'/>
  <enum name='kCGRenderingIntentSaturation' value='4'/>
  <enum name='kCGScreenSaverWindowLevel' value='1000'/>
  <enum name='kCGScreenSaverWindowLevelKey' value='13'/>
  <enum name='kCGScreenUpdateOperationMove' value='1'/>
  <enum name='kCGScreenUpdateOperationReducedDirtyRectangleCount' value='-2147483648'/>
  <enum name='kCGScreenUpdateOperationRefresh' value='0'/>
  <enum name='kCGScrollWheelEventDeltaAxis1' value='11'/>
  <enum name='kCGScrollWheelEventDeltaAxis2' value='12'/>
  <enum name='kCGScrollWheelEventDeltaAxis3' value='13'/>
  <enum name='kCGScrollWheelEventInstantMouser' value='14'/>
  <enum name='kCGSessionEventTap' value='1'/>
  <enum name='kCGStatusWindowLevel' value='25'/>
  <enum name='kCGStatusWindowLevelKey' value='9'/>
  <enum name='kCGTabletEventDeviceID' value='24'/>
  <enum name='kCGTabletEventPointButtons' value='18'/>
  <enum name='kCGTabletEventPointPressure' value='19'/>
  <enum name='kCGTabletEventPointX' value='15'/>
  <enum name='kCGTabletEventPointY' value='16'/>
  <enum name='kCGTabletEventPointZ' value='17'/>
  <enum name='kCGTabletEventRotation' value='22'/>
  <enum name='kCGTabletEventTangentialPressure' value='23'/>
  <enum name='kCGTabletEventTiltX' value='20'/>
  <enum name='kCGTabletEventTiltY' value='21'/>
  <enum name='kCGTabletEventVendor1' value='25'/>
  <enum name='kCGTabletEventVendor2' value='26'/>
  <enum name='kCGTabletEventVendor3' value='27'/>
  <enum name='kCGTabletProximityEventCapabilityMask' value='36'/>
  <enum name='kCGTabletProximityEventDeviceID' value='31'/>
  <enum name='kCGTabletProximityEventEnterProximity' value='38'/>
  <enum name='kCGTabletProximityEventPointerID' value='30'/>
  <enum name='kCGTabletProximityEventPointerType' value='37'/>
  <enum name='kCGTabletProximityEventSystemTabletID' value='32'/>
  <enum name='kCGTabletProximityEventTabletID' value='29'/>
  <enum name='kCGTabletProximityEventVendorID' value='28'/>
  <enum name='kCGTabletProximityEventVendorPointerSerialNumber' value='34'/>
  <enum name='kCGTabletProximityEventVendorPointerType' value='33'/>
  <enum name='kCGTabletProximityEventVendorUniqueID' value='35'/>
  <enum name='kCGTailAppendEventTap' value='1'/>
  <enum name='kCGTextClip' value='7'/>
  <enum name='kCGTextFill' value='0'/>
  <enum name='kCGTextFillClip' value='4'/>
  <enum name='kCGTextFillStroke' value='2'/>
  <enum name='kCGTextFillStrokeClip' value='6'/>
  <enum name='kCGTextInvisible' value='3'/>
  <enum name='kCGTextStroke' value='1'/>
  <enum name='kCGTextStrokeClip' value='5'/>
  <enum name='kCGTornOffMenuWindowLevel' value='3'/>
  <enum name='kCGTornOffMenuWindowLevelKey' value='6'/>
  <enum name='kCGUtilityWindowLevel' value='19'/>
  <enum name='kCGUtilityWindowLevelKey' value='17'/>
  <function name='CGAcquireDisplayFadeReservation'>
    <arg name='seconds' declared_type='CGDisplayReservationInterval' type='f'/>
    <arg name='pNewToken' declared_type='CGDisplayFadeReservationToken*' type='^I' type_modifier='o'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGAffineTransformConcat'>
    <arg name='t1' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='t2' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformEqualToTransform'>
    <arg name='t1' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='t2' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGAffineTransformInvert'>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformIsIdentity'>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGAffineTransformMake'>
    <arg name='a' declared_type='float' type='f'/>
    <arg name='b' declared_type='float' type='f'/>
    <arg name='c' declared_type='float' type='f'/>
    <arg name='d' declared_type='float' type='f'/>
    <arg name='tx' declared_type='float' type='f'/>
    <arg name='ty' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformMakeRotation'>
    <arg name='angle' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformMakeScale'>
    <arg name='sx' declared_type='float' type='f'/>
    <arg name='sy' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformMakeTranslation'>
    <arg name='tx' declared_type='float' type='f'/>
    <arg name='ty' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformRotate'>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='angle' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformScale'>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='sx' declared_type='float' type='f'/>
    <arg name='sy' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAffineTransformTranslate'>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='tx' declared_type='float' type='f'/>
    <arg name='ty' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGAssociateMouseAndMouseCursorPosition'>
    <arg name='connected' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGBeginDisplayConfiguration'>
    <arg name='pConfigRef' declared_type='CGDisplayConfigRef*' type='^^{_CGDisplayConfigRef}' type_modifier='o'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGBitmapContextCreate'>
    <arg name='data' declared_type='void*' type='^v' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bitsPerComponent' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bytesPerRow' declared_type='size_t' type='L' type64='Q'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='bitmapInfo' declared_type='CGBitmapInfo' type='I'/>
    <retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
  </function>
  <function name='CGBitmapContextCreateImage'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGBitmapContextGetAlphaInfo'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGImageAlphaInfo' type='i'/>
  </function>
  <function name='CGBitmapContextGetBitmapInfo'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGBitmapInfo' type='I'/>
  </function>
  <function name='CGBitmapContextGetBitsPerComponent'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGBitmapContextGetBitsPerPixel'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGBitmapContextGetBytesPerRow'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGBitmapContextGetColorSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGBitmapContextGetData'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='CGBitmapContextGetHeight'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGBitmapContextGetWidth'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGCancelDisplayConfiguration'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGCaptureAllDisplays'>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGCaptureAllDisplaysWithOptions'>
    <arg name='options' declared_type='CGCaptureOptions' type='I'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGColorCreate'>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
  </function>
  <function name='CGColorCreateCopy'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
  </function>
  <function name='CGColorCreateCopyWithAlpha'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
  </function>
  <function name='CGColorCreateWithPattern'>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CGColorRef' already_retained='true' type='^{CGColor=}'/>
  </function>
  <function name='CGColorEqualToColor'>
    <arg name='color1' declared_type='CGColorRef' type='^{CGColor=}'/>
    <arg name='color2' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGColorGetAlpha'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGColorGetColorSpace'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorGetComponents'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='float*' type='^f' const='true'/>
  </function>
  <function name='CGColorGetNumberOfComponents'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGColorGetPattern'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='CGPatternRef' type='^{CGPattern=}'/>
  </function>
  <function name='CGColorGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGColorRelease'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGColorRetain'>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='CGColorRef' type='^{CGColor=}'/>
  </function>
  <function name='CGColorSpaceCreateCalibratedGray'>
    <arg name='whitePoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='blackPoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='gamma' declared_type='float' type='f'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateCalibratedRGB'>
    <arg name='whitePoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='blackPoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='gamma' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='matrix' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateDeviceCMYK'>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateDeviceGray'>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateDeviceRGB'>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateICCBased'>
    <arg name='nComponents' declared_type='size_t' type='L' type64='Q'/>
    <arg name='range' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='profile' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='alternate' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateIndexed'>
    <arg name='baseSpace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='lastIndex' declared_type='size_t' type='L' type64='Q'/>
    <arg name='colorTable' declared_type='unsigned char*' type='*' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateLab'>
    <arg name='whitePoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='blackPoint' declared_type='float*' type='^f' c_array_of_fixed_length='3' const='true' type_modifier='n'/>
    <arg name='range' declared_type='float*' type='^f' c_array_of_fixed_length='4' const='true' type_modifier='n'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreatePattern'>
    <arg name='baseSpace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateWithName'>
    <arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceCreateWithPlatformColorSpace'>
    <arg name='platformColorSpaceReference' declared_type='void*' type='^{OpaqueCMProfileRef=}'/>
    <retval declared_type='CGColorSpaceRef' already_retained='true' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGColorSpaceGetNumberOfComponents'>
    <arg name='cs' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}' const='true'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGColorSpaceGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGColorSpaceRelease'>
    <arg name='cs' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGColorSpaceRetain'>
    <arg name='cs' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGCompleteDisplayConfiguration'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='option' declared_type='CGConfigureOption' type='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGConfigureDisplayFadeEffect'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='fadeOutSeconds' declared_type='CGDisplayFadeInterval' type='f'/>
    <arg name='fadeInSeconds' declared_type='CGDisplayFadeInterval' type='f'/>
    <arg name='fadeRed' declared_type='float' type='f'/>
    <arg name='fadeGreen' declared_type='float' type='f'/>
    <arg name='fadeBlue' declared_type='float' type='f'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGConfigureDisplayMirrorOfDisplay'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='masterDisplay' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGConfigureDisplayMode'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='mode' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGConfigureDisplayOrigin'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='x' declared_type='CGDisplayCoord' type='i'/>
    <arg name='y' declared_type='CGDisplayCoord' type='i'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGConfigureDisplayStereoOperation'>
    <arg name='configRef' declared_type='CGDisplayConfigRef' type='^{_CGDisplayConfigRef=}'/>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='stereo' declared_type='boolean_t' type='i' type64='I'/>
    <arg name='forceBlueLine' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGContextAddArc'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <arg name='radius' declared_type='float' type='f'/>
    <arg name='startAngle' declared_type='float' type='f'/>
    <arg name='endAngle' declared_type='float' type='f'/>
    <arg name='clockwise' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddArcToPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x1' declared_type='float' type='f'/>
    <arg name='y1' declared_type='float' type='f'/>
    <arg name='x2' declared_type='float' type='f'/>
    <arg name='y2' declared_type='float' type='f'/>
    <arg name='radius' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddCurveToPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='cp1x' declared_type='float' type='f'/>
    <arg name='cp1y' declared_type='float' type='f'/>
    <arg name='cp2x' declared_type='float' type='f'/>
    <arg name='cp2y' declared_type='float' type='f'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddEllipseInRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddLineToPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddLines'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='points' c_array_length_in_arg='2' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddPath'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddQuadCurveToPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='cpx' declared_type='float' type='f'/>
    <arg name='cpy' declared_type='float' type='f'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddRect'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextAddRects'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rects' c_array_length_in_arg='2' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextBeginPage'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='mediaBox' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextBeginPath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextBeginTransparencyLayer'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClearRect'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClip'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClipToMask'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='mask' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClipToRect'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClipToRects'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rects' c_array_length_in_arg='2' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextClosePath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextConcatCTM'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='transform' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextConvertPointToDeviceSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGContextConvertPointToUserSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGContextConvertRectToDeviceSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGContextConvertRectToUserSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGContextConvertSizeToDeviceSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGContextConvertSizeToUserSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGContextDrawImage'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawLayerAtPoint'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawLayerInRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawPDFDocument'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawPDFPage'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawPath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='mode' declared_type='CGPathDrawingMode' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextDrawShading'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextEOClip'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextEOFillPath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextEndPage'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextEndTransparencyLayer'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextFillEllipseInRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextFillPath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextFillRect'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextFillRects'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rects' c_array_length_in_arg='2' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextFlush'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextGetCTM'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGContextGetClipBoundingBox'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGContextGetInterpolationQuality'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGInterpolationQuality' type='i'/>
  </function>
  <function name='CGContextGetPathBoundingBox'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGContextGetPathCurrentPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGContextGetTextMatrix'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGContextGetTextPosition'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGContextGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGContextGetUserSpaceToDeviceSpaceTransform'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGContextIsPathEmpty'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGContextMoveToPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextPathContainsPoint'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='mode' declared_type='CGPathDrawingMode' type='i'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGContextRelease'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextReplacePathWithStrokedPath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextRestoreGState'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextRetain'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='CGContextRef' type='^{CGContext=}'/>
  </function>
  <function name='CGContextRotateCTM'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='angle' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSaveGState'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextScaleCTM'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='sx' declared_type='float' type='f'/>
    <arg name='sy' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSelectFont'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='size' declared_type='float' type='f'/>
    <arg name='textEncoding' declared_type='CGTextEncoding' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetAllowsAntialiasing'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='allowsAntialiasing' declared_type='_Bool' type='B'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetAlpha'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetBlendMode'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='mode' declared_type='CGBlendMode' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetCMYKFillColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='cyan' declared_type='float' type='f'/>
    <arg name='magenta' declared_type='float' type='f'/>
    <arg name='yellow' declared_type='float' type='f'/>
    <arg name='black' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetCMYKStrokeColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='cyan' declared_type='float' type='f'/>
    <arg name='magenta' declared_type='float' type='f'/>
    <arg name='yellow' declared_type='float' type='f'/>
    <arg name='black' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetCharacterSpacing'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='spacing' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFillColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFillColorSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFillColorWithColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFillPattern'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFlatness'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='flatness' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFont'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetFontSize'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='size' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetGrayFillColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='gray' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetGrayStrokeColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='gray' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetInterpolationQuality'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='quality' declared_type='CGInterpolationQuality' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetLineCap'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='cap' declared_type='CGLineCap' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetLineDash'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='phase' declared_type='float' type='f'/>
    <arg name='lengths' c_array_length_in_arg='3' declared_type='float*' type='^f' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetLineJoin'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='join' declared_type='CGLineJoin' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetLineWidth'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='width' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetMiterLimit'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='limit' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetPatternPhase'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='phase' declared_type='CGSize' type='{CGSize=ff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetRGBFillColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='red' declared_type='float' type='f'/>
    <arg name='green' declared_type='float' type='f'/>
    <arg name='blue' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetRGBStrokeColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='red' declared_type='float' type='f'/>
    <arg name='green' declared_type='float' type='f'/>
    <arg name='blue' declared_type='float' type='f'/>
    <arg name='alpha' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetRenderingIntent'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetShadow'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='offset' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='blur' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetShadowWithColor'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='offset' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='blur' declared_type='float' type='f'/>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetShouldAntialias'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='shouldAntialias' declared_type='_Bool' type='B'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetShouldSmoothFonts'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='shouldSmoothFonts' declared_type='_Bool' type='B'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetStrokeColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetStrokeColorSpace'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetStrokeColorWithColor'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='color' declared_type='CGColorRef' type='^{CGColor=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetStrokePattern'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetTextDrawingMode'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='mode' declared_type='CGTextDrawingMode' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetTextMatrix'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSetTextPosition'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextShowGlyphs'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='g' c_array_length_in_arg='2' declared_type='CGGlyph*' type='^S' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextShowGlyphsAtPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <arg name='glyphs' c_array_length_in_arg='4' declared_type='CGGlyph*' type='^S' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextShowGlyphsWithAdvances'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='glyphs' c_array_length_in_arg='3' declared_type='CGGlyph*' type='^S' const='true' type_modifier='n'/>
    <arg name='advances' c_array_length_in_arg='3' declared_type='CGSize*' type='^{CGSize=ff}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextShowText'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='string' c_array_length_in_arg='2' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='length' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextShowTextAtPoint'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <arg name='string' c_array_length_in_arg='4' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='length' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextStrokeEllipseInRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextStrokeLineSegments'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='points' c_array_length_in_arg='2' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextStrokePath'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextStrokeRect'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextStrokeRectWithWidth'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='width' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextSynchronize'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGContextTranslateCTM'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='tx' declared_type='float' type='f'/>
    <arg name='ty' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGCursorIsDrawnInFramebuffer'>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGCursorIsVisible'>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDataConsumerCreate'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='callbacks' declared_type='CGDataConsumerCallbacks*' type='^{CGDataConsumerCallbacks=^?^?}' const='true' type_modifier='n'/>
    <retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
  </function>
  <function name='CGDataConsumerCreateWithCFData'>
    <arg name='data' declared_type='CFMutableDataRef' type='^{__CFData=}'/>
    <retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
  </function>
  <function name='CGDataConsumerCreateWithURL'>
    <arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
    <retval declared_type='CGDataConsumerRef' already_retained='true' type='^{CGDataConsumer=}'/>
  </function>
  <function name='CGDataConsumerGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGDataConsumerRelease'>
    <arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGDataConsumerRetain'>
    <arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
    <retval declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
  </function>
  <function name='CGDataProviderCreate'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='callbacks' declared_type='CGDataProviderCallbacks*' type='^{CGDataProviderCallbacks=^?^?^?^?}' const='true' type_modifier='n'/>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderCreateDirectAccess'>
    <arg name='info' declared_type='void*' type='^v'/>
    <arg name='size' declared_type='size_t' type='L' type64='Q'/>
    <arg name='callbacks' declared_type='CGDataProviderDirectAccessCallbacks*' type='^{CGDataProviderDirectAccessCallbacks=^?^?^?^?}' const='true'/>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderCreateWithCFData'>
    <arg name='data' declared_type='CFDataRef' type='^{__CFData=}'/>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderCreateWithData'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='data' declared_type='void*' type='^v' const='true' type_modifier='n'/>
    <arg name='size' declared_type='size_t' type='L' type64='Q'/>
    <arg name='releaseData' function_pointer='true' declared_type='CGDataProviderReleaseDataCallback' type='^?' type_modifier='n'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderCreateWithFilename'>
    <arg name='filename' declared_type='char*' type='*' const='true'/>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderCreateWithURL'>
    <arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
    <retval declared_type='CGDataProviderRef' already_retained='true' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDataProviderGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGDataProviderRelease'>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGDataProviderRetain'>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <retval declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGDisplayAddressForPosition'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='x' declared_type='CGDisplayCoord' type='i'/>
    <arg name='y' declared_type='CGDisplayCoord' type='i'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='CGDisplayAvailableModes'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
  </function>
  <function name='CGDisplayBaseAddress'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='CGDisplayBeamPosition'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGBeamPosition' type='I'/>
  </function>
  <function name='CGDisplayBestModeForParameters'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='bitsPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='exactMatch' declared_type='boolean_t*' type='^i' type64='^I' type_modifier='o'/>
    <retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGDisplayBestModeForParametersAndRefreshRate'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='bitsPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='refresh' declared_type='CGRefreshRate' type='d'/>
    <arg name='exactMatch' declared_type='boolean_t*' type='^i' type64='^I' type_modifier='o'/>
    <retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGDisplayBestModeForParametersAndRefreshRateWithProperty'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='bitsPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='refresh' declared_type='CGRefreshRate' type='d'/>
    <arg name='property' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='exactMatch' declared_type='boolean_t*' type='^i' type64='^I' type_modifier='o'/>
    <retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGDisplayBitsPerPixel'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayBitsPerSample'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayBounds'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGDisplayBytesPerRow'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayCanSetPalette'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayCapture'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayCaptureWithOptions'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='options' declared_type='CGCaptureOptions' type='I'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayCurrentMode'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGDisplayFade'>
    <arg name='myToken' declared_type='CGDisplayFadeReservationToken' type='I'/>
    <arg name='seconds' declared_type='CGDisplayFadeInterval' type='f'/>
    <arg name='startBlend' declared_type='CGDisplayBlendFraction' type='f'/>
    <arg name='endBlend' declared_type='CGDisplayBlendFraction' type='f'/>
    <arg name='redBlend' declared_type='float' type='f'/>
    <arg name='greenBlend' declared_type='float' type='f'/>
    <arg name='blueBlend' declared_type='float' type='f'/>
    <arg name='synchronous' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGDisplayFadeOperationInProgress'>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayGammaTableCapacity'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGTableCount' type='I'/>
  </function>
  <function name='CGDisplayGetDrawingContext'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGContextRef' type='^{CGContext=}'/>
  </function>
  <function name='CGDisplayHideCursor'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayIDToOpenGLDisplayMask'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGOpenGLDisplayMask' type='I'/>
  </function>
  <function name='CGDisplayIOServicePort'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='io_service_t' type='I'/>
  </function>
  <function name='CGDisplayIsActive'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsAlwaysInMirrorSet'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsAsleep'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsBuiltin'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsCaptured'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsInHWMirrorSet'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsInMirrorSet'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsMain'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsOnline'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayIsStereo'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayMirrorsDisplay'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
  </function>
  <function name='CGDisplayModelNumber'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='uint32_t' type='I'/>
  </function>
  <function name='CGDisplayMoveCursorToPoint'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayPixelsHigh'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayPixelsWide'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayPrimaryDisplay'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
  </function>
  <function name='CGDisplayRegisterReconfigurationCallback'>
    <arg name='proc' function_pointer='true' declared_type='CGDisplayReconfigurationCallBack' type='^?' type_modifier='n'>
      <arg declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
      <arg declared_type='CGDisplayChangeSummaryFlags' type='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userInfo' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGDisplayRelease'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayRemoveReconfigurationCallback'>
    <arg name='proc' function_pointer='true' declared_type='CGDisplayReconfigurationCallBack' type='^?' type_modifier='n'>
      <arg declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
      <arg declared_type='CGDisplayChangeSummaryFlags' type='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userInfo' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGDisplayRestoreColorSyncSettings'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGDisplaySamplesPerPixel'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGDisplayScreenSize'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGDisplaySerialNumber'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='uint32_t' type='I'/>
  </function>
  <function name='CGDisplaySetPalette'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}' const='true'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplaySetStereoOperation'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='stereo' declared_type='boolean_t' type='i' type64='I'/>
    <arg name='forceBlueLine' declared_type='boolean_t' type='i' type64='I'/>
    <arg name='option' declared_type='CGConfigureOption' type='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGDisplayShowCursor'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplaySwitchToMode'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='mode' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGDisplayUnitNumber'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='uint32_t' type='I'/>
  </function>
  <function name='CGDisplayUsesOpenGLAcceleration'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='boolean_t' type='i' type64='I'/>
  </function>
  <function name='CGDisplayVendorNumber'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='uint32_t' type='I'/>
  </function>
  <function name='CGDisplayWaitForBeamPositionOutsideLines'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='upperScanLine' declared_type='CGBeamPosition' type='I'/>
    <arg name='lowerScanLine' declared_type='CGBeamPosition' type='I'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGEnableEventStateCombining'>
    <arg name='doCombineState' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGEventCreate'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
  </function>
  <function name='CGEventCreateCopy'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
  </function>
  <function name='CGEventCreateData'>
    <arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
  </function>
  <function name='CGEventCreateFromData'>
    <arg name='allocator' declared_type='CFAllocatorRef' type='^{__CFAllocator=}'/>
    <arg name='eventData' declared_type='CFDataRef' type='^{__CFData=}'/>
    <retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
  </function>
  <function name='CGEventCreateKeyboardEvent'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='virtualKey' declared_type='CGKeyCode' type='S'/>
    <arg name='keyDown' declared_type='_Bool' type='B'/>
    <retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
  </function>
  <function name='CGEventCreateMouseEvent'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='mouseType' declared_type='CGEventType' type='I'/>
    <arg name='mouseCursorPosition' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='mouseButton' declared_type='CGMouseButton' type='I'/>
    <retval declared_type='CGEventRef' already_retained='true' type='^{__CGEvent=}'/>
  </function>
  <function name='CGEventCreateSourceFromEvent'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventSourceRef' already_retained='true' type='^{__CGEventSource=}'/>
  </function>
  <function name='CGEventGetDoubleValueField'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='field' declared_type='CGEventField' type='I'/>
    <retval declared_type='double' type='d'/>
  </function>
  <function name='CGEventGetFlags'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventFlags' type='Q'/>
  </function>
  <function name='CGEventGetIntegerValueField'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='field' declared_type='CGEventField' type='I'/>
    <retval declared_type='int64_t' type='q'/>
  </function>
  <function name='CGEventGetLocation'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGEventGetSource'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
  </function>
  <function name='CGEventGetTimestamp'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventTimestamp' type='Q'/>
  </function>
  <function name='CGEventGetType'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='CGEventType' type='I'/>
  </function>
  <function name='CGEventGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGEventKeyboardGetUnicodeString'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='maxStringLength' declared_type='UniCharCount' type='L' type64='I'/>
    <arg name='actualStringLength' declared_type='UniCharCount*' type='^I' type_modifier='o'/>
    <arg name='unicodeString' c_array_length_in_arg='1' declared_type='UniChar*' type='^S' type_modifier='o'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventKeyboardSetUnicodeString'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='stringLength' declared_type='UniCharCount' type='L' type64='I'/>
    <arg name='unicodeString' c_array_length_in_arg='1' declared_type='UniChar*' type='^S' const='true' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventPost'>
    <arg name='tap' declared_type='CGEventTapLocation' type='I'/>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventPostToPSN'>
    <arg name='processSerialNumber' declared_type='void*' type='^{ProcessSerialNumber=II}' type_modifier='n'/>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetDoubleValueField'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='field' declared_type='CGEventField' type='I'/>
    <arg name='value' declared_type='double' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetFlags'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='flags' declared_type='CGEventFlags' type='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetIntegerValueField'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='field' declared_type='CGEventField' type='I'/>
    <arg name='value' declared_type='int64_t' type='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetLocation'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='location' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetSource'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetTimestamp'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='timestamp' declared_type='CGEventTimestamp' type='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSetType'>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <arg name='type' declared_type='CGEventType' type='I'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSourceButtonState'>
    <arg name='sourceState' declared_type='CGEventSourceStateID' type='I'/>
    <arg name='button' declared_type='CGMouseButton' type='I'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGEventSourceCounterForEventType'>
    <arg name='source' declared_type='CGEventSourceStateID' type='I'/>
    <arg name='evType' declared_type='CGEventType' type='I'/>
    <retval declared_type='uint32_t' type='I'/>
  </function>
  <function name='CGEventSourceCreate'>
    <arg name='sourceState' declared_type='CGEventSourceStateID' type='I'/>
    <retval declared_type='CGEventSourceRef' already_retained='true' type='^{__CGEventSource=}'/>
  </function>
  <function name='CGEventSourceFlagsState'>
    <arg name='sourceState' declared_type='CGEventSourceStateID' type='I'/>
    <retval declared_type='CGEventFlags' type='Q'/>
  </function>
  <function name='CGEventSourceGetKeyboardType'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='CGEventSourceKeyboardType' type='I'/>
  </function>
  <function name='CGEventSourceGetLocalEventsFilterDuringSuppressionState'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='state' declared_type='CGEventSuppressionState' type='I'/>
    <retval declared_type='CGEventFilterMask' type='I'/>
  </function>
  <function name='CGEventSourceGetLocalEventsSuppressionInterval'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='CFTimeInterval' type='d'/>
  </function>
  <function name='CGEventSourceGetSourceStateID'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='CGEventSourceStateID' type='I'/>
  </function>
  <function name='CGEventSourceGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGEventSourceGetUserData'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <retval declared_type='int64_t' type='q'/>
  </function>
  <function name='CGEventSourceKeyState'>
    <arg name='sourceState' declared_type='CGEventSourceStateID' type='I'/>
    <arg name='key' declared_type='CGKeyCode' type='S'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGEventSourceSecondsSinceLastEventType'>
    <arg name='source' declared_type='CGEventSourceStateID' type='I'/>
    <arg name='eventType' declared_type='CGEventType' type='I'/>
    <retval declared_type='CFTimeInterval' type='d'/>
  </function>
  <function name='CGEventSourceSetKeyboardType'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='keyboardType' declared_type='CGEventSourceKeyboardType' type='I'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSourceSetLocalEventsFilterDuringSuppressionState'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='filter' declared_type='CGEventFilterMask' type='I'/>
    <arg name='state' declared_type='CGEventSuppressionState' type='I'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSourceSetLocalEventsSuppressionInterval'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='seconds' declared_type='CFTimeInterval' type='d'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventSourceSetUserData'>
    <arg name='source' declared_type='CGEventSourceRef' type='^{__CGEventSource=}'/>
    <arg name='userData' declared_type='int64_t' type='q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventTapCreate'>
    <arg name='tap' declared_type='CGEventTapLocation' type='I'/>
    <arg name='place' declared_type='CGEventTapPlacement' type='I'/>
    <arg name='options' declared_type='CGEventTapOptions' type='I'/>
    <arg name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
    <arg name='callback' function_pointer='true' declared_type='CGEventTapCallBack' type='^?' type_modifier='n'>
      <arg declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
      <arg declared_type='CGEventType' type='I'/>
      <arg declared_type='CGEventRef' type='^{__CGEvent=}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='CGEventRef' type='^{__CGEvent=}'/>
    </arg>
    <arg name='refcon' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CFMachPortRef' already_retained='true' type='^{__CFMachPort=}'/>
  </function>
  <function name='CGEventTapCreateForPSN'>
    <arg name='processSerialNumber' declared_type='void*' type='^{ProcessSerialNumber=II}' type_modifier='n'/>
    <arg name='place' declared_type='CGEventTapPlacement' type='I'/>
    <arg name='options' declared_type='CGEventTapOptions' type='I'/>
    <arg name='eventsOfInterest' declared_type='CGEventMask' type='Q'/>
    <arg name='callback' function_pointer='true' declared_type='CGEventTapCallBack' type='^?' type_modifier='n'>
      <arg declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
      <arg declared_type='CGEventType' type='I'/>
      <arg declared_type='CGEventRef' type='^{__CGEvent=}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='CGEventRef' type='^{__CGEvent=}'/>
    </arg>
    <arg name='refcon' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CFMachPortRef' already_retained='true' type='^{__CFMachPort=}'/>
  </function>
  <function name='CGEventTapEnable'>
    <arg name='myTap' declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
    <arg name='enable' declared_type='_Bool' type='B'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGEventTapIsEnabled'>
    <arg name='myTap' declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGEventTapPostEvent'>
    <arg name='proxy' declared_type='CGEventTapProxy' type='^{__CGEventTapProxy=}'/>
    <arg name='event' declared_type='CGEventRef' type='^{__CGEvent=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGFontCanCreatePostScriptSubset'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <arg name='format' declared_type='CGFontPostScriptFormat' type='i'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGFontCopyPostScriptName'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
  </function>
  <function name='CGFontCopyVariationAxes'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='CFArrayRef' already_retained='true' type='^{__CFArray=}'/>
  </function>
  <function name='CGFontCopyVariations'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGFontCreateCopyWithVariations'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <arg name='variations' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
  </function>
  <function name='CGFontCreatePostScriptEncoding'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <arg name='encoding' declared_type='CGGlyph*' type='^S' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
  </function>
  <function name='CGFontCreatePostScriptSubset'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <arg name='subsetName' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='format' declared_type='CGFontPostScriptFormat' type='i'/>
    <arg name='glyphs' c_array_length_in_arg='4' declared_type='CGGlyph*' type='^S' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <arg name='encoding' declared_type='CGGlyph*' type='^S' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
  </function>
  <function name='CGFontCreateWithPlatformFont'>
    <arg name='platformFontReference' declared_type='void*' type='L' type64='I'/>
    <retval declared_type='CGFontRef' already_retained='true' type='^{CGFont=}'/>
  </function>
  <function name='CGFontGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGFontRelease'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGFontRetain'>
    <arg name='font' declared_type='CGFontRef' type='^{CGFont=}'/>
    <retval declared_type='CGFontRef' type='^{CGFont=}'/>
  </function>
  <function name='CGFunctionCreate'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='domainDimension' declared_type='size_t' type='L' type64='Q'/>
    <arg name='domain' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='rangeDimension' declared_type='size_t' type='L' type64='Q'/>
    <arg name='range' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='callbacks' declared_type='CGFunctionCallbacks*' type='^{CGFunctionCallbacks=I^?^?}' const='true' type_modifier='n'/>
    <retval declared_type='CGFunctionRef' already_retained='true' type='^{CGFunction=}'/>
  </function>
  <function name='CGFunctionGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGFunctionRelease'>
    <arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGFunctionRetain'>
    <arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
    <retval declared_type='CGFunctionRef' type='^{CGFunction=}'/>
  </function>
  <function name='CGGLContextCreate'>
    <arg name='glContext' declared_type='void*' type='i' type64='^{CGContext=}'/>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
  </function>
  <function name='CGGLContextUpdateViewportSize'>
    <arg name='c' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGGetActiveDisplayList'>
    <arg name='maxDisplays' declared_type='CGDisplayCount' type='I'/>
    <arg name='activeDspys' c_array_length_in_arg='0' declared_type='CGDirectDisplayID*' type='^^{_CGDirectDisplayID}' type_modifier='o'/>
    <arg name='dspyCnt' declared_type='CGDisplayCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetDisplayTransferByFormula'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='redMin' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='redMax' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='redGamma' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='greenMin' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='greenMax' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='greenGamma' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='blueMin' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='blueMax' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='blueGamma' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetDisplayTransferByTable'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='capacity' declared_type='CGTableCount' type='I'/>
    <arg name='redTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='greenTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='blueTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' type_modifier='o'/>
    <arg name='sampleCount' declared_type='CGTableCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetDisplaysWithOpenGLDisplayMask'>
    <arg name='mask' declared_type='CGOpenGLDisplayMask' type='I'/>
    <arg name='maxDisplays' declared_type='CGDisplayCount' type='I'/>
    <arg name='dspys' c_array_length_in_arg='1' declared_type='CGDirectDisplayID*' type='^^{_CGDirectDisplayID}' type_modifier='o'/>
    <arg name='dspyCnt' declared_type='CGDisplayCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetDisplaysWithPoint'>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='maxDisplays' declared_type='CGDisplayCount' type='I'/>
    <arg name='dspys' c_array_length_in_arg='1' declared_type='CGDirectDisplayID*' type='^^{_CGDirectDisplayID}' type_modifier='o'/>
    <arg name='dspyCnt' declared_type='CGDisplayCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetDisplaysWithRect'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='maxDisplays' declared_type='CGDisplayCount' type='I'/>
    <arg name='dspys' c_array_length_in_arg='1' declared_type='CGDirectDisplayID*' type='^^{_CGDirectDisplayID}' type_modifier='o'/>
    <arg name='dspyCnt' declared_type='CGDisplayCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGGetEventTapList'>
    <arg name='maxNumberOfTaps' declared_type='CGTableCount' type='I'/>
    <arg name='tapList' c_array_length_in_arg='0' declared_type='CGEventTapInformation*' type='^{CGEventTapInformation=IIIQiiBfff}' type_modifier='n'/>
    <arg name='eventTapCount' declared_type='CGTableCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGGetLastMouseDelta'>
    <arg name='deltaX' declared_type='CGMouseDelta*' type='^i' type_modifier='o'/>
    <arg name='deltaY' declared_type='CGMouseDelta*' type='^i' type_modifier='o'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGGetOnlineDisplayList'>
    <arg name='maxDisplays' declared_type='CGDisplayCount' type='I'/>
    <arg name='onlineDspys' c_array_length_in_arg='0' declared_type='CGDirectDisplayID*' type='^^{_CGDirectDisplayID}' type_modifier='o'/>
    <arg name='dspyCnt' declared_type='CGDisplayCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGImageCreate'>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bitsPerComponent' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bitsPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bytesPerRow' declared_type='size_t' type='L' type64='Q'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='bitmapInfo' declared_type='CGBitmapInfo' type='I'/>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='decode' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
    <arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateCopy'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateCopyWithColorSpace'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateWithImageInRect'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateWithJPEGDataProvider'>
    <arg name='source' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='decode' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
    <arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateWithMask'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <arg name='mask' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateWithMaskingColors'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <arg name='components' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageCreateWithPNGDataProvider'>
    <arg name='source' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='decode' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
    <arg name='intent' declared_type='CGColorRenderingIntent' type='i'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageGetAlphaInfo'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGImageAlphaInfo' type='i'/>
  </function>
  <function name='CGImageGetBitmapInfo'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGBitmapInfo' type='I'/>
  </function>
  <function name='CGImageGetBitsPerComponent'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGImageGetBitsPerPixel'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGImageGetBytesPerRow'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGImageGetColorSpace'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
  </function>
  <function name='CGImageGetDataProvider'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
  </function>
  <function name='CGImageGetDecode'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='float*' type='^f' const='true'/>
  </function>
  <function name='CGImageGetHeight'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGImageGetRenderingIntent'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGColorRenderingIntent' type='i'/>
  </function>
  <function name='CGImageGetShouldInterpolate'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGImageGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGImageGetWidth'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGImageIsMask'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGImageMaskCreate'>
    <arg name='width' declared_type='size_t' type='L' type64='Q'/>
    <arg name='height' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bitsPerComponent' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bitsPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <arg name='bytesPerRow' declared_type='size_t' type='L' type64='Q'/>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='decode' declared_type='float*' type='^f' const='true' c_array_of_variable_length='true' type_modifier='n'/>
    <arg name='shouldInterpolate' declared_type='_Bool' type='B'/>
    <retval declared_type='CGImageRef' already_retained='true' type='^{CGImage=}'/>
  </function>
  <function name='CGImageRelease'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGImageRetain'>
    <arg name='image' declared_type='CGImageRef' type='^{CGImage=}'/>
    <retval declared_type='CGImageRef' type='^{CGImage=}'/>
  </function>
  <function name='CGInhibitLocalEvents'>
    <arg name='doInhibit' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGLayerCreateWithContext'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGLayerRef' already_retained='true' type='^{CGLayer=}'/>
  </function>
  <function name='CGLayerGetContext'>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='CGContextRef' type='^{CGContext=}'/>
  </function>
  <function name='CGLayerGetSize'>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGLayerGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGLayerRelease'>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGLayerRetain'>
    <arg name='layer' declared_type='CGLayerRef' type='^{CGLayer=}'/>
    <retval declared_type='CGLayerRef' type='^{CGLayer=}'/>
  </function>
  <function name='CGMainDisplayID'>
    <retval declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
  </function>
  <function name='CGOpenGLDisplayMaskToDisplayID'>
    <arg name='mask' declared_type='CGOpenGLDisplayMask' type='I'/>
    <retval declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
  </function>
  <function name='CGPDFArrayGetArray'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetBoolean'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFBoolean*' type='*' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetCount'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGPDFArrayGetDictionary'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetInteger'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFInteger*' type='^i' type64='^q' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetName'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='char**' type='^*' const='true' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetNull'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetNumber'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFReal*' type='^f' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetObject'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetStream'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFArrayGetString'>
    <arg name='array' declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
    <arg name='index' declared_type='size_t' type='L' type64='Q'/>
    <arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFContentStreamCreateWithPage'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='CGPDFContentStreamRef' already_retained='true' type='^{CGPDFContentStream=}'/>
  </function>
  <function name='CGPDFContentStreamCreateWithStream'>
    <arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
    <arg name='streamResources' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='parent' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <retval declared_type='CGPDFContentStreamRef' already_retained='true' type='^{CGPDFContentStream=}'/>
  </function>
  <function name='CGPDFContentStreamGetResource'>
    <arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <arg name='category' declared_type='char*' type='*' const='true'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
  </function>
  <function name='CGPDFContentStreamGetStreams'>
    <arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
  </function>
  <function name='CGPDFContentStreamRelease'>
    <arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFContentStreamRetain'>
    <arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <retval declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
  </function>
  <function name='CGPDFContextAddDestinationAtPoint'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFContextBeginPage'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='pageInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFContextCreate'>
    <arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
    <arg name='mediaBox' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
  </function>
  <function name='CGPDFContextCreateWithURL'>
    <arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
    <arg name='mediaBox' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='auxiliaryInfo' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGContextRef' already_retained='true' type='^{CGContext=}'/>
  </function>
  <function name='CGPDFContextEndPage'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFContextSetDestinationForRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='name' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFContextSetURLForRect'>
    <arg name='context' declared_type='CGContextRef' type='^{CGContext=}'/>
    <arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFDictionaryApplyFunction'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='function' function_pointer='true' declared_type='CGPDFDictionaryApplierFunction' type='^?' type_modifier='n'>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFDictionaryGetArray'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetBoolean'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFBoolean*' type='*' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetCount'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGPDFDictionaryGetDictionary'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetInteger'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFInteger*' type='^i' type64='^q' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetName'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='char**' type='^*' const='true' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetNumber'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFReal*' type='^f' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetObject'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetStream'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDictionaryGetString'>
    <arg name='dict' declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
    <arg name='key' declared_type='char*' type='*' const='true' type_modifier='n'/>
    <arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDocumentAllowsCopying'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDocumentAllowsPrinting'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDocumentCreateWithProvider'>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <retval declared_type='CGPDFDocumentRef' already_retained='true' type='^{CGPDFDocument=}'/>
  </function>
  <function name='CGPDFDocumentCreateWithURL'>
    <arg name='url' declared_type='CFURLRef' type='^{__CFURL=}'/>
    <retval declared_type='CGPDFDocumentRef' already_retained='true' type='^{CGPDFDocument=}'/>
  </function>
  <function name='CGPDFDocumentGetArtBox'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFDocumentGetBleedBox'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFDocumentGetCatalog'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
  </function>
  <function name='CGPDFDocumentGetCropBox'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFDocumentGetID'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='CGPDFArrayRef' type='^{CGPDFArray=}'/>
  </function>
  <function name='CGPDFDocumentGetInfo'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
  </function>
  <function name='CGPDFDocumentGetMediaBox'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFDocumentGetNumberOfPages'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGPDFDocumentGetPage'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='pageNumber' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
  </function>
  <function name='CGPDFDocumentGetRotationAngle'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGPDFDocumentGetTrimBox'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='page' declared_type='int' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFDocumentGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGPDFDocumentGetVersion'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='majorVersion' declared_type='int*' type='^i' type_modifier='o'/>
    <arg name='minorVersion' declared_type='int*' type='^i' type_modifier='o'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFDocumentIsEncrypted'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDocumentIsUnlocked'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFDocumentRelease'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFDocumentRetain'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <retval declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
  </function>
  <function name='CGPDFDocumentUnlockWithPassword'>
    <arg name='document' declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
    <arg name='password' declared_type='char*' type='*' const='true'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFObjectGetType'>
    <arg name='object' declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
    <retval declared_type='CGPDFObjectType' type='i'/>
  </function>
  <function name='CGPDFObjectGetValue'>
    <arg name='object' declared_type='CGPDFObjectRef' type='^(CGPDFObject=)'/>
    <arg name='type' declared_type='CGPDFObjectType' type='i'/>
    <arg name='value' declared_type='void*' type='^v' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFOperatorTableCreate'>
    <retval declared_type='CGPDFOperatorTableRef' already_retained='true' type='^{CGPDFOperatorTable=}'/>
  </function>
  <function name='CGPDFOperatorTableRelease'>
    <arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFOperatorTableRetain'>
    <arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
    <retval declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
  </function>
  <function name='CGPDFOperatorTableSetCallback'>
    <arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='callback' function_pointer='true' declared_type='CGPDFOperatorCallback' type='^?' type_modifier='n'>
      <arg declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFPageGetBoxRect'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <arg name='box' declared_type='CGPDFBox' type='i'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPDFPageGetDictionary'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
  </function>
  <function name='CGPDFPageGetDocument'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='CGPDFDocumentRef' type='^{CGPDFDocument=}'/>
  </function>
  <function name='CGPDFPageGetDrawingTransform'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <arg name='box' declared_type='CGPDFBox' type='i'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='rotate' declared_type='int' type='i'/>
    <arg name='preserveAspectRatio' declared_type='_Bool' type='B'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='CGPDFPageGetPageNumber'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGPDFPageGetRotationAngle'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGPDFPageGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGPDFPageRelease'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFPageRetain'>
    <arg name='page' declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
    <retval declared_type='CGPDFPageRef' type='^{CGPDFPage=}'/>
  </function>
  <function name='CGPDFScannerCreate'>
    <arg name='cs' declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
    <arg name='table' declared_type='CGPDFOperatorTableRef' type='^{CGPDFOperatorTable=}'/>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CGPDFScannerRef' already_retained='true' type='^{CGPDFScanner=}'/>
  </function>
  <function name='CGPDFScannerGetContentStream'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <retval declared_type='CGPDFContentStreamRef' type='^{CGPDFContentStream=}'/>
  </function>
  <function name='CGPDFScannerPopArray'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFArrayRef*' type='^^{CGPDFArray}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopBoolean'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFBoolean*' type='*' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopDictionary'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFDictionaryRef*' type='^^{CGPDFDictionary}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopInteger'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFInteger*' type='^i' type64='^q' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopName'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='char**' type='^*' const='true' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopNumber'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFReal*' type='^f' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopObject'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFObjectRef*' type='^^(CGPDFObject)' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopStream'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFStreamRef*' type='^^{CGPDFStream}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerPopString'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <arg name='value' declared_type='CGPDFStringRef*' type='^^{CGPDFString}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFScannerRelease'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPDFScannerRetain'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <retval declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
  </function>
  <function name='CGPDFScannerScan'>
    <arg name='scanner' declared_type='CGPDFScannerRef' type='^{CGPDFScanner=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPDFStreamCopyData'>
    <arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
    <arg name='format' declared_type='CGPDFDataFormat*' type='^i' type_modifier='o'/>
    <retval declared_type='CFDataRef' already_retained='true' type='^{__CFData=}'/>
  </function>
  <function name='CGPDFStreamGetDictionary'>
    <arg name='stream' declared_type='CGPDFStreamRef' type='^{CGPDFStream=}'/>
    <retval declared_type='CGPDFDictionaryRef' type='^{CGPDFDictionary=}'/>
  </function>
  <function name='CGPDFStringCopyDate'>
    <arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
    <retval declared_type='CFDateRef' already_retained='true' type='^{__CFDate=}'/>
  </function>
  <function name='CGPDFStringCopyTextString'>
    <arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
    <retval declared_type='CFStringRef' already_retained='true' type='^{__CFString=}'/>
  </function>
  <function name='CGPDFStringGetBytePtr'>
    <arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
    <retval declared_type='unsigned char*' type='*' const='true'/>
  </function>
  <function name='CGPDFStringGetLength'>
    <arg name='string' declared_type='CGPDFStringRef' type='^{CGPDFString=}'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='CGPSConverterAbort'>
    <arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPSConverterConvert'>
    <arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
    <arg name='provider' declared_type='CGDataProviderRef' type='^{CGDataProvider=}'/>
    <arg name='consumer' declared_type='CGDataConsumerRef' type='^{CGDataConsumer=}'/>
    <arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPSConverterCreate'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='callbacks' declared_type='CGPSConverterCallbacks*' type='^{CGPSConverterCallbacks=I^?^?^?^?^?^?^?}' const='true' type_modifier='n'/>
    <arg name='options' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
    <retval declared_type='CGPSConverterRef' already_retained='true' type='^{CGPSConverter=}'/>
  </function>
  <function name='CGPSConverterGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGPSConverterIsConverting'>
    <arg name='converter' declared_type='CGPSConverterRef' type='^{CGPSConverter=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPaletteCreateCopy'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateDefaultColorPalette'>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateFromPaletteBlendedWithColor'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <arg name='fraction' declared_type='CGPaletteBlendFraction' type='f'/>
    <arg name='color' declared_type='CGDeviceColor' type='{_CGDeviceColor=fff}'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateWithByteSamples'>
    <arg name='sampleTable' c_array_length_in_arg='1' declared_type='CGDeviceByteColor*' type='^{_CGDeviceByteColor=CCC}' type_modifier='n'/>
    <arg name='sampleCount' declared_type='CGTableCount' type='I'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateWithCapacity'>
    <arg name='capacity' declared_type='CGTableCount' type='I'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateWithDisplay'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteCreateWithSamples'>
    <arg name='sampleTable' c_array_length_in_arg='1' declared_type='CGDeviceColor*' type='^{_CGDeviceColor=fff}' type_modifier='n'/>
    <arg name='sampleCount' declared_type='CGTableCount' type='I'/>
    <retval declared_type='CGDirectPaletteRef' already_retained='true' type='^{_CGDirectPaletteRef=}'/>
  </function>
  <function name='CGPaletteGetColorAtIndex'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <arg name='index' declared_type='CGTableCount' type='I'/>
    <retval declared_type='CGDeviceColor' type='{_CGDeviceColor=fff}'/>
  </function>
  <function name='CGPaletteGetIndexForColor'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <arg name='color' declared_type='CGDeviceColor' type='{_CGDeviceColor=fff}'/>
    <retval declared_type='CGTableCount' type='I'/>
  </function>
  <function name='CGPaletteGetNumberOfSamples'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <retval declared_type='CGTableCount' type='I'/>
  </function>
  <function name='CGPaletteIsEqualToPalette'>
    <arg name='palette1' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <arg name='palette2' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <retval declared_type='Boolean' type='B'/>
  </function>
  <function name='CGPaletteRelease'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPaletteSetColorAtIndex'>
    <arg name='palette' declared_type='CGDirectPaletteRef' type='^{_CGDirectPaletteRef=}'/>
    <arg name='color' declared_type='CGDeviceColor' type='{_CGDeviceColor=fff}'/>
    <arg name='index' declared_type='CGTableCount' type='I'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddArc'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <arg name='radius' declared_type='float' type='f'/>
    <arg name='startAngle' declared_type='float' type='f'/>
    <arg name='endAngle' declared_type='float' type='f'/>
    <arg name='clockwise' declared_type='_Bool' type='B'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddArcToPoint'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='x1' declared_type='float' type='f'/>
    <arg name='y1' declared_type='float' type='f'/>
    <arg name='x2' declared_type='float' type='f'/>
    <arg name='y2' declared_type='float' type='f'/>
    <arg name='radius' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddCurveToPoint'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='cp1x' declared_type='float' type='f'/>
    <arg name='cp1y' declared_type='float' type='f'/>
    <arg name='cp2x' declared_type='float' type='f'/>
    <arg name='cp2y' declared_type='float' type='f'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddEllipseInRect'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddLineToPoint'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddLines'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='points' c_array_length_in_arg='3' declared_type='CGPoint*' type='^{CGPoint=ff}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddPath'>
    <arg name='path1' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='path2' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddQuadCurveToPoint'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='cpx' declared_type='float' type='f'/>
    <arg name='cpy' declared_type='float' type='f'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddRect'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathAddRects'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='rects' c_array_length_in_arg='3' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true' type_modifier='n'/>
    <arg name='count' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathApply'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='function' function_pointer='true' declared_type='CGPathApplierFunction' type='^?' type_modifier='n'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CGPathElement*' type='^{CGPathElement=i^{CGPoint}}' const='true'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathCloseSubpath'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathContainsPoint'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='eoFill' declared_type='_Bool' type='B'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPathCreateCopy'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='CGPathRef' already_retained='true' type='^{CGPath=}'/>
  </function>
  <function name='CGPathCreateMutable'>
    <retval declared_type='CGMutablePathRef' already_retained='true' type='^{CGPath=}'/>
  </function>
  <function name='CGPathCreateMutableCopy'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='CGMutablePathRef' already_retained='true' type='^{CGPath=}'/>
  </function>
  <function name='CGPathEqualToPath'>
    <arg name='path1' declared_type='CGPathRef' type='^{CGPath=}'/>
    <arg name='path2' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPathGetBoundingBox'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGPathGetCurrentPoint'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGPathGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGPathIsEmpty'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPathIsRect'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <arg name='rect' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type_modifier='o'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGPathMoveToPoint'>
    <arg name='path' declared_type='CGMutablePathRef' type='^{CGPath=}'/>
    <arg name='m' declared_type='CGAffineTransform*' type='^{CGAffineTransform=ffffff}' const='true' type_modifier='n'/>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathRelease'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPathRetain'>
    <arg name='path' declared_type='CGPathRef' type='^{CGPath=}'/>
    <retval declared_type='CGPathRef' type='^{CGPath=}'/>
  </function>
  <function name='CGPatternCreate'>
    <arg name='info' declared_type='void*' type='^v' type_modifier='n'/>
    <arg name='bounds' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='matrix' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <arg name='xStep' declared_type='float' type='f'/>
    <arg name='yStep' declared_type='float' type='f'/>
    <arg name='tiling' declared_type='CGPatternTiling' type='i'/>
    <arg name='isColored' declared_type='_Bool' type='B'/>
    <arg name='callbacks' declared_type='CGPatternCallbacks*' type='^{CGPatternCallbacks=I^?^?}' const='true' type_modifier='n'/>
    <retval declared_type='CGPatternRef' already_retained='true' type='^{CGPattern=}'/>
  </function>
  <function name='CGPatternGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGPatternRelease'>
    <arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGPatternRetain'>
    <arg name='pattern' declared_type='CGPatternRef' type='^{CGPattern=}'/>
    <retval declared_type='CGPatternRef' type='^{CGPattern=}'/>
  </function>
  <function name='CGPointApplyAffineTransform'>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGPointEqualToPoint'>
    <arg name='point1' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='point2' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGPointMake' inline='true'>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='CGPostKeyboardEvent'>
    <arg name='keyChar' declared_type='CGCharCode' type='S'/>
    <arg name='virtualKey' declared_type='CGKeyCode' type='S'/>
    <arg name='keyDown' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGPostMouseEvent' variadic='true'>
    <arg name='mouseCursorPosition' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='updateMouseCursorPosition' declared_type='boolean_t' type='i' type64='I'/>
    <arg name='buttonCount' declared_type='CGButtonCount' type='I'/>
    <arg name='mouseButtonDown' declared_type='boolean_t' type='i' type64='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGPostScrollWheelEvent' variadic='true'>
    <arg name='wheelCount' declared_type='CGWheelCount' type='I'/>
    <arg name='wheel1' declared_type='int32_t' type='i'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGRectApplyAffineTransform'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectContainsPoint'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectContainsRect'>
    <arg name='rect1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='rect2' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectDivide'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='slice' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type_modifier='o'/>
    <arg name='remainder' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type_modifier='o'/>
    <arg name='amount' declared_type='float' type='f'/>
    <arg name='edge' declared_type='CGRectEdge' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGRectEqualToRect'>
    <arg name='rect1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='rect2' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectGetHeight'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMaxX'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMaxY'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMidX'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMidY'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMinX'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetMinY'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectGetWidth'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='float' type='f'/>
  </function>
  <function name='CGRectInset'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='dx' declared_type='float' type='f'/>
    <arg name='dy' declared_type='float' type='f'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectIntegral'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectIntersection'>
    <arg name='r1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='r2' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectIntersectsRect'>
    <arg name='rect1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='rect2' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectIsEmpty'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectIsInfinite'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='CGRectIsNull'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGRectMake' inline='true'>
    <arg name='x' declared_type='float' type='f'/>
    <arg name='y' declared_type='float' type='f'/>
    <arg name='width' declared_type='float' type='f'/>
    <arg name='height' declared_type='float' type='f'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectOffset'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='dx' declared_type='float' type='f'/>
    <arg name='dy' declared_type='float' type='f'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectStandardize'>
    <arg name='rect' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRectUnion'>
    <arg name='r1' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <arg name='r2' declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
    <retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}'/>
  </function>
  <function name='CGRegisterScreenRefreshCallback'>
    <arg name='function' function_pointer='true' declared_type='CGScreenRefreshCallback' type='^?' type_modifier='n'>
      <arg declared_type='CGRectCount' type='I'/>
      <arg declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userParameter' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGReleaseAllDisplays'>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGReleaseDisplayFadeReservation'>
    <arg name='myToken' declared_type='CGDisplayFadeReservationToken' type='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGReleaseScreenRefreshRects'>
    <arg name='rectArray' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGRestorePermanentDisplayConfiguration'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGScreenRegisterMoveCallback'>
    <arg name='function' function_pointer='true' declared_type='CGScreenUpdateMoveCallback' type='^?' type_modifier='n'>
      <arg declared_type='CGScreenUpdateMoveDelta' type='{_CGScreenUpdateMoveDelta=ii}'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <arg declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userParameter' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGScreenUnregisterMoveCallback'>
    <arg name='function' function_pointer='true' declared_type='CGScreenUpdateMoveCallback' type='^?' type_modifier='n'>
      <arg declared_type='CGScreenUpdateMoveDelta' type='{_CGScreenUpdateMoveDelta=ii}'/>
      <arg declared_type='size_t' type='L' type64='Q'/>
      <arg declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userParameter' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGSessionCopyCurrentDictionary'>
    <retval declared_type='CFDictionaryRef' already_retained='true' type='^{__CFDictionary=}'/>
  </function>
  <function name='CGSetDisplayTransferByByteTable'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='tableSize' declared_type='CGTableCount' type='I'/>
    <arg name='redTable' c_array_length_in_arg='1' declared_type='CGByteValue*' type='*' const='true' type_modifier='o'/>
    <arg name='greenTable' c_array_length_in_arg='1' declared_type='CGByteValue*' type='*' const='true' type_modifier='o'/>
    <arg name='blueTable' c_array_length_in_arg='1' declared_type='CGByteValue*' type='*' const='true' type_modifier='o'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGSetDisplayTransferByFormula'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='redMin' declared_type='CGGammaValue' type='f'/>
    <arg name='redMax' declared_type='CGGammaValue' type='f'/>
    <arg name='redGamma' declared_type='CGGammaValue' type='f'/>
    <arg name='greenMin' declared_type='CGGammaValue' type='f'/>
    <arg name='greenMax' declared_type='CGGammaValue' type='f'/>
    <arg name='greenGamma' declared_type='CGGammaValue' type='f'/>
    <arg name='blueMin' declared_type='CGGammaValue' type='f'/>
    <arg name='blueMax' declared_type='CGGammaValue' type='f'/>
    <arg name='blueGamma' declared_type='CGGammaValue' type='f'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGSetDisplayTransferByTable'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <arg name='tableSize' declared_type='CGTableCount' type='I'/>
    <arg name='redTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' const='true' type_modifier='n'/>
    <arg name='greenTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' const='true' type_modifier='n'/>
    <arg name='blueTable' c_array_length_in_arg='1' declared_type='CGGammaValue*' type='^f' const='true' type_modifier='n'/>
    <retval declared_type='CGDisplayErr' type='i'/>
  </function>
  <function name='CGSetLocalEventsFilterDuringSuppressionState'>
    <arg name='filter' declared_type='CGEventFilterMask' type='I'/>
    <arg name='state' declared_type='CGEventSuppressionState' type='I'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGSetLocalEventsSuppressionInterval'>
    <arg name='seconds' declared_type='CFTimeInterval' type='d'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGShadingCreateAxial'>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='start' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='end' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
    <arg name='extendStart' declared_type='_Bool' type='B'/>
    <arg name='extendEnd' declared_type='_Bool' type='B'/>
    <retval declared_type='CGShadingRef' already_retained='true' type='^{CGShading=}'/>
  </function>
  <function name='CGShadingCreateRadial'>
    <arg name='colorspace' declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
    <arg name='start' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='startRadius' declared_type='float' type='f'/>
    <arg name='end' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='endRadius' declared_type='float' type='f'/>
    <arg name='function' declared_type='CGFunctionRef' type='^{CGFunction=}'/>
    <arg name='extendStart' declared_type='_Bool' type='B'/>
    <arg name='extendEnd' declared_type='_Bool' type='B'/>
    <retval declared_type='CGShadingRef' already_retained='true' type='^{CGShading=}'/>
  </function>
  <function name='CGShadingGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='CGShadingRelease'>
    <arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGShadingRetain'>
    <arg name='shading' declared_type='CGShadingRef' type='^{CGShading=}'/>
    <retval declared_type='CGShadingRef' type='^{CGShading=}'/>
  </function>
  <function name='CGShieldingWindowID'>
    <arg name='display' declared_type='CGDirectDisplayID' type='^{_CGDirectDisplayID=}'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='CGShieldingWindowLevel'>
    <retval declared_type='int32_t' type='i'/>
  </function>
  <function name='CGSizeApplyAffineTransform'>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGSizeEqualToSize'>
    <arg name='size1' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='size2' declared_type='CGSize' type='{CGSize=ff}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='CGSizeMake' inline='true'>
    <arg name='width' declared_type='float' type='f'/>
    <arg name='height' declared_type='float' type='f'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function name='CGUnregisterScreenRefreshCallback'>
    <arg name='function' function_pointer='true' declared_type='CGScreenRefreshCallback' type='^?' type_modifier='n'>
      <arg declared_type='CGRectCount' type='I'/>
      <arg declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='userParameter' declared_type='void*' type='^v' type_modifier='n'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='CGWaitForScreenRefreshRects'>
    <arg name='pRectArray' declared_type='CGRect**' type='^^{CGRect}' type_modifier='o'/>
    <arg name='pCount' declared_type='CGRectCount*' type='^I' type_modifier='o'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGWaitForScreenUpdateRects'>
    <arg name='requestedOperations' declared_type='CGScreenUpdateOperation' type='I'/>
    <arg name='currentOperation' declared_type='CGScreenUpdateOperation*' type='^I' type_modifier='o'/>
    <arg name='pRectArray' c_array_length_in_arg='3' declared_type='CGRect**' type='^^{CGRect}' type_modifier='o'/>
    <arg name='pCount' declared_type='size_t*' type='^I' type64='^Q' type_modifier='o'/>
    <arg name='pDelta' declared_type='CGScreenUpdateMoveDelta*' type='^{_CGScreenUpdateMoveDelta=ii}' type_modifier='o'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGWarpMouseCursorPosition'>
    <arg name='newCursorPosition' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <retval declared_type='CGError' type='i'/>
  </function>
  <function name='CGWindowLevelForKey'>
    <arg name='key' declared_type='CGWindowLevelKey' type='i'/>
    <retval declared_type='CGWindowLevel' type='i'/>
  </function>
  <function name='CGWindowServerCFMachPort'>
    <retval declared_type='CFMachPortRef' type='^{__CFMachPort=}'/>
  </function>
  <function name='__CGAffineTransformMake' inline='true'>
    <arg name='a' declared_type='float' type='f'/>
    <arg name='b' declared_type='float' type='f'/>
    <arg name='c' declared_type='float' type='f'/>
    <arg name='d' declared_type='float' type='f'/>
    <arg name='tx' declared_type='float' type='f'/>
    <arg name='ty' declared_type='float' type='f'/>
    <retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
  </function>
  <function name='__CGPointApplyAffineTransform' inline='true'>
    <arg name='point' declared_type='CGPoint' type='{CGPoint=ff}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGPoint' type='{CGPoint=ff}'/>
  </function>
  <function name='__CGSizeApplyAffineTransform' inline='true'>
    <arg name='size' declared_type='CGSize' type='{CGSize=ff}'/>
    <arg name='t' declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}'/>
    <retval declared_type='CGSize' type='{CGSize=ff}'/>
  </function>
  <function_alias name='CGAffineTransformMake' original='__CGAffineTransformMake'/>
  <function_alias name='CGPointApplyAffineTransform' original='__CGPointApplyAffineTransform'/>
  <function_alias name='CGSizeApplyAffineTransform' original='__CGSizeApplyAffineTransform'/>
</signatures>
