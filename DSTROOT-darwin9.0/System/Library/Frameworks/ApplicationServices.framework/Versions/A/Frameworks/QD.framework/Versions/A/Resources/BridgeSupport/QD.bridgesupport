<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<struct name='ATSFlatDataFontNameDataHeader' type='{ATSFlatDataFontNameDataHeader=&quot;nameSpecifierType&quot;I&quot;nameSpecifierSize&quot;I}' type64='{ATSFlatDataFontNameDataHeader=&quot;nameSpecifierType&quot;I&quot;nameSpecifierSize&quot;Q}'>
<field name='nameSpecifierType' declared_type='ATSFlatDataFontSpeciferType' type='L' type64='I'/>
<field name='nameSpecifierSize' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataFontSpecRawNameData' type='{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}' type64='{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;Q}'>
<field name='fontNameType' declared_type='FontNameCode' type='L' type64='I'/>
<field name='fontNamePlatform' declared_type='FontPlatformCode' type='L' type64='I'/>
<field name='fontNameScript' declared_type='FontScriptCode' type='L' type64='I'/>
<field name='fontNameLanguage' declared_type='FontLanguageCode' type='L' type64='I'/>
<field name='fontNameLength' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataFontSpecRawNameDataHeader' type='{ATSFlatDataFontSpecRawNameDataHeader=&quot;numberOfFlattenedNames&quot;I&quot;nameDataArray&quot;[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}]}' type64='{ATSFlatDataFontSpecRawNameDataHeader=&quot;numberOfFlattenedNames&quot;Q&quot;nameDataArray&quot;[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;Q}]}'>
<field name='numberOfFlattenedNames' declared_type='ItemCount' type='L' type64='Q'/>
<field name='nameDataArray' declared_type='ATSFlatDataFontSpecRawNameData*' type='[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}]' type64='[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataLayoutControlsDataHeader' type='{ATSFlatDataLayoutControlsDataHeader=&quot;numberOfLayoutControls&quot;I&quot;controlArray&quot;[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}]}' type64='{ATSFlatDataLayoutControlsDataHeader=&quot;numberOfLayoutControls&quot;Q&quot;controlArray&quot;[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}]}'>
<field name='numberOfLayoutControls' declared_type='ItemCount' type='L' type64='Q'/>
<field name='controlArray' declared_type='ATSUAttributeInfo*' type='[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}]' type64='[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataLineInfoData' type='{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}' type64='{ATSFlatDataLineInfoData=&quot;lineLength&quot;Q&quot;numberOfLineControls&quot;Q}'>
<field name='lineLength' declared_type='UniCharCount' type='L' type64='Q'/>
<field name='numberOfLineControls' declared_type='ItemCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataLineInfoHeader' type='{ATSFlatDataLineInfoHeader=&quot;numberOfLines&quot;I&quot;lineInfoArray&quot;[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}]}' type64='{ATSFlatDataLineInfoHeader=&quot;numberOfLines&quot;Q&quot;lineInfoArray&quot;[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;Q&quot;numberOfLineControls&quot;Q}]}'>
<field name='numberOfLines' declared_type='ItemCount' type='L' type64='Q'/>
<field name='lineInfoArray' declared_type='ATSFlatDataLineInfoData*' type='[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}]' type64='[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;Q&quot;numberOfLineControls&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataMainHeaderBlock' type='{ATSFlatDataMainHeaderBlock=&quot;version&quot;I&quot;sizeOfDataBlock&quot;I&quot;offsetToTextLayouts&quot;I&quot;offsetToStyleRuns&quot;I&quot;offsetToStyleList&quot;I}' type64='{ATSFlatDataMainHeaderBlock=&quot;version&quot;I&quot;sizeOfDataBlock&quot;Q&quot;offsetToTextLayouts&quot;Q&quot;offsetToStyleRuns&quot;Q&quot;offsetToStyleList&quot;Q}'>
<field name='version' declared_type='UInt32' type='L' type64='I'/>
<field name='sizeOfDataBlock' declared_type='ByteCount' type='L' type64='Q'/>
<field name='offsetToTextLayouts' declared_type='ByteCount' type='L' type64='Q'/>
<field name='offsetToStyleRuns' declared_type='ByteCount' type='L' type64='Q'/>
<field name='offsetToStyleList' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataStyleListFeatureData' type='{ATSFlatDataStyleListFeatureData=&quot;theFeatureType&quot;S&quot;theFeatureSelector&quot;S}'>
<field name='theFeatureType' declared_type='ATSUFontFeatureType' type='S'/>
<field name='theFeatureSelector' declared_type='ATSUFontFeatureSelector' type='S'/>
</struct>
<struct name='ATSFlatDataStyleListHeader' type='{ATSFlatDataStyleListHeader=&quot;numberOfStyles&quot;I&quot;styleDataArray&quot;[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}]}' type64='{ATSFlatDataStyleListHeader=&quot;numberOfStyles&quot;Q&quot;styleDataArray&quot;[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;Q&quot;numberOfSetAttributes&quot;Q&quot;numberOfSetFeatures&quot;Q&quot;numberOfSetVariations&quot;Q}]}'>
<field name='numberOfStyles' declared_type='ItemCount' type='L' type64='Q'/>
<field name='styleDataArray' declared_type='ATSFlatDataStyleListStyleDataHeader*' type='[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}]' type64='[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;Q&quot;numberOfSetAttributes&quot;Q&quot;numberOfSetFeatures&quot;Q&quot;numberOfSetVariations&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataStyleListStyleDataHeader' type='{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}' type64='{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;Q&quot;numberOfSetAttributes&quot;Q&quot;numberOfSetFeatures&quot;Q&quot;numberOfSetVariations&quot;Q}'>
<field name='sizeOfStyleInfo' declared_type='ByteCount' type='L' type64='Q'/>
<field name='numberOfSetAttributes' declared_type='ItemCount' type='L' type64='Q'/>
<field name='numberOfSetFeatures' declared_type='ItemCount' type='L' type64='Q'/>
<field name='numberOfSetVariations' declared_type='ItemCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataStyleListVariationData' type='{ATSFlatDataStyleListVariationData=&quot;theVariationAxis&quot;I&quot;theVariationValue&quot;i}'>
<field name='theVariationAxis' declared_type='ATSUFontVariationAxis' type='L' type64='I'/>
<field name='theVariationValue' declared_type='ATSUFontVariationValue' type='l' type64='i'/>
</struct>
<struct name='ATSFlatDataStyleRunDataHeader' type='{ATSFlatDataStyleRunDataHeader=&quot;numberOfStyleRuns&quot;I&quot;styleRunArray&quot;[1{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}]}' type64='{ATSFlatDataStyleRunDataHeader=&quot;numberOfStyleRuns&quot;Q&quot;styleRunArray&quot;[1{ATSUStyleRunInfo=&quot;runLength&quot;Q&quot;styleObjectIndex&quot;Q}]}'>
<field name='numberOfStyleRuns' declared_type='ItemCount' type='L' type64='Q'/>
<field name='styleRunArray' declared_type='ATSUStyleRunInfo*' type='[1{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}]' type64='[1{ATSUStyleRunInfo=&quot;runLength&quot;Q&quot;styleObjectIndex&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataTextLayoutDataHeader' type='{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}' type64='{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;Q&quot;textLayoutLength&quot;Q&quot;offsetToLayoutControls&quot;Q&quot;offsetToLineInfo&quot;Q}'>
<field name='sizeOfLayoutData' declared_type='ByteCount' type='L' type64='Q'/>
<field name='textLayoutLength' declared_type='ByteCount' type='L' type64='Q'/>
<field name='offsetToLayoutControls' declared_type='ByteCount' type='L' type64='Q'/>
<field name='offsetToLineInfo' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='ATSFlatDataTextLayoutHeader' type='{ATSFlatDataTextLayoutHeader=&quot;numFlattenedTextLayouts&quot;I&quot;flattenedTextLayouts&quot;[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}]}' type64='{ATSFlatDataTextLayoutHeader=&quot;numFlattenedTextLayouts&quot;Q&quot;flattenedTextLayouts&quot;[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;Q&quot;textLayoutLength&quot;Q&quot;offsetToLayoutControls&quot;Q&quot;offsetToLineInfo&quot;Q}]}'>
<field name='numFlattenedTextLayouts' declared_type='ItemCount' type='L' type64='Q'/>
<field name='flattenedTextLayouts' declared_type='ATSFlatDataTextLayoutDataHeader*' type='[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}]' type64='[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;Q&quot;textLayoutLength&quot;Q&quot;offsetToLayoutControls&quot;Q&quot;offsetToLineInfo&quot;Q}]'/>
</struct>
<struct name='ATSUAttributeInfo' type='{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}' type64='{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}'>
<field name='fTag' declared_type='ATSUAttributeTag' type='L' type64='I'/>
<field name='fValueSize' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='ATSUBackgroundColor' type='{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}'>
<field name='red' declared_type='float' type='f'/>
<field name='green' declared_type='float' type='f'/>
<field name='blue' declared_type='float' type='f'/>
<field name='alpha' declared_type='float' type='f'/>
</struct>
<struct name='ATSUCaret' type='{ATSUCaret=&quot;fX&quot;i&quot;fY&quot;i&quot;fDeltaX&quot;i&quot;fDeltaY&quot;i}'>
<field name='fX' declared_type='Fixed' type='l' type64='i'/>
<field name='fY' declared_type='Fixed' type='l' type64='i'/>
<field name='fDeltaX' declared_type='Fixed' type='l' type64='i'/>
<field name='fDeltaY' declared_type='Fixed' type='l' type64='i'/>
</struct>
<struct name='ATSUGlyphInfo' type='{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}' type64='{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}'>
<field name='glyphID' declared_type='GlyphID' type='S'/>
<field name='reserved' declared_type='UInt16' type='S'/>
<field name='layoutFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='charIndex' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<field name='style' declared_type='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<field name='deltaY' declared_type='Float32' type='f'/>
<field name='idealX' declared_type='Float32' type='f'/>
<field name='screenX' declared_type='SInt16' type='s'/>
<field name='caretX' declared_type='SInt16' type='s'/>
</struct>
<struct name='ATSUGlyphInfoArray' type='{ATSUGlyphInfoArray=&quot;layout&quot;^{OpaqueATSUTextLayout}&quot;numGlyphs&quot;I&quot;glyphs&quot;[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]}' type64='{ATSUGlyphInfoArray=&quot;layout&quot;^{OpaqueATSUTextLayout}&quot;numGlyphs&quot;Q&quot;glyphs&quot;[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]}'>
<field name='layout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<field name='numGlyphs' declared_type='ItemCount' type='L' type64='Q'/>
<field name='glyphs' declared_type='ATSUGlyphInfo*' type='[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]' type64='[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]'/>
</struct>
<struct name='ATSUGlyphSelector' type='{ATSUGlyphSelector=&quot;collection&quot;S&quot;glyphID&quot;S}'>
<field name='collection' declared_type='GlyphCollection' type='S'/>
<field name='glyphID' declared_type='GlyphID' type='S'/>
</struct>
<struct name='ATSURGBAlphaColor' type='{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}'>
<field name='red' declared_type='float' type='f'/>
<field name='green' declared_type='float' type='f'/>
<field name='blue' declared_type='float' type='f'/>
<field name='alpha' declared_type='float' type='f'/>
</struct>
<struct name='ATSUStyleRunInfo' type='{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}' type64='{ATSUStyleRunInfo=&quot;runLength&quot;Q&quot;styleObjectIndex&quot;Q}'>
<field name='runLength' declared_type='UniCharCount' type='L' type64='Q'/>
<field name='styleObjectIndex' declared_type='ItemCount' type='L' type64='Q'/>
</struct>
<struct name='ATSUTab' type='{ATSUTab=&quot;tabPosition&quot;i&quot;tabType&quot;S}'>
<field name='tabPosition' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<field name='tabType' declared_type='ATSUTabType' type='S'/>
</struct>
<struct name='ATSUUnhighlightData' type='{ATSUUnhighlightData=&quot;dataType&quot;I&quot;unhighlightData&quot;(ATSUBackgroundData=&quot;backgroundColor&quot;{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}&quot;backgroundUPP&quot;^?)}'>
<field name='dataType' declared_type='ATSUBackgroundDataType' type='L' type64='I'/>
<field name='unhighlightData' declared_type='ATSUBackgroundData' type='(ATSUBackgroundData=&quot;backgroundColor&quot;{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}&quot;backgroundUPP&quot;^?)'/>
</struct>
<struct name='AVLocationRec' type='{AVLocationRec=&quot;locationConstant&quot;I}'>
<field name='locationConstant' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='AVPowerStateRec' type='{VDPowerStateRec=&quot;powerState&quot;L&quot;powerFlags&quot;L&quot;powerReserved1&quot;L&quot;powerReserved2&quot;L}' type64='{VDPowerStateRec=&quot;powerState&quot;Q&quot;powerFlags&quot;Q&quot;powerReserved1&quot;Q&quot;powerReserved2&quot;Q}'>
<field name='powerState' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerFlags' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerReserved1' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerReserved2' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='AsscEntry' type='{AsscEntry=&quot;fontSize&quot;s&quot;fontStyle&quot;s&quot;fontID&quot;s}'>
<field name='fontSize' declared_type='SInt16' type='s'/>
<field name='fontStyle' declared_type='SInt16' type='s'/>
<field name='fontID' declared_type='SInt16' type='s'/>
</struct>
<struct name='BitMap' type='{BitMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field name='baseAddr' declared_type='Ptr' type='*'/>
<field name='rowBytes' declared_type='short' type='s'/>
<field name='bounds' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='CCrsr' type='{CCrsr=&quot;crsrType&quot;s&quot;crsrMap&quot;^^{PixMap}&quot;crsrData&quot;^*&quot;crsrXData&quot;^*&quot;crsrXValid&quot;s&quot;crsrXHandle&quot;^*&quot;crsr1Data&quot;[16s]&quot;crsrMask&quot;[16s]&quot;crsrHotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;crsrXTable&quot;i&quot;crsrID&quot;i}'>
<field name='crsrType' declared_type='short' type='s'/>
<field name='crsrMap' declared_type='PixMapHandle' type='^^{PixMap}'/>
<field name='crsrData' declared_type='Handle' type='^*'/>
<field name='crsrXData' declared_type='Handle' type='^*'/>
<field name='crsrXValid' declared_type='short' type='s'/>
<field name='crsrXHandle' declared_type='Handle' type='^*'/>
<field name='crsr1Data' declared_type='Bits16' type='[16s]'/>
<field name='crsrMask' declared_type='Bits16' type='[16s]'/>
<field name='crsrHotSpot' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='crsrXTable' declared_type='SInt32' type='l' type64='i'/>
<field name='crsrID' declared_type='SInt32' type='l' type64='i'/>
</struct>
<struct name='CProcRec' type='{CProcRec=&quot;nxtComp&quot;^*&quot;compProc&quot;^?}'>
<field name='nxtComp' declared_type='Handle' type='^*'/>
<field name='compProc' function_pointer='true' declared_type='ColorComplementUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</field>
</struct>
<struct name='CQDProcs' type='{CQDProcs=&quot;textProc&quot;^?&quot;lineProc&quot;^?&quot;rectProc&quot;^?&quot;rRectProc&quot;^?&quot;ovalProc&quot;^?&quot;arcProc&quot;^?&quot;polyProc&quot;^?&quot;rgnProc&quot;^?&quot;bitsProc&quot;^?&quot;commentProc&quot;^?&quot;txMeasProc&quot;^?&quot;getPicProc&quot;^?&quot;putPicProc&quot;^?&quot;opcodeProc&quot;^?&quot;newProc1&quot;^?&quot;glyphsProc&quot;^?&quot;printerStatusProc&quot;^?&quot;newProc4&quot;^?&quot;newProc5&quot;^?&quot;newProc6&quot;^?}'>
<field name='textProc' function_pointer='true' declared_type='QDTextUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lineProc' function_pointer='true' declared_type='QDLineUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectProc' function_pointer='true' declared_type='QDRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rRectProc' function_pointer='true' declared_type='QDRRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='ovalProc' function_pointer='true' declared_type='QDOvalUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='arcProc' function_pointer='true' declared_type='QDArcUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='polyProc' function_pointer='true' declared_type='QDPolyUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rgnProc' function_pointer='true' declared_type='QDRgnUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bitsProc' function_pointer='true' declared_type='QDBitsUPP' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='commentProc' function_pointer='true' declared_type='QDCommentUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='txMeasProc' function_pointer='true' declared_type='QDTxMeasUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</field>
<field name='getPicProc' function_pointer='true' declared_type='QDGetPicUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='putPicProc' function_pointer='true' declared_type='QDPutPicUPP' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='opcodeProc' function_pointer='true' declared_type='QDOpcodeUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='newProc1' function_pointer='true' declared_type='UniversalProcPtr' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field name='glyphsProc' function_pointer='true' declared_type='QDStdGlyphsUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='printerStatusProc' function_pointer='true' declared_type='QDPrinterStatusUPP' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field name='newProc4' function_pointer='true' declared_type='UniversalProcPtr' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field name='newProc5' function_pointer='true' declared_type='UniversalProcPtr' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field name='newProc6' function_pointer='true' declared_type='UniversalProcPtr' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
</struct>
<struct name='ColorInfo' type='{ColorInfo=&quot;ciRGB&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;ciUsage&quot;s&quot;ciTolerance&quot;s&quot;ciDataFields&quot;[3s]}'>
<field name='ciRGB' declared_type='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field name='ciUsage' declared_type='short' type='s'/>
<field name='ciTolerance' declared_type='short' type='s'/>
<field name='ciDataFields' declared_type='short*' type='[3s]'/>
</struct>
<struct name='ColorSpec' type='{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field name='value' declared_type='short' type='s'/>
<field name='rgb' declared_type='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='ColorTable' type='{ColorTable=&quot;ctSeed&quot;i&quot;ctFlags&quot;s&quot;ctSize&quot;s&quot;ctTable&quot;[1{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}]}'>
<field name='ctSeed' declared_type='SInt32' type='l' type64='i'/>
<field name='ctFlags' declared_type='short' type='s'/>
<field name='ctSize' declared_type='short' type='s'/>
<field name='ctTable' declared_type='CSpecArray' type='[1{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}]'/>
</struct>
<struct name='CommentSpec' type='{CommentSpec=&quot;count&quot;s&quot;ID&quot;s}'>
<field name='count' declared_type='short' type='s'/>
<field name='ID' declared_type='short' type='s'/>
</struct>
<struct name='Cursor' type='{Cursor=&quot;data&quot;[16s]&quot;mask&quot;[16s]&quot;hotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field name='data' declared_type='Bits16' type='[16s]'/>
<field name='mask' declared_type='Bits16' type='[16s]'/>
<field name='hotSpot' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='CursorInfo' type='{CursorInfo=&quot;version&quot;l&quot;capabilities&quot;l&quot;animateDuration&quot;l&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;hotspot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;reserved&quot;l}' type64='{CursorInfo=&quot;version&quot;q&quot;capabilities&quot;q&quot;animateDuration&quot;q&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;hotspot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;reserved&quot;q}'>
<field name='version' declared_type='long' type='l' type64='q'/>
<field name='capabilities' declared_type='long' type='l' type64='q'/>
<field name='animateDuration' declared_type='long' type='l' type64='q'/>
<field name='bounds' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='hotspot' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='reserved' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='CustomXFerRec' type='{CustomXFerRec=&quot;version&quot;I&quot;srcPixels&quot;^v&quot;destPixels&quot;^v&quot;resultPixels&quot;^v&quot;refCon&quot;I&quot;pixelSize&quot;I&quot;pixelCount&quot;I&quot;firstPixelHV&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;destBounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field name='version' declared_type='UInt32' type='L' type64='I'/>
<field name='srcPixels' declared_type='void*' type='^v'/>
<field name='destPixels' declared_type='void*' type='^v'/>
<field name='resultPixels' declared_type='void*' type='^v'/>
<field name='refCon' declared_type='UInt32' type='L' type64='I'/>
<field name='pixelSize' declared_type='UInt32' type='L' type64='I'/>
<field name='pixelCount' declared_type='UInt32' type='L' type64='I'/>
<field name='firstPixelHV' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='destBounds' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='DMComponentListEntryRec' type='{DMComponentListEntryRec=&quot;itemID&quot;I&quot;itemComponent&quot;^{ComponentRecord}&quot;itemDescription&quot;{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;I&quot;componentFlagsMask&quot;I}&quot;itemClass&quot;I&quot;itemFidelity&quot;I&quot;itemSubClass&quot;I&quot;itemSort&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;itemFlags&quot;I&quot;itemReserved&quot;I&quot;itemFuture1&quot;I&quot;itemFuture2&quot;I&quot;itemFuture3&quot;I&quot;itemFuture4&quot;I}'>
<field name='itemID' declared_type='DisplayIDType' type='L' type64='I'/>
<field name='itemComponent' declared_type='Component' type='^{ComponentRecord=[1l]}' type64='^{ComponentRecord=[1q]}'/>
<field name='itemDescription' declared_type='ComponentDescription' type='{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;I&quot;componentFlagsMask&quot;I}'/>
<field name='itemClass' declared_type='ResType' type='L' type64='I'/>
<field name='itemFidelity' declared_type='DMFidelityType' type='L' type64='I'/>
<field name='itemSubClass' declared_type='ResType' type='L' type64='I'/>
<field name='itemSort' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='itemFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='itemReserved' declared_type='ResType' type='L' type64='I'/>
<field name='itemFuture1' declared_type='UInt32' type='L' type64='I'/>
<field name='itemFuture2' declared_type='UInt32' type='L' type64='I'/>
<field name='itemFuture3' declared_type='UInt32' type='L' type64='I'/>
<field name='itemFuture4' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='DMDepthInfoBlockRec' type='{DMDepthInfoBlockRec=&quot;depthBlockCount&quot;I&quot;depthVPBlock&quot;^{DMDepthInfoRec}&quot;depthBlockFlags&quot;I&quot;depthBlockReserved1&quot;I&quot;depthBlockReserved2&quot;I}'>
<field name='depthBlockCount' declared_type='UInt32' type='L' type64='I'/>
<field name='depthVPBlock' declared_type='DMDepthInfoPtr' type='^{DMDepthInfoRec=^{VDSwitchInfoRec}^{VPBlock}III}'/>
<field name='depthBlockFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='depthBlockReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='depthBlockReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='DMDepthInfoRec' type='{DMDepthInfoRec=&quot;depthSwitchInfo&quot;^{VDSwitchInfoRec}&quot;depthVPBlock&quot;^{VPBlock}&quot;depthFlags&quot;I&quot;depthReserved1&quot;I&quot;depthReserved2&quot;I}'>
<field name='depthSwitchInfo' declared_type='VDSwitchInfoPtr' type='^{VDSwitchInfoRec=SLS*L}' type64='^{VDSwitchInfoRec=SQS*Q}'/>
<field name='depthVPBlock' declared_type='VPBlockPtr' type='^{VPBlock=ls{Rect=ssss}sslllssssl}' type64='^{VPBlock=qs{Rect=ssss}ssqqqssssq}'/>
<field name='depthFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='depthReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='depthReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='DMDisplayModeListEntryRec' type='{DMDisplayModeListEntryRec=&quot;displayModeFlags&quot;I&quot;displayModeSwitchInfo&quot;^{VDSwitchInfoRec}&quot;displayModeResolutionInfo&quot;^{VDResolutionInfoRec}&quot;displayModeTimingInfo&quot;^{VDTimingInfoRec}&quot;displayModeDepthBlockInfo&quot;^{DMDepthInfoBlockRec}&quot;displayModeVersion&quot;I&quot;displayModeName&quot;*&quot;displayModeDisplayInfo&quot;^{DMDisplayTimingInfoRec}}'>
<field name='displayModeFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='displayModeSwitchInfo' declared_type='VDSwitchInfoPtr' type='^{VDSwitchInfoRec=SLS*L}' type64='^{VDSwitchInfoRec=SQS*Q}'/>
<field name='displayModeResolutionInfo' declared_type='VDResolutionInfoPtr' type='^{VDResolutionInfoRec=IILLiSLL}' type64='^{VDResolutionInfoRec=IIQQiSQQ}'/>
<field name='displayModeTimingInfo' declared_type='VDTimingInfoPtr' type='^{VDTimingInfoRec=LLLLL}' type64='^{VDTimingInfoRec=QQQQQ}'/>
<field name='displayModeDepthBlockInfo' declared_type='DMDepthInfoBlockPtr' type='^{DMDepthInfoBlockRec=I^{DMDepthInfoRec}III}'/>
<field name='displayModeVersion' declared_type='UInt32' type='L' type64='I'/>
<field name='displayModeName' declared_type='StringPtr' type='*'/>
<field name='displayModeDisplayInfo' declared_type='DMDisplayTimingInfoPtr' type='^{DMDisplayTimingInfoRec=IIii[16L]}' type64='^{DMDisplayTimingInfoRec=IIii[16I]}'/>
</struct>
<struct name='DMDisplayTimingInfoRec' type='{DMDisplayTimingInfoRec=&quot;timingInfoVersion&quot;I&quot;timingInfoAttributes&quot;I&quot;timingInfoRelativeQuality&quot;i&quot;timingInfoRelativeDefault&quot;i&quot;timingInfoReserved&quot;[16L]}' type64='{DMDisplayTimingInfoRec=&quot;timingInfoVersion&quot;I&quot;timingInfoAttributes&quot;I&quot;timingInfoRelativeQuality&quot;i&quot;timingInfoRelativeDefault&quot;i&quot;timingInfoReserved&quot;[16I]}'>
<field name='timingInfoVersion' declared_type='UInt32' type='L' type64='I'/>
<field name='timingInfoAttributes' declared_type='UInt32' type='L' type64='I'/>
<field name='timingInfoRelativeQuality' declared_type='SInt32' type='l' type64='i'/>
<field name='timingInfoRelativeDefault' declared_type='SInt32' type='l' type64='i'/>
<field name='timingInfoReserved' declared_type='UInt32*' type='[16L]' type64='[16I]'/>
</struct>
<struct name='DMMakeAndModelRec' type='{DMMakeAndModelRec=&quot;manufacturer&quot;I&quot;model&quot;I&quot;serialNumber&quot;I&quot;manufactureDate&quot;I&quot;makeReserved&quot;[4L]}' type64='{DMMakeAndModelRec=&quot;manufacturer&quot;I&quot;model&quot;I&quot;serialNumber&quot;I&quot;manufactureDate&quot;I&quot;makeReserved&quot;[4I]}'>
<field name='manufacturer' declared_type='ResType' type='L' type64='I'/>
<field name='model' declared_type='UInt32' type='L' type64='I'/>
<field name='serialNumber' declared_type='UInt32' type='L' type64='I'/>
<field name='manufactureDate' declared_type='UInt32' type='L' type64='I'/>
<field name='makeReserved' declared_type='UInt32*' type='[4L]' type64='[4I]'/>
</struct>
<struct name='DMProfileListEntryRec' type='{DMProfileListEntryRec=&quot;profileRef&quot;^{OpaqueCMProfileRef}&quot;profileReserved1&quot;*&quot;profileReserved2&quot;*&quot;profileReserved3&quot;*}'>
<field name='profileRef' declared_type='CMProfileRef' type='^{OpaqueCMProfileRef=}'/>
<field name='profileReserved1' declared_type='Ptr' type='*'/>
<field name='profileReserved2' declared_type='Ptr' type='*'/>
<field name='profileReserved3' declared_type='Ptr' type='*'/>
</struct>
<struct name='DependentNotifyRec' type='{DependentNotifyRec=&quot;notifyType&quot;I&quot;notifyClass&quot;I&quot;notifyPortID&quot;I&quot;notifyComponent&quot;^{ComponentInstanceRecord}&quot;notifyVersion&quot;I&quot;notifyFlags&quot;I&quot;notifyReserved&quot;I&quot;notifyFuture&quot;I}'>
<field name='notifyType' declared_type='ResType' type='L' type64='I'/>
<field name='notifyClass' declared_type='ResType' type='L' type64='I'/>
<field name='notifyPortID' declared_type='DisplayIDType' type='L' type64='I'/>
<field name='notifyComponent' declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}' type64='^{ComponentInstanceRecord=[1q]}'/>
<field name='notifyVersion' declared_type='UInt32' type='L' type64='I'/>
<field name='notifyFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='notifyReserved' declared_type='UInt32' type='L' type64='I'/>
<field name='notifyFuture' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='DisplayListEntryRec' type='{DisplayListEntryRec=&quot;displayListEntryGDevice&quot;^^{GDevice}&quot;displayListEntryDisplayID&quot;I&quot;displayListEntryIncludeFlags&quot;I&quot;displayListEntryReserved1&quot;I&quot;displayListEntryReserved2&quot;I&quot;displayListEntryReserved3&quot;I&quot;displayListEntryReserved4&quot;I&quot;displayListEntryReserved5&quot;I}'>
<field name='displayListEntryGDevice' declared_type='GDHandle' type='^^{GDevice}'/>
<field name='displayListEntryDisplayID' declared_type='DisplayIDType' type='L' type64='I'/>
<field name='displayListEntryIncludeFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='displayListEntryReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='displayListEntryReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='displayListEntryReserved3' declared_type='UInt32' type='L' type64='I'/>
<field name='displayListEntryReserved4' declared_type='UInt32' type='L' type64='I'/>
<field name='displayListEntryReserved5' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='FMInput' type='{FMInput=&quot;family&quot;s&quot;size&quot;s&quot;face&quot;C&quot;needBits&quot;B&quot;device&quot;s&quot;numer&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;denom&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field name='family' declared_type='short' type='s'/>
<field name='size' declared_type='short' type='s'/>
<field name='face' declared_type='Style' type='C'/>
<field name='needBits' declared_type='Boolean' type='B'/>
<field name='device' declared_type='short' type='s'/>
<field name='numer' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='denom' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='FMOutput' type='{FMOutput=&quot;errNum&quot;s&quot;fontHandle&quot;^*&quot;boldPixels&quot;C&quot;italicPixels&quot;C&quot;ulOffset&quot;C&quot;ulShadow&quot;C&quot;ulThick&quot;C&quot;shadowPixels&quot;C&quot;extra&quot;c&quot;ascent&quot;C&quot;descent&quot;C&quot;widMax&quot;C&quot;leading&quot;c&quot;curStyle&quot;c&quot;numer&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;denom&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field name='errNum' declared_type='short' type='s'/>
<field name='fontHandle' declared_type='Handle' type='^*'/>
<field name='boldPixels' declared_type='UInt8' type='C'/>
<field name='italicPixels' declared_type='UInt8' type='C'/>
<field name='ulOffset' declared_type='UInt8' type='C'/>
<field name='ulShadow' declared_type='UInt8' type='C'/>
<field name='ulThick' declared_type='UInt8' type='C'/>
<field name='shadowPixels' declared_type='UInt8' type='C'/>
<field name='extra' declared_type='SInt8' type='c'/>
<field name='ascent' declared_type='UInt8' type='C'/>
<field name='descent' declared_type='UInt8' type='C'/>
<field name='widMax' declared_type='UInt8' type='C'/>
<field name='leading' declared_type='SInt8' type='c'/>
<field name='curStyle' declared_type='SInt8' type='c'/>
<field name='numer' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='denom' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='FMetricRec' type='{FMetricRec=&quot;ascent&quot;i&quot;descent&quot;i&quot;leading&quot;i&quot;widMax&quot;i&quot;wTabHandle&quot;^*}'>
<field name='ascent' declared_type='Fixed' type='l' type64='i'/>
<field name='descent' declared_type='Fixed' type='l' type64='i'/>
<field name='leading' declared_type='Fixed' type='l' type64='i'/>
<field name='widMax' declared_type='Fixed' type='l' type64='i'/>
<field name='wTabHandle' declared_type='Handle' type='^*'/>
</struct>
<struct name='FNSSysInfo' type='{FNSSysInfo=&quot;iSysInfoVersion&quot;I&quot;oFeatures&quot;I&quot;oCurRefVersion&quot;I&quot;oMinRefVersion&quot;I&quot;oCurProfileVersion&quot;I&quot;oMinProfileVersion&quot;I&quot;oFontSyncVersion&quot;S}'>
<field name='iSysInfoVersion' declared_type='FNSObjectVersion' type='L' type64='I'/>
<field name='oFeatures' declared_type='FNSFeatureFlags' type='L' type64='I'/>
<field name='oCurRefVersion' declared_type='FNSObjectVersion' type='L' type64='I'/>
<field name='oMinRefVersion' declared_type='FNSObjectVersion' type='L' type64='I'/>
<field name='oCurProfileVersion' declared_type='FNSObjectVersion' type='L' type64='I'/>
<field name='oMinProfileVersion' declared_type='FNSObjectVersion' type='L' type64='I'/>
<field name='oFontSyncVersion' declared_type='UInt16' type='S'/>
</struct>
<struct name='FamRec' type='{FamRec=&quot;ffFlags&quot;s&quot;ffFamID&quot;s&quot;ffFirstChar&quot;s&quot;ffLastChar&quot;s&quot;ffAscent&quot;s&quot;ffDescent&quot;s&quot;ffLeading&quot;s&quot;ffWidMax&quot;s&quot;ffWTabOff&quot;i&quot;ffKernOff&quot;i&quot;ffStylOff&quot;i&quot;ffProperty&quot;[9s]&quot;ffIntl&quot;[2s]&quot;ffVersion&quot;s}'>
<field name='ffFlags' declared_type='SInt16' type='s'/>
<field name='ffFamID' declared_type='SInt16' type='s'/>
<field name='ffFirstChar' declared_type='SInt16' type='s'/>
<field name='ffLastChar' declared_type='SInt16' type='s'/>
<field name='ffAscent' declared_type='SInt16' type='s'/>
<field name='ffDescent' declared_type='SInt16' type='s'/>
<field name='ffLeading' declared_type='SInt16' type='s'/>
<field name='ffWidMax' declared_type='SInt16' type='s'/>
<field name='ffWTabOff' declared_type='SInt32' type='l' type64='i'/>
<field name='ffKernOff' declared_type='SInt32' type='l' type64='i'/>
<field name='ffStylOff' declared_type='SInt32' type='l' type64='i'/>
<field name='ffProperty' declared_type='SInt16*' type='[9s]'/>
<field name='ffIntl' declared_type='SInt16*' type='[2s]'/>
<field name='ffVersion' declared_type='SInt16' type='s'/>
</struct>
<struct name='FontAssoc' type='{FontAssoc=&quot;numAssoc&quot;s}'>
<field name='numAssoc' declared_type='SInt16' type='s'/>
</struct>
<struct name='FontInfo' type='{FontInfo=&quot;ascent&quot;s&quot;descent&quot;s&quot;widMax&quot;s&quot;leading&quot;s}'>
<field name='ascent' declared_type='short' type='s'/>
<field name='descent' declared_type='short' type='s'/>
<field name='widMax' declared_type='short' type='s'/>
<field name='leading' declared_type='short' type='s'/>
</struct>
<struct name='FontRec' type='{FontRec=&quot;fontType&quot;s&quot;firstChar&quot;s&quot;lastChar&quot;s&quot;widMax&quot;s&quot;kernMax&quot;s&quot;nDescent&quot;s&quot;fRectWidth&quot;s&quot;fRectHeight&quot;s&quot;owTLoc&quot;S&quot;ascent&quot;s&quot;descent&quot;s&quot;leading&quot;s&quot;rowWords&quot;s}'>
<field name='fontType' declared_type='SInt16' type='s'/>
<field name='firstChar' declared_type='SInt16' type='s'/>
<field name='lastChar' declared_type='SInt16' type='s'/>
<field name='widMax' declared_type='SInt16' type='s'/>
<field name='kernMax' declared_type='SInt16' type='s'/>
<field name='nDescent' declared_type='SInt16' type='s'/>
<field name='fRectWidth' declared_type='SInt16' type='s'/>
<field name='fRectHeight' declared_type='SInt16' type='s'/>
<field name='owTLoc' declared_type='UInt16' type='S'/>
<field name='ascent' declared_type='SInt16' type='s'/>
<field name='descent' declared_type='SInt16' type='s'/>
<field name='leading' declared_type='SInt16' type='s'/>
<field name='rowWords' declared_type='SInt16' type='s'/>
</struct>
<struct name='FontSpec' type='{FontSpec=&quot;pictFontID&quot;s&quot;sysFontID&quot;s&quot;size&quot;[4l]&quot;style&quot;s&quot;nameOffset&quot;l}' type64='{FontSpec=&quot;pictFontID&quot;s&quot;sysFontID&quot;s&quot;size&quot;[4q]&quot;style&quot;s&quot;nameOffset&quot;q}'>
<field name='pictFontID' declared_type='short' type='s'/>
<field name='sysFontID' declared_type='short' type='s'/>
<field name='size' declared_type='long*' type='[4l]' type64='[4q]'/>
<field name='style' declared_type='short' type='s'/>
<field name='nameOffset' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='GDevice' type='{GDevice=&quot;gdRefNum&quot;s&quot;gdID&quot;s&quot;gdType&quot;s&quot;gdITable&quot;^^{ITab}&quot;gdResPref&quot;s&quot;gdSearchProc&quot;^^{SProcRec}&quot;gdCompProc&quot;^^{CProcRec}&quot;gdFlags&quot;s&quot;gdPMap&quot;^^{PixMap}&quot;gdRefCon&quot;i&quot;gdNextGD&quot;^^{GDevice}&quot;gdRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;gdMode&quot;i&quot;gdCCBytes&quot;s&quot;gdCCDepth&quot;s&quot;gdCCXData&quot;^*&quot;gdCCXMask&quot;^*&quot;gdExt&quot;^*}'>
<field name='gdRefNum' declared_type='short' type='s'/>
<field name='gdID' declared_type='short' type='s'/>
<field name='gdType' declared_type='short' type='s'/>
<field name='gdITable' declared_type='ITabHandle' type='^^{ITab}'/>
<field name='gdResPref' declared_type='short' type='s'/>
<field name='gdSearchProc' declared_type='SProcHndl' type='^^{SProcRec}'/>
<field name='gdCompProc' declared_type='CProcHndl' type='^^{CProcRec}'/>
<field name='gdFlags' declared_type='short' type='s'/>
<field name='gdPMap' declared_type='PixMapHandle' type='^^{PixMap}'/>
<field name='gdRefCon' declared_type='SInt32' type='l' type64='i'/>
<field name='gdNextGD' declared_type='GDHandle' type='^^{GDevice}'/>
<field name='gdRect' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='gdMode' declared_type='SInt32' type='l' type64='i'/>
<field name='gdCCBytes' declared_type='short' type='s'/>
<field name='gdCCDepth' declared_type='short' type='s'/>
<field name='gdCCXData' declared_type='Handle' type='^*'/>
<field name='gdCCXMask' declared_type='Handle' type='^*'/>
<field name='gdExt' declared_type='Handle' type='^*'/>
</struct>
<struct name='GammaTbl' type='{GammaTbl=&quot;gVersion&quot;s&quot;gType&quot;s&quot;gFormulaSize&quot;s&quot;gChanCnt&quot;s&quot;gDataCnt&quot;s&quot;gDataWidth&quot;s&quot;gFormulaData&quot;[1s]}'>
<field name='gVersion' declared_type='short' type='s'/>
<field name='gType' declared_type='short' type='s'/>
<field name='gFormulaSize' declared_type='short' type='s'/>
<field name='gChanCnt' declared_type='short' type='s'/>
<field name='gDataCnt' declared_type='short' type='s'/>
<field name='gDataWidth' declared_type='short' type='s'/>
<field name='gFormulaData' declared_type='short*' type='[1s]'/>
</struct>
<struct name='GrafVars' type='{GrafVars=&quot;rgbOpColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;rgbHiliteColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;pmFgColor&quot;^*&quot;pmFgIndex&quot;s&quot;pmBkColor&quot;^*&quot;pmBkIndex&quot;s&quot;pmFlags&quot;s}'>
<field name='rgbOpColor' declared_type='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field name='rgbHiliteColor' declared_type='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field name='pmFgColor' declared_type='Handle' type='^*'/>
<field name='pmFgIndex' declared_type='short' type='s'/>
<field name='pmBkColor' declared_type='Handle' type='^*'/>
<field name='pmBkIndex' declared_type='short' type='s'/>
<field name='pmFlags' declared_type='short' type='s'/>
</struct>
<struct name='ITab' type='{ITab=&quot;iTabSeed&quot;i&quot;iTabRes&quot;s&quot;iTTable&quot;[1C]}'>
<field name='iTabSeed' declared_type='SInt32' type='l' type64='i'/>
<field name='iTabRes' declared_type='short' type='s'/>
<field name='iTTable' declared_type='Byte*' type='[1C]'/>
</struct>
<struct name='KernEntry' type='{KernEntry=&quot;kernStyle&quot;s&quot;kernLength&quot;s}'>
<field name='kernStyle' declared_type='SInt16' type='s'/>
<field name='kernLength' declared_type='SInt16' type='s'/>
</struct>
<struct name='KernPair' type='{KernPair=&quot;kernFirst&quot;c&quot;kernSecond&quot;c&quot;kernWidth&quot;s}'>
<field name='kernFirst' declared_type='char' type='c'/>
<field name='kernSecond' declared_type='char' type='c'/>
<field name='kernWidth' declared_type='SInt16' type='s'/>
</struct>
<struct name='KernTable' type='{KernTable=&quot;numKerns&quot;s}'>
<field name='numKerns' declared_type='SInt16' type='s'/>
</struct>
<struct name='MacPolygon' type='{MacPolygon=&quot;polySize&quot;s&quot;polyBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;polyPoints&quot;[1{Point=&quot;v&quot;s&quot;h&quot;s}]}'>
<field name='polySize' declared_type='short' type='s'/>
<field name='polyBBox' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='polyPoints' declared_type='Point*' type='[1{Point=&quot;v&quot;s&quot;h&quot;s}]'/>
</struct>
<struct name='MatchRec' type='{MatchRec=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;matchData&quot;l}' type64='{MatchRec=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;matchData&quot;q}'>
<field name='red' declared_type='unsigned short' type='S'/>
<field name='green' declared_type='unsigned short' type='S'/>
<field name='blue' declared_type='unsigned short' type='S'/>
<field name='matchData' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='NameTable' type='{NameTable=&quot;stringCount&quot;s&quot;baseFontName&quot;[256C]}'>
<field name='stringCount' declared_type='SInt16' type='s'/>
<field name='baseFontName' declared_type='Str255' type='[256C]'/>
</struct>
<struct name='OpenCPicParams' type='{OpenCPicParams=&quot;srcRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;hRes&quot;i&quot;vRes&quot;i&quot;version&quot;s&quot;reserved1&quot;s&quot;reserved2&quot;i}'>
<field name='srcRect' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='hRes' declared_type='Fixed' type='l' type64='i'/>
<field name='vRes' declared_type='Fixed' type='l' type64='i'/>
<field name='version' declared_type='short' type='s'/>
<field name='reserved1' declared_type='short' type='s'/>
<field name='reserved2' declared_type='SInt32' type='l' type64='i'/>
</struct>
<struct name='Palette' type='{Palette=&quot;pmEntries&quot;s&quot;pmDataFields&quot;[7s]&quot;pmInfo&quot;[1{ColorInfo=&quot;ciRGB&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;ciUsage&quot;s&quot;ciTolerance&quot;s&quot;ciDataFields&quot;[3s]}]}'>
<field name='pmEntries' declared_type='short' type='s'/>
<field name='pmDataFields' declared_type='short*' type='[7s]'/>
<field name='pmInfo' declared_type='ColorInfo*' type='[1{ColorInfo=&quot;ciRGB&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;ciUsage&quot;s&quot;ciTolerance&quot;s&quot;ciDataFields&quot;[3s]}]'/>
</struct>
<struct name='Pattern' type='{Pattern=&quot;pat&quot;[8C]}'>
<field name='pat' declared_type='UInt8*' type='[8C]'/>
</struct>
<struct name='PenState' type='{PenState=&quot;pnLoc&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;pnSize&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;pnMode&quot;s&quot;pnPat&quot;{Pattern=&quot;pat&quot;[8C]}}'>
<field name='pnLoc' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='pnSize' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='pnMode' declared_type='short' type='s'/>
<field name='pnPat' declared_type='Pattern' type='{Pattern=&quot;pat&quot;[8C]}'/>
</struct>
<struct name='PictInfo' type='{PictInfo=&quot;version&quot;s&quot;uniqueColors&quot;l&quot;thePalette&quot;^^{Palette}&quot;theColorTable&quot;^^{ColorTable}&quot;hRes&quot;i&quot;vRes&quot;i&quot;depth&quot;s&quot;sourceRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;textCount&quot;l&quot;lineCount&quot;l&quot;rectCount&quot;l&quot;rRectCount&quot;l&quot;ovalCount&quot;l&quot;arcCount&quot;l&quot;polyCount&quot;l&quot;regionCount&quot;l&quot;bitMapCount&quot;l&quot;pixMapCount&quot;l&quot;commentCount&quot;l&quot;uniqueComments&quot;l&quot;commentHandle&quot;^^{CommentSpec}&quot;uniqueFonts&quot;l&quot;fontHandle&quot;^^{FontSpec}&quot;fontNamesHandle&quot;^*&quot;reserved1&quot;l&quot;reserved2&quot;l}' type64='{PictInfo=&quot;version&quot;s&quot;uniqueColors&quot;q&quot;thePalette&quot;^^{Palette}&quot;theColorTable&quot;^^{ColorTable}&quot;hRes&quot;i&quot;vRes&quot;i&quot;depth&quot;s&quot;sourceRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;textCount&quot;q&quot;lineCount&quot;q&quot;rectCount&quot;q&quot;rRectCount&quot;q&quot;ovalCount&quot;q&quot;arcCount&quot;q&quot;polyCount&quot;q&quot;regionCount&quot;q&quot;bitMapCount&quot;q&quot;pixMapCount&quot;q&quot;commentCount&quot;q&quot;uniqueComments&quot;q&quot;commentHandle&quot;^^{CommentSpec}&quot;uniqueFonts&quot;q&quot;fontHandle&quot;^^{FontSpec}&quot;fontNamesHandle&quot;^*&quot;reserved1&quot;q&quot;reserved2&quot;q}'>
<field name='version' declared_type='short' type='s'/>
<field name='uniqueColors' declared_type='long' type='l' type64='q'/>
<field name='thePalette' declared_type='PaletteHandle' type='^^{Palette}'/>
<field name='theColorTable' declared_type='CTabHandle' type='^^{ColorTable}'/>
<field name='hRes' declared_type='Fixed' type='l' type64='i'/>
<field name='vRes' declared_type='Fixed' type='l' type64='i'/>
<field name='depth' declared_type='short' type='s'/>
<field name='sourceRect' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='textCount' declared_type='long' type='l' type64='q'/>
<field name='lineCount' declared_type='long' type='l' type64='q'/>
<field name='rectCount' declared_type='long' type='l' type64='q'/>
<field name='rRectCount' declared_type='long' type='l' type64='q'/>
<field name='ovalCount' declared_type='long' type='l' type64='q'/>
<field name='arcCount' declared_type='long' type='l' type64='q'/>
<field name='polyCount' declared_type='long' type='l' type64='q'/>
<field name='regionCount' declared_type='long' type='l' type64='q'/>
<field name='bitMapCount' declared_type='long' type='l' type64='q'/>
<field name='pixMapCount' declared_type='long' type='l' type64='q'/>
<field name='commentCount' declared_type='long' type='l' type64='q'/>
<field name='uniqueComments' declared_type='long' type='l' type64='q'/>
<field name='commentHandle' declared_type='CommentSpecHandle' type='^^{CommentSpec}'/>
<field name='uniqueFonts' declared_type='long' type='l' type64='q'/>
<field name='fontHandle' declared_type='FontSpecHandle' type='^^{FontSpec}'/>
<field name='fontNamesHandle' declared_type='Handle' type='^*'/>
<field name='reserved1' declared_type='long' type='l' type64='q'/>
<field name='reserved2' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='Picture' type='{Picture=&quot;picSize&quot;s&quot;picFrame&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field name='picSize' declared_type='short' type='s'/>
<field name='picFrame' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='PixMap' type='{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}'>
<field name='baseAddr' declared_type='Ptr' type='*'/>
<field name='rowBytes' declared_type='short' type='s'/>
<field name='bounds' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='pmVersion' declared_type='short' type='s'/>
<field name='packType' declared_type='short' type='s'/>
<field name='packSize' declared_type='SInt32' type='l' type64='i'/>
<field name='hRes' declared_type='Fixed' type='l' type64='i'/>
<field name='vRes' declared_type='Fixed' type='l' type64='i'/>
<field name='pixelType' declared_type='short' type='s'/>
<field name='pixelSize' declared_type='short' type='s'/>
<field name='cmpCount' declared_type='short' type='s'/>
<field name='cmpSize' declared_type='short' type='s'/>
<field name='pixelFormat' declared_type='OSType' type='L' type64='I'/>
<field name='pmTable' declared_type='CTabHandle' type='^^{ColorTable}'/>
<field name='pmExt' declared_type='void*' type='^v'/>
</struct>
<struct name='PixPat' type='{PixPat=&quot;patType&quot;s&quot;patMap&quot;^^{PixMap}&quot;patData&quot;^*&quot;patXData&quot;^*&quot;patXValid&quot;s&quot;patXMap&quot;^*&quot;pat1Data&quot;{Pattern=&quot;pat&quot;[8C]}}'>
<field name='patType' declared_type='short' type='s'/>
<field name='patMap' declared_type='PixMapHandle' type='^^{PixMap}'/>
<field name='patData' declared_type='Handle' type='^*'/>
<field name='patXData' declared_type='Handle' type='^*'/>
<field name='patXValid' declared_type='short' type='s'/>
<field name='patXMap' declared_type='Handle' type='^*'/>
<field name='pat1Data' declared_type='Pattern' type='{Pattern=&quot;pat&quot;[8C]}'/>
</struct>
<struct name='Polygon' type='{MacPolygon=&quot;polySize&quot;s&quot;polyBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;polyPoints&quot;[1{Point=&quot;v&quot;s&quot;h&quot;s}]}'>
<field name='polySize' declared_type='short' type='s'/>
<field name='polyBBox' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='polyPoints' declared_type='Point*' type='[1{Point=&quot;v&quot;s&quot;h&quot;s}]'/>
</struct>
<struct name='PrinterFontStatus' type='{PrinterFontStatus=&quot;oResult&quot;i&quot;iFondID&quot;s&quot;iStyle&quot;C}'>
<field name='oResult' declared_type='SInt32' type='l' type64='i'/>
<field name='iFondID' declared_type='SInt16' type='s'/>
<field name='iStyle' declared_type='Style' type='C'/>
</struct>
<struct name='PrinterScalingStatus' type='{PrinterScalingStatus=&quot;oScalingFactors&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field name='oScalingFactors' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='QDProcs' type='{QDProcs=&quot;textProc&quot;^?&quot;lineProc&quot;^?&quot;rectProc&quot;^?&quot;rRectProc&quot;^?&quot;ovalProc&quot;^?&quot;arcProc&quot;^?&quot;polyProc&quot;^?&quot;rgnProc&quot;^?&quot;bitsProc&quot;^?&quot;commentProc&quot;^?&quot;txMeasProc&quot;^?&quot;getPicProc&quot;^?&quot;putPicProc&quot;^?}'>
<field name='textProc' function_pointer='true' declared_type='QDTextUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lineProc' function_pointer='true' declared_type='QDLineUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectProc' function_pointer='true' declared_type='QDRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rRectProc' function_pointer='true' declared_type='QDRRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='ovalProc' function_pointer='true' declared_type='QDOvalUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='arcProc' function_pointer='true' declared_type='QDArcUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='polyProc' function_pointer='true' declared_type='QDPolyUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rgnProc' function_pointer='true' declared_type='QDRgnUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bitsProc' function_pointer='true' declared_type='QDBitsUPP' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='commentProc' function_pointer='true' declared_type='QDCommentUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='txMeasProc' function_pointer='true' declared_type='QDTxMeasUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</field>
<field name='getPicProc' function_pointer='true' declared_type='QDGetPicUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='putPicProc' function_pointer='true' declared_type='QDPutPicUPP' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'>
<field name='red' declared_type='unsigned short' type='S'/>
<field name='green' declared_type='unsigned short' type='S'/>
<field name='blue' declared_type='unsigned short' type='S'/>
</struct>
<struct name='ReqListRec' type='{ReqListRec=&quot;reqLSize&quot;s&quot;reqLData&quot;[1s]}'>
<field name='reqLSize' declared_type='short' type='s'/>
<field name='reqLData' declared_type='short*' type='[1s]'/>
</struct>
<struct name='SProcRec' type='{SProcRec=&quot;nxtSrch&quot;^*&quot;srchProc&quot;^?}'>
<field name='nxtSrch' declared_type='Handle' type='^*'/>
<field name='srchProc' function_pointer='true' declared_type='ColorSearchUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</field>
</struct>
<struct name='StyleTable' type='{StyleTable=&quot;fontClass&quot;s&quot;offset&quot;i&quot;reserved&quot;i&quot;indexes&quot;[48c]}'>
<field name='fontClass' declared_type='SInt16' type='s'/>
<field name='offset' declared_type='SInt32' type='l' type64='i'/>
<field name='reserved' declared_type='SInt32' type='l' type64='i'/>
<field name='indexes' declared_type='char*' type='[48c]'/>
</struct>
<struct name='VDBaseAddressInfoRec' type='{VDBaseAddressInfoRec=&quot;csDevData&quot;l&quot;csDevBase&quot;l&quot;csModeReserved&quot;s&quot;csModeBase&quot;l}' type64='{VDBaseAddressInfoRec=&quot;csDevData&quot;q&quot;csDevBase&quot;q&quot;csModeReserved&quot;s&quot;csModeBase&quot;q}'>
<field name='csDevData' declared_type='long' type='l' type64='q'/>
<field name='csDevBase' declared_type='long' type='l' type64='q'/>
<field name='csModeReserved' declared_type='short' type='s'/>
<field name='csModeBase' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='VDCommunicationInfoRec' type='{VDCommunicationInfoRec=&quot;csBusID&quot;i&quot;csBusType&quot;I&quot;csMinBus&quot;i&quot;csMaxBus&quot;i&quot;csSupportedTypes&quot;I&quot;csSupportedCommFlags&quot;I&quot;csReserved2&quot;I&quot;csReserved3&quot;I&quot;csReserved4&quot;I&quot;csReserved5&quot;I&quot;csReserved6&quot;I&quot;csReserved7&quot;I}'>
<field name='csBusID' declared_type='SInt32' type='l' type64='i'/>
<field name='csBusType' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinBus' declared_type='SInt32' type='l' type64='i'/>
<field name='csMaxBus' declared_type='SInt32' type='l' type64='i'/>
<field name='csSupportedTypes' declared_type='UInt32' type='L' type64='I'/>
<field name='csSupportedCommFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved3' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved4' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved5' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved6' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved7' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDCommunicationRec' type='{VDCommunicationRec=&quot;csBusID&quot;i&quot;csCommFlags&quot;I&quot;csMinReplyDelay&quot;I&quot;csReserved2&quot;I&quot;csSendAddress&quot;I&quot;csSendType&quot;I&quot;csSendBuffer&quot;^v&quot;csSendSize&quot;I&quot;csReplyAddress&quot;I&quot;csReplyType&quot;I&quot;csReplyBuffer&quot;^v&quot;csReplySize&quot;I&quot;csReserved3&quot;I&quot;csReserved4&quot;I&quot;csReserved5&quot;I&quot;csReserved6&quot;I}' type64='{VDCommunicationRec=&quot;csBusID&quot;i&quot;csCommFlags&quot;I&quot;csMinReplyDelay&quot;I&quot;csReserved2&quot;I&quot;csSendAddress&quot;I&quot;csSendType&quot;I&quot;csSendBuffer&quot;^v&quot;csSendSize&quot;Q&quot;csReplyAddress&quot;I&quot;csReplyType&quot;I&quot;csReplyBuffer&quot;^v&quot;csReplySize&quot;Q&quot;csReserved3&quot;I&quot;csReserved4&quot;I&quot;csReserved5&quot;I&quot;csReserved6&quot;I}'>
<field name='csBusID' declared_type='SInt32' type='l' type64='i'/>
<field name='csCommFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinReplyDelay' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='csSendAddress' declared_type='UInt32' type='L' type64='I'/>
<field name='csSendType' declared_type='UInt32' type='L' type64='I'/>
<field name='csSendBuffer' declared_type='LogicalAddress' type='^v'/>
<field name='csSendSize' declared_type='ByteCount' type='L' type64='Q'/>
<field name='csReplyAddress' declared_type='UInt32' type='L' type64='I'/>
<field name='csReplyType' declared_type='UInt32' type='L' type64='I'/>
<field name='csReplyBuffer' declared_type='LogicalAddress' type='^v'/>
<field name='csReplySize' declared_type='ByteCount' type='L' type64='Q'/>
<field name='csReserved3' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved4' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved5' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved6' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDConvolutionInfoRec' type='{VDConvolutionInfoRec=&quot;csDisplayModeID&quot;I&quot;csDepthMode&quot;S&quot;csPage&quot;L&quot;csFlags&quot;I&quot;csReserved&quot;I}' type64='{VDConvolutionInfoRec=&quot;csDisplayModeID&quot;I&quot;csDepthMode&quot;S&quot;csPage&quot;Q&quot;csFlags&quot;I&quot;csReserved&quot;I}'>
<field name='csDisplayModeID' declared_type='DisplayModeID' type='L' type64='I'/>
<field name='csDepthMode' declared_type='DepthMode' type='S'/>
<field name='csPage' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDDDCBlockRec' type='{VDDDCBlockRec=&quot;ddcBlockNumber&quot;I&quot;ddcBlockType&quot;I&quot;ddcFlags&quot;I&quot;ddcReserved&quot;I&quot;ddcBlockData&quot;[128C]}'>
<field name='ddcBlockNumber' declared_type='UInt32' type='L' type64='I'/>
<field name='ddcBlockType' declared_type='ResType' type='L' type64='I'/>
<field name='ddcFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='ddcReserved' declared_type='UInt32' type='L' type64='I'/>
<field name='ddcBlockData' declared_type='Byte*' type='[128C]'/>
</struct>
<struct name='VDDefMode' type='{VDDefMode=&quot;csID&quot;C&quot;filler&quot;c}'>
<field name='csID' declared_type='UInt8' type='C'/>
<field name='filler' declared_type='SInt8' type='c'/>
</struct>
<struct name='VDDetailedTimingRec' type='{VDDetailedTimingRec=&quot;csTimingSize&quot;I&quot;csTimingType&quot;I&quot;csTimingVersion&quot;I&quot;csTimingReserved&quot;I&quot;csDisplayModeID&quot;I&quot;csDisplayModeSeed&quot;I&quot;csDisplayModeState&quot;I&quot;csDisplayModeAlias&quot;I&quot;csSignalConfig&quot;I&quot;csSignalLevels&quot;I&quot;csPixelClock&quot;Q&quot;csMinPixelClock&quot;Q&quot;csMaxPixelClock&quot;Q&quot;csHorizontalActive&quot;I&quot;csHorizontalBlanking&quot;I&quot;csHorizontalSyncOffset&quot;I&quot;csHorizontalSyncPulseWidth&quot;I&quot;csVerticalActive&quot;I&quot;csVerticalBlanking&quot;I&quot;csVerticalSyncOffset&quot;I&quot;csVerticalSyncPulseWidth&quot;I&quot;csHorizontalBorderLeft&quot;I&quot;csHorizontalBorderRight&quot;I&quot;csVerticalBorderTop&quot;I&quot;csVerticalBorderBottom&quot;I&quot;csHorizontalSyncConfig&quot;I&quot;csHorizontalSyncLevel&quot;I&quot;csVerticalSyncConfig&quot;I&quot;csVerticalSyncLevel&quot;I&quot;csReserved1&quot;I&quot;csReserved2&quot;I&quot;csReserved3&quot;I&quot;csReserved4&quot;I&quot;csReserved5&quot;I&quot;csReserved6&quot;I&quot;csReserved7&quot;I&quot;csReserved8&quot;I}'>
<field name='csTimingSize' declared_type='UInt32' type='L' type64='I'/>
<field name='csTimingType' declared_type='UInt32' type='L' type64='I'/>
<field name='csTimingVersion' declared_type='UInt32' type='L' type64='I'/>
<field name='csTimingReserved' declared_type='UInt32' type='L' type64='I'/>
<field name='csDisplayModeID' declared_type='DisplayModeID' type='L' type64='I'/>
<field name='csDisplayModeSeed' declared_type='UInt32' type='L' type64='I'/>
<field name='csDisplayModeState' declared_type='UInt32' type='L' type64='I'/>
<field name='csDisplayModeAlias' declared_type='UInt32' type='L' type64='I'/>
<field name='csSignalConfig' declared_type='UInt32' type='L' type64='I'/>
<field name='csSignalLevels' declared_type='UInt32' type='L' type64='I'/>
<field name='csPixelClock' declared_type='UInt64' type='Q'/>
<field name='csMinPixelClock' declared_type='UInt64' type='Q'/>
<field name='csMaxPixelClock' declared_type='UInt64' type='Q'/>
<field name='csHorizontalActive' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalBlanking' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalSyncOffset' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalSyncPulseWidth' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalActive' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalBlanking' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalSyncOffset' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalSyncPulseWidth' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalBorderLeft' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalBorderRight' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalBorderTop' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalBorderBottom' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalSyncConfig' declared_type='UInt32' type='L' type64='I'/>
<field name='csHorizontalSyncLevel' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalSyncConfig' declared_type='UInt32' type='L' type64='I'/>
<field name='csVerticalSyncLevel' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved3' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved4' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved5' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved6' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved7' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved8' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDDisplayConnectInfoRec' type='{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;L&quot;csDisplayComponent&quot;L&quot;csConnectReserved&quot;L}' type64='{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;Q&quot;csDisplayComponent&quot;Q&quot;csConnectReserved&quot;Q}'>
<field name='csDisplayType' declared_type='unsigned short' type='S'/>
<field name='csConnectTaggedType' declared_type='unsigned char' type='C'/>
<field name='csConnectTaggedData' declared_type='unsigned char' type='C'/>
<field name='csConnectFlags' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csDisplayComponent' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csConnectReserved' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDDisplayTimingRangeRec' type='{VDDisplayTimingRangeRec=&quot;csRangeSize&quot;I&quot;csRangeType&quot;I&quot;csRangeVersion&quot;I&quot;csRangeReserved&quot;I&quot;csRangeBlockIndex&quot;I&quot;csRangeGroup&quot;I&quot;csRangeBlockCount&quot;I&quot;csRangeFlags&quot;I&quot;csMinPixelClock&quot;Q&quot;csMaxPixelClock&quot;Q&quot;csMaxPixelError&quot;I&quot;csTimingRangeSyncFlags&quot;I&quot;csTimingRangeSignalLevels&quot;I&quot;csReserved0&quot;I&quot;csMinFrameRate&quot;I&quot;csMaxFrameRate&quot;I&quot;csMinLineRate&quot;I&quot;csMaxLineRate&quot;I&quot;csMaxHorizontalTotal&quot;I&quot;csMaxVerticalTotal&quot;I&quot;csMaxTotalReserved1&quot;I&quot;csMaxTotalReserved2&quot;I&quot;csCharSizeHorizontalActive&quot;C&quot;csCharSizeHorizontalBlanking&quot;C&quot;csCharSizeHorizontalSyncOffset&quot;C&quot;csCharSizeHorizontalSyncPulse&quot;C&quot;csCharSizeVerticalActive&quot;C&quot;csCharSizeVerticalBlanking&quot;C&quot;csCharSizeVerticalSyncOffset&quot;C&quot;csCharSizeVerticalSyncPulse&quot;C&quot;csCharSizeHorizontalBorderLeft&quot;C&quot;csCharSizeHorizontalBorderRight&quot;C&quot;csCharSizeVerticalBorderTop&quot;C&quot;csCharSizeVerticalBorderBottom&quot;C&quot;csCharSizeHorizontalTotal&quot;C&quot;csCharSizeVerticalTotal&quot;C&quot;csCharSizeReserved1&quot;S&quot;csMinHorizontalActiveClocks&quot;I&quot;csMaxHorizontalActiveClocks&quot;I&quot;csMinHorizontalBlankingClocks&quot;I&quot;csMaxHorizontalBlankingClocks&quot;I&quot;csMinHorizontalSyncOffsetClocks&quot;I&quot;csMaxHorizontalSyncOffsetClocks&quot;I&quot;csMinHorizontalPulseWidthClocks&quot;I&quot;csMaxHorizontalPulseWidthClocks&quot;I&quot;csMinVerticalActiveClocks&quot;I&quot;csMaxVerticalActiveClocks&quot;I&quot;csMinVerticalBlankingClocks&quot;I&quot;csMaxVerticalBlankingClocks&quot;I&quot;csMinVerticalSyncOffsetClocks&quot;I&quot;csMaxVerticalSyncOffsetClocks&quot;I&quot;csMinVerticalPulseWidthClocks&quot;I&quot;csMaxVerticalPulseWidthClocks&quot;I&quot;csMinHorizontalBorderLeft&quot;I&quot;csMaxHorizontalBorderLeft&quot;I&quot;csMinHorizontalBorderRight&quot;I&quot;csMaxHorizontalBorderRight&quot;I&quot;csMinVerticalBorderTop&quot;I&quot;csMaxVerticalBorderTop&quot;I&quot;csMinVerticalBorderBottom&quot;I&quot;csMaxVerticalBorderBottom&quot;I&quot;csReserved1&quot;I&quot;csReserved2&quot;I&quot;csReserved3&quot;I&quot;csReserved4&quot;I&quot;csReserved5&quot;I&quot;csReserved6&quot;I&quot;csReserved7&quot;I&quot;csReserved8&quot;I}'>
<field name='csRangeSize' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeType' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeVersion' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeReserved' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeBlockIndex' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeGroup' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeBlockCount' declared_type='UInt32' type='L' type64='I'/>
<field name='csRangeFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinPixelClock' declared_type='UInt64' type='Q'/>
<field name='csMaxPixelClock' declared_type='UInt64' type='Q'/>
<field name='csMaxPixelError' declared_type='UInt32' type='L' type64='I'/>
<field name='csTimingRangeSyncFlags' declared_type='UInt32' type='L' type64='I'/>
<field name='csTimingRangeSignalLevels' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved0' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinFrameRate' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxFrameRate' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinLineRate' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxLineRate' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalTotal' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalTotal' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxTotalReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxTotalReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='csCharSizeHorizontalActive' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalBlanking' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalSyncOffset' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalSyncPulse' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalActive' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalBlanking' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalSyncOffset' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalSyncPulse' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalBorderLeft' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalBorderRight' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalBorderTop' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalBorderBottom' declared_type='UInt8' type='C'/>
<field name='csCharSizeHorizontalTotal' declared_type='UInt8' type='C'/>
<field name='csCharSizeVerticalTotal' declared_type='UInt8' type='C'/>
<field name='csCharSizeReserved1' declared_type='UInt16' type='S'/>
<field name='csMinHorizontalActiveClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalActiveClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinHorizontalBlankingClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalBlankingClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinHorizontalSyncOffsetClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalSyncOffsetClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinHorizontalPulseWidthClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalPulseWidthClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalActiveClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalActiveClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalBlankingClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalBlankingClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalSyncOffsetClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalSyncOffsetClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalPulseWidthClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalPulseWidthClocks' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinHorizontalBorderLeft' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalBorderLeft' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinHorizontalBorderRight' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxHorizontalBorderRight' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalBorderTop' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalBorderTop' declared_type='UInt32' type='L' type64='I'/>
<field name='csMinVerticalBorderBottom' declared_type='UInt32' type='L' type64='I'/>
<field name='csMaxVerticalBorderBottom' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved3' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved4' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved5' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved6' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved7' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved8' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDDrawHardwareCursorRec' type='{VDDrawHardwareCursorRec=&quot;csCursorX&quot;i&quot;csCursorY&quot;i&quot;csCursorVisible&quot;I&quot;csReserved1&quot;I&quot;csReserved2&quot;I}'>
<field name='csCursorX' declared_type='SInt32' type='l' type64='i'/>
<field name='csCursorY' declared_type='SInt32' type='l' type64='i'/>
<field name='csCursorVisible' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDEntryRecord' type='{VDEntryRecord=&quot;csTable&quot;*}'>
<field name='csTable' declared_type='Ptr' type='*'/>
</struct>
<struct name='VDFlagRecord' type='{VDFlagRecord=&quot;csMode&quot;c&quot;filler&quot;c}'>
<field name='csMode' declared_type='SInt8' type='c'/>
<field name='filler' declared_type='SInt8' type='c'/>
</struct>
<struct name='VDGammaInfoRec' type='{VDGammaInfoRec=&quot;csLastGammaID&quot;I&quot;csNextGammaID&quot;I&quot;csGammaPtr&quot;*&quot;csReserved&quot;L}' type64='{VDGammaInfoRec=&quot;csLastGammaID&quot;I&quot;csNextGammaID&quot;I&quot;csGammaPtr&quot;*&quot;csReserved&quot;Q}'>
<field name='csLastGammaID' declared_type='GammaTableID' type='L' type64='I'/>
<field name='csNextGammaID' declared_type='GammaTableID' type='L' type64='I'/>
<field name='csGammaPtr' declared_type='Ptr' type='*'/>
<field name='csReserved' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDGammaRecord' type='{VDGammaRecord=&quot;csGTable&quot;*}'>
<field name='csGTable' declared_type='Ptr' type='*'/>
</struct>
<struct name='VDGetGammaListRec' type='{VDGetGammaListRec=&quot;csPreviousGammaTableID&quot;I&quot;csGammaTableID&quot;I&quot;csGammaTableSize&quot;L&quot;csGammaTableName&quot;*}' type64='{VDGetGammaListRec=&quot;csPreviousGammaTableID&quot;I&quot;csGammaTableID&quot;I&quot;csGammaTableSize&quot;Q&quot;csGammaTableName&quot;*}'>
<field name='csPreviousGammaTableID' declared_type='GammaTableID' type='L' type64='I'/>
<field name='csGammaTableID' declared_type='GammaTableID' type='L' type64='I'/>
<field name='csGammaTableSize' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csGammaTableName' declared_type='char*' type='*'/>
</struct>
<struct name='VDGrayRecord' type='{VDGrayRecord=&quot;csMode&quot;B&quot;filler&quot;c}'>
<field name='csMode' declared_type='Boolean' type='B'/>
<field name='filler' declared_type='SInt8' type='c'/>
</struct>
<struct name='VDHardwareCursorDrawStateRec' type='{VDHardwareCursorDrawStateRec=&quot;csCursorX&quot;i&quot;csCursorY&quot;i&quot;csCursorVisible&quot;I&quot;csCursorSet&quot;I&quot;csReserved1&quot;I&quot;csReserved2&quot;I}'>
<field name='csCursorX' declared_type='SInt32' type='l' type64='i'/>
<field name='csCursorY' declared_type='SInt32' type='l' type64='i'/>
<field name='csCursorVisible' declared_type='UInt32' type='L' type64='I'/>
<field name='csCursorSet' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDMultiConnectInfoRec' type='{VDMultiConnectInfoRec=&quot;csDisplayCountOrNumber&quot;L&quot;csConnectInfo&quot;{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;L&quot;csDisplayComponent&quot;L&quot;csConnectReserved&quot;L}}' type64='{VDMultiConnectInfoRec=&quot;csDisplayCountOrNumber&quot;Q&quot;csConnectInfo&quot;{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;Q&quot;csDisplayComponent&quot;Q&quot;csConnectReserved&quot;Q}}'>
<field name='csDisplayCountOrNumber' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csConnectInfo' declared_type='VDDisplayConnectInfoRec' type='{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;L&quot;csDisplayComponent&quot;L&quot;csConnectReserved&quot;L}' type64='{VDDisplayConnectInfoRec=&quot;csDisplayType&quot;S&quot;csConnectTaggedType&quot;C&quot;csConnectTaggedData&quot;C&quot;csConnectFlags&quot;Q&quot;csDisplayComponent&quot;Q&quot;csConnectReserved&quot;Q}'/>
</struct>
<struct name='VDPageInfo' type='{VDPageInfo=&quot;csMode&quot;s&quot;csData&quot;l&quot;csPage&quot;s&quot;csBaseAddr&quot;*}' type64='{VDPageInfo=&quot;csMode&quot;s&quot;csData&quot;q&quot;csPage&quot;s&quot;csBaseAddr&quot;*}'>
<field name='csMode' declared_type='short' type='s'/>
<field name='csData' declared_type='long' type='l' type64='q'/>
<field name='csPage' declared_type='short' type='s'/>
<field name='csBaseAddr' declared_type='Ptr' type='*'/>
</struct>
<struct name='VDPowerStateRec' type='{VDPowerStateRec=&quot;powerState&quot;L&quot;powerFlags&quot;L&quot;powerReserved1&quot;L&quot;powerReserved2&quot;L}' type64='{VDPowerStateRec=&quot;powerState&quot;Q&quot;powerFlags&quot;Q&quot;powerReserved1&quot;Q&quot;powerReserved2&quot;Q}'>
<field name='powerState' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerFlags' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerReserved1' declared_type='unsigned long' type='L' type64='Q'/>
<field name='powerReserved2' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDPrivateSelectorDataRec' type='{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;I&quot;privateResults&quot;^v&quot;privateResultsSize&quot;I}' type64='{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;Q&quot;privateResults&quot;^v&quot;privateResultsSize&quot;Q}'>
<field name='privateParameters' declared_type='LogicalAddress' type='^v'/>
<field name='privateParametersSize' declared_type='ByteCount' type='L' type64='Q'/>
<field name='privateResults' declared_type='LogicalAddress' type='^v'/>
<field name='privateResultsSize' declared_type='ByteCount' type='L' type64='Q'/>
</struct>
<struct name='VDPrivateSelectorRec' type='{VDPrivateSelectorRec=&quot;reserved&quot;I&quot;data&quot;[1{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;I&quot;privateResults&quot;^v&quot;privateResultsSize&quot;I}]}' type64='{VDPrivateSelectorRec=&quot;reserved&quot;I&quot;data&quot;[1{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;Q&quot;privateResults&quot;^v&quot;privateResultsSize&quot;Q}]}'>
<field name='reserved' declared_type='UInt32' type='L' type64='I'/>
<field name='data' declared_type='VDPrivateSelectorDataRec*' type='[1{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;I&quot;privateResults&quot;^v&quot;privateResultsSize&quot;I}]' type64='[1{VDPrivateSelectorDataRec=&quot;privateParameters&quot;^v&quot;privateParametersSize&quot;Q&quot;privateResults&quot;^v&quot;privateResultsSize&quot;Q}]'/>
</struct>
<struct name='VDResolutionInfoRec' type='{VDResolutionInfoRec=&quot;csPreviousDisplayModeID&quot;I&quot;csDisplayModeID&quot;I&quot;csHorizontalPixels&quot;L&quot;csVerticalLines&quot;L&quot;csRefreshRate&quot;i&quot;csMaxDepthMode&quot;S&quot;csResolutionFlags&quot;L&quot;csReserved&quot;L}' type64='{VDResolutionInfoRec=&quot;csPreviousDisplayModeID&quot;I&quot;csDisplayModeID&quot;I&quot;csHorizontalPixels&quot;Q&quot;csVerticalLines&quot;Q&quot;csRefreshRate&quot;i&quot;csMaxDepthMode&quot;S&quot;csResolutionFlags&quot;Q&quot;csReserved&quot;Q}'>
<field name='csPreviousDisplayModeID' declared_type='DisplayModeID' type='L' type64='I'/>
<field name='csDisplayModeID' declared_type='DisplayModeID' type='L' type64='I'/>
<field name='csHorizontalPixels' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csVerticalLines' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csRefreshRate' declared_type='Fixed' type='l' type64='i'/>
<field name='csMaxDepthMode' declared_type='DepthMode' type='S'/>
<field name='csResolutionFlags' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csReserved' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDRetrieveGammaRec' type='{VDRetrieveGammaRec=&quot;csGammaTableID&quot;I&quot;csGammaTablePtr&quot;^{GammaTbl}}'>
<field name='csGammaTableID' declared_type='GammaTableID' type='L' type64='I'/>
<field name='csGammaTablePtr' declared_type='GammaTbl*' type='^{GammaTbl=ssssss[1s]}'/>
</struct>
<struct name='VDSetEntryRecord' type='{VDSetEntryRecord=&quot;csTable&quot;^{ColorSpec}&quot;csStart&quot;s&quot;csCount&quot;s}'>
<field name='csTable' declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<field name='csStart' declared_type='short' type='s'/>
<field name='csCount' declared_type='short' type='s'/>
</struct>
<struct name='VDSetHardwareCursorRec' type='{VDSetHardwareCursorRec=&quot;csCursorRef&quot;^v&quot;csReserved1&quot;I&quot;csReserved2&quot;I}'>
<field name='csCursorRef' declared_type='void*' type='^v'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDSettings' type='{VDSettings=&quot;csParamCnt&quot;s&quot;csBrightMax&quot;s&quot;csBrightDef&quot;s&quot;csBrightVal&quot;s&quot;csCntrstMax&quot;s&quot;csCntrstDef&quot;s&quot;csCntrstVal&quot;s&quot;csTintMax&quot;s&quot;csTintDef&quot;s&quot;csTintVal&quot;s&quot;csHueMax&quot;s&quot;csHueDef&quot;s&quot;csHueVal&quot;s&quot;csHorizDef&quot;s&quot;csHorizVal&quot;s&quot;csHorizMax&quot;s&quot;csVertDef&quot;s&quot;csVertVal&quot;s&quot;csVertMax&quot;s}'>
<field name='csParamCnt' declared_type='short' type='s'/>
<field name='csBrightMax' declared_type='short' type='s'/>
<field name='csBrightDef' declared_type='short' type='s'/>
<field name='csBrightVal' declared_type='short' type='s'/>
<field name='csCntrstMax' declared_type='short' type='s'/>
<field name='csCntrstDef' declared_type='short' type='s'/>
<field name='csCntrstVal' declared_type='short' type='s'/>
<field name='csTintMax' declared_type='short' type='s'/>
<field name='csTintDef' declared_type='short' type='s'/>
<field name='csTintVal' declared_type='short' type='s'/>
<field name='csHueMax' declared_type='short' type='s'/>
<field name='csHueDef' declared_type='short' type='s'/>
<field name='csHueVal' declared_type='short' type='s'/>
<field name='csHorizDef' declared_type='short' type='s'/>
<field name='csHorizVal' declared_type='short' type='s'/>
<field name='csHorizMax' declared_type='short' type='s'/>
<field name='csVertDef' declared_type='short' type='s'/>
<field name='csVertVal' declared_type='short' type='s'/>
<field name='csVertMax' declared_type='short' type='s'/>
</struct>
<struct name='VDSizeInfo' type='{VDSizeInfo=&quot;csHSize&quot;s&quot;csHPos&quot;s&quot;csVSize&quot;s&quot;csVPos&quot;s}'>
<field name='csHSize' declared_type='short' type='s'/>
<field name='csHPos' declared_type='short' type='s'/>
<field name='csVSize' declared_type='short' type='s'/>
<field name='csVPos' declared_type='short' type='s'/>
</struct>
<struct name='VDSupportsHardwareCursorRec' type='{VDSupportsHardwareCursorRec=&quot;csSupportsHardwareCursor&quot;I&quot;csReserved1&quot;I&quot;csReserved2&quot;I}'>
<field name='csSupportsHardwareCursor' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved1' declared_type='UInt32' type='L' type64='I'/>
<field name='csReserved2' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VDSwitchInfoRec' type='{VDSwitchInfoRec=&quot;csMode&quot;S&quot;csData&quot;L&quot;csPage&quot;S&quot;csBaseAddr&quot;*&quot;csReserved&quot;L}' type64='{VDSwitchInfoRec=&quot;csMode&quot;S&quot;csData&quot;Q&quot;csPage&quot;S&quot;csBaseAddr&quot;*&quot;csReserved&quot;Q}'>
<field name='csMode' declared_type='unsigned short' type='S'/>
<field name='csData' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csPage' declared_type='unsigned short' type='S'/>
<field name='csBaseAddr' declared_type='Ptr' type='*'/>
<field name='csReserved' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDSyncInfoRec' type='{VDSyncInfoRec=&quot;csMode&quot;C&quot;csFlags&quot;C}'>
<field name='csMode' declared_type='UInt8' type='C'/>
<field name='csFlags' declared_type='UInt8' type='C'/>
</struct>
<struct name='VDTimingInfoRec' type='{VDTimingInfoRec=&quot;csTimingMode&quot;L&quot;csTimingReserved&quot;L&quot;csTimingFormat&quot;L&quot;csTimingData&quot;L&quot;csTimingFlags&quot;L}' type64='{VDTimingInfoRec=&quot;csTimingMode&quot;Q&quot;csTimingReserved&quot;Q&quot;csTimingFormat&quot;Q&quot;csTimingData&quot;Q&quot;csTimingFlags&quot;Q}'>
<field name='csTimingMode' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csTimingReserved' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csTimingFormat' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csTimingData' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csTimingFlags' declared_type='unsigned long' type='L' type64='Q'/>
</struct>
<struct name='VDVideoParametersInfoRec' type='{VDVideoParametersInfoRec=&quot;csDisplayModeID&quot;I&quot;csDepthMode&quot;S&quot;csVPBlockPtr&quot;^{VPBlock}&quot;csPageCount&quot;L&quot;csDeviceType&quot;I&quot;csDepthFlags&quot;I}' type64='{VDVideoParametersInfoRec=&quot;csDisplayModeID&quot;I&quot;csDepthMode&quot;S&quot;csVPBlockPtr&quot;^{VPBlock}&quot;csPageCount&quot;Q&quot;csDeviceType&quot;I&quot;csDepthFlags&quot;I}'>
<field name='csDisplayModeID' declared_type='DisplayModeID' type='L' type64='I'/>
<field name='csDepthMode' declared_type='DepthMode' type='S'/>
<field name='csVPBlockPtr' declared_type='VPBlockPtr' type='^{VPBlock=ls{Rect=ssss}sslllssssl}' type64='^{VPBlock=qs{Rect=ssss}ssqqqssssq}'/>
<field name='csPageCount' declared_type='unsigned long' type='L' type64='Q'/>
<field name='csDeviceType' declared_type='VideoDeviceType' type='L' type64='I'/>
<field name='csDepthFlags' declared_type='UInt32' type='L' type64='I'/>
</struct>
<struct name='VPBlock' type='{VPBlock=&quot;vpBaseOffset&quot;l&quot;vpRowBytes&quot;s&quot;vpBounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;vpVersion&quot;s&quot;vpPackType&quot;s&quot;vpPackSize&quot;l&quot;vpHRes&quot;l&quot;vpVRes&quot;l&quot;vpPixelType&quot;s&quot;vpPixelSize&quot;s&quot;vpCmpCount&quot;s&quot;vpCmpSize&quot;s&quot;vpPlaneBytes&quot;l}' type64='{VPBlock=&quot;vpBaseOffset&quot;q&quot;vpRowBytes&quot;s&quot;vpBounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;vpVersion&quot;s&quot;vpPackType&quot;s&quot;vpPackSize&quot;q&quot;vpHRes&quot;q&quot;vpVRes&quot;q&quot;vpPixelType&quot;s&quot;vpPixelSize&quot;s&quot;vpCmpCount&quot;s&quot;vpCmpSize&quot;s&quot;vpPlaneBytes&quot;q}'>
<field name='vpBaseOffset' declared_type='long' type='l' type64='q'/>
<field name='vpRowBytes' declared_type='short' type='s'/>
<field name='vpBounds' declared_type='Rect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field name='vpVersion' declared_type='short' type='s'/>
<field name='vpPackType' declared_type='short' type='s'/>
<field name='vpPackSize' declared_type='long' type='l' type64='q'/>
<field name='vpHRes' declared_type='long' type='l' type64='q'/>
<field name='vpVRes' declared_type='long' type='l' type64='q'/>
<field name='vpPixelType' declared_type='short' type='s'/>
<field name='vpPixelSize' declared_type='short' type='s'/>
<field name='vpCmpCount' declared_type='short' type='s'/>
<field name='vpCmpSize' declared_type='short' type='s'/>
<field name='vpPlaneBytes' declared_type='long' type='l' type64='q'/>
</struct>
<struct name='WidEntry' type='{WidEntry=&quot;widStyle&quot;s}'>
<field name='widStyle' declared_type='SInt16' type='s'/>
</struct>
<struct name='WidTable' type='{WidTable=&quot;numWidths&quot;s}'>
<field name='numWidths' declared_type='SInt16' type='s'/>
</struct>
<struct name='WidthTable' type='{WidthTable=&quot;tabData&quot;[256l]&quot;tabFont&quot;^*&quot;sExtra&quot;l&quot;style&quot;l&quot;fID&quot;s&quot;fSize&quot;s&quot;face&quot;s&quot;device&quot;s&quot;inNumer&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;inDenom&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;aFID&quot;s&quot;fHand&quot;^*&quot;usedFam&quot;B&quot;aFace&quot;C&quot;vOutput&quot;s&quot;hOutput&quot;s&quot;vFactor&quot;s&quot;hFactor&quot;s&quot;aSize&quot;s&quot;tabSize&quot;s}' type64='{WidthTable=&quot;tabData&quot;[256i]&quot;tabFont&quot;^*&quot;sExtra&quot;q&quot;style&quot;q&quot;fID&quot;s&quot;fSize&quot;s&quot;face&quot;s&quot;device&quot;s&quot;inNumer&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;inDenom&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;aFID&quot;s&quot;fHand&quot;^*&quot;usedFam&quot;B&quot;aFace&quot;C&quot;vOutput&quot;s&quot;hOutput&quot;s&quot;vFactor&quot;s&quot;hFactor&quot;s&quot;aSize&quot;s&quot;tabSize&quot;s}'>
<field name='tabData' declared_type='Fixed*' type='[256l]' type64='[256i]'/>
<field name='tabFont' declared_type='Handle' type='^*'/>
<field name='sExtra' declared_type='long' type='l' type64='q'/>
<field name='style' declared_type='long' type='l' type64='q'/>
<field name='fID' declared_type='short' type='s'/>
<field name='fSize' declared_type='short' type='s'/>
<field name='face' declared_type='short' type='s'/>
<field name='device' declared_type='short' type='s'/>
<field name='inNumer' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='inDenom' declared_type='Point' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field name='aFID' declared_type='short' type='s'/>
<field name='fHand' declared_type='Handle' type='^*'/>
<field name='usedFam' declared_type='Boolean' type='B'/>
<field name='aFace' declared_type='UInt8' type='C'/>
<field name='vOutput' declared_type='short' type='s'/>
<field name='hOutput' declared_type='short' type='s'/>
<field name='vFactor' declared_type='short' type='s'/>
<field name='hFactor' declared_type='short' type='s'/>
<field name='aSize' declared_type='short' type='s'/>
<field name='tabSize' declared_type='short' type='s'/>
</struct>
<struct name='xColorSpec' type='{xColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;xalpha&quot;s}'>
<field name='value' declared_type='short' type='s'/>
<field name='rgb' declared_type='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field name='xalpha' declared_type='short' type='s'/>
</struct>
<cftype name='ATSUStyleSettingRef' type='^{LLCStyleInfo=}'/>
<cftype name='QDPictRef' type='^{QDPict=}'/>
<cftype name='QDRegionBitsRef' type='^{OpaqueQDRegionBitsRef=}'/>
<opaque name='ATSUFontFallbacks' type='^{OpaqueATSUFontFallbacks=}'/>
<opaque name='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<opaque name='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<opaque name='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<opaque name='FNSFontProfile' type='^{OpaqueFNSFontProfile=}'/>
<opaque name='FNSFontReference' type='^{OpaqueFNSFontReference=}'/>
<opaque name='GrafPtr' type='^{OpaqueGrafPtr=}'/>
<opaque name='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<opaque name='WindowPtr' type='^{OpaqueWindowPtr=}'/>
<enum name='ColorBankIs555' value='1'/>
<enum name='ColorBankIsCustom' value='-1'/>
<enum name='ColorBankIsExactAnd555' value='0'/>
<enum name='NON_MAC_PIXEL_FORMATS' value='1'/>
<enum name='OLDGDEVICESTRUCT' value='0'/>
<enum name='OLDPIXMAPSTRUCT' value='0'/>
<enum name='RGBDirect' value='16'/>
<enum name='adMax' value='37'/>
<enum name='adMin' value='39'/>
<enum name='addMax' value='37'/>
<enum name='addOver' value='34'/>
<enum name='addPin' value='33'/>
<enum name='alignPix' value='262144'/>
<enum name='alignPixBit' value='18'/>
<enum name='allDevices' value='4'/>
<enum name='allDevicesBit' value='2'/>
<enum name='allInit' value='12'/>
<enum name='applFont' value='1'/>
<enum name='appleMark' value='20'/>
<enum name='baseAddr32' value='4'/>
<enum name='blackBit' value='5'/>
<enum name='blackColor' value='33'/>
<enum name='blend' value='32'/>
<enum name='blueBit' value='2'/>
<enum name='blueColor' value='409'/>
<enum name='burstDevice' value='7'/>
<enum name='checkMark' value='18'/>
<enum name='chunky' value='0'/>
<enum name='chunkyPlanar' value='1'/>
<enum name='clipPix' value='268435456'/>
<enum name='clipPixBit' value='28'/>
<enum name='clutType' value='0'/>
<enum name='colorXorXFer' value='52'/>
<enum name='commandMark' value='17'/>
<enum name='condenseBit' value='5'/>
<enum name='crossCursor' value='2'/>
<enum name='cscDirectSetEntries' value='8'/>
<enum name='cscDoCommunication' value='33'/>
<enum name='cscDrawHardwareCursor' value='23'/>
<enum name='cscGetBaseAddr' value='5'/>
<enum name='cscGetClutBehavior' value='29'/>
<enum name='cscGetCommunicationInfo' value='32'/>
<enum name='cscGetConnection' value='12'/>
<enum name='cscGetConvolution' value='24'/>
<enum name='cscGetCurMode' value='10'/>
<enum name='cscGetDDCBlock' value='27'/>
<enum name='cscGetDefaultMode' value='9'/>
<enum name='cscGetDetailedTiming' value='31'/>
<enum name='cscGetEntries' value='3'/>
<enum name='cscGetGamma' value='8'/>
<enum name='cscGetGammaInfoList' value='20'/>
<enum name='cscGetGray' value='6'/>
<enum name='cscGetHardwareCursorDrawState' value='23'/>
<enum name='cscGetInterrupt' value='7'/>
<enum name='cscGetMode' value='2'/>
<enum name='cscGetModeBaseAddress' value='14'/>
<enum name='cscGetModeTiming' value='13'/>
<enum name='cscGetMultiConnect' value='28'/>
<enum name='cscGetNextResolution' value='17'/>
<enum name='cscGetPageBase' value='5'/>
<enum name='cscGetPageCnt' value='4'/>
<enum name='cscGetPages' value='4'/>
<enum name='cscGetPowerState' value='25'/>
<enum name='cscGetPreferredConfiguration' value='16'/>
<enum name='cscGetScanProc' value='15'/>
<enum name='cscGetSync' value='11'/>
<enum name='cscGetTimingRanges' value='30'/>
<enum name='cscGetVideoParameters' value='18'/>
<enum name='cscGrayPage' value='5'/>
<enum name='cscGrayScreen' value='5'/>
<enum name='cscKillIO' value='1'/>
<enum name='cscPrivateControlCall' value='26'/>
<enum name='cscPrivateStatusCall' value='26'/>
<enum name='cscProbeConnection' value='34'/>
<enum name='cscReset' value='0'/>
<enum name='cscRetrieveGammaTable' value='21'/>
<enum name='cscSavePreferredConfiguration' value='16'/>
<enum name='cscSetClutBehavior' value='29'/>
<enum name='cscSetConvolution' value='24'/>
<enum name='cscSetDefaultMode' value='9'/>
<enum name='cscSetDetailedTiming' value='31'/>
<enum name='cscSetEntries' value='3'/>
<enum name='cscSetGamma' value='4'/>
<enum name='cscSetGray' value='6'/>
<enum name='cscSetHardwareCursor' value='22'/>
<enum name='cscSetInterrupt' value='7'/>
<enum name='cscSetMode' value='2'/>
<enum name='cscSetMultiConnect' value='28'/>
<enum name='cscSetPowerState' value='25'/>
<enum name='cscSetSync' value='11'/>
<enum name='cscSupportsHardwareCursor' value='22'/>
<enum name='cscSwitchMode' value='10'/>
<enum name='cscUnusedCall' value='127'/>
<enum name='cursorDoesAnimate' value='1'/>
<enum name='cursorDoesHardware' value='2'/>
<enum name='cursorDoesUnreadableScreenBits' value='4'/>
<enum name='customXFer' value='54'/>
<enum name='cyanBit' value='8'/>
<enum name='cyanColor' value='273'/>
<enum name='defQDColors' value='127'/>
<enum name='deviceIsAScreen' value='128'/>
<enum name='deviceIsDCISurface' value='32'/>
<enum name='deviceIsDDSurface' value='16'/>
<enum name='deviceIsExternalBuffer' value='8'/>
<enum name='deviceIsGDISurface' value='64'/>
<enum name='deviceIsIndirect' value='1'/>
<enum name='deviceIsOverlaySurface' value='256'/>
<enum name='deviceIsStatic' value='4'/>
<enum name='deviceNeedsLock' value='2'/>
<enum name='diamondMark' value='19'/>
<enum name='directType' value='2'/>
<enum name='ditherCopy' value='64'/>
<enum name='ditherPix' value='1073741824'/>
<enum name='ditherPixBit' value='30'/>
<enum name='dmAllDisplays' value='0'/>
<enum name='dmOnlyActiveDisplays' value='1'/>
<enum name='dontMatchSeeds' value='2'/>
<enum name='dontMatchSeedsBit' value='1'/>
<enum name='eightBitMode' value='131'/>
<enum name='ext32Device' value='8'/>
<enum name='extendBit' value='6'/>
<enum name='fifthVidMode' value='132'/>
<enum name='firstVidMode' value='128'/>
<enum name='fixedFont' value='45056'/>
<enum name='fixedType' value='1'/>
<enum name='fontWid' value='44208'/>
<enum name='fourBitMode' value='130'/>
<enum name='fourthVidMode' value='131'/>
<enum name='fxdFntH' value='45057'/>
<enum name='fxdFntHW' value='45059'/>
<enum name='fxdFntW' value='45058'/>
<enum name='gdDevType' value='0'/>
<enum name='grayishTextOr' value='49'/>
<enum name='greenBit' value='3'/>
<enum name='greenColor' value='341'/>
<enum name='gwFlagErr' value64='2147483648' value='-2147483648'/>
<enum name='gwFlagErrBit' value='31'/>
<enum name='hasAuxMenuBar' value='6'/>
<enum name='hilite' value='50'/>
<enum name='hiliteBit' value='7'/>
<enum name='hilitetransfermode' value='50'/>
<enum name='hwMirroredDevice' value='4'/>
<enum name='iBeamCursor' value='1'/>
<enum name='interlacedDevice' value='2'/>
<enum name='invalColReq' value='-1'/>
<enum name='inverseBit' value='1'/>
<enum name='italicBit' value='1'/>
<enum name='k16BE555PixelFormat' value='16'/>
<enum name='k16BE565PixelFormat' value='1110783541'/>
<enum name='k16LE5551PixelFormat' value='892679473'/>
<enum name='k16LE555PixelFormat' value='1278555445'/>
<enum name='k16LE565PixelFormat' value='1278555701'/>
<enum name='k1IndexedGrayPixelFormat' value='33'/>
<enum name='k1MonochromePixelFormat' value='1'/>
<enum name='k24BGRPixelFormat' value='842285639'/>
<enum name='k24RGBPixelFormat' value='24'/>
<enum name='k2IndexedGrayPixelFormat' value='34'/>
<enum name='k2IndexedPixelFormat' value='2'/>
<enum name='k2vuyPixelFormat' value='846624121'/>
<enum name='k32ABGRPixelFormat' value='1094862674'/>
<enum name='k32ARGBPixelFormat' value='32'/>
<enum name='k32BGRAPixelFormat' value='1111970369'/>
<enum name='k32RGBAPixelFormat' value='1380401729'/>
<enum name='k4IndexedGrayPixelFormat' value='36'/>
<enum name='k4IndexedPixelFormat' value='4'/>
<enum name='k8IndexedGrayPixelFormat' value='40'/>
<enum name='k8IndexedPixelFormat' value='8'/>
<enum name='kAEDisplayNotice' value='1685287020'/>
<enum name='kAEDisplaySummary' value='1685288301'/>
<enum name='kAESystemConfigNotice' value='1668179559'/>
<enum name='kATSFlatDataUstlCurrentVersion' value='2'/>
<enum name='kATSFlatDataUstlVersion0' value='0'/>
<enum name='kATSFlatDataUstlVersion1' value='1'/>
<enum name='kATSFlatDataUstlVersion2' value='2'/>
<enum name='kATSFlattenedFontSpecifierRawNameData' value='1851878756'/>
<enum name='kATSUAfterWithStreamShiftTag' value='268'/>
<enum name='kATSUAscentTag' value='284'/>
<enum name='kATSUBackgroundCallback' value='1'/>
<enum name='kATSUBackgroundColor' value='0'/>
<enum name='kATSUBaselineClassTag' value='274'/>
<enum name='kATSUBeforeWithStreamShiftTag' value='267'/>
<enum name='kATSUByCharacter' value='0'/>
<enum name='kATSUByCharacterCluster' value='3'/>
<enum name='kATSUByCluster' value='1'/>
<enum name='kATSUByTypographicCluster' value='1'/>
<enum name='kATSUByWord' value='2'/>
<enum name='kATSUCGContextTag' value='32767'/>
<enum name='kATSUCenterAlignment' value='536870912'/>
<enum name='kATSUCenterTab' value='1'/>
<enum name='kATSUClearAll' value='4294967295'/>
<enum name='kATSUColorTag' value='263'/>
<enum name='kATSUCrossStreamShiftTag' value='269'/>
<enum name='kATSUDataStreamUnicodeStyledText' value='1970500716'/>
<enum name='kATSUDecimalTab' value='3'/>
<enum name='kATSUDecompositionFactorTag' value='273'/>
<enum name='kATSUDefaultFontFallbacks' value='0'/>
<enum name='kATSUDescentTag' value='285'/>
<enum name='kATSUDirectDataAdvanceDeltaFixedArray' value='0'/>
<enum name='kATSUDirectDataBaselineDeltaFixedArray' value='1'/>
<enum name='kATSUDirectDataDeviceDeltaSInt16Array' value='2'/>
<enum name='kATSUDirectDataLayoutRecordATSLayoutRecordCurrent' value='100'/>
<enum name='kATSUDirectDataLayoutRecordATSLayoutRecordVersion1' value='100'/>
<enum name='kATSUDirectDataStyleIndexUInt16Array' value='3'/>
<enum name='kATSUDirectDataStyleSettingATSUStyleSettingRefArray' value='4'/>
<enum name='kATSUEndAlignment' value='1073741824'/>
<enum name='kATSUFlattenOptionNoOptionsMask' value='0'/>
<enum name='kATSUFontMatrixTag' value='289'/>
<enum name='kATSUFontTag' value='261'/>
<enum name='kATSUForceHangingTag' value='280'/>
<enum name='kATSUFromFollowingLayout' value='4294967293'/>
<enum name='kATSUFromPreviousLayout' value='4294967294'/>
<enum name='kATSUFromTextBeginning' value='4294967295'/>
<enum name='kATSUFullJustification' value='1073741824'/>
<enum name='kATSUGlyphSelectorTag' value='287'/>
<enum name='kATSUHangingInhibitFactorTag' value='271'/>
<enum name='kATSUImposeWidthTag' value='266'/>
<enum name='kATSUInvalidFontID' value='0'/>
<enum name='kATSUKerningInhibitFactorTag' value='272'/>
<enum name='kATSULangRegionTag' value='264'/>
<enum name='kATSULanguageTag' value='264'/>
<enum name='kATSULastResortOnlyFallback' value='1'/>
<enum name='kATSULayoutOperationOverrideTag' value='15'/>
<enum name='kATSULeadingTag' value='286'/>
<enum name='kATSULeftTab' value='0'/>
<enum name='kATSULeftToRightBaseDirection' value='0'/>
<enum name='kATSULineAscentTag' value='8'/>
<enum name='kATSULineBaselineValuesTag' value='6'/>
<enum name='kATSULineDecimalTabCharacterTag' value='14'/>
<enum name='kATSULineDescentTag' value='9'/>
<enum name='kATSULineDirectionTag' value='3'/>
<enum name='kATSULineFlushFactorTag' value='5'/>
<enum name='kATSULineFontFallbacksTag' value='13'/>
<enum name='kATSULineHighlightCGColorTag' value='17'/>
<enum name='kATSULineJustificationFactorTag' value='4'/>
<enum name='kATSULineLangRegionTag' value='10'/>
<enum name='kATSULineLanguageTag' value='10'/>
<enum name='kATSULineLayoutOptionsTag' value='7'/>
<enum name='kATSULineRotationTag' value='2'/>
<enum name='kATSULineTextLocatorTag' value='11'/>
<enum name='kATSULineTruncationTag' value='12'/>
<enum name='kATSULineWidthTag' value='1'/>
<enum name='kATSUMaxATSUITagValue' value='65535'/>
<enum name='kATSUMaxLineTag' value='18'/>
<enum name='kATSUMaxStyleTag' value='299'/>
<enum name='kATSUNoCaretAngleTag' value='277'/>
<enum name='kATSUNoJustification' value='0'/>
<enum name='kATSUNoLigatureSplitTag' value='276'/>
<enum name='kATSUNoOpticalAlignmentTag' value='279'/>
<enum name='kATSUNoSelector' value='65535'/>
<enum name='kATSUNoSpecialJustificationTag' value='281'/>
<enum name='kATSUNumberTabTypes' value='4'/>
<enum name='kATSUPriorityJustOverrideTag' value='275'/>
<enum name='kATSUQDBoldfaceTag' value='256'/>
<enum name='kATSUQDCondensedTag' value='259'/>
<enum name='kATSUQDExtendedTag' value='260'/>
<enum name='kATSUQDItalicTag' value='257'/>
<enum name='kATSUQDUnderlineTag' value='258'/>
<enum name='kATSURGBAlphaColorTag' value='288'/>
<enum name='kATSURightTab' value='2'/>
<enum name='kATSURightToLeftBaseDirection' value='1'/>
<enum name='kATSUSequentialFallbacksExclusive' value='3'/>
<enum name='kATSUSequentialFallbacksPreferred' value='2'/>
<enum name='kATSUSizeTag' value='262'/>
<enum name='kATSUStartAlignment' value='0'/>
<enum name='kATSUStronglyHorizontal' value='0'/>
<enum name='kATSUStronglyVertical' value='1'/>
<enum name='kATSUStyleContainedBy' value='3'/>
<enum name='kATSUStyleContains' value='1'/>
<enum name='kATSUStyleDoubleLineCount' value='2'/>
<enum name='kATSUStyleDropShadowBlurOptionTag' value='296'/>
<enum name='kATSUStyleDropShadowColorOptionTag' value='298'/>
<enum name='kATSUStyleDropShadowOffsetOptionTag' value='297'/>
<enum name='kATSUStyleDropShadowTag' value='295'/>
<enum name='kATSUStyleEquals' value='2'/>
<enum name='kATSUStyleRenderingOptionsTag' value='283'/>
<enum name='kATSUStyleSingleLineCount' value='1'/>
<enum name='kATSUStyleStrikeThroughColorOptionTag' value='294'/>
<enum name='kATSUStyleStrikeThroughCountOptionTag' value='293'/>
<enum name='kATSUStyleStrikeThroughTag' value='292'/>
<enum name='kATSUStyleTextLocatorTag' value='282'/>
<enum name='kATSUStyleUnderlineColorOptionTag' value='291'/>
<enum name='kATSUStyleUnderlineCountOptionTag' value='290'/>
<enum name='kATSUStyleUnequal' value='0'/>
<enum name='kATSUSuppressCrossKerningTag' value='278'/>
<enum name='kATSUToTextEnd' value='4294967295'/>
<enum name='kATSUTrackingTag' value='270'/>
<enum name='kATSUTruncFeatNoSquishing' value='8'/>
<enum name='kATSUTruncateEnd' value='2'/>
<enum name='kATSUTruncateMiddle' value='3'/>
<enum name='kATSUTruncateNone' value='0'/>
<enum name='kATSUTruncateSpecificationMask' value='7'/>
<enum name='kATSUTruncateStart' value='1'/>
<enum name='kATSUUnFlattenOptionNoOptionsMask' value='0'/>
<enum name='kATSUUseGrafPortPenLoc' value='4294967295'/>
<enum name='kATSUUseLineControlWidth' value='2147483647'/>
<enum name='kATSUVerticalCharacterTag' value='265'/>
<enum name='kAVPowerOff' value='0'/>
<enum name='kAVPowerOn' value='3'/>
<enum name='kAVPowerStandby' value='1'/>
<enum name='kAVPowerSuspend' value='2'/>
<enum name='kActivateConnection' value='0'/>
<enum name='kAddDisplayBit' value='4'/>
<enum name='kAllModesSafe' value='1'/>
<enum name='kAllModesValid' value='0'/>
<enum name='kAllocDirectDrawSurface' value='16384'/>
<enum name='kAllowDuplicatesBit' value='0'/>
<enum name='kAnalogSetupExpectedBit' value='1'/>
<enum name='kAnalogSetupExpectedMask' value='2'/>
<enum name='kAnalogSignalLevel_0700_0000' value='3'/>
<enum name='kAnalogSignalLevel_0700_0300' value='0'/>
<enum name='kAnalogSignalLevel_0714_0286' value='1'/>
<enum name='kAnalogSignalLevel_1000_0400' value='2'/>
<enum name='kAnyDeviceType' value='0'/>
<enum name='kAnyEngineType' value='0'/>
<enum name='kAnyPanelType' value='0'/>
<enum name='kAnyPortType' value='0'/>
<enum name='kBeginEndConfigureBit' value='0'/>
<enum name='kBuiltInConnection' value='11'/>
<enum name='kColor16Connect' value='17'/>
<enum name='kColor19Connect' value='18'/>
<enum name='kColorTwoPageConnect' value='16'/>
<enum name='kComponentListNotPreferredBit' value='0'/>
<enum name='kComponentListNotPreferredMask' value='1'/>
<enum name='kCompositeSyncMask' value='4'/>
<enum name='kConnectionInactive' value='9'/>
<enum name='kConvolved' value='0'/>
<enum name='kConvolvedMask' value='1'/>
<enum name='kCursorComponentAnimate' value='9'/>
<enum name='kCursorComponentDraw' value='6'/>
<enum name='kCursorComponentErase' value='7'/>
<enum name='kCursorComponentGetInfo' value='2'/>
<enum name='kCursorComponentInit' value='1'/>
<enum name='kCursorComponentLastReserved' value='80'/>
<enum name='kCursorComponentMove' value='8'/>
<enum name='kCursorComponentReconfigure' value='5'/>
<enum name='kCursorComponentSetData' value='4'/>
<enum name='kCursorComponentSetOutputMode' value='3'/>
<enum name='kCursorComponentType' value='1668641395'/>
<enum name='kCursorComponentsVersion' value='65537'/>
<enum name='kDDCBlockSize' value='128'/>
<enum name='kDDCBlockTypeEDID' value='0'/>
<enum name='kDDCConnect' value='21'/>
<enum name='kDDCForceReadBit' value='0'/>
<enum name='kDDCForceReadMask' value='1'/>
<enum name='kDMForceNumbersMask' value='2'/>
<enum name='kDMModeListExcludeCustomModesMask' value='16'/>
<enum name='kDMModeListExcludeDisplayModesMask' value='8'/>
<enum name='kDMModeListExcludeDriverModesMask' value='4'/>
<enum name='kDMModeListIncludeAllModesMask' value='1'/>
<enum name='kDMModeListIncludeOfflineModesMask' value='2'/>
<enum name='kDMModeListPreferSafeModesMask' value='64'/>
<enum name='kDMModeListPreferStretchedModesMask' value='32'/>
<enum name='kDMNotifyDependents' value='6'/>
<enum name='kDMNotifyDisplayDidWake' value='11'/>
<enum name='kDMNotifyDisplayWillSleep' value='10'/>
<enum name='kDMNotifyEvent' value='2'/>
<enum name='kDMNotifyExtendEvent' value='5'/>
<enum name='kDMNotifyInstalled' value='1'/>
<enum name='kDMNotifyPrep' value='4'/>
<enum name='kDMNotifyRemoved' value='3'/>
<enum name='kDMNotifyRequestConnectionProbe' value='0'/>
<enum name='kDMNotifyRequestDisplayProbe' value='9'/>
<enum name='kDMNotifyResumeConfigure' value='8'/>
<enum name='kDMNotifySuspendConfigure' value='7'/>
<enum name='kDMSModeFree' value='2'/>
<enum name='kDMSModeNotReady' value='1'/>
<enum name='kDMSModeReady' value='0'/>
<enum name='kDMSupressNameMask' value='4'/>
<enum name='kDMSupressNumbersMask' value='1'/>
<enum name='kDPMSSyncMask' value='7'/>
<enum name='kDPMSSyncOff' value='7'/>
<enum name='kDPMSSyncOn' value='0'/>
<enum name='kDPMSSyncStandby' value='1'/>
<enum name='kDPMSSyncSuspend' value='2'/>
<enum name='kDeactivateConnection' value='512'/>
<enum name='kDeclROMtables' value='1684366188'/>
<enum name='kDefaultFidelity' value='500'/>
<enum name='kDefaultManufacturerFidelity' value='1000'/>
<enum name='kDependentConnection' value='10'/>
<enum name='kDependentNotifyClassDisplayMgrOverride' value='1684891506'/>
<enum name='kDependentNotifyClassDriverOverride' value='1852076662'/>
<enum name='kDependentNotifyClassProfileChanged' value='1886547814'/>
<enum name='kDependentNotifyClassShowCursor' value='1936221042'/>
<enum name='kDepthDependent' value='0'/>
<enum name='kDepthMode1' value='128'/>
<enum name='kDepthMode2' value='129'/>
<enum name='kDepthMode3' value='130'/>
<enum name='kDepthMode4' value='131'/>
<enum name='kDepthMode5' value='132'/>
<enum name='kDepthMode6' value='133'/>
<enum name='kDepthNotAvailableBit' value='1'/>
<enum name='kDetailedTimingFormat' value='1634886241'/>
<enum name='kDigitalSignalBit' value='0'/>
<enum name='kDigitalSignalMask' value='1'/>
<enum name='kDisableCompositeSyncBit' value='2'/>
<enum name='kDisableHorizontalSyncBit' value='0'/>
<enum name='kDisableVerticalSyncBit' value='1'/>
<enum name='kDisabledDisplayBit' value='9'/>
<enum name='kDisplayGestaltBrightnessAffectsGammaMask' value='1'/>
<enum name='kDisplayGestaltCalibratorAttr' value='1667329129'/>
<enum name='kDisplayGestaltDisplayCommunicationAttr' value='1668246893'/>
<enum name='kDisplayGestaltForbidI2CMask' value='1'/>
<enum name='kDisplayGestaltUseI2CPowerMask' value='2'/>
<enum name='kDisplayGestaltViewAngleAffectsGammaMask' value='2'/>
<enum name='kDisplayModeEntryVersionOne' value='1'/>
<enum name='kDisplayModeEntryVersionZero' value='0'/>
<enum name='kDisplayModeIDBootProgrammable' value64='4294967291' value='-5'/>
<enum name='kDisplayModeIDCurrent' value='0'/>
<enum name='kDisplayModeIDFindFirstProgrammable' value64='4294967292' value='-4'/>
<enum name='kDisplayModeIDFindFirstResolution' value64='4294967294' value='-2'/>
<enum name='kDisplayModeIDInvalid' value64='4294967295' value='-1'/>
<enum name='kDisplayModeIDNoMoreResolutions' value64='4294967293' value='-3'/>
<enum name='kDisplayModeIDReservedBase' value64='2147483648' value='-2147483648'/>
<enum name='kDisplayModeListNotPreferredBit' value='0'/>
<enum name='kDisplayModeListNotPreferredMask' value='1'/>
<enum name='kDisplayTimingInfoReservedCountVersionZero' value='16'/>
<enum name='kDisplayTimingInfoVersionZero' value='1'/>
<enum name='kDisposeDisplayBit' value='7'/>
<enum name='kDummyDeviceID' value='255'/>
<enum name='kESCFivePortrait' value='30'/>
<enum name='kESCFourNTSC' value='10'/>
<enum name='kESCOnePortraitMono' value='20'/>
<enum name='kESCSeven16Inch' value='45'/>
<enum name='kESCSeven19Inch' value='58'/>
<enum name='kESCSevenDDC' value='62'/>
<enum name='kESCSevenNTSC' value='20'/>
<enum name='kESCSevenNoDisplay' value='63'/>
<enum name='kESCSevenPAL' value='0'/>
<enum name='kESCSevenPALAlternate' value='48'/>
<enum name='kESCSevenVGA' value='23'/>
<enum name='kESCSixMSB1' value='3'/>
<enum name='kESCSixMSB2' value='11'/>
<enum name='kESCSixMSB3' value='35'/>
<enum name='kESCSixStandard' value='43'/>
<enum name='kESCThree21InchMono' value='53'/>
<enum name='kESCThree21InchMonoRadius' value='52'/>
<enum name='kESCThree21InchRadius' value='49'/>
<enum name='kESCTwo12Inch' value='33'/>
<enum name='kESCZero21Inch' value='0'/>
<enum name='kEnableSyncOnBlue' value='3'/>
<enum name='kEnableSyncOnGreen' value='4'/>
<enum name='kEnableSyncOnRed' value='5'/>
<enum name='kEnabledDisplayBit' value='8'/>
<enum name='kExtendedNotificationProc' value='65536'/>
<enum name='kFMDefaultActivationContext' value='0'/>
<enum name='kFMDefaultIterationScope' value='0'/>
<enum name='kFMDefaultOptions' value='0'/>
<enum name='kFMGlobalActivationContext' value='1'/>
<enum name='kFMGlobalIterationScope' value='1'/>
<enum name='kFMLocalActivationContext' value='0'/>
<enum name='kFMLocalIterationScope' value='0'/>
<enum name='kFMUseGlobalScopeOption' value='1'/>
<enum name='kFNSCreatorDefault' value='0'/>
<enum name='kFNSCurSysInfoVersion' value='1'/>
<enum name='kFNSMatchAATLayout' value='256'/>
<enum name='kFNSMatchATSUMetrics' value='32'/>
<enum name='kFNSMatchAll' value='4294967295'/>
<enum name='kFNSMatchDefaults' value='0'/>
<enum name='kFNSMatchEncodings' value='8'/>
<enum name='kFNSMatchGlyphs' value='4'/>
<enum name='kFNSMatchKerning' value='64'/>
<enum name='kFNSMatchNames' value='1'/>
<enum name='kFNSMatchPrintEncoding' value='512'/>
<enum name='kFNSMatchQDMetrics' value='16'/>
<enum name='kFNSMatchTechnology' value='2'/>
<enum name='kFNSMatchWSLayout' value='128'/>
<enum name='kFNSMissingDataNoMatch' value='2147483648'/>
<enum name='kFNSProfileFileType' value='1718514544'/>
<enum name='kFNSVersionDontCare' value='0'/>
<enum name='kFastCheckForDDC' value='13'/>
<enum name='kFifthDepthMode' value='132'/>
<enum name='kFirstDepthMode' value='128'/>
<enum name='kFirstDisplayID' value='256'/>
<enum name='kFixedModeCRTConnect' value='3'/>
<enum name='kFontIDAthens' value='7'/>
<enum name='kFontIDCairo' value='11'/>
<enum name='kFontIDCourier' value='22'/>
<enum name='kFontIDGeneva' value='3'/>
<enum name='kFontIDHelvetica' value='21'/>
<enum name='kFontIDLondon' value='6'/>
<enum name='kFontIDLosAngeles' value='12'/>
<enum name='kFontIDMobile' value='24'/>
<enum name='kFontIDMonaco' value='4'/>
<enum name='kFontIDNewYork' value='2'/>
<enum name='kFontIDSanFrancisco' value='8'/>
<enum name='kFontIDSymbol' value='23'/>
<enum name='kFontIDTimes' value='20'/>
<enum name='kFontIDToronto' value='9'/>
<enum name='kFontIDVenice' value='5'/>
<enum name='kForceConfirmBit' value='0'/>
<enum name='kForceConfirmMask' value='1'/>
<enum name='kForceNumberBit' value='1'/>
<enum name='kForceNumberMask' value='2'/>
<enum name='kFourthDepthMode' value='131'/>
<enum name='kFullDependencyNotify' value='1'/>
<enum name='kFullNotify' value='0'/>
<enum name='kFullPageConnect' value='9'/>
<enum name='kGammaTableIDFindFirst' value64='4294967294' value='-2'/>
<enum name='kGammaTableIDNoMoreTables' value64='4294967293' value='-3'/>
<enum name='kGammaTableIDSpecific' value='0'/>
<enum name='kGenericCRT' value='19'/>
<enum name='kGenericLCD' value='20'/>
<enum name='kGetConnectionCount' value64='4294967295' value='-1'/>
<enum name='kGlyphCollectionAdobeCNS1' value='1'/>
<enum name='kGlyphCollectionAdobeGB1' value='2'/>
<enum name='kGlyphCollectionAdobeJapan1' value='3'/>
<enum name='kGlyphCollectionAdobeJapan2' value='4'/>
<enum name='kGlyphCollectionAdobeKorea1' value='5'/>
<enum name='kGlyphCollectionGID' value='0'/>
<enum name='kGlyphCollectionUnspecified' value='255'/>
<enum name='kHRConnect' value='13'/>
<enum name='kHardwareSleep' value='128'/>
<enum name='kHardwareWake' value='129'/>
<enum name='kHardwareWakeFromSuspend' value='130'/>
<enum name='kHardwareWakeToDoze' value='131'/>
<enum name='kHardwareWakeToDozeFromSuspend' value='132'/>
<enum name='kHasDDCConnection' value='8'/>
<enum name='kHasDirectConnection' value='3'/>
<enum name='kHilite' value='1'/>
<enum name='kHorizontalConstraint' value='2'/>
<enum name='kHorizontalSyncMask' value='1'/>
<enum name='kIncludeHardwareMirroredDisplaysMask' value='16'/>
<enum name='kIncludeOfflineDisplaysMask' value='4'/>
<enum name='kIncludeOfflineDummyDisplaysMask' value='8'/>
<enum name='kIncludeOnlineActiveDisplaysMask' value='1'/>
<enum name='kIncludeOnlineDisabledDisplaysMask' value='2'/>
<enum name='kInvalidDisplayID' value='0'/>
<enum name='kInvertHighlighting' value='0'/>
<enum name='kIsMonoDev' value='4'/>
<enum name='kLiveVideoPassThru' value='1'/>
<enum name='kLiveVideoPassThruMask' value='2'/>
<enum name='kMakeAndModelReservedCount' value='4'/>
<enum name='kMinimumFidelity' value='1'/>
<enum name='kMirrorDisplayBit' value='10'/>
<enum name='kModeBuiltIn' value='10'/>
<enum name='kModeDefault' value='2'/>
<enum name='kModeInterlaced' value='6'/>
<enum name='kModeNotPreset' value='9'/>
<enum name='kModeNotResize' value='4'/>
<enum name='kModeNotResizeBit' value='4'/>
<enum name='kModeRequiresPan' value='5'/>
<enum name='kModeSafe' value='1'/>
<enum name='kModeShowNever' value='7'/>
<enum name='kModeShowNow' value='3'/>
<enum name='kModeSimulscan' value='8'/>
<enum name='kModeStretched' value='11'/>
<enum name='kModeValid' value='0'/>
<enum name='kModelessConnect' value='8'/>
<enum name='kMonoTwoPageConnect' value='15'/>
<enum name='kMovedDisplayBit' value='1'/>
<enum name='kMultiModeCRT1Connect' value='4'/>
<enum name='kMultiModeCRT2Connect' value='5'/>
<enum name='kMultiModeCRT3Connect' value='6'/>
<enum name='kMultiModeCRT4Connect' value='7'/>
<enum name='kNTSCConnect' value='11'/>
<enum name='kNativeEndianPixMap' value='256'/>
<enum name='kNeverShowModeBit' value='5'/>
<enum name='kNewDisplayBit' value='6'/>
<enum name='kNoConnect' value='22'/>
<enum name='kNoConstraint' value='0'/>
<enum name='kNoFidelity' value='0'/>
<enum name='kNoSeparateSyncControlBit' value='6'/>
<enum name='kNoSwitchConfirmBit' value='0'/>
<enum name='kOverrideConnection' value='12'/>
<enum name='kPALConnect' value='12'/>
<enum name='kPLIncludeOfflineDevicesBit' value='0'/>
<enum name='kPanelConnect' value='2'/>
<enum name='kPanelFSTNConnect' value='14'/>
<enum name='kPanelTFTConnect' value='2'/>
<enum name='kPlatformDefaultGuiFontID' value='1'/>
<enum name='kPowerStateNeedsRefresh' value='0'/>
<enum name='kPowerStateNeedsRefreshMask' value='1'/>
<enum name='kPowerStateSleepAwareBit' value='1'/>
<enum name='kPowerStateSleepAwareMask' value='2'/>
<enum name='kPowerStateSleepCanPowerOffBit' value='3'/>
<enum name='kPowerStateSleepCanPowerOffMask' value='8'/>
<enum name='kPowerStateSleepForbiddenBit' value='2'/>
<enum name='kPowerStateSleepForbiddenMask' value='4'/>
<enum name='kPowerStateSleepNoDPMSBit' value='4'/>
<enum name='kPowerStateSleepNoDPMSMask' value='16'/>
<enum name='kPowerStateSleepWaketoDozeBit' value='5'/>
<enum name='kPowerStateSleepWaketoDozeMask' value='32'/>
<enum name='kPrinterFontStatus' value='0'/>
<enum name='kPrinterScalingStatus' value='1'/>
<enum name='kQDDontChangeFlags' value64='4294967295' value='-1'/>
<enum name='kQDGrafVerbErase' value='2'/>
<enum name='kQDGrafVerbFill' value='4'/>
<enum name='kQDGrafVerbFrame' value='0'/>
<enum name='kQDGrafVerbInvert' value='3'/>
<enum name='kQDGrafVerbPaint' value='1'/>
<enum name='kQDParseRegionFromBottom' value='2'/>
<enum name='kQDParseRegionFromBottomRight' value='10'/>
<enum name='kQDParseRegionFromLeft' value='4'/>
<enum name='kQDParseRegionFromRight' value='8'/>
<enum name='kQDParseRegionFromTop' value='1'/>
<enum name='kQDParseRegionFromTopLeft' value='5'/>
<enum name='kQDRegionToRectsMsgInit' value='1'/>
<enum name='kQDRegionToRectsMsgParse' value='2'/>
<enum name='kQDRegionToRectsMsgTerminate' value='3'/>
<enum name='kQDSupportedFlags' value='7'/>
<enum name='kQDUseCGTextMetrics' value='4'/>
<enum name='kQDUseCGTextRendering' value='2'/>
<enum name='kQDUseDefaultTextRendering' value='0'/>
<enum name='kQDUseTrueTypeScalerGlyphs' value='1'/>
<enum name='kQDXAliasCursor' value='3'/>
<enum name='kQDXArrowCursor' value='0'/>
<enum name='kQDXCopyCursor' value='4'/>
<enum name='kQDXIBeamCursor' value='1'/>
<enum name='kQDXIBeamXORCursor' value='2'/>
<enum name='kQDXMoveCursor' value='5'/>
<enum name='kQDXNumberOfSystemCursors' value='6'/>
<enum name='kRSCFive' value='5'/>
<enum name='kRSCFour' value='4'/>
<enum name='kRSCOne' value='1'/>
<enum name='kRSCSeven' value='7'/>
<enum name='kRSCSix' value='6'/>
<enum name='kRSCThree' value='3'/>
<enum name='kRSCTwo' value='2'/>
<enum name='kRSCZero' value='0'/>
<enum name='kRangeSupportsCompositeSyncBit' value='2'/>
<enum name='kRangeSupportsCompositeSyncMask' value='4'/>
<enum name='kRangeSupportsSeperateSyncsBit' value='0'/>
<enum name='kRangeSupportsSeperateSyncsMask' value='1'/>
<enum name='kRangeSupportsSignal_0700_0000_Bit' value='3'/>
<enum name='kRangeSupportsSignal_0700_0000_Mask' value='8'/>
<enum name='kRangeSupportsSignal_0700_0300_Bit' value='0'/>
<enum name='kRangeSupportsSignal_0700_0300_Mask' value='1'/>
<enum name='kRangeSupportsSignal_0714_0286_Bit' value='1'/>
<enum name='kRangeSupportsSignal_0714_0286_Mask' value='2'/>
<enum name='kRangeSupportsSignal_1000_0400_Bit' value='2'/>
<enum name='kRangeSupportsSignal_1000_0400_Mask' value='4'/>
<enum name='kRangeSupportsSyncOnGreenBit' value='1'/>
<enum name='kRangeSupportsSyncOnGreenMask' value='2'/>
<enum name='kRangeSupportsVSyncSerrationBit' value='3'/>
<enum name='kRangeSupportsVSyncSerrationMask' value='8'/>
<enum name='kRedrawHighlighting' value='1'/>
<enum name='kRemoveDisplayBit' value='5'/>
<enum name='kRenderCursorInHardware' value='1'/>
<enum name='kRenderCursorInSoftware' value='2'/>
<enum name='kReportsDDCConnection' value='7'/>
<enum name='kReportsHotPlugging' value='14'/>
<enum name='kReportsTagging' value='2'/>
<enum name='kResolutionHasMultipleDepthSizes' value='0'/>
<enum name='kSecondDepthMode' value='129'/>
<enum name='kSetClutAtSetEntries' value='0'/>
<enum name='kSetClutAtVBL' value='1'/>
<enum name='kSetDisplayModeBit' value='3'/>
<enum name='kSetMainDisplayBit' value='2'/>
<enum name='kShowModeBit' value='3'/>
<enum name='kSixthDepthMode' value='133'/>
<enum name='kSuppressNameBit' value='2'/>
<enum name='kSuppressNameMask' value='4'/>
<enum name='kSuppressNumberBit' value='0'/>
<enum name='kSuppressNumberMask' value='1'/>
<enum name='kSyncAnalogBipolarMask' value='8'/>
<enum name='kSyncAnalogBipolarSRGBSyncMask' value='2'/>
<enum name='kSyncAnalogBipolarSerrateMask' value='4'/>
<enum name='kSyncAnalogCompositeMask' value='0'/>
<enum name='kSyncAnalogCompositeRGBSyncMask' value='2'/>
<enum name='kSyncAnalogCompositeSerrateMask' value='4'/>
<enum name='kSyncDigitalCompositeMask' value='16'/>
<enum name='kSyncDigitalCompositeMatchHSyncMask' value='4'/>
<enum name='kSyncDigitalCompositeSerrateMask' value='4'/>
<enum name='kSyncDigitalHSyncPositiveMask' value='2'/>
<enum name='kSyncDigitalSeperateMask' value='24'/>
<enum name='kSyncDigitalVSyncPositiveMask' value='4'/>
<enum name='kSyncInterlaceMask' value='128'/>
<enum name='kSyncOnBlueMask' value='8'/>
<enum name='kSyncOnGreenMask' value='16'/>
<enum name='kSyncOnMask' value='56'/>
<enum name='kSyncOnRedMask' value='32'/>
<enum name='kSyncPositivePolarityBit' value='0'/>
<enum name='kSyncPositivePolarityMask' value='1'/>
<enum name='kTaggingInfoNonStandard' value='6'/>
<enum name='kThirdDepthMode' value='130'/>
<enum name='kTimingChangeRestrictedErr' value='-10930'/>
<enum name='kTriStateSyncBit' value='7'/>
<enum name='kTriStateSyncMask' value='128'/>
<enum name='kUYVY422PixelFormat' value='1431918169'/>
<enum name='kUnMirrorDisplayBit' value='11'/>
<enum name='kUncertainConnection' value='5'/>
<enum name='kUnknownConnect' value='1'/>
<enum name='kVGAConnect' value='10'/>
<enum name='kVerticalConstraint' value='1'/>
<enum name='kVerticalSyncMask' value='2'/>
<enum name='kVideoBufferSizeErr' value='-10935'/>
<enum name='kVideoBusTypeI2C' value='1'/>
<enum name='kVideoBusTypeInvalid' value='0'/>
<enum name='kVideoDDCciReplyType' value='2'/>
<enum name='kVideoDefaultBus' value='0'/>
<enum name='kVideoI2CBusyErr' value='-10933'/>
<enum name='kVideoI2CReplyPendingErr' value='-10931'/>
<enum name='kVideoI2CTransactionErr' value='-10932'/>
<enum name='kVideoI2CTransactionTypeErr' value='-10934'/>
<enum name='kVideoNoTransactionType' value='0'/>
<enum name='kVideoReplyMicroSecDelayMask' value='1'/>
<enum name='kVideoSimpleI2CType' value='1'/>
<enum name='kXFer1PixelAtATime' value='1'/>
<enum name='kXFerConvertPixelToRGB32' value='2'/>
<enum name='kYUV211PixelFormat' value='1496461617'/>
<enum name='kYUV411PixelFormat' value='1496592689'/>
<enum name='kYUVSPixelFormat' value='2037741171'/>
<enum name='kYUVUPixelFormat' value='2037741173'/>
<enum name='kYVU9PixelFormat' value='1498830137'/>
<enum name='kYVYU422PixelFormat' value='1498831189'/>
<enum name='keepLocal' value='8'/>
<enum name='keepLocalBit' value='3'/>
<enum name='keyDMConfigFlags' value='1684890470'/>
<enum name='keyDMConfigReserved' value='1684890482'/>
<enum name='keyDMConfigVersion' value='1684890486'/>
<enum name='keyDeviceDepthMode' value='1684300909'/>
<enum name='keyDeviceFlags' value='1684300902'/>
<enum name='keyDeviceRect' value='1684300914'/>
<enum name='keyDisplayComponent' value='1684890723'/>
<enum name='keyDisplayDevice' value='1684890724'/>
<enum name='keyDisplayFlags' value='1684890726'/>
<enum name='keyDisplayID' value='1684892004'/>
<enum name='keyDisplayMirroredId' value='1684893033'/>
<enum name='keyDisplayMode' value='1684890733'/>
<enum name='keyDisplayModeReserved' value='1684893042'/>
<enum name='keyDisplayNewConfig' value='1684956535'/>
<enum name='keyDisplayOldConfig' value='1685023844'/>
<enum name='keyDisplayReserved' value='1684890738'/>
<enum name='keyPixMapAlignment' value='1685090401'/>
<enum name='keyPixMapCmpCount' value='1685087075'/>
<enum name='keyPixMapCmpSize' value='1685087091'/>
<enum name='keyPixMapColorTableSeed' value='1685087092'/>
<enum name='keyPixMapHResolution' value='1685088370'/>
<enum name='keyPixMapPixelSize' value='1685090419'/>
<enum name='keyPixMapPixelType' value='1685090420'/>
<enum name='keyPixMapRect' value='1685087346'/>
<enum name='keyPixMapResReserved' value='1685090930'/>
<enum name='keyPixMapReserved' value='1685090418'/>
<enum name='keyPixMapVResolution' value='1685091954'/>
<enum name='keySummaryChanges' value='1685283688'/>
<enum name='keySummaryMenubar' value='1685286242'/>
<enum name='leftCaret' value='0'/>
<enum name='leftStyleRun' value='1'/>
<enum name='mBaseOffset' value='1'/>
<enum name='mBounds' value='3'/>
<enum name='mCmpCount' value='9'/>
<enum name='mCmpSize' value='10'/>
<enum name='mDevType' value='4'/>
<enum name='mHRes' value='5'/>
<enum name='mPageCnt' value='3'/>
<enum name='mPixelSize' value='8'/>
<enum name='mPixelType' value='7'/>
<enum name='mPlaneBytes' value='11'/>
<enum name='mRowBytes' value='2'/>
<enum name='mTable' value='2'/>
<enum name='mVRes' value='6'/>
<enum name='mVersion' value='4'/>
<enum name='mVertRefRate' value='14'/>
<enum name='mVidParams' value='1'/>
<enum name='magentaBit' value='7'/>
<enum name='magentaColor' value='137'/>
<enum name='mainScreen' value='11'/>
<enum name='mapPix' value='65536'/>
<enum name='mapPixBit' value='16'/>
<enum name='medianMethod' value='2'/>
<enum name='middleStyleRun' value='3'/>
<enum name='nativeEndianPixMapBit' value='8'/>
<enum name='newDepth' value='131072'/>
<enum name='newDepthBit' value='17'/>
<enum name='newRowBytes' value='524288'/>
<enum name='newRowBytesBit' value='19'/>
<enum name='noDriver' value='14'/>
<enum name='noNewDevice' value='2'/>
<enum name='noNewDeviceBit' value='1'/>
<enum name='noiseXFer' value='53'/>
<enum name='normalBit' value='0'/>
<enum name='notPatBic' value='15'/>
<enum name='notPatCopy' value='12'/>
<enum name='notPatOr' value='13'/>
<enum name='notPatXor' value='14'/>
<enum name='notSrcBic' value='7'/>
<enum name='notSrcCopy' value='4'/>
<enum name='notSrcOr' value='5'/>
<enum name='notSrcXor' value='6'/>
<enum name='notTruncated' value='0'/>
<enum name='oneBitMode' value='128'/>
<enum name='onlyStyleRun' value='0'/>
<enum name='outlineBit' value='3'/>
<enum name='pHiliteBit' value='0'/>
<enum name='patBic' value='11'/>
<enum name='patCopy' value='8'/>
<enum name='patOr' value='9'/>
<enum name='patXor' value='10'/>
<enum name='picLParen' value='0'/>
<enum name='picRParen' value='1'/>
<enum name='pixPurge' value='1'/>
<enum name='pixPurgeBit' value='0'/>
<enum name='pixelsLocked' value='128'/>
<enum name='pixelsLockedBit' value='7'/>
<enum name='pixelsPurgeable' value='64'/>
<enum name='pixelsPurgeableBit' value='6'/>
<enum name='planar' value='2'/>
<enum name='plusCursor' value='3'/>
<enum name='pmAllUpdates' value='57344'/>
<enum name='pmAnimated' value='4'/>
<enum name='pmBkUpdates' value='40960'/>
<enum name='pmBlack' value='32'/>
<enum name='pmCourteous' value='0'/>
<enum name='pmDithered' value='1'/>
<enum name='pmExplicit' value='8'/>
<enum name='pmFgUpdates' value='49152'/>
<enum name='pmInhibitC2' value='512'/>
<enum name='pmInhibitC4' value='2048'/>
<enum name='pmInhibitC8' value='8192'/>
<enum name='pmInhibitG2' value='256'/>
<enum name='pmInhibitG4' value='1024'/>
<enum name='pmInhibitG8' value='4096'/>
<enum name='pmNoUpdates' value='32768'/>
<enum name='pmTolerant' value='2'/>
<enum name='pmWhite' value='16'/>
<enum name='popularMethod' value='1'/>
<enum name='propFont' value='36864'/>
<enum name='prpFntH' value='36865'/>
<enum name='prpFntHW' value='36867'/>
<enum name='prpFntW' value='36866'/>
<enum name='ramInit' value='10'/>
<enum name='reallocPix' value='1048576'/>
<enum name='reallocPixBit' value='20'/>
<enum name='recordComments' value='4'/>
<enum name='recordFontInfo' value='8'/>
<enum name='redBit' value='4'/>
<enum name='redColor' value='205'/>
<enum name='returnColorTable' value='1'/>
<enum name='returnPalette' value='2'/>
<enum name='rightCaret' value='-1'/>
<enum name='rightStyleRun' value='2'/>
<enum name='roundedDevice' value='5'/>
<enum name='screenActive' value='15'/>
<enum name='screenDevice' value='13'/>
<enum name='secondVidMode' value='129'/>
<enum name='shadowBit' value='4'/>
<enum name='singleDevices' value='1'/>
<enum name='singleDevicesBit' value='0'/>
<enum name='sixteenBitMode' value='132'/>
<enum name='sixthVidMode' value='133'/>
<enum name='smBreakChar' value='1'/>
<enum name='smBreakOverflow' value='2'/>
<enum name='smBreakWord' value='0'/>
<enum name='smHilite' value='1'/>
<enum name='smLeftCaret' value='0'/>
<enum name='smLeftStyleRun' value='1'/>
<enum name='smMiddleStyleRun' value='3'/>
<enum name='smNotTruncated' value='0'/>
<enum name='smOnlyStyleRun' value='0'/>
<enum name='smRightCaret' value='-1'/>
<enum name='smRightStyleRun' value='2'/>
<enum name='smTruncEnd' value='0'/>
<enum name='smTruncErr' value='-1'/>
<enum name='smTruncMiddle' value='16384'/>
<enum name='smTruncated' value='1'/>
<enum name='spGammaDir' value='64'/>
<enum name='spVidNamesDir' value='65'/>
<enum name='srcBic' value='3'/>
<enum name='srcCopy' value='0'/>
<enum name='srcOr' value='1'/>
<enum name='srcXor' value='2'/>
<enum name='stretchPix' value='536870912'/>
<enum name='stretchPixBit' value='29'/>
<enum name='subOver' value='38'/>
<enum name='subPin' value='35'/>
<enum name='suppressBlackAndWhite' value='16'/>
<enum name='sysPatListID' value='0'/>
<enum name='systemFont' value='0'/>
<enum name='systemMethod' value='0'/>
<enum name='tfAntiAlias' value='1'/>
<enum name='tfUnicode' value='2'/>
<enum name='thirdVidMode' value='130'/>
<enum name='thirtyTwoBitMode' value='133'/>
<enum name='timingApple12' value='130'/>
<enum name='timingApple12x' value='135'/>
<enum name='timingApple13' value='140'/>
<enum name='timingApple13x' value='145'/>
<enum name='timingApple15' value='160'/>
<enum name='timingApple15x' value='165'/>
<enum name='timingApple16' value='170'/>
<enum name='timingApple19' value='210'/>
<enum name='timingApple1Ka' value='190'/>
<enum name='timingApple1Kb' value='200'/>
<enum name='timingApple21' value='220'/>
<enum name='timingAppleNTSC_FF' value='232'/>
<enum name='timingAppleNTSC_FFconv' value='236'/>
<enum name='timingAppleNTSC_ST' value='230'/>
<enum name='timingAppleNTSC_STconv' value='234'/>
<enum name='timingApplePAL_FF' value='240'/>
<enum name='timingApplePAL_FFconv' value='244'/>
<enum name='timingApplePAL_ST' value='238'/>
<enum name='timingApplePAL_STconv' value='242'/>
<enum name='timingAppleSVGA' value='180'/>
<enum name='timingAppleVGA' value='150'/>
<enum name='timingApple_0x0_0hz_Offline' value='550'/>
<enum name='timingApple_1024x768_75hz' value='210'/>
<enum name='timingApple_1152x870_75hz' value='220'/>
<enum name='timingApple_512x384_60hz' value='130'/>
<enum name='timingApple_560x384_60hz' value='135'/>
<enum name='timingApple_640x400_67hz' value='145'/>
<enum name='timingApple_640x480_67hz' value='140'/>
<enum name='timingApple_640x818_75hz' value='165'/>
<enum name='timingApple_640x870_75hz' value='160'/>
<enum name='timingApple_832x624_75hz' value='170'/>
<enum name='timingApple_FixedRateLCD' value='42'/>
<enum name='timingFilmRate_48hz' value='410'/>
<enum name='timingGTF_640x480_120hz' value='159'/>
<enum name='timingInvalid' value='0'/>
<enum name='timingInvalid_SM_T24' value='8'/>
<enum name='timingSMPTE240M_60hz' value='400'/>
<enum name='timingSony_1600x1024_76hz' value='500'/>
<enum name='timingSony_1900x1200_74hz' value='530'/>
<enum name='timingSony_1900x1200_76hz' value='540'/>
<enum name='timingSony_1920x1080_60hz' value='510'/>
<enum name='timingSony_1920x1080_72hz' value='520'/>
<enum name='timingSony_1920x1200_76hz' value='540'/>
<enum name='timingVESA_1024x768_60hz' value='190'/>
<enum name='timingVESA_1024x768_70hz' value='200'/>
<enum name='timingVESA_1024x768_75hz' value='204'/>
<enum name='timingVESA_1024x768_85hz' value='208'/>
<enum name='timingVESA_1280x1024_60hz' value='260'/>
<enum name='timingVESA_1280x1024_75hz' value='262'/>
<enum name='timingVESA_1280x1024_85hz' value='268'/>
<enum name='timingVESA_1280x960_60hz' value='252'/>
<enum name='timingVESA_1280x960_75hz' value='250'/>
<enum name='timingVESA_1280x960_85hz' value='254'/>
<enum name='timingVESA_1600x1200_60hz' value='280'/>
<enum name='timingVESA_1600x1200_65hz' value='282'/>
<enum name='timingVESA_1600x1200_70hz' value='284'/>
<enum name='timingVESA_1600x1200_75hz' value='286'/>
<enum name='timingVESA_1600x1200_80hz' value='288'/>
<enum name='timingVESA_1600x1200_85hz' value='289'/>
<enum name='timingVESA_1792x1344_60hz' value='296'/>
<enum name='timingVESA_1792x1344_75hz' value='298'/>
<enum name='timingVESA_1856x1392_60hz' value='300'/>
<enum name='timingVESA_1856x1392_75hz' value='302'/>
<enum name='timingVESA_1920x1440_60hz' value='304'/>
<enum name='timingVESA_1920x1440_75hz' value='306'/>
<enum name='timingVESA_640x480_60hz' value='150'/>
<enum name='timingVESA_640x480_72hz' value='152'/>
<enum name='timingVESA_640x480_75hz' value='154'/>
<enum name='timingVESA_640x480_85hz' value='158'/>
<enum name='timingVESA_800x600_56hz' value='180'/>
<enum name='timingVESA_800x600_60hz' value='182'/>
<enum name='timingVESA_800x600_72hz' value='184'/>
<enum name='timingVESA_800x600_75hz' value='186'/>
<enum name='timingVESA_800x600_85hz' value='188'/>
<enum name='transparent' value='36'/>
<enum name='truncEnd' value='0'/>
<enum name='truncErr' value='-1'/>
<enum name='truncMiddle' value='16384'/>
<enum name='truncated' value='1'/>
<enum name='twoBitMode' value='129'/>
<enum name='ulineBit' value='2'/>
<enum name='useDistantHdwrMem' value='16'/>
<enum name='useDistantHdwrMemBit' value='4'/>
<enum name='useLocalHdwrMem' value='32'/>
<enum name='useLocalHdwrMemBit' value='5'/>
<enum name='useTempMem' value='4'/>
<enum name='useTempMemBit' value='2'/>
<enum name='watchCursor' value='4'/>
<enum name='whiteColor' value='30'/>
<enum name='yellowBit' value='6'/>
<enum name='yellowColor' value='69'/>
<function name='ATSUClearLayoutCache'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iLineStart' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUCreateStyle'>
<arg name='oStyle' declared_type='ATSUStyle*' type='^^{OpaqueATSUStyle}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUCreateTextLayoutWithTextPtr'>
<arg name='iText' declared_type='ConstUniCharArrayPtr' type='^S'/>
<arg name='iTextOffset' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iTextLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='iTextTotalLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='iNumberOfRuns' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='iRunLengths' declared_type='UniCharCount*' type='^I' type64='^Q' const='true'/>
<arg name='iStyles' declared_type='ATSUStyle*' type='^^{OpaqueATSUStyle}'/>
<arg name='oTextLayout' declared_type='ATSUTextLayout*' type='^^{OpaqueATSUTextLayout}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDirectGetLayoutDataArrayPtrFromLineRef'>
<arg name='iLineRef' declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg name='iDataSelector' declared_type='ATSUDirectDataSelector' type='L' type64='I'/>
<arg name='iCreate' declared_type='Boolean' type='B'/>
<arg name='oLayoutDataArrayPtr' declared_type='void**' type='^^v'/>
<arg name='oLayoutDataCount' declared_type='ItemCount*' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDirectReleaseLayoutDataArrayPtr'>
<arg name='iLineRef' declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg name='iDataSelector' declared_type='ATSUDirectDataSelector' type='L' type64='I'/>
<arg name='iLayoutDataArrayPtr' declared_type='void**' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDisposeStyle'>
<arg name='iStyle' declared_type='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDisposeTextLayout'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDrawText'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iLineOffset' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iLineLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='iLocationX' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<arg name='iLocationY' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUGetGlyphBounds'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iTextBasePointX' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<arg name='iTextBasePointY' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<arg name='iBoundsCharStart' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iBoundsCharLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='iTypeOfBounds' declared_type='UInt16' type='S'/>
<arg name='iMaxNumberOfBounds' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='oGlyphBounds' declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg name='oActualNumberOfBounds' declared_type='ItemCount*' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUMatchFontsToText'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iTextStart' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iTextLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='oFontID' declared_type='ATSUFontID*' type='^I'/>
<arg name='oChangedOffset' declared_type='UniCharArrayOffset*' type='^I' type64='^Q'/>
<arg name='oChangedLength' declared_type='UniCharCount*' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUPositionToOffset'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iLocationX' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<arg name='iLocationY' declared_type='ATSUTextMeasurement' type='l' type64='i'/>
<arg name='ioPrimaryOffset' declared_type='UniCharArrayOffset*' type='^I' type64='^Q'/>
<arg name='oIsLeading' declared_type='Boolean*' type='^B'/>
<arg name='oSecondaryOffset' declared_type='UniCharArrayOffset*' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetAttributes'>
<arg name='iStyle' declared_type='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<arg name='iAttributeCount' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='iTag' declared_type='ATSUAttributeTag*' type='^I' const='true'/>
<arg name='iValueSize' declared_type='ByteCount*' type='^I' type64='^Q' const='true'/>
<arg name='iValue' declared_type='ATSUAttributeValuePtr*' type='^^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetFontFeatures'>
<arg name='iStyle' declared_type='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<arg name='iFeatureCount' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='iType' declared_type='ATSUFontFeatureType*' type='^S' const='true'/>
<arg name='iSelector' declared_type='ATSUFontFeatureSelector*' type='^S' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetLayoutControls'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iAttributeCount' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='iTag' declared_type='ATSUAttributeTag*' type='^I' const='true'/>
<arg name='iValueSize' declared_type='ByteCount*' type='^I' type64='^Q' const='true'/>
<arg name='iValue' declared_type='ATSUAttributeValuePtr*' type='^^v' const='true'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetRunStyle'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iStyle' declared_type='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<arg name='iRunStart' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iRunLength' declared_type='UniCharCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetTextLayoutRefCon'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iRefCon' declared_type='URefCon' type='L' type64='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetTransientFontMatching'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iTransientFontMatching' declared_type='Boolean' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUTextMoved'>
<arg name='iTextLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iNewLocation' declared_type='ConstUniCharArrayPtr' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='AddPt'>
<arg name='src' declared_type='Point' type='{Point=ss}'/>
<arg name='dst' declared_type='Point*' type='^{Point=ss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicClosePathUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicCurveToUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicCurveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicLineToUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicLineToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicMoveToUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicMoveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticClosePathUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticCurveUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticCurveUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticLineUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticLineUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticNewPathUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticNewPathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeCalcColorTableUPP'>
<arg name='userUPP' function_pointer='true' declared_type='CalcColorTableUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeColorComplementUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ColorComplementUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeColorSearchUPP'>
<arg name='userUPP' function_pointer='true' declared_type='ColorSearchUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMComponentListIteratorUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMComponentListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMComponentListEntryPtr' type='^{DMComponentListEntryRec=I^{ComponentRecord}{ComponentDescription=IIIII}III{Point=ss}IIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMDisplayListIteratorUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMDisplayListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DisplayListEntryPtr' type='^{DisplayListEntryRec=^^{GDevice}IIIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMDisplayModeListIteratorUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMDisplayModeListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMDisplayModeListEntryPtr' type='^{DMDisplayModeListEntryRec=I^{VDSwitchInfoRec}^{VDResolutionInfoRec}^{VDTimingInfoRec}^{DMDepthInfoBlockRec}I*^{DMDisplayTimingInfoRec}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMExtendedNotificationUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMExtendedNotificationUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMNotificationUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMNotificationUPP' type='^?'>
<arg declared_type='AppleEvent*' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDMProfileListIteratorUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DMProfileListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMProfileListEntryPtr' type='^{DMProfileListEntryRec=^{OpaqueCMProfileRef}***}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDeviceLoopDrawingUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DeviceLoopDrawingUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='GDHandle' type='^^{GDevice}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDisposeColorPickMethodUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DisposeColorPickMethodUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDragGrayRgnUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DragGrayRgnUPP' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeInitPickMethodUPP'>
<arg name='userUPP' function_pointer='true' declared_type='InitPickMethodUPP' type='^?'>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt16*' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDArcUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDArcUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDBitsUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDBitsUPP' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDCommentUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDCommentUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDGetPicUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDGetPicUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDJShieldCursorUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDJShieldCursorUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDLineUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDLineUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDOpcodeUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDOpcodeUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDOvalUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDOvalUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPolyUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDPolyUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPutPicUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDPutPicUPP' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRRectUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDRRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRectUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRgnUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDRgnUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDStdGlyphsUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDStdGlyphsUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDTextUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDTextUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDTxMeasUPP'>
<arg name='userUPP' function_pointer='true' declared_type='QDTxMeasUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRecordColorsUPP'>
<arg name='userUPP' function_pointer='true' declared_type='RecordColorsUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRedrawBackgroundUPP'>
<arg name='userUPP' function_pointer='true' declared_type='RedrawBackgroundUPP' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRegionToRectsUPP'>
<arg name='userUPP' function_pointer='true' declared_type='RegionToRectsUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeStyleRunDirectionUPP'>
<arg name='userUPP' function_pointer='true' declared_type='StyleRunDirectionUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='EmptyRect'>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='EqualPt'>
<arg name='pt1' declared_type='Point' type='{Point=ss}'/>
<arg name='pt2' declared_type='Point' type='{Point=ss}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeATSCubicClosePathUPP'>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicCurveToUPP'>
<arg name='pt1' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='pt2' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='pt3' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicCurveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicLineToUPP'>
<arg name='pt' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicLineToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicMoveToUPP'>
<arg name='pt' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSCubicMoveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticClosePathUPP'>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticCurveUPP'>
<arg name='pt1' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='controlPt' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='pt2' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticCurveUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticLineUPP'>
<arg name='pt1' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='pt2' declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticLineUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticNewPathUPP'>
<arg name='callBackDataPtr' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='ATSQuadraticNewPathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeCalcColorTableUPP'>
<arg name='dataRef' declared_type='UInt32' type='L' type64='I'/>
<arg name='colorsRequested' declared_type='SInt16' type='s'/>
<arg name='colorBankPtr' declared_type='void*' type='^v'/>
<arg name='resultPtr' declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<arg name='userUPP' function_pointer='true' declared_type='CalcColorTableUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeColorComplementUPP'>
<arg name='rgb' declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg name='userUPP' function_pointer='true' declared_type='ColorComplementUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeColorSearchUPP'>
<arg name='rgb' declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg name='position' declared_type='long*' type='^l' type64='^q'/>
<arg name='userUPP' function_pointer='true' declared_type='ColorSearchUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeDMComponentListIteratorUPP'>
<arg name='userData' declared_type='void*' type='^v'/>
<arg name='itemIndex' declared_type='DMListIndexType' type='L' type64='I'/>
<arg name='componentInfo' declared_type='DMComponentListEntryPtr' type='^{DMComponentListEntryRec=I^{ComponentRecord}{ComponentDescription=IIIII}III{Point=ss}IIIIII}'/>
<arg name='userUPP' function_pointer='true' declared_type='DMComponentListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMComponentListEntryPtr' type='^{DMComponentListEntryRec=I^{ComponentRecord}{ComponentDescription=IIIII}III{Point=ss}IIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDMDisplayListIteratorUPP'>
<arg name='userData' declared_type='void*' type='^v'/>
<arg name='itemIndex' declared_type='DMListIndexType' type='L' type64='I'/>
<arg name='displaymodeInfo' declared_type='DisplayListEntryPtr' type='^{DisplayListEntryRec=^^{GDevice}IIIIIII}'/>
<arg name='userUPP' function_pointer='true' declared_type='DMDisplayListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DisplayListEntryPtr' type='^{DisplayListEntryRec=^^{GDevice}IIIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDMDisplayModeListIteratorUPP'>
<arg name='userData' declared_type='void*' type='^v'/>
<arg name='itemIndex' declared_type='DMListIndexType' type='L' type64='I'/>
<arg name='displaymodeInfo' declared_type='DMDisplayModeListEntryPtr' type='^{DMDisplayModeListEntryRec=I^{VDSwitchInfoRec}^{VDResolutionInfoRec}^{VDTimingInfoRec}^{DMDepthInfoBlockRec}I*^{DMDisplayTimingInfoRec}}'/>
<arg name='userUPP' function_pointer='true' declared_type='DMDisplayModeListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMDisplayModeListEntryPtr' type='^{DMDisplayModeListEntryRec=I^{VDSwitchInfoRec}^{VDResolutionInfoRec}^{VDTimingInfoRec}^{DMDepthInfoBlockRec}I*^{DMDisplayTimingInfoRec}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDMExtendedNotificationUPP'>
<arg name='userData' declared_type='void*' type='^v'/>
<arg name='theMessage' declared_type='short' type='s'/>
<arg name='notifyData' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='DMExtendedNotificationUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDMNotificationUPP'>
<arg name='theEvent' declared_type='AppleEvent*' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<arg name='userUPP' function_pointer='true' declared_type='DMNotificationUPP' type='^?'>
<arg declared_type='AppleEvent*' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDMProfileListIteratorUPP'>
<arg name='userData' declared_type='void*' type='^v'/>
<arg name='itemIndex' declared_type='DMListIndexType' type='L' type64='I'/>
<arg name='profileInfo' declared_type='DMProfileListEntryPtr' type='^{DMProfileListEntryRec=^{OpaqueCMProfileRef}***}'/>
<arg name='userUPP' function_pointer='true' declared_type='DMProfileListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMProfileListEntryPtr' type='^{DMProfileListEntryRec=^{OpaqueCMProfileRef}***}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDeviceLoopDrawingUPP'>
<arg name='depth' declared_type='short' type='s'/>
<arg name='deviceFlags' declared_type='short' type='s'/>
<arg name='targetDevice' declared_type='GDHandle' type='^^{GDevice}'/>
<arg name='userData' declared_type='SRefCon' type='l' type64='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='DeviceLoopDrawingUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='GDHandle' type='^^{GDevice}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDisposeColorPickMethodUPP'>
<arg name='dataRef' declared_type='UInt32' type='L' type64='I'/>
<arg name='userUPP' function_pointer='true' declared_type='DisposeColorPickMethodUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeDragGrayRgnUPP'>
<arg name='userUPP' function_pointer='true' declared_type='DragGrayRgnUPP' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeInitPickMethodUPP'>
<arg name='colorsRequested' declared_type='SInt16' type='s'/>
<arg name='dataRef' declared_type='UInt32*' type='^I'/>
<arg name='colorBankType' declared_type='SInt16*' type='^s'/>
<arg name='userUPP' function_pointer='true' declared_type='InitPickMethodUPP' type='^?'>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt16*' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQDArcUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='startAngle' declared_type='short' type='s'/>
<arg name='arcAngle' declared_type='short' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDArcUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDBitsUPP'>
<arg name='srcBits' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg name='srcRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='mode' declared_type='short' type='s'/>
<arg name='maskRgn' declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDBitsUPP' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDCommentUPP'>
<arg name='kind' declared_type='short' type='s'/>
<arg name='dataSize' declared_type='short' type='s'/>
<arg name='dataHandle' declared_type='Handle' type='^*'/>
<arg name='userUPP' function_pointer='true' declared_type='QDCommentUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDGetPicUPP'>
<arg name='dataPtr' declared_type='void*' type='^v'/>
<arg name='byteCount' declared_type='short' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDGetPicUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDJShieldCursorUPP'>
<arg name='left' declared_type='short' type='s'/>
<arg name='top' declared_type='short' type='s'/>
<arg name='right' declared_type='short' type='s'/>
<arg name='bottom' declared_type='short' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDJShieldCursorUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDLineUPP'>
<arg name='newPt' declared_type='Point' type='{Point=ss}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDLineUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDOpcodeUPP'>
<arg name='fromRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='toRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='opcode' declared_type='UInt16' type='S'/>
<arg name='version' declared_type='SInt16' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDOpcodeUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDOvalUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='userUPP' function_pointer='true' declared_type='QDOvalUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDPolyUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='poly' declared_type='PolyHandle' type='^^{MacPolygon}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDPolyUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDPutPicUPP'>
<arg name='dataPtr' declared_type='void*' type='^v' const='true'/>
<arg name='byteCount' declared_type='short' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDPutPicUPP' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRRectUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='ovalWidth' declared_type='short' type='s'/>
<arg name='ovalHeight' declared_type='short' type='s'/>
<arg name='userUPP' function_pointer='true' declared_type='QDRRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRectUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='userUPP' function_pointer='true' declared_type='QDRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRgnUPP'>
<arg name='verb' declared_type='GrafVerb' type='c'/>
<arg name='rgn' declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDRgnUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDStdGlyphsUPP'>
<arg name='dataStream' declared_type='void*' type='^v'/>
<arg name='size' declared_type='ByteCount' type='L' type64='Q'/>
<arg name='userUPP' function_pointer='true' declared_type='QDStdGlyphsUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeQDTextUPP'>
<arg name='byteCount' declared_type='short' type='s'/>
<arg name='textBuf' declared_type='void*' type='^v' const='true'/>
<arg name='numer' declared_type='Point' type='{Point=ss}'/>
<arg name='denom' declared_type='Point' type='{Point=ss}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDTextUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDTxMeasUPP'>
<arg name='byteCount' declared_type='short' type='s'/>
<arg name='textAddr' declared_type='void*' type='^v' const='true'/>
<arg name='numer' declared_type='Point*' type='^{Point=ss}'/>
<arg name='denom' declared_type='Point*' type='^{Point=ss}'/>
<arg name='info' declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<arg name='userUPP' function_pointer='true' declared_type='QDTxMeasUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='short' type='s'/>
</function>
<function name='InvokeRecordColorsUPP'>
<arg name='dataRef' declared_type='UInt32' type='L' type64='I'/>
<arg name='colorsArray' declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg name='colorCount' declared_type='SInt32' type='l' type64='i'/>
<arg name='uniqueColors' declared_type='SInt32*' type='^i'/>
<arg name='userUPP' function_pointer='true' declared_type='RecordColorsUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeRedrawBackgroundUPP'>
<arg name='iLayout' declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg name='iTextOffset' declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg name='iTextLength' declared_type='UniCharCount' type='L' type64='Q'/>
<arg name='iUnhighlightArea' declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg name='iTrapezoidCount' declared_type='ItemCount' type='L' type64='Q'/>
<arg name='userUPP' function_pointer='true' declared_type='RedrawBackgroundUPP' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeRegionToRectsUPP'>
<arg name='message' declared_type='UInt16' type='S'/>
<arg name='rgn' declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg name='rect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='refCon' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='RegionToRectsUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeStyleRunDirectionUPP'>
<arg name='styleRunIndex' declared_type='short' type='s'/>
<arg name='dirParam' declared_type='void*' type='^v'/>
<arg name='userUPP' function_pointer='true' declared_type='StyleRunDirectionUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='MapPt'>
<arg name='pt' declared_type='Point*' type='^{Point=ss}'/>
<arg name='srcRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MapRect'>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg name='srcRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='NewATSCubicClosePathUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSCubicClosePathProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSCubicClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicCurveToUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSCubicCurveToProcPtr' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSCubicCurveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicLineToUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSCubicLineToProcPtr' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSCubicLineToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicMoveToUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSCubicMoveToProcPtr' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSCubicMoveToUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticClosePathUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSQuadraticClosePathProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSQuadraticClosePathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticCurveUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSQuadraticCurveProcPtr' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSQuadraticCurveUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticLineUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSQuadraticLineProcPtr' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSQuadraticLineUPP' type='^?'>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='Float32Point*' type='^{Float32Point=ff}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticNewPathUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ATSQuadraticNewPathProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='ATSQuadraticNewPathUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewCalcColorTableUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='CalcColorTableProcPtr' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval function_pointer='true' declared_type='CalcColorTableUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ColorSpec*' type='^{ColorSpec=s{RGBColor=SSS}}'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewColorComplementUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ColorComplementProcPtr' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval function_pointer='true' declared_type='ColorComplementUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewColorSearchUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='ColorSearchProcPtr' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval function_pointer='true' declared_type='ColorSearchUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewDMComponentListIteratorUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMComponentListIteratorProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMComponentListEntryPtr' type='^{DMComponentListEntryRec=I^{ComponentRecord}{ComponentDescription=IIIII}III{Point=ss}IIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMComponentListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMComponentListEntryPtr' type='^{DMComponentListEntryRec=I^{ComponentRecord}{ComponentDescription=IIIII}III{Point=ss}IIIIII}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDMDisplayListIteratorUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMDisplayListIteratorProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DisplayListEntryPtr' type='^{DisplayListEntryRec=^^{GDevice}IIIIIII}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMDisplayListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DisplayListEntryPtr' type='^{DisplayListEntryRec=^^{GDevice}IIIIIII}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDMDisplayModeListIteratorUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMDisplayModeListIteratorProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMDisplayModeListEntryPtr' type='^{DMDisplayModeListEntryRec=I^{VDSwitchInfoRec}^{VDResolutionInfoRec}^{VDTimingInfoRec}^{DMDepthInfoBlockRec}I*^{DMDisplayTimingInfoRec}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMDisplayModeListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMDisplayModeListEntryPtr' type='^{DMDisplayModeListEntryRec=I^{VDSwitchInfoRec}^{VDResolutionInfoRec}^{VDTimingInfoRec}^{DMDepthInfoBlockRec}I*^{DMDisplayTimingInfoRec}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDMExtendedNotificationUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMExtendedNotificationProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMExtendedNotificationUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDMNotificationUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMNotificationProcPtr' type='^?'>
<arg declared_type='AppleEvent*' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMNotificationUPP' type='^?'>
<arg declared_type='AppleEvent*' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDMProfileListIteratorUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DMProfileListIteratorProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMProfileListEntryPtr' type='^{DMProfileListEntryRec=^{OpaqueCMProfileRef}***}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DMProfileListIteratorUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='DMListIndexType' type='L' type64='I'/>
<arg declared_type='DMProfileListEntryPtr' type='^{DMProfileListEntryRec=^{OpaqueCMProfileRef}***}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDeviceLoopDrawingUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DeviceLoopDrawingProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='GDHandle' type='^^{GDevice}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DeviceLoopDrawingUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='GDHandle' type='^^{GDevice}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDisposeColorPickMethodUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DisposeColorPickMethodProcPtr' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval function_pointer='true' declared_type='DisposeColorPickMethodUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewDragGrayRgnUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='DragGrayRgnProcPtr' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='DragGrayRgnUPP' type='^?'>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewInitPickMethodUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='InitPickMethodProcPtr' type='^?'>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt16*' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval function_pointer='true' declared_type='InitPickMethodUPP' type='^?'>
<arg declared_type='SInt16' type='s'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt16*' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQDArcUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDArcProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDArcUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDBitsUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDBitsProcPtr' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDBitsUPP' type='^?'>
<arg declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDCommentUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDCommentProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDCommentUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDGetPicUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDGetPicProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDGetPicUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDJShieldCursorUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDJShieldCursorProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDJShieldCursorUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDLineUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDLineProcPtr' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDLineUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDOpcodeUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDOpcodeProcPtr' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDOpcodeUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDOvalUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDOvalProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDOvalUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDPolyUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDPolyProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDPolyUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDPutPicUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDPutPicProcPtr' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDPutPicUPP' type='^?'>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRRectUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDRRectProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDRRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRectUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDRectProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDRectUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRgnUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDRgnProcPtr' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDRgnUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDStdGlyphsUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDStdGlyphsProcPtr' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='QDStdGlyphsUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewQDTextUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDTextProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval function_pointer='true' declared_type='QDTextUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDTxMeasUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='QDTxMeasProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval function_pointer='true' declared_type='QDTxMeasUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v' const='true'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</retval>
</function>
<function name='NewRecordColorsUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='RecordColorsProcPtr' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval function_pointer='true' declared_type='RecordColorsUPP' type='^?'>
<arg declared_type='UInt32' type='L' type64='I'/>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewRedrawBackgroundUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='RedrawBackgroundProcPtr' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval function_pointer='true' declared_type='RedrawBackgroundUPP' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewRegionToRectsUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='RegionToRectsProcPtr' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval function_pointer='true' declared_type='RegionToRectsUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewStyleRunDirectionUPP'>
<arg name='userRoutine' function_pointer='true' declared_type='StyleRunDirectionProcPtr' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval function_pointer='true' declared_type='StyleRunDirectionUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='Pt2Rect'>
<arg name='pt1' declared_type='Point' type='{Point=ss}'/>
<arg name='pt2' declared_type='Point' type='{Point=ss}'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='PtToAngle'>
<arg name='r' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='pt' declared_type='Point' type='{Point=ss}'/>
<arg name='angle' declared_type='short*' type='^s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QDRegionToRects'>
<arg name='rgn' declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg name='dir' declared_type='QDRegionParseDirection' type='l' type64='i'/>
<arg name='proc' function_pointer='true' declared_type='RegionToRectsUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg name='userData' declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ScalePt'>
<arg name='pt' declared_type='Point*' type='^{Point=ss}'/>
<arg name='srcRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SectRect'>
<arg name='src1' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='src2' declared_type='Rect*' type='^{Rect=ssss}' const='true'/>
<arg name='dstRect' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='SetPt'>
<arg name='pt' declared_type='Point*' type='^{Point=ss}'/>
<arg name='h' declared_type='short' type='s'/>
<arg name='v' declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SubPt'>
<arg name='src' declared_type='Point' type='{Point=ss}'/>
<arg name='dst' declared_type='Point*' type='^{Point=ss}'/>
<retval declared_type='void' type='v'/>
</function>
<function_alias name='MacEqualRect' original='EqualRect'/>
<function_alias name='MacInsetRect' original='InsetRect'/>
<function_alias name='MacOffsetRect' original='OffsetRect'/>
<function_alias name='MacPtInRect' original='PtInRect'/>
<function_alias name='MacSetRect' original='SetRect'/>
<function_alias name='MacUnionRect' original='UnionRect'/>
</signatures>
