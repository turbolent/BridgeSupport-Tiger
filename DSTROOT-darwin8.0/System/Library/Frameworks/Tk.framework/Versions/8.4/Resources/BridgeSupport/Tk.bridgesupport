<?xml version='1.0'?>
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/Carbon.framework'/>
  <depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
  <struct name='TkIntXlibStubs' type='{TkIntXlibStubs=&quot;magic&quot;i&quot;hooks&quot;^{TkIntXlibStubHooks}}'>
    <field name='magic' declared_type='int' type='i'/>
    <field name='hooks' declared_type='struct TkIntXlibStubHooks*' type='^{TkIntXlibStubHooks=}'/>
  </struct>
  <struct name='TkPlatStubs' type='{TkPlatStubs=&quot;magic&quot;i&quot;hooks&quot;^{TkPlatStubHooks}}'>
    <field name='magic' declared_type='int' type='i'/>
    <field name='hooks' declared_type='struct TkPlatStubHooks*' type='^{TkPlatStubHooks=}'/>
  </struct>
  <struct name='TkStubHooks' type='{TkStubHooks=&quot;tkPlatStubs&quot;^{TkPlatStubs}&quot;tkIntStubs&quot;^{TkIntStubs}&quot;tkIntPlatStubs&quot;^{TkIntPlatStubs}&quot;tkIntXlibStubs&quot;^{TkIntXlibStubs}}'>
    <field name='tkPlatStubs' declared_type='struct TkPlatStubs*' type='^{TkPlatStubs=i^{TkPlatStubHooks}}'/>
    <field name='tkIntStubs' declared_type='struct TkIntStubs*' type='^{TkIntStubs=}'/>
    <field name='tkIntPlatStubs' declared_type='struct TkIntPlatStubs*' type='^{TkIntPlatStubs=}'/>
    <field name='tkIntXlibStubs' declared_type='struct TkIntXlibStubs*' type='^{TkIntXlibStubs=i^{TkIntXlibStubHooks}}'/>
  </struct>
  <struct name='TkStubs' type='{TkStubs=&quot;magic&quot;i&quot;hooks&quot;^{TkStubHooks}&quot;tk_MainLoop&quot;^?&quot;tk_3DBorderColor&quot;^?&quot;tk_3DBorderGC&quot;^?&quot;tk_3DHorizontalBevel&quot;^?&quot;tk_3DVerticalBevel&quot;^?&quot;tk_AddOption&quot;^?&quot;tk_BindEvent&quot;^?&quot;tk_CanvasDrawableCoords&quot;^?&quot;tk_CanvasEventuallyRedraw&quot;^?&quot;tk_CanvasGetCoord&quot;^?&quot;tk_CanvasGetTextInfo&quot;^?&quot;tk_CanvasPsBitmap&quot;^?&quot;tk_CanvasPsColor&quot;^?&quot;tk_CanvasPsFont&quot;^?&quot;tk_CanvasPsPath&quot;^?&quot;tk_CanvasPsStipple&quot;^?&quot;tk_CanvasPsY&quot;^?&quot;tk_CanvasSetStippleOrigin&quot;^?&quot;tk_CanvasTagsParseProc&quot;^?&quot;tk_CanvasTagsPrintProc&quot;^?&quot;tk_CanvasTkwin&quot;^?&quot;tk_CanvasWindowCoords&quot;^?&quot;tk_ChangeWindowAttributes&quot;^?&quot;tk_CharBbox&quot;^?&quot;tk_ClearSelection&quot;^?&quot;tk_ClipboardAppend&quot;^?&quot;tk_ClipboardClear&quot;^?&quot;tk_ConfigureInfo&quot;^?&quot;tk_ConfigureValue&quot;^?&quot;tk_ConfigureWidget&quot;^?&quot;tk_ConfigureWindow&quot;^?&quot;tk_ComputeTextLayout&quot;^?&quot;tk_CoordsToWindow&quot;^?&quot;tk_CreateBinding&quot;^?&quot;tk_CreateBindingTable&quot;^?&quot;tk_CreateErrorHandler&quot;^?&quot;tk_CreateEventHandler&quot;^?&quot;tk_CreateGenericHandler&quot;^?&quot;tk_CreateImageType&quot;^?&quot;tk_CreateItemType&quot;^?&quot;tk_CreatePhotoImageFormat&quot;^?&quot;tk_CreateSelHandler&quot;^?&quot;tk_CreateWindow&quot;^?&quot;tk_CreateWindowFromPath&quot;^?&quot;tk_DefineBitmap&quot;^?&quot;tk_DefineCursor&quot;^?&quot;tk_DeleteAllBindings&quot;^?&quot;tk_DeleteBinding&quot;^?&quot;tk_DeleteBindingTable&quot;^?&quot;tk_DeleteErrorHandler&quot;^?&quot;tk_DeleteEventHandler&quot;^?&quot;tk_DeleteGenericHandler&quot;^?&quot;tk_DeleteImage&quot;^?&quot;tk_DeleteSelHandler&quot;^?&quot;tk_DestroyWindow&quot;^?&quot;tk_DisplayName&quot;^?&quot;tk_DistanceToTextLayout&quot;^?&quot;tk_Draw3DPolygon&quot;^?&quot;tk_Draw3DRectangle&quot;^?&quot;tk_DrawChars&quot;^?&quot;tk_DrawFocusHighlight&quot;^?&quot;tk_DrawTextLayout&quot;^?&quot;tk_Fill3DPolygon&quot;^?&quot;tk_Fill3DRectangle&quot;^?&quot;tk_FindPhoto&quot;^?&quot;tk_FontId&quot;^?&quot;tk_Free3DBorder&quot;^?&quot;tk_FreeBitmap&quot;^?&quot;tk_FreeColor&quot;^?&quot;tk_FreeColormap&quot;^?&quot;tk_FreeCursor&quot;^?&quot;tk_FreeFont&quot;^?&quot;tk_FreeGC&quot;^?&quot;tk_FreeImage&quot;^?&quot;tk_FreeOptions&quot;^?&quot;tk_FreePixmap&quot;^?&quot;tk_FreeTextLayout&quot;^?&quot;tk_FreeXId&quot;^?&quot;tk_GCForColor&quot;^?&quot;tk_GeometryRequest&quot;^?&quot;tk_Get3DBorder&quot;^?&quot;tk_GetAllBindings&quot;^?&quot;tk_GetAnchor&quot;^?&quot;tk_GetAtomName&quot;^?&quot;tk_GetBinding&quot;^?&quot;tk_GetBitmap&quot;^?&quot;tk_GetBitmapFromData&quot;^?&quot;tk_GetCapStyle&quot;^?&quot;tk_GetColor&quot;^?&quot;tk_GetColorByValue&quot;^?&quot;tk_GetColormap&quot;^?&quot;tk_GetCursor&quot;^?&quot;tk_GetCursorFromData&quot;^?&quot;tk_GetFont&quot;^?&quot;tk_GetFontFromObj&quot;^?&quot;tk_GetFontMetrics&quot;^?&quot;tk_GetGC&quot;^?&quot;tk_GetImage&quot;^?&quot;tk_GetImageMasterData&quot;^?&quot;tk_GetItemTypes&quot;^?&quot;tk_GetJoinStyle&quot;^?&quot;tk_GetJustify&quot;^?&quot;tk_GetNumMainWindows&quot;^?&quot;tk_GetOption&quot;^?&quot;tk_GetPixels&quot;^?&quot;tk_GetPixmap&quot;^?&quot;tk_GetRelief&quot;^?&quot;tk_GetRootCoords&quot;^?&quot;tk_GetScrollInfo&quot;^?&quot;tk_GetScreenMM&quot;^?&quot;tk_GetSelection&quot;^?&quot;tk_GetUid&quot;^?&quot;tk_GetVisual&quot;^?&quot;tk_GetVRootGeometry&quot;^?&quot;tk_Grab&quot;^?&quot;tk_HandleEvent&quot;^?&quot;tk_IdToWindow&quot;^?&quot;tk_ImageChanged&quot;^?&quot;tk_Init&quot;^?&quot;tk_InternAtom&quot;^?&quot;tk_IntersectTextLayout&quot;^?&quot;tk_MaintainGeometry&quot;^?&quot;tk_MainWindow&quot;^?&quot;tk_MakeWindowExist&quot;^?&quot;tk_ManageGeometry&quot;^?&quot;tk_MapWindow&quot;^?&quot;tk_MeasureChars&quot;^?&quot;tk_MoveResizeWindow&quot;^?&quot;tk_MoveWindow&quot;^?&quot;tk_MoveToplevelWindow&quot;^?&quot;tk_NameOf3DBorder&quot;^?&quot;tk_NameOfAnchor&quot;^?&quot;tk_NameOfBitmap&quot;^?&quot;tk_NameOfCapStyle&quot;^?&quot;tk_NameOfColor&quot;^?&quot;tk_NameOfCursor&quot;^?&quot;tk_NameOfFont&quot;^?&quot;tk_NameOfImage&quot;^?&quot;tk_NameOfJoinStyle&quot;^?&quot;tk_NameOfJustify&quot;^?&quot;tk_NameOfRelief&quot;^?&quot;tk_NameToWindow&quot;^?&quot;tk_OwnSelection&quot;^?&quot;tk_ParseArgv&quot;^?&quot;tk_PhotoPutBlock_NoComposite&quot;^?&quot;tk_PhotoPutZoomedBlock_NoComposite&quot;^?&quot;tk_PhotoGetImage&quot;^?&quot;tk_PhotoBlank&quot;^?&quot;tk_PhotoExpand&quot;^?&quot;tk_PhotoGetSize&quot;^?&quot;tk_PhotoSetSize&quot;^?&quot;tk_PointToChar&quot;^?&quot;tk_PostscriptFontName&quot;^?&quot;tk_PreserveColormap&quot;^?&quot;tk_QueueWindowEvent&quot;^?&quot;tk_RedrawImage&quot;^?&quot;tk_ResizeWindow&quot;^?&quot;tk_RestackWindow&quot;^?&quot;tk_RestrictEvents&quot;^?&quot;tk_SafeInit&quot;^?&quot;tk_SetAppName&quot;^?&quot;tk_SetBackgroundFromBorder&quot;^?&quot;tk_SetClass&quot;^?&quot;tk_SetGrid&quot;^?&quot;tk_SetInternalBorder&quot;^?&quot;tk_SetWindowBackground&quot;^?&quot;tk_SetWindowBackgroundPixmap&quot;^?&quot;tk_SetWindowBorder&quot;^?&quot;tk_SetWindowBorderWidth&quot;^?&quot;tk_SetWindowBorderPixmap&quot;^?&quot;tk_SetWindowColormap&quot;^?&quot;tk_SetWindowVisual&quot;^?&quot;tk_SizeOfBitmap&quot;^?&quot;tk_SizeOfImage&quot;^?&quot;tk_StrictMotif&quot;^?&quot;tk_TextLayoutToPostscript&quot;^?&quot;tk_TextWidth&quot;^?&quot;tk_UndefineCursor&quot;^?&quot;tk_UnderlineChars&quot;^?&quot;tk_UnderlineTextLayout&quot;^?&quot;tk_Ungrab&quot;^?&quot;tk_UnmaintainGeometry&quot;^?&quot;tk_UnmapWindow&quot;^?&quot;tk_UnsetGrid&quot;^?&quot;tk_UpdatePointer&quot;^?&quot;tk_AllocBitmapFromObj&quot;^?&quot;tk_Alloc3DBorderFromObj&quot;^?&quot;tk_AllocColorFromObj&quot;^?&quot;tk_AllocCursorFromObj&quot;^?&quot;tk_AllocFontFromObj&quot;^?&quot;tk_CreateOptionTable&quot;^?&quot;tk_DeleteOptionTable&quot;^?&quot;tk_Free3DBorderFromObj&quot;^?&quot;tk_FreeBitmapFromObj&quot;^?&quot;tk_FreeColorFromObj&quot;^?&quot;tk_FreeConfigOptions&quot;^?&quot;tk_FreeSavedOptions&quot;^?&quot;tk_FreeCursorFromObj&quot;^?&quot;tk_FreeFontFromObj&quot;^?&quot;tk_Get3DBorderFromObj&quot;^?&quot;tk_GetAnchorFromObj&quot;^?&quot;tk_GetBitmapFromObj&quot;^?&quot;tk_GetColorFromObj&quot;^?&quot;tk_GetCursorFromObj&quot;^?&quot;tk_GetOptionInfo&quot;^?&quot;tk_GetOptionValue&quot;^?&quot;tk_GetJustifyFromObj&quot;^?&quot;tk_GetMMFromObj&quot;^?&quot;tk_GetPixelsFromObj&quot;^?&quot;tk_GetReliefFromObj&quot;^?&quot;tk_GetScrollInfoObj&quot;^?&quot;tk_InitOptions&quot;^?&quot;tk_MainEx&quot;^?&quot;tk_RestoreSavedOptions&quot;^?&quot;tk_SetOptions&quot;^?&quot;tk_InitConsoleChannels&quot;^?&quot;tk_CreateConsoleWindow&quot;^?&quot;tk_CreateSmoothMethod&quot;^?&quot;reserved218&quot;^v&quot;reserved219&quot;^v&quot;tk_GetDash&quot;^?&quot;tk_CreateOutline&quot;^?&quot;tk_DeleteOutline&quot;^?&quot;tk_ConfigOutlineGC&quot;^?&quot;tk_ChangeOutlineGC&quot;^?&quot;tk_ResetOutlineGC&quot;^?&quot;tk_CanvasPsOutline&quot;^?&quot;tk_SetTSOrigin&quot;^?&quot;tk_CanvasGetCoordFromObj&quot;^?&quot;tk_CanvasSetOffset&quot;^?&quot;tk_DitherPhoto&quot;^?&quot;tk_PostscriptBitmap&quot;^?&quot;tk_PostscriptColor&quot;^?&quot;tk_PostscriptFont&quot;^?&quot;tk_PostscriptImage&quot;^?&quot;tk_PostscriptPath&quot;^?&quot;tk_PostscriptStipple&quot;^?&quot;tk_PostscriptY&quot;^?&quot;tk_PostscriptPhoto&quot;^?&quot;tk_CreateClientMessageHandler&quot;^?&quot;tk_DeleteClientMessageHandler&quot;^?&quot;tk_CreateAnonymousWindow&quot;^?&quot;tk_SetClassProcs&quot;^?&quot;tk_SetInternalBorderEx&quot;^?&quot;tk_SetMinimumRequestSize&quot;^?&quot;tk_SetCaretPos&quot;^?&quot;tk_PhotoPutBlock&quot;^?&quot;tk_PhotoPutZoomedBlock&quot;^?&quot;tk_CollapseMotionEvents&quot;^?&quot;tk_RegisterStyleEngine&quot;^?&quot;tk_GetStyleEngine&quot;^?&quot;tk_RegisterStyledElement&quot;^?&quot;tk_GetElementId&quot;^?&quot;tk_CreateStyle&quot;^?&quot;tk_GetStyle&quot;^?&quot;tk_FreeStyle&quot;^?&quot;tk_NameOfStyle&quot;^?&quot;tk_AllocStyleFromObj&quot;^?&quot;tk_GetStyleFromObj&quot;^?&quot;tk_FreeStyleFromObj&quot;^?&quot;tk_GetStyledElement&quot;^?&quot;tk_GetElementSize&quot;^?&quot;tk_GetElementBox&quot;^?&quot;tk_GetElementBorderWidth&quot;^?&quot;tk_DrawElement&quot;^?}'>
    <field name='magic' declared_type='int' type='i'/>
    <field name='hooks' declared_type='struct TkStubHooks*' type='^{TkStubHooks=^{TkPlatStubs}^{TkIntStubs}^{TkIntPlatStubs}^{TkIntXlibStubs}}'/>
    <field name='tk_MainLoop' function_pointer='true' declared_type='void (*)(void)' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_3DBorderColor' function_pointer='true' declared_type='XColor *(*)(Tk_3DBorder)' type='^?'>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    </field>
    <field name='tk_3DBorderGC' function_pointer='true' declared_type='GC (*)(Tk_Window, Tk_3DBorder, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='GC' type='^{_XGC=}'/>
    </field>
    <field name='tk_3DHorizontalBevel' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, int, int, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_3DVerticalBevel' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_AddOption' function_pointer='true' declared_type='void (*)(Tk_Window, char *, char *, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_BindEvent' function_pointer='true' declared_type='void (*)(Tk_BindingTable, XEvent *, Tk_Window, int, ClientData *)' type='^?'>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='ClientData*' type='^^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasDrawableCoords' function_pointer='true' declared_type='void (*)(Tk_Canvas, double, double, short *, short *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='short*' type='^s'/>
      <arg declared_type='short*' type='^s'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasEventuallyRedraw' function_pointer='true' declared_type='void (*)(Tk_Canvas, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasGetCoord' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, char *, double *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasGetTextInfo' function_pointer='true' declared_type='Tk_CanvasTextInfo *(*)(Tk_Canvas)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <retval declared_type='Tk_CanvasTextInfo*' type='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{?}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}'/>
    </field>
    <field name='tk_CanvasPsBitmap' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Pixmap, int, int, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasPsColor' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, XColor *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasPsFont' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Tk_Font)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasPsPath' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasPsStipple' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Pixmap)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasPsY' function_pointer='true' declared_type='double (*)(Tk_Canvas, double)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double' type='d'/>
      <retval declared_type='double' type='d'/>
    </field>
    <field name='tk_CanvasSetStippleOrigin' function_pointer='true' declared_type='void (*)(Tk_Canvas, GC)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasTagsParseProc' function_pointer='true' declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasTagsPrintProc' function_pointer='true' declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_FreeProc**' type='^^?'/>
      <retval declared_type='char*' type='*'/>
    </field>
    <field name='tk_CanvasTkwin' function_pointer='true' declared_type='Tk_Window (*)(Tk_Canvas)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_CanvasWindowCoords' function_pointer='true' declared_type='void (*)(Tk_Canvas, double, double, short *, short *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='short*' type='^s'/>
      <arg declared_type='short*' type='^s'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ChangeWindowAttributes' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned long, XSetWindowAttributes *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='XSetWindowAttributes*' type='^{_XSetWindowAttributes=ILILiiiLLilliI{Cursor=[16s][16s]{Point=ss}}}' type64='^{_XSetWindowAttributes=QQQQiiiQQiqqiQ{Cursor=[16s][16s]{Point=ss}}}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CharBbox' function_pointer='true' declared_type='int (*)(Tk_TextLayout, int, int *, int *, int *, int *)' type='^?'>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ClearSelection' function_pointer='true' declared_type='void (*)(Tk_Window, Atom)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ClipboardAppend' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Atom, Atom, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='char*' type='*'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ClipboardClear' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ConfigureInfo' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, char *, char *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ConfigureValue' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, char *, char *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ConfigureWidget' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, int, char **, char *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char**' type='^*' const='true'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ConfigureWindow' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned int, XWindowChanges *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned int' type='I'/>
      <arg declared_type='XWindowChanges*' type='^{_XWindowChanges=iiiiiIi}' type64='^{_XWindowChanges=iiiiiQi}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ComputeTextLayout' function_pointer='true' declared_type='Tk_TextLayout (*)(Tk_Font, char *, int, int, Tk_Justify, int, int *, int *)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_Justify' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    </field>
    <field name='tk_CoordsToWindow' function_pointer='true' declared_type='Tk_Window (*)(int, int, Tk_Window)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_CreateBinding' function_pointer='true' declared_type='unsigned long (*)(Tcl_Interp *, Tk_BindingTable, ClientData, char *, char *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='unsigned long' type='L' type64='Q'/>
    </field>
    <field name='tk_CreateBindingTable' function_pointer='true' declared_type='Tk_BindingTable (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    </field>
    <field name='tk_CreateErrorHandler' function_pointer='true' declared_type='Tk_ErrorHandler (*)(Display *, int, int, int, Tk_ErrorProc *, ClientData)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_ErrorProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
    </field>
    <field name='tk_CreateEventHandler' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned long, Tk_EventProc *, ClientData)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='Tk_EventProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateGenericHandler' function_pointer='true' declared_type='void (*)(Tk_GenericProc *, ClientData)' type='^?'>
      <arg declared_type='Tk_GenericProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateImageType' function_pointer='true' declared_type='void (*)(Tk_ImageType *)' type='^?'>
      <arg declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateItemType' function_pointer='true' declared_type='void (*)(Tk_ItemType *)' type='^?'>
      <arg declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreatePhotoImageFormat' function_pointer='true' declared_type='void (*)(Tk_PhotoImageFormat *)' type='^?'>
      <arg declared_type='Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateSelHandler' function_pointer='true' declared_type='void (*)(Tk_Window, Atom, Atom, Tk_SelectionProc *, ClientData, Atom)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Tk_SelectionProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateWindow' function_pointer='true' declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_CreateWindowFromPath' function_pointer='true' declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_DefineBitmap' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, char *, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_DefineCursor' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_Cursor)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteAllBindings' function_pointer='true' declared_type='void (*)(Tk_BindingTable, ClientData)' type='^?'>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteBinding' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_BindingTable, ClientData, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_DeleteBindingTable' function_pointer='true' declared_type='void (*)(Tk_BindingTable)' type='^?'>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteErrorHandler' function_pointer='true' declared_type='void (*)(Tk_ErrorHandler)' type='^?'>
      <arg declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteEventHandler' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned long, Tk_EventProc *, ClientData)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='Tk_EventProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteGenericHandler' function_pointer='true' declared_type='void (*)(Tk_GenericProc *, ClientData)' type='^?'>
      <arg declared_type='Tk_GenericProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteImage' function_pointer='true' declared_type='void (*)(Tcl_Interp *, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteSelHandler' function_pointer='true' declared_type='void (*)(Tk_Window, Atom, Atom)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DestroyWindow' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DisplayName' function_pointer='true' declared_type='char *(*)(Tk_Window)' type='^?' const='true'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_DistanceToTextLayout' function_pointer='true' declared_type='int (*)(Tk_TextLayout, int, int)' type='^?'>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_Draw3DPolygon' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, XPoint *, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Draw3DRectangle' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DrawChars' function_pointer='true' declared_type='void (*)(Display *, Drawable, GC, Tk_Font, char *, int, int, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DrawFocusHighlight' function_pointer='true' declared_type='void (*)(Tk_Window, GC, int, Drawable)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DrawTextLayout' function_pointer='true' declared_type='void (*)(Display *, Drawable, GC, Tk_TextLayout, int, int, int, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Fill3DPolygon' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, XPoint *, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Fill3DRectangle' function_pointer='true' declared_type='void (*)(Tk_Window, Drawable, Tk_3DBorder, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FindPhoto' function_pointer='true' declared_type='Tk_PhotoHandle (*)(Tcl_Interp *, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_PhotoHandle' type='^v'/>
    </field>
    <field name='tk_FontId' function_pointer='true' declared_type='Font (*)(Tk_Font)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <retval declared_type='Font' type='L' type64='Q'/>
    </field>
    <field name='tk_Free3DBorder' function_pointer='true' declared_type='void (*)(Tk_3DBorder)' type='^?'>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeBitmap' function_pointer='true' declared_type='void (*)(Display *, Pixmap)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeColor' function_pointer='true' declared_type='void (*)(XColor *)' type='^?'>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeColormap' function_pointer='true' declared_type='void (*)(Display *, Colormap)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Colormap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeCursor' function_pointer='true' declared_type='void (*)(Display *, Tk_Cursor)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeFont' function_pointer='true' declared_type='void (*)(Tk_Font)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeGC' function_pointer='true' declared_type='void (*)(Display *, GC)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeImage' function_pointer='true' declared_type='void (*)(Tk_Image)' type='^?'>
      <arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeOptions' function_pointer='true' declared_type='void (*)(Tk_ConfigSpec *, char *, Display *, int)' type='^?'>
      <arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreePixmap' function_pointer='true' declared_type='void (*)(Display *, Pixmap)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeTextLayout' function_pointer='true' declared_type='void (*)(Tk_TextLayout)' type='^?'>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeXId' function_pointer='true' declared_type='void (*)(Display *, XID)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='XID' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GCForColor' function_pointer='true' declared_type='GC (*)(XColor *, Drawable)' type='^?'>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <retval declared_type='GC' type='^{_XGC=}'/>
    </field>
    <field name='tk_GeometryRequest' function_pointer='true' declared_type='void (*)(Tk_Window, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Get3DBorder' function_pointer='true' declared_type='Tk_3DBorder (*)(Tcl_Interp *, Tk_Window, Tk_Uid)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Uid' type='*'/>
      <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    </field>
    <field name='tk_GetAllBindings' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_BindingTable, ClientData)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetAnchor' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, Tk_Anchor *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_Anchor*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetAtomName' function_pointer='true' declared_type='char *(*)(Tk_Window, Atom)' type='^?' const='true'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_GetBinding' function_pointer='true' declared_type='char *(*)(Tcl_Interp *, Tk_BindingTable, ClientData, char *)' type='^?' const='true'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_GetBitmap' function_pointer='true' declared_type='Pixmap (*)(Tcl_Interp *, Tk_Window, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Pixmap' type='L' type64='Q'/>
    </field>
    <field name='tk_GetBitmapFromData' function_pointer='true' declared_type='Pixmap (*)(Tcl_Interp *, Tk_Window, char *, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='Pixmap' type='L' type64='Q'/>
    </field>
    <field name='tk_GetCapStyle' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetColor' function_pointer='true' declared_type='XColor *(*)(Tcl_Interp *, Tk_Window, Tk_Uid)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Uid' type='*'/>
      <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    </field>
    <field name='tk_GetColorByValue' function_pointer='true' declared_type='XColor *(*)(Tk_Window, XColor *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    </field>
    <field name='tk_GetColormap' function_pointer='true' declared_type='Colormap (*)(Tcl_Interp *, Tk_Window, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Colormap' type='L' type64='Q'/>
    </field>
    <field name='tk_GetCursor' function_pointer='true' declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, Tk_Uid)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Uid' type='*'/>
      <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    </field>
    <field name='tk_GetCursorFromData' function_pointer='true' declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, char *, char *, int, int, int, int, Tk_Uid, Tk_Uid)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_Uid' type='*'/>
      <arg declared_type='Tk_Uid' type='*'/>
      <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    </field>
    <field name='tk_GetFont' function_pointer='true' declared_type='Tk_Font (*)(Tcl_Interp *, Tk_Window, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    </field>
    <field name='tk_GetFontFromObj' function_pointer='true' declared_type='Tk_Font (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    </field>
    <field name='tk_GetFontMetrics' function_pointer='true' declared_type='void (*)(Tk_Font, Tk_FontMetrics *)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='Tk_FontMetrics*' type='^{Tk_FontMetrics=iii}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetGC' function_pointer='true' declared_type='GC (*)(Tk_Window, unsigned long, XGCValues *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='XGCValues*' type='^{_XGCValues=iLLLiiiiiiiIIiiIiiiiIic}' type64='^{_XGCValues=iQQQiiiiiiiQQiiQiiiiQic}'/>
      <retval declared_type='GC' type='^{_XGC=}'/>
    </field>
    <field name='tk_GetImage' function_pointer='true' declared_type='Tk_Image (*)(Tcl_Interp *, Tk_Window, char *, Tk_ImageChangedProc *, ClientData)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_ImageChangedProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
    </field>
    <field name='tk_GetImageMasterData' function_pointer='true' declared_type='ClientData (*)(Tcl_Interp *, char *, Tk_ImageType **)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_ImageType**' type='^^{Tk_ImageType}'/>
      <retval declared_type='ClientData' type='^v'/>
    </field>
    <field name='tk_GetItemTypes' function_pointer='true' declared_type='Tk_ItemType *(*)(void)' type='^?'>
      <retval declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
    </field>
    <field name='tk_GetJoinStyle' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetJustify' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, Tk_Justify *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_Justify*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetNumMainWindows' function_pointer='true' declared_type='int (*)(void)' type='^?'>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetOption' function_pointer='true' declared_type='Tk_Uid (*)(Tk_Window, char *, char *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Uid' type='*'/>
    </field>
    <field name='tk_GetPixels' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, char *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetPixmap' function_pointer='true' declared_type='Pixmap (*)(Display *, Drawable, int, int, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='Pixmap' type='L' type64='Q'/>
    </field>
    <field name='tk_GetRelief' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetRootCoords' function_pointer='true' declared_type='void (*)(Tk_Window, int *, int *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetScrollInfo' function_pointer='true' declared_type='int (*)(Tcl_Interp *, int, char **, double *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char**' type='^*' const='true'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetScreenMM' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, char *, double *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetSelection' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Atom, Atom, Tk_GetSelProc *, ClientData)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Tk_GetSelProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetUid' function_pointer='true' declared_type='Tk_Uid (*)(char *)' type='^?'>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Uid' type='*'/>
    </field>
    <field name='tk_GetVisual' function_pointer='true' declared_type='Visual *(*)(Tcl_Interp *, Tk_Window, char *, int *, Colormap *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='Colormap*' type='^I' type64='^Q'/>
      <retval declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
    </field>
    <field name='tk_GetVRootGeometry' function_pointer='true' declared_type='void (*)(Tk_Window, int *, int *, int *, int *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Grab' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_HandleEvent' function_pointer='true' declared_type='void (*)(XEvent *)' type='^?'>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_IdToWindow' function_pointer='true' declared_type='Tk_Window (*)(Display *, Window)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Window' type='L' type64='Q'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_ImageChanged' function_pointer='true' declared_type='void (*)(Tk_ImageMaster, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Init' function_pointer='true' declared_type='int (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_InternAtom' function_pointer='true' declared_type='Atom (*)(Tk_Window, char *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Atom' type='L' type64='Q'/>
    </field>
    <field name='tk_IntersectTextLayout' function_pointer='true' declared_type='int (*)(Tk_TextLayout, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_MaintainGeometry' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_Window, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_MainWindow' function_pointer='true' declared_type='Tk_Window (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_MakeWindowExist' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ManageGeometry' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_GeomMgr *, ClientData)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_GeomMgr*' type='^{Tk_GeomMgr=*^?^?}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_MapWindow' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_MeasureChars' function_pointer='true' declared_type='int (*)(Tk_Font, char *, int, int, int, int *)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_MoveResizeWindow' function_pointer='true' declared_type='void (*)(Tk_Window, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_MoveWindow' function_pointer='true' declared_type='void (*)(Tk_Window, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_MoveToplevelWindow' function_pointer='true' declared_type='void (*)(Tk_Window, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_NameOf3DBorder' function_pointer='true' declared_type='char *(*)(Tk_3DBorder)' type='^?' const='true'>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfAnchor' function_pointer='true' declared_type='char *(*)(Tk_Anchor)' type='^?' const='true'>
      <arg declared_type='Tk_Anchor' type='i'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfBitmap' function_pointer='true' declared_type='char *(*)(Display *, Pixmap)' type='^?' const='true'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfCapStyle' function_pointer='true' declared_type='char *(*)(int)' type='^?' const='true'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfColor' function_pointer='true' declared_type='char *(*)(XColor *)' type='^?' const='true'>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfCursor' function_pointer='true' declared_type='char *(*)(Display *, Tk_Cursor)' type='^?' const='true'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfFont' function_pointer='true' declared_type='char *(*)(Tk_Font)' type='^?' const='true'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfImage' function_pointer='true' declared_type='char *(*)(Tk_ImageMaster)' type='^?' const='true'>
      <arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfJoinStyle' function_pointer='true' declared_type='char *(*)(int)' type='^?' const='true'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfJustify' function_pointer='true' declared_type='char *(*)(Tk_Justify)' type='^?' const='true'>
      <arg declared_type='Tk_Justify' type='i'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameOfRelief' function_pointer='true' declared_type='char *(*)(int)' type='^?' const='true'>
      <arg declared_type='int' type='i'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_NameToWindow' function_pointer='true' declared_type='Tk_Window (*)(Tcl_Interp *, char *, Tk_Window)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_OwnSelection' function_pointer='true' declared_type='void (*)(Tk_Window, Atom, Tk_LostSelProc *, ClientData)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Atom' type='L' type64='Q'/>
      <arg declared_type='Tk_LostSelProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ParseArgv' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, int *, char **, Tk_ArgvInfo *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='char**' type='^*' const='true'/>
      <arg declared_type='Tk_ArgvInfo*' type='^{_Tk_ArgvInfo=*i***}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PhotoPutBlock_NoComposite' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoPutZoomedBlock_NoComposite' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoGetImage' function_pointer='true' declared_type='int (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PhotoBlank' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoExpand' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoGetSize' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, int *, int *)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoSetSize' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PointToChar' function_pointer='true' declared_type='int (*)(Tk_TextLayout, int, int)' type='^?'>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptFontName' function_pointer='true' declared_type='int (*)(Tk_Font, Tcl_DString *)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PreserveColormap' function_pointer='true' declared_type='void (*)(Display *, Colormap)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Colormap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_QueueWindowEvent' function_pointer='true' declared_type='void (*)(XEvent *, Tcl_QueuePosition)' type='^?'>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <arg declared_type='Tcl_QueuePosition' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_RedrawImage' function_pointer='true' declared_type='void (*)(Tk_Image, int, int, int, int, Drawable, int, int)' type='^?'>
      <arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ResizeWindow' function_pointer='true' declared_type='void (*)(Tk_Window, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_RestackWindow' function_pointer='true' declared_type='int (*)(Tk_Window, int, Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_RestrictEvents' function_pointer='true' declared_type='Tk_RestrictProc *(*)(Tk_RestrictProc *, ClientData, ClientData *)' type='^?'>
      <arg declared_type='Tk_RestrictProc*' type='^?'/>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='ClientData*' type='^^v'/>
      <retval function_pointer='true' declared_type='Tk_RestrictProc*' type='^?'>
        <arg declared_type='ClientData' type='^v'/>
        <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
        <retval declared_type='Tk_RestrictAction' type='i'/>
      </retval>
    </field>
    <field name='tk_SafeInit' function_pointer='true' declared_type='int (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_SetAppName' function_pointer='true' declared_type='char *(*)(Tk_Window, char *)' type='^?' const='true'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_SetBackgroundFromBorder' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_3DBorder)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetClass' function_pointer='true' declared_type='void (*)(Tk_Window, char *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetGrid' function_pointer='true' declared_type='void (*)(Tk_Window, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetInternalBorder' function_pointer='true' declared_type='void (*)(Tk_Window, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowBackground' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned long)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowBackgroundPixmap' function_pointer='true' declared_type='void (*)(Tk_Window, Pixmap)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowBorder' function_pointer='true' declared_type='void (*)(Tk_Window, unsigned long)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowBorderWidth' function_pointer='true' declared_type='void (*)(Tk_Window, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowBorderPixmap' function_pointer='true' declared_type='void (*)(Tk_Window, Pixmap)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowColormap' function_pointer='true' declared_type='void (*)(Tk_Window, Colormap)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Colormap' type='L' type64='Q'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetWindowVisual' function_pointer='true' declared_type='int (*)(Tk_Window, Visual *, int, Colormap)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Colormap' type='L' type64='Q'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_SizeOfBitmap' function_pointer='true' declared_type='void (*)(Display *, Pixmap, int *, int *)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SizeOfImage' function_pointer='true' declared_type='void (*)(Tk_Image, int *, int *)' type='^?'>
      <arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_StrictMotif' function_pointer='true' declared_type='int (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_TextLayoutToPostscript' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_TextLayout)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_TextWidth' function_pointer='true' declared_type='int (*)(Tk_Font, char *, int)' type='^?'>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_UndefineCursor' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UnderlineChars' function_pointer='true' declared_type='void (*)(Display *, Drawable, GC, Tk_Font, char *, int, int, int, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UnderlineTextLayout' function_pointer='true' declared_type='void (*)(Display *, Drawable, GC, Tk_TextLayout, int, int, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Ungrab' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UnmaintainGeometry' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UnmapWindow' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UnsetGrid' function_pointer='true' declared_type='void (*)(Tk_Window)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_UpdatePointer' function_pointer='true' declared_type='void (*)(Tk_Window, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_AllocBitmapFromObj' function_pointer='true' declared_type='Pixmap (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Pixmap' type='L' type64='Q'/>
    </field>
    <field name='tk_Alloc3DBorderFromObj' function_pointer='true' declared_type='Tk_3DBorder (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    </field>
    <field name='tk_AllocColorFromObj' function_pointer='true' declared_type='XColor *(*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    </field>
    <field name='tk_AllocCursorFromObj' function_pointer='true' declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    </field>
    <field name='tk_AllocFontFromObj' function_pointer='true' declared_type='Tk_Font (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    </field>
    <field name='tk_CreateOptionTable' function_pointer='true' declared_type='Tk_OptionTable (*)(Tcl_Interp *, Tk_OptionSpec *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_OptionSpec*' type='^{Tk_OptionSpec=i****iii^vi}' const='true'/>
      <retval declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    </field>
    <field name='tk_DeleteOptionTable' function_pointer='true' declared_type='void (*)(Tk_OptionTable)' type='^?'>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Free3DBorderFromObj' function_pointer='true' declared_type='void (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeBitmapFromObj' function_pointer='true' declared_type='void (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeColorFromObj' function_pointer='true' declared_type='void (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeConfigOptions' function_pointer='true' declared_type='void (*)(char *, Tk_OptionTable, Tk_Window)' type='^?'>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeSavedOptions' function_pointer='true' declared_type='void (*)(Tk_SavedOptions *)' type='^?'>
      <arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeCursorFromObj' function_pointer='true' declared_type='void (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_FreeFontFromObj' function_pointer='true' declared_type='void (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_Get3DBorderFromObj' function_pointer='true' declared_type='Tk_3DBorder (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    </field>
    <field name='tk_GetAnchorFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tk_Anchor *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_Anchor*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetBitmapFromObj' function_pointer='true' declared_type='Pixmap (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Pixmap' type='L' type64='Q'/>
    </field>
    <field name='tk_GetColorFromObj' function_pointer='true' declared_type='XColor *(*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    </field>
    <field name='tk_GetCursorFromObj' function_pointer='true' declared_type='Tk_Cursor (*)(Tk_Window, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    </field>
    <field name='tk_GetOptionInfo' function_pointer='true' declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, Tk_OptionTable, Tcl_Obj *, Tk_Window)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    </field>
    <field name='tk_GetOptionValue' function_pointer='true' declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, Tk_OptionTable, Tcl_Obj *, Tk_Window)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    </field>
    <field name='tk_GetJustifyFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tk_Justify *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_Justify*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetMMFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, double *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetPixelsFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetReliefFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetScrollInfoObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj * *, double *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_InitOptions' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, Tk_OptionTable, Tk_Window)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_MainEx' function_pointer='true' declared_type='void (*)(int, char **, Tcl_AppInitProc *, Tcl_Interp *)' type='^?'>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char**' type='^*'/>
      <arg declared_type='Tcl_AppInitProc*' type='^?'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_RestoreSavedOptions' function_pointer='true' declared_type='void (*)(Tk_SavedOptions *)' type='^?'>
      <arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetOptions' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, Tk_OptionTable, int, Tcl_Obj * *, Tk_Window, Tk_SavedOptions *, int *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_InitConsoleChannels' function_pointer='true' declared_type='void (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateConsoleWindow' function_pointer='true' declared_type='int (*)(Tcl_Interp *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CreateSmoothMethod' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_SmoothMethod *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_SmoothMethod*' type='^{Tk_SmoothMethod=*^?^?}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='reserved218' declared_type='void*' type='^v'/>
    <field name='reserved219' declared_type='void*' type='^v'/>
    <field name='tk_GetDash' function_pointer='true' declared_type='int (*)(Tcl_Interp *, char *, Tk_Dash *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_Dash*' type='^{Tk_Dash=i(?=*[4c])}' type64='^{Tk_Dash=i(?=*[8c])}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CreateOutline' function_pointer='true' declared_type='void (*)(Tk_Outline *)' type='^?'>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteOutline' function_pointer='true' declared_type='void (*)(Display *, Tk_Outline *)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_ConfigOutlineGC' function_pointer='true' declared_type='int (*)(XGCValues *, Tk_Canvas, Tk_Item *, Tk_Outline *)' type='^?'>
      <arg declared_type='XGCValues*' type='^{_XGCValues=iLLLiiiiiiiIIiiIiiiiIic}' type64='^{_XGCValues=iQQQiiiiiiiQQiiQiiiiQic}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ChangeOutlineGC' function_pointer='true' declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_ResetOutlineGC' function_pointer='true' declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasPsOutline' function_pointer='true' declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_SetTSOrigin' function_pointer='true' declared_type='void (*)(Tk_Window, GC, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CanvasGetCoordFromObj' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Tcl_Obj *, double *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CanvasSetOffset' function_pointer='true' declared_type='void (*)(Tk_Canvas, GC, Tk_TSOffset *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='GC' type='^{_XGC=}'/>
      <arg declared_type='Tk_TSOffset*' type='^{Tk_TSOffset=iii}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DitherPhoto' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PostscriptBitmap' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, Pixmap, int, int, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptColor' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_PostscriptInfo, XColor *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptFont' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_PostscriptInfo, Tk_Font)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptImage' function_pointer='true' declared_type='int (*)(Tk_Image, Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptPath' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_PostscriptInfo, double *, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PostscriptStipple' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, Pixmap)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='Pixmap' type='L' type64='Q'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_PostscriptY' function_pointer='true' declared_type='double (*)(double, Tk_PostscriptInfo)' type='^?'>
      <arg declared_type='double' type='d'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <retval declared_type='double' type='d'/>
    </field>
    <field name='tk_PostscriptPhoto' function_pointer='true' declared_type='int (*)(Tcl_Interp *, Tk_PhotoImageBlock *, Tk_PostscriptInfo, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CreateClientMessageHandler' function_pointer='true' declared_type='void (*)(Tk_ClientMessageProc *)' type='^?'>
      <arg declared_type='Tk_ClientMessageProc*' type='^?'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_DeleteClientMessageHandler' function_pointer='true' declared_type='void (*)(Tk_ClientMessageProc *)' type='^?'>
      <arg declared_type='Tk_ClientMessageProc*' type='^?'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CreateAnonymousWindow' function_pointer='true' declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    </field>
    <field name='tk_SetClassProcs' function_pointer='true' declared_type='void (*)(Tk_Window, Tk_ClassProcs *, ClientData)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_ClassProcs*' type='^{Tk_ClassProcs=I^?^?^?}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetInternalBorderEx' function_pointer='true' declared_type='void (*)(Tk_Window, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetMinimumRequestSize' function_pointer='true' declared_type='void (*)(Tk_Window, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_SetCaretPos' function_pointer='true' declared_type='void (*)(Tk_Window, int, int, int)' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoPutBlock' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_PhotoPutZoomedBlock' function_pointer='true' declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_CollapseMotionEvents' function_pointer='true' declared_type='int (*)(Display *, int)' type='^?'>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_RegisterStyleEngine' function_pointer='true' declared_type='Tk_StyleEngine (*)(char *, Tk_StyleEngine)' type='^?'>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
      <retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
    </field>
    <field name='tk_GetStyleEngine' function_pointer='true' declared_type='Tk_StyleEngine (*)(char *)' type='^?'>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
    </field>
    <field name='tk_RegisterStyledElement' function_pointer='true' declared_type='int (*)(Tk_StyleEngine, Tk_ElementSpec *)' type='^?'>
      <arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
      <arg declared_type='Tk_ElementSpec*' type='^{Tk_ElementSpec=i*^{Tk_ElementOptionSpec}^?^?^?^?}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_GetElementId' function_pointer='true' declared_type='int (*)(char *)' type='^?'>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_CreateStyle' function_pointer='true' declared_type='Tk_Style (*)(char *, Tk_StyleEngine, ClientData)' type='^?'>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    </field>
    <field name='tk_GetStyle' function_pointer='true' declared_type='Tk_Style (*)(Tcl_Interp *, char *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    </field>
    <field name='tk_FreeStyle' function_pointer='true' declared_type='void (*)(Tk_Style)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_NameOfStyle' function_pointer='true' declared_type='char *(*)(Tk_Style)' type='^?' const='true'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <retval declared_type='char*' type='*' const='true'/>
    </field>
    <field name='tk_AllocStyleFromObj' function_pointer='true' declared_type='Tk_Style (*)(Tcl_Interp *, Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    </field>
    <field name='tk_GetStyleFromObj' function_pointer='true' declared_type='Tk_Style (*)(Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    </field>
    <field name='tk_FreeStyleFromObj' function_pointer='true' declared_type='void (*)(Tcl_Obj *)' type='^?'>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetStyledElement' function_pointer='true' declared_type='Tk_StyledElement (*)(Tk_Style, int, Tk_OptionTable)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
      <retval declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
    </field>
    <field name='tk_GetElementSize' function_pointer='true' declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, int, int, int, int *, int *)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetElementBox' function_pointer='true' declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, int, int, int, int, int, int *, int *, int *, int *)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='tk_GetElementBorderWidth' function_pointer='true' declared_type='int (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='tk_DrawElement' function_pointer='true' declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, Drawable, int, int, int, int, int)' type='^?'>
      <arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
      <arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='Tk_ArgvInfo' type='{_Tk_ArgvInfo=&quot;key&quot;*&quot;type&quot;i&quot;src&quot;*&quot;dst&quot;*&quot;help&quot;*}'>
    <field name='key' declared_type='char*' type='*'/>
    <field name='type' declared_type='int' type='i'/>
    <field name='src' declared_type='char*' type='*'/>
    <field name='dst' declared_type='char*' type='*'/>
    <field name='help' declared_type='char*' type='*'/>
  </struct>
  <struct name='Tk_CanvasTextInfo' type='{Tk_CanvasTextInfo=&quot;selBorder&quot;^{Tk_3DBorder_}&quot;selBorderWidth&quot;i&quot;selFgColorPtr&quot;^{?}&quot;selItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectFirst&quot;i&quot;selectLast&quot;i&quot;anchorItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectAnchor&quot;i&quot;insertBorder&quot;^{Tk_3DBorder_}&quot;insertWidth&quot;i&quot;insertBorderWidth&quot;i&quot;focusItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;gotFocus&quot;i&quot;cursorOn&quot;i}'>
    <field name='selBorder' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <field name='selBorderWidth' declared_type='int' type='i'/>
    <field name='selFgColorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <field name='selItemPtr' declared_type='Tk_Item*' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
    <field name='selectFirst' declared_type='int' type='i'/>
    <field name='selectLast' declared_type='int' type='i'/>
    <field name='anchorItemPtr' declared_type='Tk_Item*' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
    <field name='selectAnchor' declared_type='int' type='i'/>
    <field name='insertBorder' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <field name='insertWidth' declared_type='int' type='i'/>
    <field name='insertBorderWidth' declared_type='int' type='i'/>
    <field name='focusItemPtr' declared_type='Tk_Item*' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
    <field name='gotFocus' declared_type='int' type='i'/>
    <field name='cursorOn' declared_type='int' type='i'/>
  </struct>
  <struct name='Tk_ClassProcs' type='{Tk_ClassProcs=&quot;size&quot;I&quot;worldChangedProc&quot;^?&quot;createProc&quot;^?&quot;modalProc&quot;^?}'>
    <field name='size' declared_type='unsigned int' type='I'/>
    <field name='worldChangedProc' function_pointer='true' declared_type='Tk_ClassWorldChangedProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='createProc' function_pointer='true' declared_type='Tk_ClassCreateProc*' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Window' type='L' type64='Q'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='Window' type='L' type64='Q'/>
    </field>
    <field name='modalProc' function_pointer='true' declared_type='Tk_ClassModalProc*' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='Tk_ConfigSpec' type='{Tk_ConfigSpec=&quot;type&quot;i&quot;argvName&quot;*&quot;dbName&quot;*&quot;dbClass&quot;*&quot;defValue&quot;*&quot;offset&quot;i&quot;specFlags&quot;i&quot;customPtr&quot;^{Tk_CustomOption}}'>
    <field name='type' declared_type='int' type='i'/>
    <field name='argvName' declared_type='char*' type='*'/>
    <field name='dbName' declared_type='Tk_Uid' type='*'/>
    <field name='dbClass' declared_type='Tk_Uid' type='*'/>
    <field name='defValue' declared_type='Tk_Uid' type='*'/>
    <field name='offset' declared_type='int' type='i'/>
    <field name='specFlags' declared_type='int' type='i'/>
    <field name='customPtr' declared_type='Tk_CustomOption*' type='^{Tk_CustomOption=^?^?^v}'/>
  </struct>
  <struct name='Tk_CustomOption' type='{Tk_CustomOption=&quot;parseProc&quot;^?&quot;printProc&quot;^?&quot;clientData&quot;^v}'>
    <field name='parseProc' function_pointer='true' declared_type='Tk_OptionParseProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='printProc' function_pointer='true' declared_type='Tk_OptionPrintProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_FreeProc**' type='^^?'/>
      <retval declared_type='char*' type='*'/>
    </field>
    <field name='clientData' declared_type='ClientData' type='^v'/>
  </struct>
  <struct name='Tk_Dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'>
    <field name='number' declared_type='int' type='i'/>
    <field name='pattern' declared_type='union Tk_Dash::' type='(?=&quot;pt&quot;*&quot;array&quot;[4c])' type64='(?=&quot;pt&quot;*&quot;array&quot;[8c])'/>
  </struct>
  <struct name='Tk_ElementOptionSpec' type='{Tk_ElementOptionSpec=&quot;name&quot;*&quot;type&quot;i}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='type' declared_type='Tk_OptionType' type='i'/>
  </struct>
  <struct name='Tk_ElementSpec' type='{Tk_ElementSpec=&quot;version&quot;i&quot;name&quot;*&quot;options&quot;^{Tk_ElementOptionSpec}&quot;getSize&quot;^?&quot;getBox&quot;^?&quot;getBorderWidth&quot;^?&quot;draw&quot;^?}'>
    <field name='version' declared_type='int' type='i'/>
    <field name='name' declared_type='char*' type='*'/>
    <field name='options' declared_type='Tk_ElementOptionSpec*' type='^{Tk_ElementOptionSpec=*i}'/>
    <field name='getSize' function_pointer='true' declared_type='Tk_GetElementSizeProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='getBox' function_pointer='true' declared_type='Tk_GetElementBoxProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='getBorderWidth' function_pointer='true' declared_type='Tk_GetElementBorderWidthProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='draw' function_pointer='true' declared_type='Tk_DrawElementProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}' const='true'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='Tk_FakeWin' type='{Tk_FakeWin=&quot;display&quot;^{_XDisplay}&quot;dummy1&quot;*&quot;screenNum&quot;i&quot;visual&quot;^{?}&quot;depth&quot;i&quot;window&quot;I&quot;dummy2&quot;*&quot;dummy3&quot;*&quot;parentPtr&quot;^{Tk_Window_}&quot;dummy4&quot;*&quot;dummy5&quot;*&quot;pathName&quot;*&quot;nameUid&quot;*&quot;classUid&quot;*&quot;changes&quot;{?=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;border_width&quot;i&quot;sibling&quot;I&quot;stack_mode&quot;i}&quot;dummy6&quot;I&quot;atts&quot;{?=&quot;background_pixmap&quot;I&quot;background_pixel&quot;L&quot;border_pixmap&quot;I&quot;border_pixel&quot;L&quot;bit_gravity&quot;i&quot;win_gravity&quot;i&quot;backing_store&quot;i&quot;backing_planes&quot;L&quot;backing_pixel&quot;L&quot;save_under&quot;i&quot;event_mask&quot;l&quot;do_not_propagate_mask&quot;l&quot;override_redirect&quot;i&quot;colormap&quot;I&quot;cursor&quot;{Cursor=&quot;data&quot;[16s]&quot;mask&quot;[16s]&quot;hotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}}&quot;dummy7&quot;L&quot;flags&quot;I&quot;dummy8&quot;*&quot;dummy9&quot;^{_XIC}&quot;dummy10&quot;^^v&quot;dummy11&quot;i&quot;dummy12&quot;i&quot;dummy13&quot;*&quot;dummy14&quot;*&quot;dummy15&quot;^v&quot;reqWidth&quot;i&quot;reqHeight&quot;i&quot;internalBorderLeft&quot;i&quot;dummy16&quot;*&quot;dummy17&quot;*&quot;dummy18&quot;^v&quot;dummy19&quot;*&quot;internalBorderRight&quot;i&quot;internalBorderTop&quot;i&quot;internalBorderBottom&quot;i&quot;minReqWidth&quot;i&quot;minReqHeight&quot;i}' type64='{Tk_FakeWin=&quot;display&quot;^{_XDisplay}&quot;dummy1&quot;*&quot;screenNum&quot;i&quot;visual&quot;^{?}&quot;depth&quot;i&quot;window&quot;Q&quot;dummy2&quot;*&quot;dummy3&quot;*&quot;parentPtr&quot;^{Tk_Window_}&quot;dummy4&quot;*&quot;dummy5&quot;*&quot;pathName&quot;*&quot;nameUid&quot;*&quot;classUid&quot;*&quot;changes&quot;{?=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;border_width&quot;i&quot;sibling&quot;Q&quot;stack_mode&quot;i}&quot;dummy6&quot;I&quot;atts&quot;{?=&quot;background_pixmap&quot;Q&quot;background_pixel&quot;Q&quot;border_pixmap&quot;Q&quot;border_pixel&quot;Q&quot;bit_gravity&quot;i&quot;win_gravity&quot;i&quot;backing_store&quot;i&quot;backing_planes&quot;Q&quot;backing_pixel&quot;Q&quot;save_under&quot;i&quot;event_mask&quot;q&quot;do_not_propagate_mask&quot;q&quot;override_redirect&quot;i&quot;colormap&quot;Q&quot;cursor&quot;{Cursor=&quot;data&quot;[16s]&quot;mask&quot;[16s]&quot;hotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}}&quot;dummy7&quot;Q&quot;flags&quot;I&quot;dummy8&quot;*&quot;dummy9&quot;^{_XIC}&quot;dummy10&quot;^^v&quot;dummy11&quot;i&quot;dummy12&quot;i&quot;dummy13&quot;*&quot;dummy14&quot;*&quot;dummy15&quot;^v&quot;reqWidth&quot;i&quot;reqHeight&quot;i&quot;internalBorderLeft&quot;i&quot;dummy16&quot;*&quot;dummy17&quot;*&quot;dummy18&quot;^v&quot;dummy19&quot;*&quot;internalBorderRight&quot;i&quot;internalBorderTop&quot;i&quot;internalBorderBottom&quot;i&quot;minReqWidth&quot;i&quot;minReqHeight&quot;i}'>
    <field name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <field name='dummy1' declared_type='char*' type='*'/>
    <field name='screenNum' declared_type='int' type='i'/>
    <field name='visual' declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
    <field name='depth' declared_type='int' type='i'/>
    <field name='window' declared_type='Window' type='L' type64='Q'/>
    <field name='dummy2' declared_type='char*' type='*'/>
    <field name='dummy3' declared_type='char*' type='*'/>
    <field name='parentPtr' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <field name='dummy4' declared_type='char*' type='*'/>
    <field name='dummy5' declared_type='char*' type='*'/>
    <field name='pathName' declared_type='char*' type='*'/>
    <field name='nameUid' declared_type='Tk_Uid' type='*'/>
    <field name='classUid' declared_type='Tk_Uid' type='*'/>
    <field name='changes' declared_type='XWindowChanges' type='{_XWindowChanges=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;border_width&quot;i&quot;sibling&quot;I&quot;stack_mode&quot;i}' type64='{_XWindowChanges=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;border_width&quot;i&quot;sibling&quot;Q&quot;stack_mode&quot;i}'/>
    <field name='dummy6' declared_type='unsigned int' type='I'/>
    <field name='atts' declared_type='XSetWindowAttributes' type='{_XSetWindowAttributes=&quot;background_pixmap&quot;I&quot;background_pixel&quot;L&quot;border_pixmap&quot;I&quot;border_pixel&quot;L&quot;bit_gravity&quot;i&quot;win_gravity&quot;i&quot;backing_store&quot;i&quot;backing_planes&quot;L&quot;backing_pixel&quot;L&quot;save_under&quot;i&quot;event_mask&quot;l&quot;do_not_propagate_mask&quot;l&quot;override_redirect&quot;i&quot;colormap&quot;I&quot;cursor&quot;{Cursor=&quot;data&quot;[16s]&quot;mask&quot;[16s]&quot;hotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}}' type64='{_XSetWindowAttributes=&quot;background_pixmap&quot;Q&quot;background_pixel&quot;Q&quot;border_pixmap&quot;Q&quot;border_pixel&quot;Q&quot;bit_gravity&quot;i&quot;win_gravity&quot;i&quot;backing_store&quot;i&quot;backing_planes&quot;Q&quot;backing_pixel&quot;Q&quot;save_under&quot;i&quot;event_mask&quot;q&quot;do_not_propagate_mask&quot;q&quot;override_redirect&quot;i&quot;colormap&quot;Q&quot;cursor&quot;{Cursor=&quot;data&quot;[16s]&quot;mask&quot;[16s]&quot;hotSpot&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}}'/>
    <field name='dummy7' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='flags' declared_type='unsigned int' type='I'/>
    <field name='dummy8' declared_type='char*' type='*'/>
    <field name='dummy9' declared_type='XIC' type='^{_XIC=}'/>
    <field name='dummy10' declared_type='ClientData*' type='^^v'/>
    <field name='dummy11' declared_type='int' type='i'/>
    <field name='dummy12' declared_type='int' type='i'/>
    <field name='dummy13' declared_type='char*' type='*'/>
    <field name='dummy14' declared_type='char*' type='*'/>
    <field name='dummy15' declared_type='ClientData' type='^v'/>
    <field name='reqWidth' declared_type='int' type='i'/>
    <field name='reqHeight' declared_type='int' type='i'/>
    <field name='internalBorderLeft' declared_type='int' type='i'/>
    <field name='dummy16' declared_type='char*' type='*'/>
    <field name='dummy17' declared_type='char*' type='*'/>
    <field name='dummy18' declared_type='ClientData' type='^v'/>
    <field name='dummy19' declared_type='char*' type='*'/>
    <field name='internalBorderRight' declared_type='int' type='i'/>
    <field name='internalBorderTop' declared_type='int' type='i'/>
    <field name='internalBorderBottom' declared_type='int' type='i'/>
    <field name='minReqWidth' declared_type='int' type='i'/>
    <field name='minReqHeight' declared_type='int' type='i'/>
  </struct>
  <struct name='Tk_FontMetrics' type='{Tk_FontMetrics=&quot;ascent&quot;i&quot;descent&quot;i&quot;linespace&quot;i}'>
    <field name='ascent' declared_type='int' type='i'/>
    <field name='descent' declared_type='int' type='i'/>
    <field name='linespace' declared_type='int' type='i'/>
  </struct>
  <struct name='Tk_GeomMgr' type='{Tk_GeomMgr=&quot;name&quot;*&quot;requestProc&quot;^?&quot;lostSlaveProc&quot;^?}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='requestProc' function_pointer='true' declared_type='Tk_GeomRequestProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='lostSlaveProc' function_pointer='true' declared_type='Tk_GeomLostSlaveProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='Tk_ImageType' type='{Tk_ImageType=&quot;name&quot;*&quot;createProc&quot;^?&quot;getProc&quot;^?&quot;displayProc&quot;^?&quot;freeProc&quot;^?&quot;deleteProc&quot;^?&quot;postscriptProc&quot;^?&quot;nextPtr&quot;^{Tk_ImageType}&quot;reserved&quot;*}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='createProc' function_pointer='true' declared_type='Tk_ImageCreateProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <arg declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
      <arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
      <arg declared_type='ClientData*' type='^^v'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='getProc' function_pointer='true' declared_type='Tk_ImageGetProc*' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='ClientData' type='^v'/>
    </field>
    <field name='displayProc' function_pointer='true' declared_type='Tk_ImageDisplayProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='freeProc' function_pointer='true' declared_type='Tk_ImageFreeProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='deleteProc' function_pointer='true' declared_type='Tk_ImageDeleteProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='postscriptProc' function_pointer='true' declared_type='Tk_ImagePostscriptProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='nextPtr' declared_type='struct Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
    <field name='reserved' declared_type='char*' type='*'/>
  </struct>
  <struct name='Tk_Item' type='{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'>
    <field name='id' declared_type='int' type='i'/>
    <field name='nextPtr' declared_type='struct Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <field name='staticTagSpace' declared_type='Tk_Uid*' type='[3*]'/>
    <field name='tagPtr' declared_type='Tk_Uid*' type='^*'/>
    <field name='tagSpace' declared_type='int' type='i'/>
    <field name='numTags' declared_type='int' type='i'/>
    <field name='typePtr' declared_type='struct Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
    <field name='x1' declared_type='int' type='i'/>
    <field name='y1' declared_type='int' type='i'/>
    <field name='x2' declared_type='int' type='i'/>
    <field name='y2' declared_type='int' type='i'/>
    <field name='prevPtr' declared_type='struct Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <field name='state' declared_type='Tk_State' type='i'/>
    <field name='reserved1' declared_type='char*' type='*'/>
    <field name='redraw_flags' declared_type='int' type='i'/>
  </struct>
  <struct name='Tk_ItemType' type='{Tk_ItemType=&quot;name&quot;*&quot;itemSize&quot;i&quot;createProc&quot;^?&quot;configSpecs&quot;^{Tk_ConfigSpec}&quot;configProc&quot;^?&quot;coordProc&quot;^?&quot;deleteProc&quot;^?&quot;displayProc&quot;^?&quot;alwaysRedraw&quot;i&quot;pointProc&quot;^?&quot;areaProc&quot;^?&quot;postscriptProc&quot;^?&quot;scaleProc&quot;^?&quot;translateProc&quot;^?&quot;indexProc&quot;^?&quot;icursorProc&quot;^?&quot;selectionProc&quot;^?&quot;insertProc&quot;^?&quot;dCharsProc&quot;^?&quot;nextPtr&quot;^{Tk_ItemType}&quot;reserved1&quot;*&quot;reserved2&quot;i&quot;reserved3&quot;*&quot;reserved4&quot;*}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='itemSize' declared_type='int' type='i'/>
    <field name='createProc' function_pointer='true' declared_type='Tk_ItemCreateProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='configSpecs' declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
    <field name='configProc' function_pointer='true' declared_type='Tk_ItemConfigureProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='coordProc' function_pointer='true' declared_type='Tk_ItemCoordProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='deleteProc' function_pointer='true' declared_type='Tk_ItemDeleteProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='displayProc' function_pointer='true' declared_type='Tk_ItemDisplayProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='Display*' type='^{_XDisplay=}'/>
      <arg declared_type='Drawable' type='L' type64='Q'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='alwaysRedraw' declared_type='int' type='i'/>
    <field name='pointProc' function_pointer='true' declared_type='Tk_ItemPointProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='double' type='d'/>
    </field>
    <field name='areaProc' function_pointer='true' declared_type='Tk_ItemAreaProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='postscriptProc' function_pointer='true' declared_type='Tk_ItemPostscriptProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='scaleProc' function_pointer='true' declared_type='Tk_ItemScaleProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='translateProc' function_pointer='true' declared_type='Tk_ItemTranslateProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='double' type='d'/>
      <arg declared_type='double' type='d'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='indexProc' function_pointer='true' declared_type='Tk_ItemIndexProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int*' type='^i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='icursorProc' function_pointer='true' declared_type='Tk_ItemCursorProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='selectionProc' function_pointer='true' declared_type='Tk_ItemSelectionProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='insertProc' function_pointer='true' declared_type='Tk_ItemInsertProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char*' type='*'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='dCharsProc' function_pointer='true' declared_type='Tk_ItemDCharsProc*' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='nextPtr' declared_type='struct Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
    <field name='reserved1' declared_type='char*' type='*'/>
    <field name='reserved2' declared_type='int' type='i'/>
    <field name='reserved3' declared_type='char*' type='*'/>
    <field name='reserved4' declared_type='char*' type='*'/>
  </struct>
  <struct name='Tk_ObjCustomOption' type='{Tk_ObjCustomOption=&quot;name&quot;*&quot;setProc&quot;^?&quot;getProc&quot;^?&quot;restoreProc&quot;^?&quot;freeProc&quot;^?&quot;clientData&quot;^v}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='setProc' function_pointer='true' declared_type='Tk_CustomOptionSetProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='getProc' function_pointer='true' declared_type='Tk_CustomOptionGetProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    </field>
    <field name='restoreProc' function_pointer='true' declared_type='Tk_CustomOptionRestoreProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='char*' type='*'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='freeProc' function_pointer='true' declared_type='Tk_CustomOptionFreeProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='char*' type='*'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='clientData' declared_type='ClientData' type='^v'/>
  </struct>
  <struct name='Tk_OptionSpec' type='{Tk_OptionSpec=&quot;type&quot;i&quot;optionName&quot;*&quot;dbName&quot;*&quot;dbClass&quot;*&quot;defValue&quot;*&quot;objOffset&quot;i&quot;internalOffset&quot;i&quot;flags&quot;i&quot;clientData&quot;^v&quot;typeMask&quot;i}'>
    <field name='type' declared_type='Tk_OptionType' type='i'/>
    <field name='optionName' declared_type='char*' type='*'/>
    <field name='dbName' declared_type='char*' type='*'/>
    <field name='dbClass' declared_type='char*' type='*'/>
    <field name='defValue' declared_type='char*' type='*'/>
    <field name='objOffset' declared_type='int' type='i'/>
    <field name='internalOffset' declared_type='int' type='i'/>
    <field name='flags' declared_type='int' type='i'/>
    <field name='clientData' declared_type='ClientData' type='^v'/>
    <field name='typeMask' declared_type='int' type='i'/>
  </struct>
  <struct name='Tk_Outline' type='{Tk_Outline=&quot;gc&quot;^{_XGC}&quot;width&quot;d&quot;activeWidth&quot;d&quot;disabledWidth&quot;d&quot;offset&quot;i&quot;dash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}&quot;activeDash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}&quot;disabledDash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;tsoffset&quot;{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}&quot;color&quot;^{?}&quot;activeColor&quot;^{?}&quot;disabledColor&quot;^{?}&quot;stipple&quot;I&quot;activeStipple&quot;I&quot;disabledStipple&quot;I}' type64='{Tk_Outline=&quot;gc&quot;^{_XGC}&quot;width&quot;d&quot;activeWidth&quot;d&quot;disabledWidth&quot;d&quot;offset&quot;i&quot;dash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}&quot;activeDash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}&quot;disabledDash&quot;{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;tsoffset&quot;{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}&quot;color&quot;^{?}&quot;activeColor&quot;^{?}&quot;disabledColor&quot;^{?}&quot;stipple&quot;Q&quot;activeStipple&quot;Q&quot;disabledStipple&quot;Q}'>
    <field name='gc' declared_type='GC' type='^{_XGC=}'/>
    <field name='width' declared_type='double' type='d'/>
    <field name='activeWidth' declared_type='double' type='d'/>
    <field name='disabledWidth' declared_type='double' type='d'/>
    <field name='offset' declared_type='int' type='i'/>
    <field name='dash' declared_type='Tk_Dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
    <field name='activeDash' declared_type='Tk_Dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
    <field name='disabledDash' declared_type='Tk_Dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
    <field name='reserved1' declared_type='void*' type='^v'/>
    <field name='reserved2' declared_type='void*' type='^v'/>
    <field name='reserved3' declared_type='void*' type='^v'/>
    <field name='tsoffset' declared_type='Tk_TSOffset' type='{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}'/>
    <field name='color' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <field name='activeColor' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <field name='disabledColor' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <field name='stipple' declared_type='Pixmap' type='L' type64='Q'/>
    <field name='activeStipple' declared_type='Pixmap' type='L' type64='Q'/>
    <field name='disabledStipple' declared_type='Pixmap' type='L' type64='Q'/>
  </struct>
  <struct name='Tk_PhotoImageBlock' type='{Tk_PhotoImageBlock=&quot;pixelPtr&quot;*&quot;width&quot;i&quot;height&quot;i&quot;pitch&quot;i&quot;pixelSize&quot;i&quot;offset&quot;[4i]}'>
    <field name='pixelPtr' declared_type='unsigned char*' type='*'/>
    <field name='width' declared_type='int' type='i'/>
    <field name='height' declared_type='int' type='i'/>
    <field name='pitch' declared_type='int' type='i'/>
    <field name='pixelSize' declared_type='int' type='i'/>
    <field name='offset' declared_type='int*' type='[4i]'/>
  </struct>
  <struct name='Tk_PhotoImageFormat' type='{Tk_PhotoImageFormat=&quot;name&quot;*&quot;fileMatchProc&quot;^?&quot;stringMatchProc&quot;^?&quot;fileReadProc&quot;^?&quot;stringReadProc&quot;^?&quot;fileWriteProc&quot;^?&quot;stringWriteProc&quot;^?&quot;nextPtr&quot;^{Tk_PhotoImageFormat}}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='fileMatchProc' function_pointer='true' declared_type='Tk_ImageFileMatchProc*' type='^?'>
      <arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='stringMatchProc' function_pointer='true' declared_type='Tk_ImageStringMatchProc*' type='^?'>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='int*' type='^i'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='fileReadProc' function_pointer='true' declared_type='Tk_ImageFileReadProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='stringReadProc' function_pointer='true' declared_type='Tk_ImageStringReadProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_PhotoHandle' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='fileWriteProc' function_pointer='true' declared_type='Tk_ImageFileWriteProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='stringWriteProc' function_pointer='true' declared_type='Tk_ImageStringWriteProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
      <arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='nextPtr' declared_type='struct Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
  </struct>
  <struct name='Tk_SavedOption' type='{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}'>
    <field name='optionPtr' declared_type='struct TkOption*' type='^{TkOption=}'/>
    <field name='valuePtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <field name='internalForm' declared_type='double' type='d'/>
  </struct>
  <struct name='Tk_SavedOptions' type='{Tk_SavedOptions=&quot;recordPtr&quot;*&quot;tkwin&quot;^{Tk_Window_}&quot;numItems&quot;i&quot;items&quot;[20{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}]&quot;nextPtr&quot;^{Tk_SavedOptions}}'>
    <field name='recordPtr' declared_type='char*' type='*'/>
    <field name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <field name='numItems' declared_type='int' type='i'/>
    <field name='items' declared_type='Tk_SavedOption*' type='[20{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}]'/>
    <field name='nextPtr' declared_type='struct Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
  </struct>
  <struct name='Tk_SmoothMethod' type='{Tk_SmoothMethod=&quot;name&quot;*&quot;coordProc&quot;^?&quot;postscriptProc&quot;^?}'>
    <field name='name' declared_type='char*' type='*'/>
    <field name='coordProc' function_pointer='true' declared_type='int (*)(Tk_Canvas, double *, int, int, XPoint *, double *)' type='^?'>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
      <arg declared_type='double*' type='^d'/>
      <retval declared_type='int' type='i'/>
    </field>
    <field name='postscriptProc' function_pointer='true' declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int, int)' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
      <arg declared_type='double*' type='^d'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='Tk_TSOffset' type='{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}'>
    <field name='flags' declared_type='int' type='i'/>
    <field name='xoffset' declared_type='int' type='i'/>
    <field name='yoffset' declared_type='int' type='i'/>
  </struct>
  <struct name='XActivateDeactivateEvent' type='{_XActivateDeactivateEvent=&quot;type&quot;i&quot;serial&quot;L&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;I}' type64='{_XActivateDeactivateEvent=&quot;type&quot;i&quot;serial&quot;Q&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;Q}'>
    <field name='type' declared_type='int' type='i'/>
    <field name='serial' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='send_event' declared_type='int' type='i'/>
    <field name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <field name='window' declared_type='Window' type='L' type64='Q'/>
  </struct>
  <struct name='XActivateEvent' type='{_XActivateEvent=&quot;type&quot;i&quot;serial&quot;L&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;I}' type64='{_XActivateEvent=&quot;type&quot;i&quot;serial&quot;Q&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;Q}'>
    <field name='type' declared_type='int' type='i'/>
    <field name='serial' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='send_event' declared_type='int' type='i'/>
    <field name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <field name='window' declared_type='Window' type='L' type64='Q'/>
  </struct>
  <struct name='XClassHint' type='{_XClassHint=&quot;res_name&quot;*&quot;res_class&quot;*}'>
    <field name='res_name' declared_type='char*' type='*'/>
    <field name='res_class' declared_type='char*' type='*'/>
  </struct>
  <struct name='XComposeStatus' type='{_XComposeStatus=&quot;compose_ptr&quot;*&quot;chars_matched&quot;i}'>
    <field name='compose_ptr' declared_type='XPointer' type='*'/>
    <field name='chars_matched' declared_type='int' type='i'/>
  </struct>
  <struct name='XDeactivateEvent' type='{_XDeactivateEvent=&quot;type&quot;i&quot;serial&quot;L&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;I}' type64='{_XDeactivateEvent=&quot;type&quot;i&quot;serial&quot;Q&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;window&quot;Q}'>
    <field name='type' declared_type='int' type='i'/>
    <field name='serial' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='send_event' declared_type='int' type='i'/>
    <field name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <field name='window' declared_type='Window' type='L' type64='Q'/>
  </struct>
  <struct name='XIconSize' type='{_XIconSize=&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i}'>
    <field name='min_width' declared_type='int' type='i'/>
    <field name='min_height' declared_type='int' type='i'/>
    <field name='max_width' declared_type='int' type='i'/>
    <field name='max_height' declared_type='int' type='i'/>
    <field name='width_inc' declared_type='int' type='i'/>
    <field name='height_inc' declared_type='int' type='i'/>
  </struct>
  <struct name='XSizeHints' type='{_XSizeHints=&quot;flags&quot;l&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i&quot;min_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;max_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;base_width&quot;i&quot;base_height&quot;i&quot;win_gravity&quot;i}' type64='{_XSizeHints=&quot;flags&quot;q&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i&quot;min_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;max_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;base_width&quot;i&quot;base_height&quot;i&quot;win_gravity&quot;i}'>
    <field name='flags' declared_type='long' type='l' type64='q'/>
    <field name='x' declared_type='int' type='i'/>
    <field name='y' declared_type='int' type='i'/>
    <field name='width' declared_type='int' type='i'/>
    <field name='height' declared_type='int' type='i'/>
    <field name='min_width' declared_type='int' type='i'/>
    <field name='min_height' declared_type='int' type='i'/>
    <field name='max_width' declared_type='int' type='i'/>
    <field name='max_height' declared_type='int' type='i'/>
    <field name='width_inc' declared_type='int' type='i'/>
    <field name='height_inc' declared_type='int' type='i'/>
    <field name='min_aspect' declared_type='struct XSizeHints::' type='{_structXSizeHints=&quot;x&quot;i&quot;y&quot;i}'/>
    <field name='max_aspect' declared_type='struct XSizeHints::' type='{_structXSizeHints=&quot;x&quot;i&quot;y&quot;i}'/>
    <field name='base_width' declared_type='int' type='i'/>
    <field name='base_height' declared_type='int' type='i'/>
    <field name='win_gravity' declared_type='int' type='i'/>
  </struct>
  <struct name='XStandardColormap' type='{_XStandardColormap=&quot;colormap&quot;I&quot;red_max&quot;L&quot;red_mult&quot;L&quot;green_max&quot;L&quot;green_mult&quot;L&quot;blue_max&quot;L&quot;blue_mult&quot;L&quot;base_pixel&quot;L&quot;visualid&quot;I&quot;killid&quot;I}' type64='{_XStandardColormap=&quot;colormap&quot;Q&quot;red_max&quot;Q&quot;red_mult&quot;Q&quot;green_max&quot;Q&quot;green_mult&quot;Q&quot;blue_max&quot;Q&quot;blue_mult&quot;Q&quot;base_pixel&quot;Q&quot;visualid&quot;Q&quot;killid&quot;Q}'>
    <field name='colormap' declared_type='Colormap' type='L' type64='Q'/>
    <field name='red_max' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='red_mult' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='green_max' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='green_mult' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='blue_max' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='blue_mult' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='base_pixel' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='visualid' declared_type='VisualID' type='L' type64='Q'/>
    <field name='killid' declared_type='XID' type='L' type64='Q'/>
  </struct>
  <struct name='XTextProperty' type='{_XTextProperty=&quot;value&quot;*&quot;encoding&quot;I&quot;format&quot;i&quot;nitems&quot;L}' type64='{_XTextProperty=&quot;value&quot;*&quot;encoding&quot;Q&quot;format&quot;i&quot;nitems&quot;Q}'>
    <field name='value' declared_type='unsigned char*' type='*'/>
    <field name='encoding' declared_type='Atom' type='L' type64='Q'/>
    <field name='format' declared_type='int' type='i'/>
    <field name='nitems' declared_type='unsigned long' type='L' type64='Q'/>
  </struct>
  <struct name='XVirtualEvent' type='{_XVirtualEvent=&quot;type&quot;i&quot;serial&quot;L&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;event&quot;I&quot;root&quot;I&quot;subwindow&quot;I&quot;time&quot;I&quot;x&quot;i&quot;y&quot;i&quot;x_root&quot;i&quot;y_root&quot;i&quot;state&quot;I&quot;name&quot;*&quot;same_screen&quot;i}' type64='{_XVirtualEvent=&quot;type&quot;i&quot;serial&quot;Q&quot;send_event&quot;i&quot;display&quot;^{_XDisplay}&quot;event&quot;Q&quot;root&quot;Q&quot;subwindow&quot;Q&quot;time&quot;Q&quot;x&quot;i&quot;y&quot;i&quot;x_root&quot;i&quot;y_root&quot;i&quot;state&quot;I&quot;name&quot;*&quot;same_screen&quot;i}'>
    <field name='type' declared_type='int' type='i'/>
    <field name='serial' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='send_event' declared_type='int' type='i'/>
    <field name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <field name='event' declared_type='Window' type='L' type64='Q'/>
    <field name='root' declared_type='Window' type='L' type64='Q'/>
    <field name='subwindow' declared_type='Window' type='L' type64='Q'/>
    <field name='time' declared_type='Time' type='L' type64='Q'/>
    <field name='x' declared_type='int' type='i'/>
    <field name='y' declared_type='int' type='i'/>
    <field name='x_root' declared_type='int' type='i'/>
    <field name='y_root' declared_type='int' type='i'/>
    <field name='state' declared_type='unsigned int' type='I'/>
    <field name='name' declared_type='Tk_Uid' type='*'/>
    <field name='same_screen' declared_type='int' type='i'/>
  </struct>
  <struct name='XVisualInfo' type='{_XVisualInfo=&quot;visual&quot;^{?}&quot;visualid&quot;I&quot;screen&quot;i&quot;depth&quot;i&quot;class&quot;i&quot;red_mask&quot;L&quot;green_mask&quot;L&quot;blue_mask&quot;L&quot;colormap_size&quot;i&quot;bits_per_rgb&quot;i}' type64='{_XVisualInfo=&quot;visual&quot;^{?}&quot;visualid&quot;Q&quot;screen&quot;i&quot;depth&quot;i&quot;class&quot;i&quot;red_mask&quot;Q&quot;green_mask&quot;Q&quot;blue_mask&quot;Q&quot;colormap_size&quot;i&quot;bits_per_rgb&quot;i}'>
    <field name='visual' declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
    <field name='visualid' declared_type='VisualID' type='L' type64='Q'/>
    <field name='screen' declared_type='int' type='i'/>
    <field name='depth' declared_type='int' type='i'/>
    <field name='class' declared_type='int' type='i'/>
    <field name='red_mask' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='green_mask' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='blue_mask' declared_type='unsigned long' type='L' type64='Q'/>
    <field name='colormap_size' declared_type='int' type='i'/>
    <field name='bits_per_rgb' declared_type='int' type='i'/>
  </struct>
  <struct name='XWMHints' type='{_XWMHints=&quot;flags&quot;l&quot;input&quot;i&quot;initial_state&quot;i&quot;icon_pixmap&quot;I&quot;icon_window&quot;I&quot;icon_x&quot;i&quot;icon_y&quot;i&quot;icon_mask&quot;I&quot;window_group&quot;I}' type64='{_XWMHints=&quot;flags&quot;q&quot;input&quot;i&quot;initial_state&quot;i&quot;icon_pixmap&quot;Q&quot;icon_window&quot;Q&quot;icon_x&quot;i&quot;icon_y&quot;i&quot;icon_mask&quot;Q&quot;window_group&quot;Q}'>
    <field name='flags' declared_type='long' type='l' type64='q'/>
    <field name='input' declared_type='int' type='i'/>
    <field name='initial_state' declared_type='int' type='i'/>
    <field name='icon_pixmap' declared_type='Pixmap' type='L' type64='Q'/>
    <field name='icon_window' declared_type='Window' type='L' type64='Q'/>
    <field name='icon_x' declared_type='int' type='i'/>
    <field name='icon_y' declared_type='int' type='i'/>
    <field name='icon_mask' declared_type='Pixmap' type='L' type64='Q'/>
    <field name='window_group' declared_type='XID' type='L' type64='Q'/>
  </struct>
  <opaque name='Region' type='^{_XRegion=}'/>
  <opaque name='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
  <opaque name='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
  <opaque name='Tk_Canvas' type='^{Tk_Canvas_=}'/>
  <opaque name='Tk_Cursor' type='^{Tk_Cursor_=}'/>
  <opaque name='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
  <opaque name='Tk_Font' type='^{Tk_Font_=}'/>
  <opaque name='Tk_Image' type='^{Tk_Image__=}'/>
  <opaque name='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
  <opaque name='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
  <opaque name='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
  <opaque name='Tk_Style' type='^{Tk_Style_=}'/>
  <opaque name='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
  <opaque name='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
  <opaque name='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
  <opaque name='Tk_Window' type='^{Tk_Window_=}'/>
  <constant name='tkIntXlibStubsPtr' declared_type='TkIntXlibStubs*' type='^{TkIntXlibStubs=i^{TkIntXlibStubHooks}}'/>
  <constant name='tkPlatStubsPtr' declared_type='TkPlatStubs*' type='^{TkPlatStubs=i^{TkPlatStubHooks}}'/>
  <constant name='tkStubsPtr' declared_type='TkStubs*' type='^{TkStubs=i^{TkStubHooks}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
  <constant name='xBitReverseTable' declared_type='unsigned char*' type='[256C]'/>
  <string_constant name='TK_PATCH_LEVEL' value='8.4.7'/>
  <string_constant name='TK_VERSION' value='8.4'/>
  <enum name='ActivateMask' value='536870912'/>
  <enum name='ActivateNotify' value='36'/>
  <enum name='AllHints' value='127'/>
  <enum name='AllValues' value='15'/>
  <enum name='BitmapFileInvalid' value='2'/>
  <enum name='BitmapNoMemory' value='3'/>
  <enum name='BitmapOpenFailed' value='1'/>
  <enum name='BitmapSuccess' value='0'/>
  <enum name='DeactivateNotify' value='37'/>
  <enum name='DontCareState' value='0'/>
  <enum name='HeightValue' value='8'/>
  <enum name='IconMaskHint' value='32'/>
  <enum name='IconPixmapHint' value='4'/>
  <enum name='IconPositionHint' value='16'/>
  <enum name='IconWindowHint' value='8'/>
  <enum name='IconicState' value='3'/>
  <enum name='InactiveState' value='4'/>
  <enum name='InputHint' value='1'/>
  <enum name='MouseWheelEvent' value='38'/>
  <enum name='MouseWheelMask' value='268435456'/>
  <enum name='NoValue' value='0'/>
  <enum name='NormalState' value='1'/>
  <enum name='PAllHints' value='252'/>
  <enum name='PAspect' value='128'/>
  <enum name='PBaseSize' value='256'/>
  <enum name='PMaxSize' value='32'/>
  <enum name='PMinSize' value='16'/>
  <enum name='PPosition' value='4'/>
  <enum name='PResizeInc' value='64'/>
  <enum name='PSize' value='8'/>
  <enum name='PWinGravity' value='512'/>
  <enum name='RectangleIn' value='1'/>
  <enum name='RectangleOut' value='0'/>
  <enum name='RectanglePart' value='2'/>
  <enum name='ReleaseByFreeingColormap' value='1'/>
  <enum name='StateHint' value='2'/>
  <enum name='TK_3D_DARK_GC' value='3'/>
  <enum name='TK_3D_FLAT_GC' value='1'/>
  <enum name='TK_3D_LIGHT_GC' value='2'/>
  <enum name='TK_ALL_EVENTS' value='-3'/>
  <enum name='TK_ALREADY_DEAD' value='4'/>
  <enum name='TK_ANCHOR_CENTER' value='8'/>
  <enum name='TK_ANCHOR_E' value='2'/>
  <enum name='TK_ANCHOR_N' value='0'/>
  <enum name='TK_ANCHOR_NE' value='1'/>
  <enum name='TK_ANCHOR_NW' value='7'/>
  <enum name='TK_ANCHOR_S' value='4'/>
  <enum name='TK_ANCHOR_SE' value='3'/>
  <enum name='TK_ANCHOR_SW' value='5'/>
  <enum name='TK_ANCHOR_W' value='6'/>
  <enum name='TK_ANONYMOUS_WINDOW' value='16384'/>
  <enum name='TK_ARGV_CONSTANT' value='15'/>
  <enum name='TK_ARGV_CONST_OPTION' value='24'/>
  <enum name='TK_ARGV_DONT_SKIP_FIRST_ARG' value='8'/>
  <enum name='TK_ARGV_END' value='27'/>
  <enum name='TK_ARGV_FLOAT' value='20'/>
  <enum name='TK_ARGV_FUNC' value='21'/>
  <enum name='TK_ARGV_GENFUNC' value='22'/>
  <enum name='TK_ARGV_HELP' value='23'/>
  <enum name='TK_ARGV_INT' value='16'/>
  <enum name='TK_ARGV_NO_ABBREV' value='4'/>
  <enum name='TK_ARGV_NO_DEFAULTS' value='1'/>
  <enum name='TK_ARGV_NO_LEFTOVERS' value='2'/>
  <enum name='TK_ARGV_OPTION_NAME_VALUE' value='26'/>
  <enum name='TK_ARGV_OPTION_VALUE' value='25'/>
  <enum name='TK_ARGV_REST' value='19'/>
  <enum name='TK_ARGV_STRING' value='17'/>
  <enum name='TK_ARGV_UID' value='18'/>
  <enum name='TK_AT_LEAST_ONE' value='2'/>
  <enum name='TK_BOTH_HALVES' value='1024'/>
  <enum name='TK_CHECKED_IC' value='32'/>
  <enum name='TK_CONFIG_ACTIVE_CURSOR' value='11'/>
  <enum name='TK_CONFIG_ANCHOR' value='13'/>
  <enum name='TK_CONFIG_ARGV_ONLY' value='1'/>
  <enum name='TK_CONFIG_BITMAP' value='7'/>
  <enum name='TK_CONFIG_BOOLEAN' value='0'/>
  <enum name='TK_CONFIG_BORDER' value='8'/>
  <enum name='TK_CONFIG_CAP_STYLE' value='15'/>
  <enum name='TK_CONFIG_COLOR' value='5'/>
  <enum name='TK_CONFIG_COLOR_ONLY' value='2'/>
  <enum name='TK_CONFIG_CURSOR' value='10'/>
  <enum name='TK_CONFIG_CUSTOM' value='20'/>
  <enum name='TK_CONFIG_DONT_SET_DEFAULT' value='8'/>
  <enum name='TK_CONFIG_DOUBLE' value='2'/>
  <enum name='TK_CONFIG_END' value='21'/>
  <enum name='TK_CONFIG_FONT' value='6'/>
  <enum name='TK_CONFIG_INT' value='1'/>
  <enum name='TK_CONFIG_JOIN_STYLE' value='16'/>
  <enum name='TK_CONFIG_JUSTIFY' value='12'/>
  <enum name='TK_CONFIG_MM' value='18'/>
  <enum name='TK_CONFIG_MONO_ONLY' value='4'/>
  <enum name='TK_CONFIG_NULL_OK' value='1'/>
  <enum name='TK_CONFIG_OBJS' value='128'/>
  <enum name='TK_CONFIG_OPTION_SPECIFIED' value='16'/>
  <enum name='TK_CONFIG_PIXELS' value='17'/>
  <enum name='TK_CONFIG_RELIEF' value='9'/>
  <enum name='TK_CONFIG_STRING' value='3'/>
  <enum name='TK_CONFIG_SYNONYM' value='14'/>
  <enum name='TK_CONFIG_UID' value='4'/>
  <enum name='TK_CONFIG_USER_BIT' value='256'/>
  <enum name='TK_CONFIG_WINDOW' value='19'/>
  <enum name='TK_CONTAINER' value='512'/>
  <enum name='TK_DEFER_EVENT' value='0'/>
  <enum name='TK_DEFER_MODAL' value='2048'/>
  <enum name='TK_DISCARD_EVENT' value='2'/>
  <enum name='TK_DONT_DESTROY_WINDOW' value='64'/>
  <enum name='TK_DONT_WAIT' value='2'/>
  <enum name='TK_ELEMENT_STATE_ACTIVE' value='1'/>
  <enum name='TK_ELEMENT_STATE_DISABLED' value='2'/>
  <enum name='TK_ELEMENT_STATE_FOCUS' value='4'/>
  <enum name='TK_ELEMENT_STATE_PRESSED' value='8'/>
  <enum name='TK_EMBEDDED' value='256'/>
  <enum name='TK_EXCEPTION' value='8'/>
  <enum name='TK_FILE_EVENTS' value='8'/>
  <enum name='TK_GRAB_FLAG' value='16'/>
  <enum name='TK_HAS_WRAPPER' value='32768'/>
  <enum name='TK_IDLE_EVENTS' value='32'/>
  <enum name='TK_IGNORE_NEWLINES' value='16'/>
  <enum name='TK_IGNORE_TABS' value='8'/>
  <enum name='TK_INTERACTIVE_PRIO' value='80'/>
  <enum name='TK_ITEM_DONT_REDRAW' value='2'/>
  <enum name='TK_ITEM_STATE_DEPENDANT' value='1'/>
  <enum name='TK_JUSTIFY_CENTER' value='2'/>
  <enum name='TK_JUSTIFY_LEFT' value='0'/>
  <enum name='TK_JUSTIFY_RIGHT' value='1'/>
  <enum name='TK_LASTEVENT' value='39'/>
  <enum name='TK_MAJOR_VERSION' value='8'/>
  <enum name='TK_MAPPED' value='1'/>
  <enum name='TK_MAX_PRIO' value='100'/>
  <enum name='TK_MINOR_VERSION' value='4'/>
  <enum name='TK_NEED_CONFIG_NOTIFY' value='8'/>
  <enum name='TK_NOTIFY_SHARE' value='20'/>
  <enum name='TK_NUM_SAVED_OPTIONS' value='20'/>
  <enum name='TK_OFFSET_BOTTOM' value='128'/>
  <enum name='TK_OFFSET_CENTER' value='8'/>
  <enum name='TK_OFFSET_INDEX' value='1'/>
  <enum name='TK_OFFSET_LEFT' value='4'/>
  <enum name='TK_OFFSET_MIDDLE' value='64'/>
  <enum name='TK_OFFSET_RELATIVE' value='2'/>
  <enum name='TK_OFFSET_RIGHT' value='16'/>
  <enum name='TK_OFFSET_TOP' value='32'/>
  <enum name='TK_OPTION_ANCHOR' value='12'/>
  <enum name='TK_OPTION_BITMAP' value='7'/>
  <enum name='TK_OPTION_BOOLEAN' value='0'/>
  <enum name='TK_OPTION_BORDER' value='8'/>
  <enum name='TK_OPTION_COLOR' value='5'/>
  <enum name='TK_OPTION_CURSOR' value='10'/>
  <enum name='TK_OPTION_CUSTOM' value='17'/>
  <enum name='TK_OPTION_DONT_SET_DEFAULT' value='8'/>
  <enum name='TK_OPTION_DOUBLE' value='2'/>
  <enum name='TK_OPTION_END' value='16'/>
  <enum name='TK_OPTION_FONT' value='6'/>
  <enum name='TK_OPTION_INT' value='1'/>
  <enum name='TK_OPTION_JUSTIFY' value='11'/>
  <enum name='TK_OPTION_NULL_OK' value='1'/>
  <enum name='TK_OPTION_PIXELS' value='14'/>
  <enum name='TK_OPTION_RELIEF' value='9'/>
  <enum name='TK_OPTION_STRING' value='3'/>
  <enum name='TK_OPTION_STRING_TABLE' value='4'/>
  <enum name='TK_OPTION_STYLE' value='18'/>
  <enum name='TK_OPTION_SYNONYM' value='13'/>
  <enum name='TK_OPTION_WINDOW' value='15'/>
  <enum name='TK_PARTIAL_OK' value='4'/>
  <enum name='TK_PHOTO_COMPOSITE_OVERLAY' value='0'/>
  <enum name='TK_PHOTO_COMPOSITE_SET' value='1'/>
  <enum name='TK_PROCESS_EVENT' value='1'/>
  <enum name='TK_PROP_PROPCHANGE' value='262144'/>
  <enum name='TK_READABLE' value='2'/>
  <enum name='TK_RELEASE_LEVEL' value='2'/>
  <enum name='TK_RELEASE_SERIAL' value='7'/>
  <enum name='TK_RELIEF_FLAT' value='0'/>
  <enum name='TK_RELIEF_GROOVE' value='1'/>
  <enum name='TK_RELIEF_NULL' value='-1'/>
  <enum name='TK_RELIEF_RAISED' value='2'/>
  <enum name='TK_RELIEF_RIDGE' value='3'/>
  <enum name='TK_RELIEF_SOLID' value='4'/>
  <enum name='TK_RELIEF_SUNKEN' value='5'/>
  <enum name='TK_REPARENTED' value='8192'/>
  <enum name='TK_SCROLL_ERROR' value='4'/>
  <enum name='TK_SCROLL_MOVETO' value='1'/>
  <enum name='TK_SCROLL_PAGES' value='2'/>
  <enum name='TK_SCROLL_UNITS' value='3'/>
  <enum name='TK_STARTUP_FILE_PRIO' value='40'/>
  <enum name='TK_STATE_ACTIVE' value='0'/>
  <enum name='TK_STATE_DISABLED' value='1'/>
  <enum name='TK_STATE_HIDDEN' value='3'/>
  <enum name='TK_STATE_NORMAL' value='2'/>
  <enum name='TK_STATE_NULL' value='-1'/>
  <enum name='TK_STYLE_VERSION' value='1'/>
  <enum name='TK_STYLE_VERSION_1' value='1'/>
  <enum name='TK_TAG_SPACE' value='3'/>
  <enum name='TK_TIMER_EVENTS' value='16'/>
  <enum name='TK_TOP_HIERARCHY' value='131072'/>
  <enum name='TK_TOP_LEVEL' value='2'/>
  <enum name='TK_USER_DEFAULT_PRIO' value='60'/>
  <enum name='TK_WHOLE_WORDS' value='1'/>
  <enum name='TK_WIDGET_DEFAULT_PRIO' value='20'/>
  <enum name='TK_WINDOW_EVENTS' value='4'/>
  <enum name='TK_WIN_MANAGED' value='65536'/>
  <enum name='TK_WM_COLORMAP_WINDOW' value='128'/>
  <enum name='TK_WRAPPER' value='4096'/>
  <enum name='TK_WRITABLE' value='4'/>
  <enum name='TK_X_EVENTS' value='4'/>
  <enum name='USPosition' value='1'/>
  <enum name='USSize' value='2'/>
  <enum name='VirtualEvent' value='35'/>
  <enum name='VirtualEventMask' value='1073741824'/>
  <enum name='VisualAllMask' value='511'/>
  <enum name='VisualBitsPerRGBMask' value='256'/>
  <enum name='VisualBlueMaskMask' value='64'/>
  <enum name='VisualClassMask' value='8'/>
  <enum name='VisualColormapSizeMask' value='128'/>
  <enum name='VisualDepthMask' value='4'/>
  <enum name='VisualGreenMaskMask' value='32'/>
  <enum name='VisualIDMask' value='1'/>
  <enum name='VisualNoMask' value='0'/>
  <enum name='VisualRedMaskMask' value='16'/>
  <enum name='VisualScreenMask' value='2'/>
  <enum name='WidthValue' value='4'/>
  <enum name='WindowGroupHint' value='64'/>
  <enum name='WithdrawnState' value='0'/>
  <enum name='XATOM_H' value='1'/>
  <enum name='XA_ARC' value='3'/>
  <enum name='XA_ATOM' value='4'/>
  <enum name='XA_BITMAP' value='5'/>
  <enum name='XA_CAP_HEIGHT' value='66'/>
  <enum name='XA_CARDINAL' value='6'/>
  <enum name='XA_COLORMAP' value='7'/>
  <enum name='XA_COPYRIGHT' value='61'/>
  <enum name='XA_CURSOR' value='8'/>
  <enum name='XA_CUT_BUFFER0' value='9'/>
  <enum name='XA_CUT_BUFFER1' value='10'/>
  <enum name='XA_CUT_BUFFER2' value='11'/>
  <enum name='XA_CUT_BUFFER3' value='12'/>
  <enum name='XA_CUT_BUFFER4' value='13'/>
  <enum name='XA_CUT_BUFFER5' value='14'/>
  <enum name='XA_CUT_BUFFER6' value='15'/>
  <enum name='XA_CUT_BUFFER7' value='16'/>
  <enum name='XA_DRAWABLE' value='17'/>
  <enum name='XA_END_SPACE' value='46'/>
  <enum name='XA_FAMILY_NAME' value='64'/>
  <enum name='XA_FONT' value='18'/>
  <enum name='XA_FONT_NAME' value='63'/>
  <enum name='XA_FULL_NAME' value='65'/>
  <enum name='XA_INTEGER' value='19'/>
  <enum name='XA_ITALIC_ANGLE' value='55'/>
  <enum name='XA_LAST_PREDEFINED' value='68'/>
  <enum name='XA_MAX_SPACE' value='45'/>
  <enum name='XA_MIN_SPACE' value='43'/>
  <enum name='XA_NORM_SPACE' value='44'/>
  <enum name='XA_NOTICE' value='62'/>
  <enum name='XA_PIXMAP' value='20'/>
  <enum name='XA_POINT' value='21'/>
  <enum name='XA_POINT_SIZE' value='59'/>
  <enum name='XA_PRIMARY' value='1'/>
  <enum name='XA_QUAD_WIDTH' value='57'/>
  <enum name='XA_RECTANGLE' value='22'/>
  <enum name='XA_RESOLUTION' value='60'/>
  <enum name='XA_RESOURCE_MANAGER' value='23'/>
  <enum name='XA_RGB_BEST_MAP' value='25'/>
  <enum name='XA_RGB_BLUE_MAP' value='26'/>
  <enum name='XA_RGB_COLOR_MAP' value='24'/>
  <enum name='XA_RGB_DEFAULT_MAP' value='27'/>
  <enum name='XA_RGB_GRAY_MAP' value='28'/>
  <enum name='XA_RGB_GREEN_MAP' value='29'/>
  <enum name='XA_RGB_RED_MAP' value='30'/>
  <enum name='XA_SECONDARY' value='2'/>
  <enum name='XA_STRIKEOUT_ASCENT' value='53'/>
  <enum name='XA_STRIKEOUT_DESCENT' value='54'/>
  <enum name='XA_STRING' value='31'/>
  <enum name='XA_SUBSCRIPT_X' value='49'/>
  <enum name='XA_SUBSCRIPT_Y' value='50'/>
  <enum name='XA_SUPERSCRIPT_X' value='47'/>
  <enum name='XA_SUPERSCRIPT_Y' value='48'/>
  <enum name='XA_UNDERLINE_POSITION' value='51'/>
  <enum name='XA_UNDERLINE_THICKNESS' value='52'/>
  <enum name='XA_VISUALID' value='32'/>
  <enum name='XA_WEIGHT' value='58'/>
  <enum name='XA_WINDOW' value='33'/>
  <enum name='XA_WM_CLASS' value='67'/>
  <enum name='XA_WM_CLIENT_MACHINE' value='36'/>
  <enum name='XA_WM_COMMAND' value='34'/>
  <enum name='XA_WM_HINTS' value='35'/>
  <enum name='XA_WM_ICON_NAME' value='37'/>
  <enum name='XA_WM_ICON_SIZE' value='38'/>
  <enum name='XA_WM_NAME' value='39'/>
  <enum name='XA_WM_NORMAL_HINTS' value='40'/>
  <enum name='XA_WM_SIZE_HINTS' value='41'/>
  <enum name='XA_WM_TRANSIENT_FOR' value='68'/>
  <enum name='XA_WM_ZOOM_HINTS' value='42'/>
  <enum name='XA_X_HEIGHT' value='56'/>
  <enum name='XCNOENT' value='2'/>
  <enum name='XCNOMEM' value='1'/>
  <enum name='XCSUCCESS' value='0'/>
  <enum name='XC_X_cursor' value='0'/>
  <enum name='XC_arrow' value='2'/>
  <enum name='XC_based_arrow_down' value='4'/>
  <enum name='XC_based_arrow_up' value='6'/>
  <enum name='XC_boat' value='8'/>
  <enum name='XC_bogosity' value='10'/>
  <enum name='XC_bottom_left_corner' value='12'/>
  <enum name='XC_bottom_right_corner' value='14'/>
  <enum name='XC_bottom_side' value='16'/>
  <enum name='XC_bottom_tee' value='18'/>
  <enum name='XC_box_spiral' value='20'/>
  <enum name='XC_center_ptr' value='22'/>
  <enum name='XC_circle' value='24'/>
  <enum name='XC_clock' value='26'/>
  <enum name='XC_coffee_mug' value='28'/>
  <enum name='XC_cross' value='30'/>
  <enum name='XC_cross_reverse' value='32'/>
  <enum name='XC_crosshair' value='34'/>
  <enum name='XC_diamond_cross' value='36'/>
  <enum name='XC_dot' value='38'/>
  <enum name='XC_dotbox' value='40'/>
  <enum name='XC_double_arrow' value='42'/>
  <enum name='XC_draft_large' value='44'/>
  <enum name='XC_draft_small' value='46'/>
  <enum name='XC_draped_box' value='48'/>
  <enum name='XC_exchange' value='50'/>
  <enum name='XC_fleur' value='52'/>
  <enum name='XC_gobbler' value='54'/>
  <enum name='XC_gumby' value='56'/>
  <enum name='XC_hand1' value='58'/>
  <enum name='XC_hand2' value='60'/>
  <enum name='XC_heart' value='62'/>
  <enum name='XC_icon' value='64'/>
  <enum name='XC_iron_cross' value='66'/>
  <enum name='XC_left_ptr' value='68'/>
  <enum name='XC_left_side' value='70'/>
  <enum name='XC_left_tee' value='72'/>
  <enum name='XC_leftbutton' value='74'/>
  <enum name='XC_ll_angle' value='76'/>
  <enum name='XC_lr_angle' value='78'/>
  <enum name='XC_man' value='80'/>
  <enum name='XC_middlebutton' value='82'/>
  <enum name='XC_mouse' value='84'/>
  <enum name='XC_num_glyphs' value='154'/>
  <enum name='XC_pencil' value='86'/>
  <enum name='XC_pirate' value='88'/>
  <enum name='XC_plus' value='90'/>
  <enum name='XC_question_arrow' value='92'/>
  <enum name='XC_right_ptr' value='94'/>
  <enum name='XC_right_side' value='96'/>
  <enum name='XC_right_tee' value='98'/>
  <enum name='XC_rightbutton' value='100'/>
  <enum name='XC_rtl_logo' value='102'/>
  <enum name='XC_sailboat' value='104'/>
  <enum name='XC_sb_down_arrow' value='106'/>
  <enum name='XC_sb_h_double_arrow' value='108'/>
  <enum name='XC_sb_left_arrow' value='110'/>
  <enum name='XC_sb_right_arrow' value='112'/>
  <enum name='XC_sb_up_arrow' value='114'/>
  <enum name='XC_sb_v_double_arrow' value='116'/>
  <enum name='XC_shuttle' value='118'/>
  <enum name='XC_sizing' value='120'/>
  <enum name='XC_spider' value='122'/>
  <enum name='XC_spraycan' value='124'/>
  <enum name='XC_star' value='126'/>
  <enum name='XC_target' value='128'/>
  <enum name='XC_tcross' value='130'/>
  <enum name='XC_top_left_arrow' value='132'/>
  <enum name='XC_top_left_corner' value='134'/>
  <enum name='XC_top_right_corner' value='136'/>
  <enum name='XC_top_side' value='138'/>
  <enum name='XC_top_tee' value='140'/>
  <enum name='XC_trek' value='142'/>
  <enum name='XC_ul_angle' value='144'/>
  <enum name='XC_umbrella' value='146'/>
  <enum name='XC_ur_angle' value='148'/>
  <enum name='XC_watch' value='150'/>
  <enum name='XC_xterm' value='152'/>
  <enum name='XCompoundTextStyle' value='1'/>
  <enum name='XConverterNotFound' value='-3'/>
  <enum name='XK_0' value='48'/>
  <enum name='XK_1' value='49'/>
  <enum name='XK_2' value='50'/>
  <enum name='XK_3' value='51'/>
  <enum name='XK_4' value='52'/>
  <enum name='XK_5' value='53'/>
  <enum name='XK_6' value='54'/>
  <enum name='XK_7' value='55'/>
  <enum name='XK_8' value='56'/>
  <enum name='XK_9' value='57'/>
  <enum name='XK_A' value='65'/>
  <enum name='XK_AE' value='198'/>
  <enum name='XK_Aacute' value='193'/>
  <enum name='XK_Abreve' value='451'/>
  <enum name='XK_Acircumflex' value='194'/>
  <enum name='XK_Adiaeresis' value='196'/>
  <enum name='XK_Agrave' value='192'/>
  <enum name='XK_Alt_L' value='65513'/>
  <enum name='XK_Alt_R' value='65514'/>
  <enum name='XK_Amacron' value='960'/>
  <enum name='XK_Aogonek' value='417'/>
  <enum name='XK_App' value='65373'/>
  <enum name='XK_Aring' value='197'/>
  <enum name='XK_Atilde' value='195'/>
  <enum name='XK_B' value='66'/>
  <enum name='XK_BackSpace' value='65288'/>
  <enum name='XK_Begin' value='65368'/>
  <enum name='XK_Break' value='65387'/>
  <enum name='XK_C' value='67'/>
  <enum name='XK_Cabovedot' value='709'/>
  <enum name='XK_Cacute' value='454'/>
  <enum name='XK_Cancel' value='65385'/>
  <enum name='XK_Caps_Lock' value='65509'/>
  <enum name='XK_Ccaron' value='456'/>
  <enum name='XK_Ccedilla' value='199'/>
  <enum name='XK_Ccircumflex' value='710'/>
  <enum name='XK_Clear' value='65291'/>
  <enum name='XK_Control_L' value='65507'/>
  <enum name='XK_Control_R' value='65508'/>
  <enum name='XK_D' value='68'/>
  <enum name='XK_Dcaron' value='463'/>
  <enum name='XK_Delete' value='65535'/>
  <enum name='XK_Down' value='65364'/>
  <enum name='XK_Dstroke' value='464'/>
  <enum name='XK_E' value='69'/>
  <enum name='XK_ENG' value='957'/>
  <enum name='XK_ETH' value='208'/>
  <enum name='XK_Eabovedot' value='972'/>
  <enum name='XK_Eacute' value='201'/>
  <enum name='XK_Ecaron' value='460'/>
  <enum name='XK_Ecircumflex' value='202'/>
  <enum name='XK_Ediaeresis' value='203'/>
  <enum name='XK_Egrave' value='200'/>
  <enum name='XK_Eisu_Shift' value='65327'/>
  <enum name='XK_Eisu_toggle' value='65328'/>
  <enum name='XK_Emacron' value='938'/>
  <enum name='XK_End' value='65367'/>
  <enum name='XK_Eogonek' value='458'/>
  <enum name='XK_Escape' value='65307'/>
  <enum name='XK_Eth' value='208'/>
  <enum name='XK_Execute' value='65378'/>
  <enum name='XK_F' value='70'/>
  <enum name='XK_F1' value='65470'/>
  <enum name='XK_F10' value='65479'/>
  <enum name='XK_F11' value='65480'/>
  <enum name='XK_F12' value='65481'/>
  <enum name='XK_F13' value='65482'/>
  <enum name='XK_F14' value='65483'/>
  <enum name='XK_F15' value='65484'/>
  <enum name='XK_F16' value='65485'/>
  <enum name='XK_F17' value='65486'/>
  <enum name='XK_F18' value='65487'/>
  <enum name='XK_F19' value='65488'/>
  <enum name='XK_F2' value='65471'/>
  <enum name='XK_F20' value='65489'/>
  <enum name='XK_F21' value='65490'/>
  <enum name='XK_F22' value='65491'/>
  <enum name='XK_F23' value='65492'/>
  <enum name='XK_F24' value='65493'/>
  <enum name='XK_F25' value='65494'/>
  <enum name='XK_F26' value='65495'/>
  <enum name='XK_F27' value='65496'/>
  <enum name='XK_F28' value='65497'/>
  <enum name='XK_F29' value='65498'/>
  <enum name='XK_F3' value='65472'/>
  <enum name='XK_F30' value='65499'/>
  <enum name='XK_F31' value='65500'/>
  <enum name='XK_F32' value='65501'/>
  <enum name='XK_F33' value='65502'/>
  <enum name='XK_F34' value='65503'/>
  <enum name='XK_F35' value='65504'/>
  <enum name='XK_F4' value='65473'/>
  <enum name='XK_F5' value='65474'/>
  <enum name='XK_F6' value='65475'/>
  <enum name='XK_F7' value='65476'/>
  <enum name='XK_F8' value='65477'/>
  <enum name='XK_F9' value='65478'/>
  <enum name='XK_Find' value='65384'/>
  <enum name='XK_G' value='71'/>
  <enum name='XK_Gabovedot' value='725'/>
  <enum name='XK_Gbreve' value='683'/>
  <enum name='XK_Gcedilla' value='939'/>
  <enum name='XK_Gcircumflex' value='728'/>
  <enum name='XK_Greek_ALPHA' value='1985'/>
  <enum name='XK_Greek_ALPHAaccent' value='1953'/>
  <enum name='XK_Greek_BETA' value='1986'/>
  <enum name='XK_Greek_CHI' value='2007'/>
  <enum name='XK_Greek_DELTA' value='1988'/>
  <enum name='XK_Greek_EPSILON' value='1989'/>
  <enum name='XK_Greek_EPSILONaccent' value='1954'/>
  <enum name='XK_Greek_ETA' value='1991'/>
  <enum name='XK_Greek_ETAaccent' value='1955'/>
  <enum name='XK_Greek_GAMMA' value='1987'/>
  <enum name='XK_Greek_IOTA' value='1993'/>
  <enum name='XK_Greek_IOTAaccent' value='1956'/>
  <enum name='XK_Greek_IOTAdiaeresis' value='1957'/>
  <enum name='XK_Greek_KAPPA' value='1994'/>
  <enum name='XK_Greek_LAMBDA' value='1995'/>
  <enum name='XK_Greek_LAMDA' value='1995'/>
  <enum name='XK_Greek_MU' value='1996'/>
  <enum name='XK_Greek_NU' value='1997'/>
  <enum name='XK_Greek_OMEGA' value='2009'/>
  <enum name='XK_Greek_OMEGAaccent' value='1963'/>
  <enum name='XK_Greek_OMICRON' value='1999'/>
  <enum name='XK_Greek_OMICRONaccent' value='1959'/>
  <enum name='XK_Greek_PHI' value='2006'/>
  <enum name='XK_Greek_PI' value='2000'/>
  <enum name='XK_Greek_PSI' value='2008'/>
  <enum name='XK_Greek_RHO' value='2001'/>
  <enum name='XK_Greek_SIGMA' value='2002'/>
  <enum name='XK_Greek_TAU' value='2004'/>
  <enum name='XK_Greek_THETA' value='1992'/>
  <enum name='XK_Greek_UPSILON' value='2005'/>
  <enum name='XK_Greek_UPSILONaccent' value='1960'/>
  <enum name='XK_Greek_UPSILONdieresis' value='1961'/>
  <enum name='XK_Greek_XI' value='1998'/>
  <enum name='XK_Greek_ZETA' value='1990'/>
  <enum name='XK_Greek_accentdieresis' value='1966'/>
  <enum name='XK_Greek_alpha' value='2017'/>
  <enum name='XK_Greek_alphaaccent' value='1969'/>
  <enum name='XK_Greek_beta' value='2018'/>
  <enum name='XK_Greek_chi' value='2039'/>
  <enum name='XK_Greek_delta' value='2020'/>
  <enum name='XK_Greek_epsilon' value='2021'/>
  <enum name='XK_Greek_epsilonaccent' value='1970'/>
  <enum name='XK_Greek_eta' value='2023'/>
  <enum name='XK_Greek_etaaccent' value='1971'/>
  <enum name='XK_Greek_finalsmallsigma' value='2035'/>
  <enum name='XK_Greek_gamma' value='2019'/>
  <enum name='XK_Greek_horizbar' value='1967'/>
  <enum name='XK_Greek_iota' value='2025'/>
  <enum name='XK_Greek_iotaaccent' value='1972'/>
  <enum name='XK_Greek_iotaaccentdieresis' value='1974'/>
  <enum name='XK_Greek_iotadieresis' value='1973'/>
  <enum name='XK_Greek_kappa' value='2026'/>
  <enum name='XK_Greek_lambda' value='2027'/>
  <enum name='XK_Greek_lamda' value='2027'/>
  <enum name='XK_Greek_mu' value='2028'/>
  <enum name='XK_Greek_nu' value='2029'/>
  <enum name='XK_Greek_omega' value='2041'/>
  <enum name='XK_Greek_omegaaccent' value='1979'/>
  <enum name='XK_Greek_omicron' value='2031'/>
  <enum name='XK_Greek_omicronaccent' value='1975'/>
  <enum name='XK_Greek_phi' value='2038'/>
  <enum name='XK_Greek_pi' value='2032'/>
  <enum name='XK_Greek_psi' value='2040'/>
  <enum name='XK_Greek_rho' value='2033'/>
  <enum name='XK_Greek_sigma' value='2034'/>
  <enum name='XK_Greek_switch' value='65406'/>
  <enum name='XK_Greek_tau' value='2036'/>
  <enum name='XK_Greek_theta' value='2024'/>
  <enum name='XK_Greek_upsilon' value='2037'/>
  <enum name='XK_Greek_upsilonaccent' value='1976'/>
  <enum name='XK_Greek_upsilonaccentdieresis' value='1978'/>
  <enum name='XK_Greek_upsilondieresis' value='1977'/>
  <enum name='XK_Greek_xi' value='2030'/>
  <enum name='XK_Greek_zeta' value='2022'/>
  <enum name='XK_H' value='72'/>
  <enum name='XK_Hankaku' value='65321'/>
  <enum name='XK_Hcircumflex' value='678'/>
  <enum name='XK_Help' value='65386'/>
  <enum name='XK_Henkan' value='65315'/>
  <enum name='XK_Henkan_Mode' value='65315'/>
  <enum name='XK_Hiragana' value='65317'/>
  <enum name='XK_Hiragana_Katakana' value='65319'/>
  <enum name='XK_Home' value='65360'/>
  <enum name='XK_Hstroke' value='673'/>
  <enum name='XK_Hyper_L' value='65517'/>
  <enum name='XK_Hyper_R' value='65518'/>
  <enum name='XK_I' value='73'/>
  <enum name='XK_Iabovedot' value='681'/>
  <enum name='XK_Iacute' value='205'/>
  <enum name='XK_Icircumflex' value='206'/>
  <enum name='XK_Idiaeresis' value='207'/>
  <enum name='XK_Igrave' value='204'/>
  <enum name='XK_Imacron' value='975'/>
  <enum name='XK_Insert' value='65379'/>
  <enum name='XK_Iogonek' value='967'/>
  <enum name='XK_Itilde' value='933'/>
  <enum name='XK_J' value='74'/>
  <enum name='XK_Jcircumflex' value='684'/>
  <enum name='XK_K' value='75'/>
  <enum name='XK_KP_0' value='65456'/>
  <enum name='XK_KP_1' value='65457'/>
  <enum name='XK_KP_2' value='65458'/>
  <enum name='XK_KP_3' value='65459'/>
  <enum name='XK_KP_4' value='65460'/>
  <enum name='XK_KP_5' value='65461'/>
  <enum name='XK_KP_6' value='65462'/>
  <enum name='XK_KP_7' value='65463'/>
  <enum name='XK_KP_8' value='65464'/>
  <enum name='XK_KP_9' value='65465'/>
  <enum name='XK_KP_Add' value='65451'/>
  <enum name='XK_KP_Begin' value='65437'/>
  <enum name='XK_KP_Decimal' value='65454'/>
  <enum name='XK_KP_Delete' value='65439'/>
  <enum name='XK_KP_Divide' value='65455'/>
  <enum name='XK_KP_Down' value='65433'/>
  <enum name='XK_KP_End' value='65436'/>
  <enum name='XK_KP_Enter' value='65421'/>
  <enum name='XK_KP_Equal' value='65469'/>
  <enum name='XK_KP_F1' value='65425'/>
  <enum name='XK_KP_F2' value='65426'/>
  <enum name='XK_KP_F3' value='65427'/>
  <enum name='XK_KP_F4' value='65428'/>
  <enum name='XK_KP_Home' value='65429'/>
  <enum name='XK_KP_Insert' value='65438'/>
  <enum name='XK_KP_Left' value='65430'/>
  <enum name='XK_KP_Multiply' value='65450'/>
  <enum name='XK_KP_Next' value='65435'/>
  <enum name='XK_KP_Page_Down' value='65435'/>
  <enum name='XK_KP_Page_Up' value='65434'/>
  <enum name='XK_KP_Prior' value='65434'/>
  <enum name='XK_KP_Right' value='65432'/>
  <enum name='XK_KP_Separator' value='65452'/>
  <enum name='XK_KP_Space' value='65408'/>
  <enum name='XK_KP_Subtract' value='65453'/>
  <enum name='XK_KP_Tab' value='65417'/>
  <enum name='XK_KP_Up' value='65431'/>
  <enum name='XK_Kana_Lock' value='65325'/>
  <enum name='XK_Kana_Shift' value='65326'/>
  <enum name='XK_Kanji' value='65313'/>
  <enum name='XK_Katakana' value='65318'/>
  <enum name='XK_Kcedilla' value='979'/>
  <enum name='XK_L' value='76'/>
  <enum name='XK_L1' value='65480'/>
  <enum name='XK_L10' value='65489'/>
  <enum name='XK_L2' value='65481'/>
  <enum name='XK_L3' value='65482'/>
  <enum name='XK_L4' value='65483'/>
  <enum name='XK_L5' value='65484'/>
  <enum name='XK_L6' value='65485'/>
  <enum name='XK_L7' value='65486'/>
  <enum name='XK_L8' value='65487'/>
  <enum name='XK_L9' value='65488'/>
  <enum name='XK_Lacute' value='453'/>
  <enum name='XK_Lcaron' value='421'/>
  <enum name='XK_Lcedilla' value='934'/>
  <enum name='XK_Left' value='65361'/>
  <enum name='XK_Linefeed' value='65290'/>
  <enum name='XK_Lstroke' value='419'/>
  <enum name='XK_M' value='77'/>
  <enum name='XK_Massyo' value='65324'/>
  <enum name='XK_Menu' value='65383'/>
  <enum name='XK_Meta_L' value='65511'/>
  <enum name='XK_Meta_R' value='65512'/>
  <enum name='XK_Mode_switch' value='65406'/>
  <enum name='XK_Muhenkan' value='65314'/>
  <enum name='XK_Multi_key' value='65312'/>
  <enum name='XK_N' value='78'/>
  <enum name='XK_Nacute' value='465'/>
  <enum name='XK_Ncaron' value='466'/>
  <enum name='XK_Ncedilla' value='977'/>
  <enum name='XK_Next' value='65366'/>
  <enum name='XK_Ntilde' value='209'/>
  <enum name='XK_Num_Lock' value='65407'/>
  <enum name='XK_O' value='79'/>
  <enum name='XK_Oacute' value='211'/>
  <enum name='XK_Ocircumflex' value='212'/>
  <enum name='XK_Odiaeresis' value='214'/>
  <enum name='XK_Odoubleacute' value='469'/>
  <enum name='XK_Ograve' value='210'/>
  <enum name='XK_Omacron' value='978'/>
  <enum name='XK_Ooblique' value='216'/>
  <enum name='XK_Otilde' value='213'/>
  <enum name='XK_P' value='80'/>
  <enum name='XK_Page_Down' value='65366'/>
  <enum name='XK_Page_Up' value='65365'/>
  <enum name='XK_Pause' value='65299'/>
  <enum name='XK_Print' value='65377'/>
  <enum name='XK_Prior' value='65365'/>
  <enum name='XK_Q' value='81'/>
  <enum name='XK_R' value='82'/>
  <enum name='XK_R1' value='65490'/>
  <enum name='XK_R10' value='65499'/>
  <enum name='XK_R11' value='65500'/>
  <enum name='XK_R12' value='65501'/>
  <enum name='XK_R13' value='65502'/>
  <enum name='XK_R14' value='65503'/>
  <enum name='XK_R15' value='65504'/>
  <enum name='XK_R2' value='65491'/>
  <enum name='XK_R3' value='65492'/>
  <enum name='XK_R4' value='65493'/>
  <enum name='XK_R5' value='65494'/>
  <enum name='XK_R6' value='65495'/>
  <enum name='XK_R7' value='65496'/>
  <enum name='XK_R8' value='65497'/>
  <enum name='XK_R9' value='65498'/>
  <enum name='XK_Racute' value='448'/>
  <enum name='XK_Rcaron' value='472'/>
  <enum name='XK_Rcedilla' value='931'/>
  <enum name='XK_Redo' value='65382'/>
  <enum name='XK_Return' value='65293'/>
  <enum name='XK_Right' value='65363'/>
  <enum name='XK_Romaji' value='65316'/>
  <enum name='XK_S' value='83'/>
  <enum name='XK_Sacute' value='422'/>
  <enum name='XK_Scaron' value='425'/>
  <enum name='XK_Scedilla' value='426'/>
  <enum name='XK_Scircumflex' value='734'/>
  <enum name='XK_Scroll_Lock' value='65300'/>
  <enum name='XK_Select' value='65376'/>
  <enum name='XK_Shift_L' value='65505'/>
  <enum name='XK_Shift_Lock' value='65510'/>
  <enum name='XK_Shift_R' value='65506'/>
  <enum name='XK_Super_L' value='65515'/>
  <enum name='XK_Super_R' value='65516'/>
  <enum name='XK_Sys_Req' value='65301'/>
  <enum name='XK_T' value='84'/>
  <enum name='XK_THORN' value='222'/>
  <enum name='XK_Tab' value='65289'/>
  <enum name='XK_Tcaron' value='427'/>
  <enum name='XK_Tcedilla' value='478'/>
  <enum name='XK_Thorn' value='222'/>
  <enum name='XK_Touroku' value='65323'/>
  <enum name='XK_Tslash' value='940'/>
  <enum name='XK_U' value='85'/>
  <enum name='XK_Uacute' value='218'/>
  <enum name='XK_Ubreve' value='733'/>
  <enum name='XK_Ucircumflex' value='219'/>
  <enum name='XK_Udiaeresis' value='220'/>
  <enum name='XK_Udoubleacute' value='475'/>
  <enum name='XK_Ugrave' value='217'/>
  <enum name='XK_Umacron' value='990'/>
  <enum name='XK_Undo' value='65381'/>
  <enum name='XK_Uogonek' value='985'/>
  <enum name='XK_Up' value='65362'/>
  <enum name='XK_Uring' value='473'/>
  <enum name='XK_Utilde' value='989'/>
  <enum name='XK_V' value='86'/>
  <enum name='XK_VoidSymbol' value='16777215'/>
  <enum name='XK_W' value='87'/>
  <enum name='XK_Win_L' value='65371'/>
  <enum name='XK_Win_R' value='65372'/>
  <enum name='XK_X' value='88'/>
  <enum name='XK_Y' value='89'/>
  <enum name='XK_Yacute' value='221'/>
  <enum name='XK_Z' value='90'/>
  <enum name='XK_Zabovedot' value='431'/>
  <enum name='XK_Zacute' value='428'/>
  <enum name='XK_Zcaron' value='430'/>
  <enum name='XK_Zenkaku' value='65320'/>
  <enum name='XK_Zenkaku_Hankaku' value='65322'/>
  <enum name='XK_a' value='97'/>
  <enum name='XK_aacute' value='225'/>
  <enum name='XK_abovedot' value='511'/>
  <enum name='XK_abreve' value='483'/>
  <enum name='XK_acircumflex' value='226'/>
  <enum name='XK_acute' value='180'/>
  <enum name='XK_adiaeresis' value='228'/>
  <enum name='XK_ae' value='230'/>
  <enum name='XK_agrave' value='224'/>
  <enum name='XK_amacron' value='992'/>
  <enum name='XK_ampersand' value='38'/>
  <enum name='XK_aogonek' value='433'/>
  <enum name='XK_apostrophe' value='39'/>
  <enum name='XK_aring' value='229'/>
  <enum name='XK_asciicircum' value='94'/>
  <enum name='XK_asciitilde' value='126'/>
  <enum name='XK_asterisk' value='42'/>
  <enum name='XK_at' value='64'/>
  <enum name='XK_atilde' value='227'/>
  <enum name='XK_b' value='98'/>
  <enum name='XK_backslash' value='92'/>
  <enum name='XK_bar' value='124'/>
  <enum name='XK_braceleft' value='123'/>
  <enum name='XK_braceright' value='125'/>
  <enum name='XK_bracketleft' value='91'/>
  <enum name='XK_bracketright' value='93'/>
  <enum name='XK_breve' value='418'/>
  <enum name='XK_brokenbar' value='166'/>
  <enum name='XK_c' value='99'/>
  <enum name='XK_cabovedot' value='741'/>
  <enum name='XK_cacute' value='486'/>
  <enum name='XK_caron' value='439'/>
  <enum name='XK_ccaron' value='488'/>
  <enum name='XK_ccedilla' value='231'/>
  <enum name='XK_ccircumflex' value='742'/>
  <enum name='XK_cedilla' value='184'/>
  <enum name='XK_cent' value='162'/>
  <enum name='XK_colon' value='58'/>
  <enum name='XK_comma' value='44'/>
  <enum name='XK_copyright' value='169'/>
  <enum name='XK_currency' value='164'/>
  <enum name='XK_d' value='100'/>
  <enum name='XK_dcaron' value='495'/>
  <enum name='XK_degree' value='176'/>
  <enum name='XK_diaeresis' value='168'/>
  <enum name='XK_division' value='247'/>
  <enum name='XK_dollar' value='36'/>
  <enum name='XK_doubleacute' value='445'/>
  <enum name='XK_dstroke' value='496'/>
  <enum name='XK_e' value='101'/>
  <enum name='XK_eabovedot' value='1004'/>
  <enum name='XK_eacute' value='233'/>
  <enum name='XK_ecaron' value='492'/>
  <enum name='XK_ecircumflex' value='234'/>
  <enum name='XK_ediaeresis' value='235'/>
  <enum name='XK_egrave' value='232'/>
  <enum name='XK_emacron' value='954'/>
  <enum name='XK_eng' value='959'/>
  <enum name='XK_eogonek' value='490'/>
  <enum name='XK_equal' value='61'/>
  <enum name='XK_eth' value='240'/>
  <enum name='XK_exclam' value='33'/>
  <enum name='XK_exclamdown' value='161'/>
  <enum name='XK_f' value='102'/>
  <enum name='XK_g' value='103'/>
  <enum name='XK_gabovedot' value='757'/>
  <enum name='XK_gbreve' value='699'/>
  <enum name='XK_gcedilla' value='955'/>
  <enum name='XK_gcircumflex' value='760'/>
  <enum name='XK_grave' value='96'/>
  <enum name='XK_greater' value='62'/>
  <enum name='XK_guillemotleft' value='171'/>
  <enum name='XK_guillemotright' value='187'/>
  <enum name='XK_h' value='104'/>
  <enum name='XK_hcircumflex' value='694'/>
  <enum name='XK_hstroke' value='689'/>
  <enum name='XK_hyphen' value='173'/>
  <enum name='XK_i' value='105'/>
  <enum name='XK_iacute' value='237'/>
  <enum name='XK_icircumflex' value='238'/>
  <enum name='XK_idiaeresis' value='239'/>
  <enum name='XK_idotless' value='697'/>
  <enum name='XK_igrave' value='236'/>
  <enum name='XK_imacron' value='1007'/>
  <enum name='XK_iogonek' value='999'/>
  <enum name='XK_itilde' value='949'/>
  <enum name='XK_j' value='106'/>
  <enum name='XK_jcircumflex' value='700'/>
  <enum name='XK_k' value='107'/>
  <enum name='XK_kappa' value='930'/>
  <enum name='XK_kcedilla' value='1011'/>
  <enum name='XK_kra' value='930'/>
  <enum name='XK_l' value='108'/>
  <enum name='XK_lacute' value='485'/>
  <enum name='XK_lcaron' value='437'/>
  <enum name='XK_lcedilla' value='950'/>
  <enum name='XK_less' value='60'/>
  <enum name='XK_lstroke' value='435'/>
  <enum name='XK_m' value='109'/>
  <enum name='XK_macron' value='175'/>
  <enum name='XK_masculine' value='186'/>
  <enum name='XK_minus' value='45'/>
  <enum name='XK_mu' value='181'/>
  <enum name='XK_multiply' value='215'/>
  <enum name='XK_n' value='110'/>
  <enum name='XK_nacute' value='497'/>
  <enum name='XK_ncaron' value='498'/>
  <enum name='XK_ncedilla' value='1009'/>
  <enum name='XK_nobreakspace' value='160'/>
  <enum name='XK_notsign' value='172'/>
  <enum name='XK_ntilde' value='241'/>
  <enum name='XK_numbersign' value='35'/>
  <enum name='XK_o' value='111'/>
  <enum name='XK_oacute' value='243'/>
  <enum name='XK_ocircumflex' value='244'/>
  <enum name='XK_odiaeresis' value='246'/>
  <enum name='XK_odoubleacute' value='501'/>
  <enum name='XK_ogonek' value='434'/>
  <enum name='XK_ograve' value='242'/>
  <enum name='XK_omacron' value='1010'/>
  <enum name='XK_onehalf' value='189'/>
  <enum name='XK_onequarter' value='188'/>
  <enum name='XK_onesuperior' value='185'/>
  <enum name='XK_ordfeminine' value='170'/>
  <enum name='XK_oslash' value='248'/>
  <enum name='XK_otilde' value='245'/>
  <enum name='XK_p' value='112'/>
  <enum name='XK_paragraph' value='182'/>
  <enum name='XK_parenleft' value='40'/>
  <enum name='XK_parenright' value='41'/>
  <enum name='XK_percent' value='37'/>
  <enum name='XK_period' value='46'/>
  <enum name='XK_periodcentered' value='183'/>
  <enum name='XK_plus' value='43'/>
  <enum name='XK_plusminus' value='177'/>
  <enum name='XK_q' value='113'/>
  <enum name='XK_question' value='63'/>
  <enum name='XK_questiondown' value='191'/>
  <enum name='XK_quotedbl' value='34'/>
  <enum name='XK_quoteleft' value='96'/>
  <enum name='XK_quoteright' value='39'/>
  <enum name='XK_r' value='114'/>
  <enum name='XK_racute' value='480'/>
  <enum name='XK_rcaron' value='504'/>
  <enum name='XK_rcedilla' value='947'/>
  <enum name='XK_registered' value='174'/>
  <enum name='XK_s' value='115'/>
  <enum name='XK_sacute' value='438'/>
  <enum name='XK_scaron' value='441'/>
  <enum name='XK_scedilla' value='442'/>
  <enum name='XK_scircumflex' value='766'/>
  <enum name='XK_script_switch' value='65406'/>
  <enum name='XK_section' value='167'/>
  <enum name='XK_semicolon' value='59'/>
  <enum name='XK_slash' value='47'/>
  <enum name='XK_space' value='32'/>
  <enum name='XK_ssharp' value='223'/>
  <enum name='XK_sterling' value='163'/>
  <enum name='XK_t' value='116'/>
  <enum name='XK_tcaron' value='443'/>
  <enum name='XK_tcedilla' value='510'/>
  <enum name='XK_thorn' value='254'/>
  <enum name='XK_threequarters' value='190'/>
  <enum name='XK_threesuperior' value='179'/>
  <enum name='XK_tslash' value='956'/>
  <enum name='XK_twosuperior' value='178'/>
  <enum name='XK_u' value='117'/>
  <enum name='XK_uacute' value='250'/>
  <enum name='XK_ubreve' value='765'/>
  <enum name='XK_ucircumflex' value='251'/>
  <enum name='XK_udiaeresis' value='252'/>
  <enum name='XK_udoubleacute' value='507'/>
  <enum name='XK_ugrave' value='249'/>
  <enum name='XK_umacron' value='1022'/>
  <enum name='XK_underscore' value='95'/>
  <enum name='XK_uogonek' value='1017'/>
  <enum name='XK_uring' value='505'/>
  <enum name='XK_utilde' value='1021'/>
  <enum name='XK_v' value='118'/>
  <enum name='XK_w' value='119'/>
  <enum name='XK_x' value='120'/>
  <enum name='XK_y' value='121'/>
  <enum name='XK_yacute' value='253'/>
  <enum name='XK_ydiaeresis' value='255'/>
  <enum name='XK_yen' value='165'/>
  <enum name='XK_z' value='122'/>
  <enum name='XK_zabovedot' value='447'/>
  <enum name='XK_zacute' value='444'/>
  <enum name='XK_zcaron' value='446'/>
  <enum name='XLocaleNotSupported' value='-2'/>
  <enum name='XNegative' value='16'/>
  <enum name='XNoMemory' value='-1'/>
  <enum name='XStdICCTextStyle' value='3'/>
  <enum name='XStringStyle' value='0'/>
  <enum name='XTextStyle' value='2'/>
  <enum name='XValue' value='1'/>
  <enum name='YNegative' value='32'/>
  <enum name='YValue' value='2'/>
  <enum name='ZoomState' value='2'/>
  <function name='Tk_3DBorderColor'>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
  </function>
  <function name='Tk_3DBorderGC'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='which' declared_type='int' type='i'/>
    <retval declared_type='GC' type='^{_XGC=}'/>
  </function>
  <function name='Tk_3DHorizontalBevel'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='leftIn' declared_type='int' type='i'/>
    <arg name='rightIn' declared_type='int' type='i'/>
    <arg name='topBevel' declared_type='int' type='i'/>
    <arg name='relief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_3DVerticalBevel'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='leftBevel' declared_type='int' type='i'/>
    <arg name='relief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_AddOption'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='value' declared_type='char*' type='*' const='true'/>
    <arg name='priority' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Alloc3DBorderFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
  </function>
  <function name='Tk_AllocBitmapFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Pixmap' type='L' type64='Q'/>
  </function>
  <function name='Tk_AllocColorFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
  </function>
  <function name='Tk_AllocCursorFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
  </function>
  <function name='Tk_AllocFontFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
  </function>
  <function name='Tk_AllocStyleFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
  </function>
  <function name='Tk_BindEvent'>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='eventPtr' declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='numObjects' declared_type='int' type='i'/>
    <arg name='objectPtr' declared_type='ClientData*' type='^^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasDrawableCoords'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='x' declared_type='double' type='d'/>
    <arg name='y' declared_type='double' type='d'/>
    <arg name='drawableXPtr' declared_type='short*' type='^s'/>
    <arg name='drawableYPtr' declared_type='short*' type='^s'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasEventuallyRedraw'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='x1' declared_type='int' type='i'/>
    <arg name='y1' declared_type='int' type='i'/>
    <arg name='x2' declared_type='int' type='i'/>
    <arg name='y2' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasGetCoord'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='doublePtr' declared_type='double*' type='^d'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasGetCoordFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='obj' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='doublePtr' declared_type='double*' type='^d'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasGetTextInfo'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <retval declared_type='Tk_CanvasTextInfo*' type='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{?}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}'/>
  </function>
  <function name='Tk_CanvasPsBitmap'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasPsColor'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasPsFont'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasPsOutline'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='item' declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasPsPath'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='coordPtr' declared_type='double*' type='^d'/>
    <arg name='numPoints' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasPsStipple'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasPsY'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='y' declared_type='double' type='d'/>
    <retval declared_type='double' type='d'/>
  </function>
  <function name='Tk_CanvasSetOffset'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='offset' declared_type='Tk_TSOffset*' type='^{Tk_TSOffset=iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasSetStippleOrigin'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CanvasTagsParseProc'>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='value' declared_type='char*' type='*' const='true'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='offset' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CanvasTagsPrintProc'>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='offset' declared_type='int' type='i'/>
    <arg name='freeProcPtr' declared_type='Tcl_FreeProc**' type='^^?'/>
    <retval declared_type='char*' type='*'/>
  </function>
  <function name='Tk_CanvasTkwin'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_CanvasWindowCoords'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='x' declared_type='double' type='d'/>
    <arg name='y' declared_type='double' type='d'/>
    <arg name='screenXPtr' declared_type='short*' type='^s'/>
    <arg name='screenYPtr' declared_type='short*' type='^s'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_ChangeOutlineGC'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='item' declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ChangeWindowAttributes'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='valueMask' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='attsPtr' declared_type='XSetWindowAttributes*' type='^{_XSetWindowAttributes=ILILiiiLLilliI{Cursor=[16s][16s]{Point=ss}}}' type64='^{_XSetWindowAttributes=QQQQiiiQQiqqiQ{Cursor=[16s][16s]{Point=ss}}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CharBbox'>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='index' declared_type='int' type='i'/>
    <arg name='xPtr' declared_type='int*' type='^i'/>
    <arg name='yPtr' declared_type='int*' type='^i'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ClearSelection'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='selection' declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_ClipboardAppend'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='target' declared_type='Atom' type='L' type64='Q'/>
    <arg name='format' declared_type='Atom' type='L' type64='Q'/>
    <arg name='buffer' declared_type='char*' type='*'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ClipboardClear'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CollapseMotionEvents'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='collapse' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ComputeTextLayout'>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='numChars' declared_type='int' type='i'/>
    <arg name='wrapLength' declared_type='int' type='i'/>
    <arg name='justify' declared_type='Tk_Justify' type='i'/>
    <arg name='flags' declared_type='int' type='i'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
  </function>
  <function name='Tk_ConfigOutlineGC'>
    <arg name='gcValues' declared_type='XGCValues*' type='^{_XGCValues=iLLLiiiiiiiIIiiIiiiiIic}' type64='^{_XGCValues=iQQQiiiiiiiQQiiQiiiiQic}'/>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='item' declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ConfigureInfo'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='specs' declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='argvName' declared_type='char*' type='*' const='true'/>
    <arg name='flags' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ConfigureValue'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='specs' declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='argvName' declared_type='char*' type='*' const='true'/>
    <arg name='flags' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ConfigureWidget'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='specs' declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
    <arg name='argc' declared_type='int' type='i'/>
    <arg name='argv' declared_type='char**' type='^*' const='true'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='flags' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ConfigureWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='valueMask' declared_type='unsigned int' type='I'/>
    <arg name='valuePtr' declared_type='XWindowChanges*' type='^{_XWindowChanges=iiiiiIi}' type64='^{_XWindowChanges=iiiiiQi}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CoordsToWindow'>
    <arg name='rootX' declared_type='int' type='i'/>
    <arg name='rootY' declared_type='int' type='i'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_CreateAnonymousWindow'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='parent' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='screenName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_CreateBinding'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='object' declared_type='ClientData' type='^v'/>
    <arg name='eventStr' declared_type='char*' type='*' const='true'/>
    <arg name='command' declared_type='char*' type='*' const='true'/>
    <arg name='append' declared_type='int' type='i'/>
    <retval declared_type='unsigned long' type='L' type64='Q'/>
  </function>
  <function name='Tk_CreateBindingTable'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
  </function>
  <function name='Tk_CreateClientMessageHandler'>
    <arg name='proc' function_pointer='true' declared_type='Tk_ClientMessageProc*' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateConsoleWindow'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_CreateErrorHandler'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='errNum' declared_type='int' type='i'/>
    <arg name='request' declared_type='int' type='i'/>
    <arg name='minorCode' declared_type='int' type='i'/>
    <arg name='errorProc' function_pointer='true' declared_type='Tk_ErrorProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XErrorEvent*' type='^{_XErrorEvent=i^{_XDisplay}ILCCC}' type64='^{_XErrorEvent=i^{_XDisplay}QQCCC}'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
  </function>
  <function name='Tk_CreateEventHandler'>
    <arg name='token' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='mask' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='proc' function_pointer='true' declared_type='Tk_EventProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateGenericHandler'>
    <arg name='proc' function_pointer='true' declared_type='Tk_GenericProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateImageType'>
    <arg name='typePtr' declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateItemType'>
    <arg name='typePtr' declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateOldImageType'>
    <arg name='typePtr' declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateOldPhotoImageFormat'>
    <arg name='formatPtr' declared_type='Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateOptionTable'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='templatePtr' declared_type='Tk_OptionSpec*' type='^{Tk_OptionSpec=i****iii^vi}' const='true'/>
    <retval declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
  </function>
  <function name='Tk_CreateOutline'>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreatePhotoImageFormat'>
    <arg name='formatPtr' declared_type='Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateSelHandler'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='selection' declared_type='Atom' type='L' type64='Q'/>
    <arg name='target' declared_type='Atom' type='L' type64='Q'/>
    <arg name='proc' function_pointer='true' declared_type='Tk_SelectionProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='char*' type='*'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <arg name='format' declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateSmoothMethod'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='method' declared_type='Tk_SmoothMethod*' type='^{Tk_SmoothMethod=*^?^?}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_CreateStyle'>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='engine' declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
  </function>
  <function name='Tk_CreateWindow'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='parent' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='screenName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_CreateWindowFromPath'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='pathName' declared_type='char*' type='*' const='true'/>
    <arg name='screenName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_DefineBitmap'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_DefineCursor'>
    <arg name='window' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='cursor' declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteAllBindings'>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='object' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteBinding'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='object' declared_type='ClientData' type='^v'/>
    <arg name='eventStr' declared_type='char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_DeleteBindingTable'>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteClientMessageHandler'>
    <arg name='proc' function_pointer='true' declared_type='Tk_ClientMessageProc*' type='^?'>
      <arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteErrorHandler'>
    <arg name='handler' declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteEventHandler'>
    <arg name='token' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='mask' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='proc' function_pointer='true' declared_type='Tk_EventProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteGenericHandler'>
    <arg name='proc' function_pointer='true' declared_type='Tk_GenericProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteImage'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteOptionTable'>
    <arg name='optionTable' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteOutline'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DeleteSelHandler'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='selection' declared_type='Atom' type='L' type64='Q'/>
    <arg name='target' declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DestroyWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DisplayName'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_DistanceToTextLayout'>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_DitherPhoto'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Draw3DPolygon'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='pointPtr' declared_type='XPoint*' type='^{_XPoint=ss}'/>
    <arg name='numPoints' declared_type='int' type='i'/>
    <arg name='borderWidth' declared_type='int' type='i'/>
    <arg name='leftRelief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Draw3DRectangle'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='borderWidth' declared_type='int' type='i'/>
    <arg name='relief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DrawChars'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='tkfont' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='numBytes' declared_type='int' type='i'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DrawElement'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <arg name='element' declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='d' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='state' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DrawFocusHighlight'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_DrawTextLayout'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='firstChar' declared_type='int' type='i'/>
    <arg name='lastChar' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Fill3DPolygon'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='pointPtr' declared_type='XPoint*' type='^{_XPoint=ss}'/>
    <arg name='numPoints' declared_type='int' type='i'/>
    <arg name='borderWidth' declared_type='int' type='i'/>
    <arg name='leftRelief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Fill3DRectangle'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='borderWidth' declared_type='int' type='i'/>
    <arg name='relief' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FindPhoto'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='imageName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_PhotoHandle' type='^v'/>
  </function>
  <function name='Tk_FontId'>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <retval declared_type='Font' type='L' type64='Q'/>
  </function>
  <function name='Tk_Free3DBorder'>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Free3DBorderFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeBitmap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeBitmapFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeColor'>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeColorFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeColormap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='colormap' declared_type='Colormap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeConfigOptions'>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='optionToken' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeCursor'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='cursor' declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeCursorFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeFont'>
    <arg name='f' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeFontFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeGC'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeImage'>
    <arg name='image' declared_type='Tk_Image' type='^{Tk_Image__=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeOptions'>
    <arg name='specs' declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
    <arg name='widgRec' declared_type='char*' type='*'/>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='needFlags' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreePixmap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='pixmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeSavedOptions'>
    <arg name='savePtr' declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeStyle'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeStyleFromObj'>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeTextLayout'>
    <arg name='textLayout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_FreeXId'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='xid' declared_type='XID' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GCForColor'>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <retval declared_type='GC' type='^{_XGC=}'/>
  </function>
  <function name='Tk_GeometryRequest'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='reqWidth' declared_type='int' type='i'/>
    <arg name='reqHeight' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Get3DBorder'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='colorName' declared_type='Tk_Uid' type='*'/>
    <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
  </function>
  <function name='Tk_Get3DBorderFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
  </function>
  <function name='Tk_GetAllBindings'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='object' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetAnchor'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='anchorPtr' declared_type='Tk_Anchor*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetAnchorFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='anchorPtr' declared_type='Tk_Anchor*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetAtomName'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='atom' declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_GetBinding'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='bindingTable' declared_type='Tk_BindingTable' type='^{Tk_BindingTable_=}'/>
    <arg name='object' declared_type='ClientData' type='^v'/>
    <arg name='eventStr' declared_type='char*' type='*' const='true'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_GetBitmap'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Pixmap' type='L' type64='Q'/>
  </function>
  <function name='Tk_GetBitmapFromData'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='Pixmap' type='L' type64='Q'/>
  </function>
  <function name='Tk_GetBitmapFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Pixmap' type='L' type64='Q'/>
  </function>
  <function name='Tk_GetCapStyle'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='capPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetColor'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='Tk_Uid' type='*'/>
    <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
  </function>
  <function name='Tk_GetColorByValue'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
  </function>
  <function name='Tk_GetColorFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
  </function>
  <function name='Tk_GetColormap'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Colormap' type='L' type64='Q'/>
  </function>
  <function name='Tk_GetCursor'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='Tk_Uid' type='*'/>
    <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
  </function>
  <function name='Tk_GetCursorFromData'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='mask' declared_type='char*' type='*' const='true'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='xHot' declared_type='int' type='i'/>
    <arg name='yHot' declared_type='int' type='i'/>
    <arg name='fg' declared_type='Tk_Uid' type='*'/>
    <arg name='bg' declared_type='Tk_Uid' type='*'/>
    <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
  </function>
  <function name='Tk_GetCursorFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
  </function>
  <function name='Tk_GetDash'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='value' declared_type='char*' type='*' const='true'/>
    <arg name='dash' declared_type='Tk_Dash*' type='^{Tk_Dash=i(?=*[4c])}' type64='^{Tk_Dash=i(?=*[8c])}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetElementBorderWidth'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <arg name='element' declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetElementBox'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <arg name='element' declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='inner' declared_type='int' type='i'/>
    <arg name='xPtr' declared_type='int*' type='^i'/>
    <arg name='yPtr' declared_type='int*' type='^i'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetElementId'>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetElementSize'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <arg name='element' declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='inner' declared_type='int' type='i'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetFont'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
  </function>
  <function name='Tk_GetFontFromObj'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
  </function>
  <function name='Tk_GetFontMetrics'>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='fmPtr' declared_type='Tk_FontMetrics*' type='^{Tk_FontMetrics=iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetGC'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='valueMask' declared_type='unsigned long' type='L' type64='Q'/>
    <arg name='valuePtr' declared_type='XGCValues*' type='^{_XGCValues=iLLLiiiiiiiIIiiIiiiiIic}' type64='^{_XGCValues=iQQQiiiiiiiQQiiQiiiiQic}'/>
    <retval declared_type='GC' type='^{_XGC=}'/>
  </function>
  <function name='Tk_GetImage'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='changeProc' function_pointer='true' declared_type='Tk_ImageChangedProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <arg declared_type='int' type='i'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
  </function>
  <function name='Tk_GetImageMasterData'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='typePtrPtr' declared_type='Tk_ImageType**' type='^^{Tk_ImageType}'/>
    <retval declared_type='ClientData' type='^v'/>
  </function>
  <function name='Tk_GetItemTypes'>
    <retval declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
  </function>
  <function name='Tk_GetJoinStyle'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='joinPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetJustify'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='justifyPtr' declared_type='Tk_Justify*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetJustifyFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='justifyPtr' declared_type='Tk_Justify*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetMMFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='doublePtr' declared_type='double*' type='^d'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetNumMainWindows'>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetOption'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='className' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Uid' type='*'/>
  </function>
  <function name='Tk_GetOptionInfo'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='optionTable' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <arg name='namePtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
  </function>
  <function name='Tk_GetOptionValue'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='optionTable' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <arg name='namePtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
  </function>
  <function name='Tk_GetPixels'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='intPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetPixelsFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='intPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetPixmap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='d' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='depth' declared_type='int' type='i'/>
    <retval declared_type='Pixmap' type='L' type64='Q'/>
  </function>
  <function name='Tk_GetRelief'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='reliefPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetReliefFromObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <arg name='resultPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetRootCoords'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='xPtr' declared_type='int*' type='^i'/>
    <arg name='yPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetScreenMM'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='doublePtr' declared_type='double*' type='^d'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetScrollInfo'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='argc' declared_type='int' type='i'/>
    <arg name='argv' declared_type='char**' type='^*' const='true'/>
    <arg name='dblPtr' declared_type='double*' type='^d'/>
    <arg name='intPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetScrollInfoObj'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='objc' declared_type='int' type='i'/>
    <arg name='objv' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
    <arg name='dblPtr' declared_type='double*' type='^d'/>
    <arg name='intPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetSelection'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='selection' declared_type='Atom' type='L' type64='Q'/>
    <arg name='target' declared_type='Atom' type='L' type64='Q'/>
    <arg name='proc' function_pointer='true' declared_type='Tk_GetSelProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <arg declared_type='char*' type='*'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_GetStyle'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
  </function>
  <function name='Tk_GetStyleEngine'>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
  </function>
  <function name='Tk_GetStyleFromObj'>
    <arg name='objPtr' declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v})}'/>
    <retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
  </function>
  <function name='Tk_GetStyledElement'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <arg name='elementId' declared_type='int' type='i'/>
    <arg name='optionTable' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <retval declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
  </function>
  <function name='Tk_GetUid'>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Tk_Uid' type='*'/>
  </function>
  <function name='Tk_GetVRootGeometry'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='xPtr' declared_type='int*' type='^i'/>
    <arg name='yPtr' declared_type='int*' type='^i'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_GetVisual'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='depthPtr' declared_type='int*' type='^i'/>
    <arg name='colormapPtr' declared_type='Colormap*' type='^I' type64='^Q'/>
    <retval declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
  </function>
  <function name='Tk_Grab'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='grabGlobal' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_HandleEvent'>
    <arg name='eventPtr' declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_IdToWindow'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='window' declared_type='Window' type='L' type64='Q'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_ImageChanged'>
    <arg name='master' declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='imageWidth' declared_type='int' type='i'/>
    <arg name='imageHeight' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Init'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_InitConsoleChannels'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_InitImageArgs'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='argc' declared_type='int' type='i'/>
    <arg name='argv' declared_type='char***' type='^^*'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_InitOptions'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='optionToken' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_InitStubs'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='version' declared_type='char*' type='*'/>
    <arg name='exact' declared_type='int' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_InternAtom'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='Atom' type='L' type64='Q'/>
  </function>
  <function name='Tk_IntersectTextLayout'>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_MainEx'>
    <arg name='argc' declared_type='int' type='i'/>
    <arg name='argv' declared_type='char**' type='^*'/>
    <arg name='appInitProc' function_pointer='true' declared_type='Tcl_AppInitProc*' type='^?'>
      <arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
      <retval declared_type='int' type='i'/>
    </arg>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MainLoop'>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MainWindow'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_MaintainGeometry'>
    <arg name='slave' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='master' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MakeWindowExist'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_ManageGeometry'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='mgrPtr' declared_type='Tk_GeomMgr*' type='^{Tk_GeomMgr=*^?^?}'/>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MapWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MeasureChars'>
    <arg name='tkfont' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='numBytes' declared_type='int' type='i'/>
    <arg name='maxPixels' declared_type='int' type='i'/>
    <arg name='flags' declared_type='int' type='i'/>
    <arg name='lengthPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_MoveResizeWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MoveToplevelWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_MoveWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_NameOf3DBorder'>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfAnchor'>
    <arg name='anchor' declared_type='Tk_Anchor' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfBitmap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfCapStyle'>
    <arg name='cap' declared_type='int' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfColor'>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfCursor'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='cursor' declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfFont'>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfImage'>
    <arg name='imageMaster' declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfJoinStyle'>
    <arg name='join' declared_type='int' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfJustify'>
    <arg name='justify' declared_type='Tk_Justify' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfRelief'>
    <arg name='relief' declared_type='int' type='i'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameOfStyle'>
    <arg name='style' declared_type='Tk_Style' type='^{Tk_Style_=}'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_NameToWindow'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='pathName' declared_type='char*' type='*' const='true'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
  </function>
  <function name='Tk_OwnSelection'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='selection' declared_type='Atom' type='L' type64='Q'/>
    <arg name='proc' function_pointer='true' declared_type='Tk_LostSelProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='clientData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_ParseArgv'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='argcPtr' declared_type='int*' type='^i'/>
    <arg name='argv' declared_type='char**' type='^*' const='true'/>
    <arg name='argTable' declared_type='Tk_ArgvInfo*' type='^{_Tk_ArgvInfo=*i***}'/>
    <arg name='flags' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PhotoBlank'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoExpand'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoGetImage'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PhotoGetSize'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoPutBlock'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='compRule' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoPutBlock_NoComposite'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoPutZoomedBlock'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='zoomX' declared_type='int' type='i'/>
    <arg name='zoomY' declared_type='int' type='i'/>
    <arg name='subsampleX' declared_type='int' type='i'/>
    <arg name='subsampleY' declared_type='int' type='i'/>
    <arg name='compRule' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoPutZoomedBlock_NoComposite'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='zoomX' declared_type='int' type='i'/>
    <arg name='zoomY' declared_type='int' type='i'/>
    <arg name='subsampleX' declared_type='int' type='i'/>
    <arg name='subsampleY' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PhotoSetSize'>
    <arg name='handle' declared_type='Tk_PhotoHandle' type='^v'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PointToChar'>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptBitmap'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <arg name='startX' declared_type='int' type='i'/>
    <arg name='startY' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptColor'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='colorPtr' declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptFont'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptFontName'>
    <arg name='tkfont' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='dsPtr' declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptImage'>
    <arg name='image' declared_type='Tk_Image' type='^{Tk_Image__=}'/>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='psinfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='prepass' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptPath'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='coordPtr' declared_type='double*' type='^d'/>
    <arg name='numPoints' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_PostscriptPhoto'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='blockPtr' declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptStipple'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_PostscriptY'>
    <arg name='y' declared_type='double' type='d'/>
    <arg name='psInfo' declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
    <retval declared_type='double' type='d'/>
  </function>
  <function name='Tk_PreserveColormap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='colormap' declared_type='Colormap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_QueueWindowEvent'>
    <arg name='eventPtr' declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
    <arg name='position' declared_type='Tcl_QueuePosition' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_RedrawImage'>
    <arg name='image' declared_type='Tk_Image' type='^{Tk_Image__=}'/>
    <arg name='imageX' declared_type='int' type='i'/>
    <arg name='imageY' declared_type='int' type='i'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='drawableX' declared_type='int' type='i'/>
    <arg name='drawableY' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_RegisterStyleEngine'>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <arg name='parent' declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
    <retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
  </function>
  <function name='Tk_RegisterStyledElement'>
    <arg name='engine' declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
    <arg name='templatePtr' declared_type='Tk_ElementSpec*' type='^{Tk_ElementSpec=i*^{Tk_ElementOptionSpec}^?^?^?^?}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ResetOutlineGC'>
    <arg name='canvas' declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
    <arg name='item' declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
    <arg name='outline' declared_type='Tk_Outline*' type='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}{Tk_Dash=i(?=*[4c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}III}' type64='^{Tk_Outline=^{_XGC}dddi{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}{Tk_Dash=i(?=*[8c])}^v^v^v{Tk_TSOffset=iii}^{?}^{?}^{?}QQQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_ResizeWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_RestackWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='aboveBelow' declared_type='int' type='i'/>
    <arg name='other' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_RestoreSavedOptions'>
    <arg name='savePtr' declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_RestrictEvents'>
    <arg name='proc' function_pointer='true' declared_type='Tk_RestrictProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='Tk_RestrictAction' type='i'/>
    </arg>
    <arg name='arg' declared_type='ClientData' type='^v'/>
    <arg name='prevArgPtr' declared_type='ClientData*' type='^^v'/>
    <retval function_pointer='true' declared_type='Tk_RestrictProc*' type='^?'>
      <arg declared_type='ClientData' type='^v'/>
      <arg declared_type='XEvent*' type='^(_XEvent=i{?=iLi^{_XDisplay}I}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIIi}{?=iLi^{_XDisplay}IIIIiiiiIci}{?=iLi^{_XDisplay}IIIIiiiiiiiiI}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Iiiiii}{?=iLi^{_XDisplay}Iiiiiiii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}Ii}{?=iLi^{_XDisplay}IIiiiiii}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}II}{?=iLi^{_XDisplay}IIIiii}{?=iLi^{_XDisplay}IIiiiiiIi}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}Iii}{?=iLi^{_XDisplay}IIiiiiiIiL}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIi}{?=iLi^{_XDisplay}IIIi}{?=iLi^{_XDisplay}III}{?=iLi^{_XDisplay}IIIIII}{?=iLi^{_XDisplay}IIIII}{?=iLi^{_XDisplay}IIii}{?=iLi^{_XDisplay}IIi(?=[20c][10s][5l])}{?=iLi^{_XDisplay}Iiii}{?=i^{_XDisplay}ILCCC}{?=iLi^{_XDisplay}I[32c]}[24l])' type64='^(_XEvent=i{?=iQi^{_XDisplay}Q}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIIi}{?=iQi^{_XDisplay}QQQQiiiiIci}{?=iQi^{_XDisplay}QQQQiiiiiiiiI}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qiiiii}{?=iQi^{_XDisplay}Qiiiiiii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}Qi}{?=iQi^{_XDisplay}QQiiiiii}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQ}{?=iQi^{_XDisplay}QQQiii}{?=iQi^{_XDisplay}QQiiiiiQi}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}Qii}{?=iQi^{_XDisplay}QQiiiiiQiQ}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQi}{?=iQi^{_XDisplay}QQQi}{?=iQi^{_XDisplay}QQQ}{?=iQi^{_XDisplay}QQQQQQ}{?=iQi^{_XDisplay}QQQQQ}{?=iQi^{_XDisplay}QQii}{?=iQi^{_XDisplay}QQi(?=[20c][10s][5q])}{?=iQi^{_XDisplay}Qiii}{?=i^{_XDisplay}QQCCC}{?=iQi^{_XDisplay}Q[32c]}[24q])'/>
      <retval declared_type='Tk_RestrictAction' type='i'/>
    </retval>
  </function>
  <function name='Tk_SafeInit'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_SetAppName'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='name' declared_type='char*' type='*' const='true'/>
    <retval declared_type='char*' type='*' const='true'/>
  </function>
  <function name='Tk_SetBackgroundFromBorder'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='border' declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetCaretPos'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='height' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetClass'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='className' declared_type='char*' type='*' const='true'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetClassProcs'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='procs' declared_type='Tk_ClassProcs*' type='^{Tk_ClassProcs=I^?^?^?}'/>
    <arg name='instanceData' declared_type='ClientData' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetGrid'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='reqWidth' declared_type='int' type='i'/>
    <arg name='reqHeight' declared_type='int' type='i'/>
    <arg name='gridWidth' declared_type='int' type='i'/>
    <arg name='gridHeight' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetInternalBorder'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetInternalBorderEx'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='left' declared_type='int' type='i'/>
    <arg name='right' declared_type='int' type='i'/>
    <arg name='top' declared_type='int' type='i'/>
    <arg name='bottom' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetMinimumRequestSize'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='minWidth' declared_type='int' type='i'/>
    <arg name='minHeight' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetOptions'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='recordPtr' declared_type='char*' type='*'/>
    <arg name='optionTable' declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
    <arg name='objc' declared_type='int' type='i'/>
    <arg name='objv' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}' const='true'/>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='savePtr' declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
    <arg name='maskPtr' declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_SetTSOrigin'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowBackground'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='pixel' declared_type='unsigned long' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowBackgroundPixmap'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='pixmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowBorder'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='pixel' declared_type='unsigned long' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowBorderPixmap'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='pixmap' declared_type='Pixmap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowBorderWidth'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='width' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowColormap'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='colormap' declared_type='Colormap' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SetWindowVisual'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='visual' declared_type='Visual*' type='^{_Visual=^{_XExtData}IiLLLii}' type64='^{_Visual=^{_XExtData}QiQQQii}'/>
    <arg name='depth' declared_type='int' type='i'/>
    <arg name='colormap' declared_type='Colormap' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_SizeOfBitmap'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='bitmap' declared_type='Pixmap' type='L' type64='Q'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_SizeOfImage'>
    <arg name='image' declared_type='Tk_Image' type='^{Tk_Image__=}'/>
    <arg name='widthPtr' declared_type='int*' type='^i'/>
    <arg name='heightPtr' declared_type='int*' type='^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_StrictMotif'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_TextLayoutToPostscript'>
    <arg name='interp' declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_TextWidth'>
    <arg name='font' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='str' declared_type='char*' type='*' const='true'/>
    <arg name='numBytes' declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='Tk_UndefineCursor'>
    <arg name='window' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UnderlineChars'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='tkfont' declared_type='Tk_Font' type='^{Tk_Font_=}'/>
    <arg name='source' declared_type='char*' type='*' const='true'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='firstByte' declared_type='int' type='i'/>
    <arg name='lastByte' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UnderlineTextLayout'>
    <arg name='display' declared_type='Display*' type='^{_XDisplay=}'/>
    <arg name='drawable' declared_type='Drawable' type='L' type64='Q'/>
    <arg name='gc' declared_type='GC' type='^{_XGC=}'/>
    <arg name='layout' declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='underline' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_Ungrab'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UnmaintainGeometry'>
    <arg name='slave' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='master' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UnmapWindow'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UnsetGrid'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='Tk_UpdatePointer'>
    <arg name='tkwin' declared_type='Tk_Window' type='^{Tk_Window_=}'/>
    <arg name='x' declared_type='int' type='i'/>
    <arg name='y' declared_type='int' type='i'/>
    <arg name='state' declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XAllocClassHint'>
    <retval declared_type='XClassHint*' type='^{_XClassHint=**}'/>
  </function>
  <function name='XAllocIconSize'>
    <retval declared_type='XIconSize*' type='^{_XIconSize=iiiiii}'/>
  </function>
  <function name='XAllocSizeHints'>
    <retval declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
  </function>
  <function name='XAllocStandardColormap'>
    <retval declared_type='XStandardColormap*' type='^{_XStandardColormap=ILLLLLLLII}' type64='^{_XStandardColormap=QQQQQQQQQQ}'/>
  </function>
  <function name='XAllocWMHints'>
    <retval declared_type='XWMHints*' type='^{_XWMHints=liiIIiiII}' type64='^{_XWMHints=qiiQQiiQQ}'/>
  </function>
  <function name='XClipBox'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='XRectangle*' type='^{_XRectangle=ssSS}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XCreateRegion'>
    <retval declared_type='Region' type='^{_XRegion=}'/>
  </function>
  <function name='XDefaultString'>
    <retval declared_type='char*' type='*'/>
  </function>
  <function name='XDeleteContext'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='XID' type='L' type64='Q'/>
    <arg declared_type='XContext' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XDestroyRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XEmptyRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XEqualRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XFindContext'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='XID' type='L' type64='Q'/>
    <arg declared_type='XContext' type='i'/>
    <arg declared_type='XPointer*' type='^*'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetClassHint'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XClassHint*' type='^{_XClassHint=**}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetIconSizes'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XIconSize**' type='^^{?}'/>
    <arg declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetNormalHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetRGBColormaps'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XStandardColormap**' type='^^{?}'/>
    <arg declared_type='int*' type='^i'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetSizeHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetStandardColormap'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XStandardColormap*' type='^{_XStandardColormap=ILLLLLLLII}' type64='^{_XStandardColormap=QQQQQQQQQQ}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetTextProperty'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetWMClientMachine'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetWMHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <retval declared_type='XWMHints*' type='^{_XWMHints=liiIIiiII}' type64='^{_XWMHints=qiiQQiiQQ}'/>
  </function>
  <function name='XGetWMIconName'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetWMName'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetWMNormalHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='long*' type='^l' type64='^q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetWMSizeHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='long*' type='^l' type64='^q'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XGetZoomHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XIntersectRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XLookupString'>
    <arg declared_type='XKeyEvent*' type='^{_XKeyEvent=iLi^{_XDisplay}IIIIiiiiIIi}' type64='^{_XKeyEvent=iQi^{_XDisplay}QQQQiiiiIIi}'/>
    <arg declared_type='char*' type='*'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='KeySym*' type='^I' type64='^Q'/>
    <arg declared_type='XComposeStatus*' type='^{_XComposeStatus=*i}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XMatchVisualInfo'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XVisualInfo*' type='^{_XVisualInfo=^{?}IiiiLLLii}' type64='^{_XVisualInfo=^{?}QiiiQQQii}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XOffsetRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XPointInRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XPolygonRegion'>
    <arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <retval declared_type='Region' type='^{_XRegion=}'/>
  </function>
  <function name='XRectInRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='unsigned int' type='I'/>
    <arg declared_type='unsigned int' type='I'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XSaveContext'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='XID' type='L' type64='Q'/>
    <arg declared_type='XContext' type='i'/>
    <arg declared_type='char*' type='*' const='true'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XSetClassHint'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XClassHint*' type='^{_XClassHint=**}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetIconSizes'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XIconSize*' type='^{_XIconSize=iiiiii}'/>
    <arg declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetNormalHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetRGBColormaps'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XStandardColormap*' type='^{_XStandardColormap=ILLLLLLLII}' type64='^{_XStandardColormap=QQQQQQQQQQ}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetRegion'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='GC' type='^{_XGC=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetSizeHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetStandardColormap'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XStandardColormap*' type='^{_XStandardColormap=ILLLLLLLII}' type64='^{_XStandardColormap=QQQQQQQQQQ}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetStandardProperties'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='Pixmap' type='L' type64='Q'/>
    <arg declared_type='char**' type='^*'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetTextProperty'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XWMHints*' type='^{_XWMHints=liiIIiiII}' type64='^{_XWMHints=qiiQQiiQQ}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMIconName'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMName'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMNormalHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMProperties'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='char**' type='^*'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='XWMHints*' type='^{_XWMHints=liiIIiiII}' type64='^{_XWMHints=qiiQQiiQQ}'/>
    <arg declared_type='XClassHint*' type='^{_XClassHint=**}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetWMSizeHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='Atom' type='L' type64='Q'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSetZoomHints'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XShrinkRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='int' type='i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XSubtractRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XTextPropertyToStringList'>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='char***' type='^^*'/>
    <arg declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XUnionRectWithRegion'>
    <arg declared_type='XRectangle*' type='^{_XRectangle=ssSS}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XUnionRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XWMGeometry'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='unsigned int' type='I'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='int*' type='^i'/>
    <arg declared_type='int*' type='^i'/>
    <arg declared_type='int*' type='^i'/>
    <arg declared_type='int*' type='^i'/>
    <arg declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XXorRegion'>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <arg declared_type='Region' type='^{_XRegion=}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XmbSetWMProperties'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='Window' type='L' type64='Q'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='char*' type='*' const='true'/>
    <arg declared_type='char**' type='^*'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
    <arg declared_type='XWMHints*' type='^{_XWMHints=liiIIiiII}' type64='^{_XWMHints=qiiQQiiQQ}'/>
    <arg declared_type='XClassHint*' type='^{_XClassHint=**}'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XmbTextListToTextProperty'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='char**' type='^*'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XICCEncodingStyle' type='i'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XmbTextPropertyToTextList'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='char***' type='^^*'/>
    <arg declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XwcFreeStringList'>
    <arg declared_type='wchar_t**' type='^^i'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='XwcTextListToTextProperty'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='wchar_t**' type='^^i'/>
    <arg declared_type='int' type='i'/>
    <arg declared_type='XICCEncodingStyle' type='i'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function name='XwcTextPropertyToTextList'>
    <arg declared_type='Display*' type='^{_XDisplay=}'/>
    <arg declared_type='XTextProperty*' type='^{_XTextProperty=*IiL}' type64='^{_XTextProperty=*QiQ}'/>
    <arg declared_type='wchar_t***' type='^^^i'/>
    <arg declared_type='int*' type='^i'/>
    <retval declared_type='int' type='i'/>
  </function>
  <function_alias name='Tk_BackgroundError' original='Tcl_BackgroundError'/>
  <function_alias name='Tk_CancelIdleCall' original='Tcl_CancelIdleCall'/>
  <function_alias name='Tk_CreateFileHandler' original='Tcl_CreateFileHandler'/>
  <function_alias name='Tk_CreateTimerHandler' original='Tcl_CreateTimerHandler'/>
  <function_alias name='Tk_DeleteFileHandler' original='Tcl_DeleteFileHandler'/>
  <function_alias name='Tk_DeleteTimerHandler' original='Tcl_DeleteTimerHandler'/>
  <function_alias name='Tk_DoOneEvent' original='Tcl_DoOneEvent'/>
  <function_alias name='Tk_DoWhenIdle' original='Tcl_DoWhenIdle'/>
  <function_alias name='Tk_EventuallyFree' original='Tcl_EventuallyFree'/>
  <function_alias name='Tk_Preserve' original='Tcl_Preserve'/>
  <function_alias name='Tk_Release' original='Tcl_Release'/>
  <function_alias name='Tk_Sleep' original='Tcl_Sleep'/>
</signatures>
