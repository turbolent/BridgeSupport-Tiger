<?xml version='1.0'?>
<signatures version='1.0'>
  <depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
  <struct name='AuthorizationCallbacks' type='{AuthorizationCallbacks=&quot;version&quot;I&quot;SetResult&quot;^?&quot;RequestInterrupt&quot;^?&quot;DidDeactivate&quot;^?&quot;GetContextValue&quot;^?&quot;SetContextValue&quot;^?&quot;GetHintValue&quot;^?&quot;SetHintValue&quot;^?&quot;GetArguments&quot;^?&quot;GetSessionId&quot;^?}'>
    <field name='version' declared_type='UInt32' type='L' type64='I'/>
    <field name='SetResult' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationResult)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationResult' type='L' type64='I'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='RequestInterrupt' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='DidDeactivate' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='GetContextValue' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationString, AuthorizationContextFlags *, AuthorizationValue **)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationString' type='*'/>
      <arg declared_type='AuthorizationContextFlags*' type='^I'/>
      <arg declared_type='AuthorizationValue**' type='^^{AuthorizationValue}' const='true'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='SetContextValue' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationString, AuthorizationContextFlags, AuthorizationValue *)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationString' type='*'/>
      <arg declared_type='AuthorizationContextFlags' type='L' type64='I'/>
      <arg declared_type='AuthorizationValue*' type='^{AuthorizationValue=I^v}' const='true'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='GetHintValue' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationString, AuthorizationValue **)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationString' type='*'/>
      <arg declared_type='AuthorizationValue**' type='^^{AuthorizationValue}' const='true'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='SetHintValue' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationString, AuthorizationValue *)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationString' type='*'/>
      <arg declared_type='AuthorizationValue*' type='^{AuthorizationValue=I^v}' const='true'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='GetArguments' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationValueVector **)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationValueVector**' type='^^{AuthorizationValueVector}' const='true'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='GetSessionId' function_pointer='true' declared_type='OSStatus (*)(AuthorizationEngineRef, AuthorizationSessionId *)' type='^?'>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationSessionId*' type='^^v'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='AuthorizationEnvironment' type='{_AuthorizationEnvironment=&quot;count&quot;I&quot;items&quot;^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}}'>
    <field name='count' declared_type='UInt32' type='L' type64='I'/>
    <field name='items' declared_type='AuthorizationItem*' type='^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}'/>
  </struct>
  <struct name='AuthorizationExternalForm' type='{_AuthorizationExternalForm=&quot;bytes&quot;[32c]}'>
    <field name='bytes' declared_type='char*' type='[32c]'/>
  </struct>
  <struct name='AuthorizationItem' type='{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}'>
    <field name='name' declared_type='AuthorizationString' type='*'/>
    <field name='valueLength' declared_type='UInt32' type='L' type64='I'/>
    <field name='value' declared_type='void*' type='^v'/>
    <field name='flags' declared_type='UInt32' type='L' type64='I'/>
  </struct>
  <struct name='AuthorizationItemSet' type='{_AuthorizationItemSet=&quot;count&quot;I&quot;items&quot;^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}}'>
    <field name='count' declared_type='UInt32' type='L' type64='I'/>
    <field name='items' declared_type='AuthorizationItem*' type='^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}'/>
  </struct>
  <struct name='AuthorizationPluginInterface' type='{AuthorizationPluginInterface=&quot;version&quot;I&quot;PluginDestroy&quot;^?&quot;MechanismCreate&quot;^?&quot;MechanismInvoke&quot;^?&quot;MechanismDeactivate&quot;^?&quot;MechanismDestroy&quot;^?}'>
    <field name='version' declared_type='UInt32' type='L' type64='I'/>
    <field name='PluginDestroy' function_pointer='true' declared_type='OSStatus (*)(AuthorizationPluginRef)' type='^?'>
      <arg declared_type='AuthorizationPluginRef' type='@'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='MechanismCreate' function_pointer='true' declared_type='OSStatus (*)(AuthorizationPluginRef, AuthorizationEngineRef, AuthorizationMechanismId, AuthorizationMechanismRef *)' type='^?'>
      <arg declared_type='AuthorizationPluginRef' type='@'/>
      <arg declared_type='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
      <arg declared_type='AuthorizationMechanismId' type='*'/>
      <arg declared_type='AuthorizationMechanismRef*' type='^^v'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='MechanismInvoke' function_pointer='true' declared_type='OSStatus (*)(AuthorizationMechanismRef)' type='^?'>
      <arg declared_type='AuthorizationMechanismRef' type='@'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='MechanismDeactivate' function_pointer='true' declared_type='OSStatus (*)(AuthorizationMechanismRef)' type='^?'>
      <arg declared_type='AuthorizationMechanismRef' type='@'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
    <field name='MechanismDestroy' function_pointer='true' declared_type='OSStatus (*)(AuthorizationMechanismRef)' type='^?'>
      <arg declared_type='AuthorizationMechanismRef' type='@'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='AuthorizationRights' type='{_AuthorizationRights=&quot;count&quot;I&quot;items&quot;^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}}'>
    <field name='count' declared_type='UInt32' type='L' type64='I'/>
    <field name='items' declared_type='AuthorizationItem*' type='^{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;I&quot;value&quot;^v&quot;flags&quot;I}'/>
  </struct>
  <struct name='AuthorizationValue' type='{AuthorizationValue=&quot;length&quot;I&quot;data&quot;^v}'>
    <field name='length' declared_type='UInt32' type='L' type64='I'/>
    <field name='data' declared_type='void*' type='^v'/>
  </struct>
  <struct name='AuthorizationValueVector' type='{AuthorizationValueVector=&quot;count&quot;I&quot;values&quot;^{AuthorizationValue}}'>
    <field name='count' declared_type='UInt32' type='L' type64='I'/>
    <field name='values' declared_type='AuthorizationValue*' type='^{AuthorizationValue=I^v}'/>
  </struct>
  <struct name='CE_AccessDescription' type='{_CE_AccessDescription=&quot;accessMethod&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;accessLocation&quot;{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='accessMethod' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='accessLocation' declared_type='CE_GeneralName' type='{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CE_AuthorityInfoAccess' type='{_CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{_CE_AccessDescription=&quot;accessMethod&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;accessLocation&quot;{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}}'>
    <field name='numAccessDescriptions' declared_type='uint32' type='L' type64='I'/>
    <field name='accessDescriptions' declared_type='CE_AccessDescription*' type='^{_CE_AccessDescription=&quot;accessMethod&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;accessLocation&quot;{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
  </struct>
  <struct name='CE_AuthorityKeyID' type='{_CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='keyIdentifierPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='keyIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='generalNamesPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='generalNames' declared_type='CE_GeneralNames*' type='^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
    <field name='serialNumberPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='serialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CE_BasicConstraints' type='{_CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
    <field name='cA' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='pathLenConstraintPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='pathLenConstraint' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CE_CRLDistPointsSyntax' type='{_CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{_CE_CRLDistributionPoint=&quot;distPointName&quot;^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}&quot;reasonsPresent&quot;i&quot;reasons&quot;C&quot;crlIssuer&quot;^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}}}'>
    <field name='numDistPoints' declared_type='uint32' type='L' type64='I'/>
    <field name='distPoints' declared_type='CE_CRLDistributionPoint*' type='^{_CE_CRLDistributionPoint=&quot;distPointName&quot;^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}&quot;reasonsPresent&quot;i&quot;reasons&quot;C&quot;crlIssuer&quot;^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}}'/>
  </struct>
  <struct name='CE_CRLDistributionPoint' type='{_CE_CRLDistributionPoint=&quot;distPointName&quot;^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}&quot;reasonsPresent&quot;i&quot;reasons&quot;C&quot;crlIssuer&quot;^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}}'>
    <field name='distPointName' declared_type='CE_DistributionPointName*' type='^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}'/>
    <field name='reasonsPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='reasons' declared_type='CE_CrlDistReasonFlags' type='C'/>
    <field name='crlIssuer' declared_type='CE_GeneralNames*' type='^{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
  </struct>
  <struct name='CE_CertPolicies' type='{_CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{_CE_PolicyInformation=&quot;certPolicyId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;numPolicyQualifiers&quot;I&quot;policyQualifiers&quot;^{_CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}}'>
    <field name='numPolicies' declared_type='uint32' type='L' type64='I'/>
    <field name='policies' declared_type='CE_PolicyInformation*' type='^{_CE_PolicyInformation=&quot;certPolicyId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;numPolicyQualifiers&quot;I&quot;policyQualifiers&quot;^{_CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
  </struct>
  <struct name='CE_DataAndType' type='{_CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{?=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{?}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;issuerAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;extendedKeyUsage&quot;{?=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{?=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{?=&quot;numPolicies&quot;I&quot;policies&quot;^{?}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{?=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{?}}&quot;issuingDistPoint&quot;{?=&quot;distPointName&quot;^{?}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{?=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{?}}&quot;rawData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})&quot;critical&quot;i}'>
    <field name='type' declared_type='CE_DataType' type='i'/>
    <field name='extension' declared_type='CE_Data' type='(?=&quot;authorityKeyID&quot;{?=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{?}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;issuerAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;extendedKeyUsage&quot;{?=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{?=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{?=&quot;numPolicies&quot;I&quot;policies&quot;^{?}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{?=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{?}}&quot;issuingDistPoint&quot;{?=&quot;distPointName&quot;^{?}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{?=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{?}}&quot;rawData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})'/>
    <field name='critical' declared_type='CSSM_BOOL' type='l' type64='i'/>
  </struct>
  <struct name='CE_DistributionPointName' type='{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}'>
    <field name='nameType' declared_type='CE_CrlDistributionPointNameType' type='i'/>
    <field name='dpn' declared_type='union CE_DistributionPointName::' type='(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})'/>
  </struct>
  <struct name='CE_ExtendedKeyUsage' type='{_CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}'>
    <field name='numPurposes' declared_type='uint32' type='L' type64='I'/>
    <field name='purposes' declared_type='CSSM_OID_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='CE_GeneralName' type='{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='nameType' declared_type='CE_GeneralNameType' type='i'/>
    <field name='berEncoded' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='name' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CE_GeneralNames' type='{_CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='numNames' declared_type='uint32' type='L' type64='I'/>
    <field name='generalName' declared_type='CE_GeneralName*' type='^{_CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CE_IssuingDistributionPoint' type='{_CE_IssuingDistributionPoint=&quot;distPointName&quot;^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}'>
    <field name='distPointName' declared_type='CE_DistributionPointName*' type='^{_CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{?}&quot;rdn&quot;^{cssm_x509_rdn})}'/>
    <field name='onlyUserCertsPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='onlyUserCerts' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='onlyCACertsPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='onlyCACerts' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='onlySomeReasonsPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='onlySomeReasons' declared_type='CE_CrlDistReasonFlags' type='C'/>
    <field name='indirectCrlPresent' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='indirectCrl' declared_type='CSSM_BOOL' type='l' type64='i'/>
  </struct>
  <struct name='CE_OtherName' type='{_CE_OtherName=&quot;typeId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='typeId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CE_PolicyInformation' type='{_CE_PolicyInformation=&quot;certPolicyId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;numPolicyQualifiers&quot;I&quot;policyQualifiers&quot;^{_CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='certPolicyId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='numPolicyQualifiers' declared_type='uint32' type='L' type64='I'/>
    <field name='policyQualifiers' declared_type='CE_PolicyQualifierInfo*' type='^{_CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CE_PolicyQualifierInfo' type='{_CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='policyQualifierId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='qualifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CE_SubjectKeyID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='CSSM_ACCESS_CREDENTIALS' type='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='BaseCerts' declared_type='CSSM_BASE_CERTS' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
    <field name='Samples' declared_type='CSSM_SAMPLEGROUP' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CHALLENGE_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_SAMPLEGROUP_PTR' type='^{cssm_samplegroup=I^{cssm_sample}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_ACCESS_CREDENTIALS_PTR' type='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='BaseCerts' declared_type='CSSM_BASE_CERTS' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
    <field name='Samples' declared_type='CSSM_SAMPLEGROUP' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CHALLENGE_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_SAMPLEGROUP_PTR' type='^{cssm_samplegroup=I^{cssm_sample}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_ACL_EDIT' type='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;I&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
    <field name='EditMode' declared_type='CSSM_ACL_EDIT_MODE' type='L' type64='I'/>
    <field name='OldEntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
    <field name='NewEntry' declared_type='CSSM_ACL_ENTRY_INPUT*' type='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}' const='true'/>
  </struct>
  <struct name='CSSM_ACL_EDIT_PTR' type='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;I&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
    <field name='EditMode' declared_type='CSSM_ACL_EDIT_MODE' type='L' type64='I'/>
    <field name='OldEntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
    <field name='NewEntry' declared_type='CSSM_ACL_ENTRY_INPUT*' type='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}' const='true'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_INFO' type='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;I}'>
    <field name='EntryPublicInfo' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='EntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_INFO_PTR' type='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;I}'>
    <field name='EntryPublicInfo' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='EntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_INPUT' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
    <field name='Prototype' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_ACL_SUBJECT_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST_PTR' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerContext' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_INPUT_PTR' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
    <field name='Prototype' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_ACL_SUBJECT_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST_PTR' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerContext' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='Authorization' declared_type='CSSM_AUTHORIZATIONGROUP' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
    <field name='TimeRange' declared_type='CSSM_ACL_VALIDITY_PERIOD' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
  </struct>
  <struct name='CSSM_ACL_ENTRY_PROTOTYPE_PTR' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='Authorization' declared_type='CSSM_AUTHORIZATIONGROUP' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
    <field name='TimeRange' declared_type='CSSM_ACL_VALIDITY_PERIOD' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
  </struct>
  <struct name='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR' type='{cssm_acl_keychain_prompt_selector=&quot;version&quot;S&quot;flags&quot;S}'>
    <field name='version' declared_type='uint16' type='S'/>
    <field name='flags' declared_type='uint16' type='S'/>
  </struct>
  <struct name='CSSM_ACL_OWNER_PROTOTYPE' type='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
  </struct>
  <struct name='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
  </struct>
  <struct name='CSSM_ACL_PROCESS_SUBJECT_SELECTOR' type='{cssm_acl_process_subject_selector=&quot;version&quot;S&quot;mask&quot;S&quot;uid&quot;I&quot;gid&quot;I}'>
    <field name='version' declared_type='uint16' type='S'/>
    <field name='mask' declared_type='uint16' type='S'/>
    <field name='uid' declared_type='uint32' type='L' type64='I'/>
    <field name='gid' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_ACL_VALIDITY_PERIOD' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='StartDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='EndDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_ACL_VALIDITY_PERIOD_PTR' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='StartDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='EndDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_API_MEMORY_FUNCS' type='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_MALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_FREE' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_REALLOC' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_CALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='AllocRef' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS' type='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
    <field name='accessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR' type='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
    <field name='accessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS' type='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
    <field name='isLocked' declared_type='uint8' type='C'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR' type='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
    <field name='isLocked' declared_type='uint8' type='C'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS' type='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
    <field name='idleTimeout' declared_type='uint32' type='L' type64='I'/>
    <field name='lockOnSleep' declared_type='uint8' type='C'/>
  </struct>
  <struct name='CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR' type='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
    <field name='idleTimeout' declared_type='uint32' type='L' type64='I'/>
    <field name='lockOnSleep' declared_type='uint8' type='C'/>
  </struct>
  <struct name='CSSM_APPLEDL_OPEN_PARAMETERS' type='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
    <field name='length' declared_type='uint32' type='L' type64='I'/>
    <field name='version' declared_type='uint32' type='L' type64='I'/>
    <field name='autoCommit' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='mask' declared_type='uint32' type='L' type64='I'/>
    <field name='mode' declared_type='mode_t' type='S'/>
  </struct>
  <struct name='CSSM_APPLEDL_OPEN_PARAMETERS_PTR' type='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
    <field name='length' declared_type='uint32' type='L' type64='I'/>
    <field name='version' declared_type='uint32' type='L' type64='I'/>
    <field name='autoCommit' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='mask' declared_type='uint32' type='L' type64='I'/>
    <field name='mode' declared_type='mode_t' type='S'/>
  </struct>
  <struct name='CSSM_APPLE_CL_CSR_REQUEST' type='{_CSSM_APPLE_CL_CSR_REQUEST=&quot;subjectNameX509&quot;^{cssm_x509_name}&quot;signatureAlg&quot;I&quot;signatureOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;cspHand&quot;I&quot;subjectPublicKey&quot;^{cssm_key}&quot;subjectPrivateKey&quot;^{cssm_key}&quot;challengeString&quot;*}'>
    <field name='subjectNameX509' declared_type='CSSM_X509_NAME_PTR' type='^{cssm_x509_name=I^{cssm_x509_rdn}}'/>
    <field name='signatureAlg' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='signatureOid' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='cspHand' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <field name='subjectPublicKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <field name='subjectPrivateKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <field name='challengeString' declared_type='char*' type='*' const='true'/>
  </struct>
  <struct name='CSSM_APPLE_TP_ACTION_DATA' type='{_CSSM_APPLE_TP_ACTION_DATA=&quot;Version&quot;I&quot;ActionFlags&quot;I}'>
    <field name='Version' declared_type='uint32' type='L' type64='I'/>
    <field name='ActionFlags' declared_type='CSSM_APPLE_TP_ACTION_FLAGS' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_APPLE_TP_CERT_REQUEST' type='{_CSSM_APPLE_TP_CERT_REQUEST=&quot;cspHand&quot;I&quot;clHand&quot;I&quot;serialNumber&quot;I&quot;numSubjectNames&quot;I&quot;subjectNames&quot;^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}&quot;numIssuerNames&quot;I&quot;issuerNames&quot;^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}&quot;issuerNameX509&quot;^{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;certPublicKey&quot;^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerPrivateKey&quot;^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;signatureAlg&quot;I&quot;signatureOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;notBefore&quot;I&quot;notAfter&quot;I&quot;numExtensions&quot;I&quot;extensions&quot;^{_CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{?=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{?}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;issuerAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;extendedKeyUsage&quot;{?=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{?=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{?=&quot;numPolicies&quot;I&quot;policies&quot;^{?}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{?=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{?}}&quot;issuingDistPoint&quot;{?=&quot;distPointName&quot;^{?}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{?=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{?}}&quot;rawData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})&quot;critical&quot;i}&quot;challengeString&quot;*}'>
    <field name='cspHand' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <field name='clHand' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='serialNumber' declared_type='uint32' type='L' type64='I'/>
    <field name='numSubjectNames' declared_type='uint32' type='L' type64='I'/>
    <field name='subjectNames' declared_type='CSSM_APPLE_TP_NAME_OID*' type='^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'/>
    <field name='numIssuerNames' declared_type='uint32' type='L' type64='I'/>
    <field name='issuerNames' declared_type='CSSM_APPLE_TP_NAME_OID*' type='^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'/>
    <field name='issuerNameX509' declared_type='CSSM_X509_NAME_PTR' type='^{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='certPublicKey' declared_type='CSSM_KEY*' type='^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}' const='true'/>
    <field name='issuerPrivateKey' declared_type='CSSM_KEY*' type='^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}' const='true'/>
    <field name='signatureAlg' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='signatureOid' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='notBefore' declared_type='uint32' type='L' type64='I'/>
    <field name='notAfter' declared_type='uint32' type='L' type64='I'/>
    <field name='numExtensions' declared_type='uint32' type='L' type64='I'/>
    <field name='extensions' declared_type='CE_DataAndType*' type='^{_CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{?=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{?}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;issuerAltName&quot;{?=&quot;numNames&quot;I&quot;generalName&quot;^{?}}&quot;extendedKeyUsage&quot;{?=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{?=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{?=&quot;numPolicies&quot;I&quot;policies&quot;^{?}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{?=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{?}}&quot;issuingDistPoint&quot;{?=&quot;distPointName&quot;^{?}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{?=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{?}}&quot;rawData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})&quot;critical&quot;i}'/>
    <field name='challengeString' declared_type='char*' type='*' const='true'/>
  </struct>
  <struct name='CSSM_APPLE_TP_CRL_OPTIONS' type='{_CSSM_APPLE_TP_CRL_OPTIONS=&quot;Version&quot;I&quot;CrlFlags&quot;I&quot;crlStore&quot;^{cssm_dl_db_handle}}'>
    <field name='Version' declared_type='uint32' type='L' type64='I'/>
    <field name='CrlFlags' declared_type='CSSM_APPLE_TP_CRL_OPT_FLAGS' type='L' type64='I'/>
    <field name='crlStore' declared_type='CSSM_DL_DB_HANDLE_PTR' type='^{cssm_dl_db_handle=II}'/>
  </struct>
  <struct name='CSSM_APPLE_TP_NAME_OID' type='{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'>
    <field name='string' declared_type='char*' type='*' const='true'/>
    <field name='oid' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
  </struct>
  <struct name='CSSM_APPLE_TP_SMIME_OPTIONS' type='{_CSSM_APPLE_TP_SMIME_OPTIONS=&quot;Version&quot;I&quot;IntendedUsage&quot;S&quot;SenderEmailLen&quot;I&quot;SenderEmail&quot;*}'>
    <field name='Version' declared_type='uint32' type='L' type64='I'/>
    <field name='IntendedUsage' declared_type='CE_KeyUsage' type='S'/>
    <field name='SenderEmailLen' declared_type='uint32' type='L' type64='I'/>
    <field name='SenderEmail' declared_type='char*' type='*' const='true'/>
  </struct>
  <struct name='CSSM_APPLE_TP_SSL_OPTIONS' type='{_CSSM_APPLE_TP_SSL_OPTIONS=&quot;Version&quot;I&quot;ServerNameLen&quot;I&quot;ServerName&quot;*&quot;Flags&quot;I}'>
    <field name='Version' declared_type='uint32' type='L' type64='I'/>
    <field name='ServerNameLen' declared_type='uint32' type='L' type64='I'/>
    <field name='ServerName' declared_type='char*' type='*' const='true'/>
    <field name='Flags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_AUTHORIZATIONGROUP' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
    <field name='NumberOfAuthTags' declared_type='uint32' type='L' type64='I'/>
    <field name='AuthTags' declared_type='CSSM_ACL_AUTHORIZATION_TAG*' type='^i'/>
  </struct>
  <struct name='CSSM_AUTHORIZATIONGROUP_PTR' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
    <field name='NumberOfAuthTags' declared_type='uint32' type='L' type64='I'/>
    <field name='AuthTags' declared_type='CSSM_ACL_AUTHORIZATION_TAG*' type='^i'/>
  </struct>
  <struct name='CSSM_BASE_CERTS' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
    <field name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Certs' declared_type='CSSM_CERTGROUP' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
  </struct>
  <struct name='CSSM_BASE_CERTS_PTR' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
    <field name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Certs' declared_type='CSSM_CERTGROUP' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
  </struct>
  <struct name='CSSM_CERTGROUP' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='NumCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupList' declared_type='union cssm_certgroup::' type='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
    <field name='CertGroupType' declared_type='CSSM_CERTGROUP_TYPE' type='L' type64='I'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_CERTGROUP_PTR' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='NumCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupList' declared_type='union cssm_certgroup::' type='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
    <field name='CertGroupType' declared_type='CSSM_CERTGROUP_TYPE' type='L' type64='I'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_CERT_BUNDLE' type='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='BundleHeader' declared_type='CSSM_CERT_BUNDLE_HEADER' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
    <field name='Bundle' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_CERT_BUNDLE_HEADER' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
    <field name='BundleType' declared_type='CSSM_CERT_BUNDLE_TYPE' type='L' type64='I'/>
    <field name='BundleEncoding' declared_type='CSSM_CERT_BUNDLE_ENCODING' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CERT_BUNDLE_HEADER_PTR' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
    <field name='BundleType' declared_type='CSSM_CERT_BUNDLE_TYPE' type='L' type64='I'/>
    <field name='BundleEncoding' declared_type='CSSM_CERT_BUNDLE_ENCODING' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CERT_BUNDLE_PTR' type='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='BundleHeader' declared_type='CSSM_CERT_BUNDLE_HEADER' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
    <field name='Bundle' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_CERT_PAIR' type='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
    <field name='EncodedCert' declared_type='CSSM_ENCODED_CERT' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCert' declared_type='CSSM_PARSED_CERT' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
  </struct>
  <struct name='CSSM_CERT_PAIR_PTR' type='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
    <field name='EncodedCert' declared_type='CSSM_ENCODED_CERT' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCert' declared_type='CSSM_PARSED_CERT' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
  </struct>
  <struct name='CSSM_CONTEXT' type='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;I&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
    <field name='ContextType' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
    <field name='AlgorithmType' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='ContextAttributes' declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR' type='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
    <field name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <field name='Privileged' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='EncryptionProhibited' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint32' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CONTEXT_ATTRIBUTE' type='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
    <field name='AttributeType' declared_type='CSSM_ATTRIBUTE_TYPE' type='L' type64='I'/>
    <field name='AttributeLength' declared_type='uint32' type='L' type64='I'/>
    <field name='Attribute' declared_type='union cssm_context_attribute_value' type='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
  </struct>
  <struct name='CSSM_CONTEXT_ATTRIBUTE_PTR' type='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
    <field name='AttributeType' declared_type='CSSM_ATTRIBUTE_TYPE' type='L' type64='I'/>
    <field name='AttributeLength' declared_type='uint32' type='L' type64='I'/>
    <field name='Attribute' declared_type='union cssm_context_attribute_value' type='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
  </struct>
  <struct name='CSSM_CONTEXT_PTR' type='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;I&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
    <field name='ContextType' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
    <field name='AlgorithmType' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='ContextAttributes' declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR' type='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
    <field name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <field name='Privileged' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='EncryptionProhibited' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint32' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CRLGROUP' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='NumberOfCrls' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupCrlList' declared_type='union cssm_crlgroup::' type='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
    <field name='CrlGroupType' declared_type='CSSM_CRLGROUP_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CRLGROUP_PTR' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='NumberOfCrls' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupCrlList' declared_type='union cssm_crlgroup::' type='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
    <field name='CrlGroupType' declared_type='CSSM_CRLGROUP_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CRL_PAIR' type='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
    <field name='EncodedCrl' declared_type='CSSM_ENCODED_CRL' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCrl' declared_type='CSSM_PARSED_CRL' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
  </struct>
  <struct name='CSSM_CRL_PAIR_PTR' type='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
    <field name='EncodedCrl' declared_type='CSSM_ENCODED_CRL' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCrl' declared_type='CSSM_PARSED_CRL' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
  </struct>
  <struct name='CSSM_CRYPTO_DATA' type='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='Param' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CALLBACK' type='^?'>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_CRYPTO_DATA_PTR' type='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='Param' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CALLBACK' type='^?'>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_CSP_OPERATIONAL_STATISTICS' type='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
    <field name='UserAuthenticated' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='DeviceFlags' declared_type='CSSM_CSP_FLAGS' type='L' type64='I'/>
    <field name='TokenMaxSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenMaxRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPrivateMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePrivateMem' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_CSP_OPERATIONAL_STATISTICS_PTR' type='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
    <field name='UserAuthenticated' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='DeviceFlags' declared_type='CSSM_CSP_FLAGS' type='L' type64='I'/>
    <field name='TokenMaxSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenMaxRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPrivateMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePrivateMem' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='CSSM_DATA_PTR' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
    <field name='Year' declared_type='uint8*' type='[4C]'/>
    <field name='Month' declared_type='uint8*' type='[2C]'/>
    <field name='Day' declared_type='uint8*' type='[2C]'/>
  </struct>
  <struct name='CSSM_DATE_PTR' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
    <field name='Year' declared_type='uint8*' type='[4C]'/>
    <field name='Month' declared_type='uint8*' type='[2C]'/>
    <field name='Day' declared_type='uint8*' type='[2C]'/>
  </struct>
  <struct name='CSSM_DBINFO' type='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
    <field name='NumberOfRecordTypes' declared_type='uint32' type='L' type64='I'/>
    <field name='DefaultParsingModules' declared_type='CSSM_DB_PARSING_MODULE_INFO_PTR' type='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
    <field name='RecordAttributeNames' declared_type='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' type='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
    <field name='RecordIndexes' declared_type='CSSM_DB_RECORD_INDEX_INFO_PTR' type='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
    <field name='IsLocal' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='AccessPath' declared_type='char*' type='*'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_DBINFO_PTR' type='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
    <field name='NumberOfRecordTypes' declared_type='uint32' type='L' type64='I'/>
    <field name='DefaultParsingModules' declared_type='CSSM_DB_PARSING_MODULE_INFO_PTR' type='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
    <field name='RecordAttributeNames' declared_type='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' type='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
    <field name='RecordIndexes' declared_type='CSSM_DB_RECORD_INDEX_INFO_PTR' type='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
    <field name='IsLocal' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='AccessPath' declared_type='char*' type='*'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_DB_ATTRIBUTE_DATA' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
    <field name='NumberOfValues' declared_type='uint32' type='L' type64='I'/>
    <field name='Value' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='CSSM_DB_ATTRIBUTE_DATA_PTR' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
    <field name='NumberOfValues' declared_type='uint32' type='L' type64='I'/>
    <field name='Value' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
    <field name='AttributeNameFormat' declared_type='CSSM_DB_ATTRIBUTE_NAME_FORMAT' type='L' type64='I'/>
    <field name='Label' declared_type='union cssm_db_attribute_label' type='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
    <field name='AttributeFormat' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_ATTRIBUTE_INFO_PTR' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
    <field name='AttributeNameFormat' declared_type='CSSM_DB_ATTRIBUTE_NAME_FORMAT' type='L' type64='I'/>
    <field name='Label' declared_type='union cssm_db_attribute_label' type='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
    <field name='AttributeFormat' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_INDEX_INFO' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
  </struct>
  <struct name='CSSM_DB_INDEX_INFO_PTR' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
  </struct>
  <struct name='CSSM_DB_PARSING_MODULE_INFO' type='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='ModuleSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
  </struct>
  <struct name='CSSM_DB_PARSING_MODULE_INFO_PTR' type='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='ModuleSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_ATTRIBUTE_DATA' type='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='SemanticInformation' declared_type='uint32' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeData' declared_type='CSSM_DB_ATTRIBUTE_DATA_PTR' type='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='SemanticInformation' declared_type='uint32' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeData' declared_type='CSSM_DB_ATTRIBUTE_DATA_PTR' type='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_ATTRIBUTE_INFO' type='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeInfo' declared_type='CSSM_DB_ATTRIBUTE_INFO_PTR' type='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' type='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeInfo' declared_type='CSSM_DB_ATTRIBUTE_INFO_PTR' type='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_INDEX_INFO' type='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfIndexes' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexInfo' declared_type='CSSM_DB_INDEX_INFO_PTR' type='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}'/>
  </struct>
  <struct name='CSSM_DB_RECORD_INDEX_INFO_PTR' type='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfIndexes' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexInfo' declared_type='CSSM_DB_INDEX_INFO_PTR' type='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}'/>
  </struct>
  <struct name='CSSM_DB_SCHEMA_ATTRIBUTE_INFO' type='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;DataType&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeName' declared_type='char*' type='*'/>
    <field name='AttributeNameID' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='DataType' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR' type='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;DataType&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeName' declared_type='char*' type='*'/>
    <field name='AttributeNameID' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='DataType' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_SCHEMA_INDEX_INFO' type='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_SCHEMA_INDEX_INFO_PTR' type='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DB_UNIQUE_RECORD' type='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='RecordLocator' declared_type='CSSM_DB_INDEX_INFO' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
    <field name='RecordIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_DB_UNIQUE_RECORD_PTR' type='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='RecordLocator' declared_type='CSSM_DB_INDEX_INFO' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
    <field name='RecordIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}'>
    <field name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <field name='DBHandle' declared_type='CSSM_DB_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DL_DB_HANDLE_PTR' type='{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}'>
    <field name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <field name='DBHandle' declared_type='CSSM_DB_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DL_DB_LIST' type='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
    <field name='NumHandles' declared_type='uint32' type='L' type64='I'/>
    <field name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE_PTR' type='^{cssm_dl_db_handle=II}'/>
  </struct>
  <struct name='CSSM_DL_DB_LIST_PTR' type='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
    <field name='NumHandles' declared_type='uint32' type='L' type64='I'/>
    <field name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE_PTR' type='^{cssm_dl_db_handle=II}'/>
  </struct>
  <struct name='CSSM_DL_PKCS11_ATTRIBUTE' type='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
    <field name='DeviceAccessFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_DL_PKCS11_ATTRIBUTE_PTR' type='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
    <field name='DeviceAccessFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_ENCODED_CERT' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='CertBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_ENCODED_CERT_PTR' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='CertBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_ENCODED_CRL' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='CrlBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_ENCODED_CRL_PTR' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='CrlBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_EVIDENCE' type='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
    <field name='EvidenceForm' declared_type='CSSM_EVIDENCE_FORM' type='L' type64='I'/>
    <field name='Evidence' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_EVIDENCE_PTR' type='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
    <field name='EvidenceForm' declared_type='CSSM_EVIDENCE_FORM' type='L' type64='I'/>
    <field name='Evidence' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_FIELD' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='FieldOid' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='FieldValue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_FIELDGROUP' type='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
    <field name='NumberOfFields' declared_type='int' type='i'/>
    <field name='Fields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_FIELDGROUP_PTR' type='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
    <field name='NumberOfFields' declared_type='int' type='i'/>
    <field name='Fields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_FIELD_PTR' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='FieldOid' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='FieldValue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_FUNC_NAME_ADDR' type='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
    <field name='Name' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='Address' function_pointer='true' declared_type='CSSM_PROC_ADDR' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CSSM_FUNC_NAME_ADDR_PTR' type='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
    <field name='Name' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='Address' function_pointer='true' declared_type='CSSM_PROC_ADDR' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
    <field name='Data1' declared_type='uint32' type='L' type64='I'/>
    <field name='Data2' declared_type='uint16' type='S'/>
    <field name='Data3' declared_type='uint16' type='S'/>
    <field name='Data4' declared_type='uint8*' type='[8C]'/>
  </struct>
  <struct name='CSSM_GUID_PTR' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
    <field name='Data1' declared_type='uint32' type='L' type64='I'/>
    <field name='Data2' declared_type='uint16' type='S'/>
    <field name='Data3' declared_type='uint16' type='S'/>
    <field name='Data4' declared_type='uint8*' type='[8C]'/>
  </struct>
  <struct name='CSSM_KEA_DERIVE_PARAMS' type='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Rb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Yb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_KEA_DERIVE_PARAMS_PTR' type='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Rb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Yb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_KEY' type='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='KeyHeader' declared_type='CSSM_KEYHEADER' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
    <field name='KeyData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_KEYHEADER' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
    <field name='HeaderVersion' declared_type='CSSM_HEADERVERSION' type='L' type64='I'/>
    <field name='CspId' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='BlobType' declared_type='CSSM_KEYBLOB_TYPE' type='L' type64='I'/>
    <field name='Format' declared_type='CSSM_KEYBLOB_FORMAT' type='L' type64='I'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='KeyClass' declared_type='CSSM_KEYCLASS' type='L' type64='I'/>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='KeyAttr' declared_type='CSSM_KEYATTR_FLAGS' type='L' type64='I'/>
    <field name='KeyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <field name='StartDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='EndDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='WrapAlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='WrapMode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KEYHEADER_PTR' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
    <field name='HeaderVersion' declared_type='CSSM_HEADERVERSION' type='L' type64='I'/>
    <field name='CspId' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='BlobType' declared_type='CSSM_KEYBLOB_TYPE' type='L' type64='I'/>
    <field name='Format' declared_type='CSSM_KEYBLOB_FORMAT' type='L' type64='I'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='KeyClass' declared_type='CSSM_KEYCLASS' type='L' type64='I'/>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='KeyAttr' declared_type='CSSM_KEYATTR_FLAGS' type='L' type64='I'/>
    <field name='KeyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <field name='StartDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='EndDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='WrapAlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='WrapMode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KEY_PTR' type='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='KeyHeader' declared_type='CSSM_KEYHEADER' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
    <field name='KeyData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_KEY_SIZE' type='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='EffectiveKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KEY_SIZE_PTR' type='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='EffectiveKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KRSUBSERVICE' type='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
    <field name='SubServiceId' declared_type='uint32' type='L' type64='I'/>
    <field name='Description' declared_type='char*' type='*'/>
    <field name='WrappedProduct' declared_type='CSSM_KR_WRAPPEDPRODUCT_INFO' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
  </struct>
  <struct name='CSSM_KRSUBSERVICE_PTR' type='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
    <field name='SubServiceId' declared_type='uint32' type='L' type64='I'/>
    <field name='Description' declared_type='char*' type='*'/>
    <field name='WrappedProduct' declared_type='CSSM_KR_WRAPPEDPRODUCT_INFO' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
  </struct>
  <struct name='CSSM_KR_NAME' type='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'>
    <field name='Type' declared_type='uint8' type='C'/>
    <field name='Length' declared_type='uint8' type='C'/>
    <field name='Name' declared_type='char*' type='*'/>
  </struct>
  <struct name='CSSM_KR_POLICY_INFO' type='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
    <field name='krbNotAllowed' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='numberOfEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='policyEntry' declared_type='CSSM_KR_POLICY_LIST_ITEM*' type='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
  </struct>
  <struct name='CSSM_KR_POLICY_INFO_PTR' type='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
    <field name='krbNotAllowed' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='numberOfEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='policyEntry' declared_type='CSSM_KR_POLICY_LIST_ITEM*' type='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
  </struct>
  <struct name='CSSM_KR_POLICY_LIST_ITEM' type='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
    <field name='next' declared_type='struct kr_policy_list_item*' type='^{kr_policy_list_item=}'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='Mode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='MaxKeyLength' declared_type='uint32' type='L' type64='I'/>
    <field name='MaxRounds' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint8' type='C'/>
    <field name='PolicyFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <field name='AlgClass' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KR_POLICY_LIST_ITEM_PTR' type='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
    <field name='next' declared_type='struct kr_policy_list_item*' type='^{kr_policy_list_item=}'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='Mode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='MaxKeyLength' declared_type='uint32' type='L' type64='I'/>
    <field name='MaxRounds' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint8' type='C'/>
    <field name='PolicyFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <field name='AlgClass' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KR_PROFILE' type='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
    <field name='UserName' declared_type='CSSM_KR_NAME' type='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
    <field name='UserCertificate' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KRSCertChain' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='LE_KRANum' declared_type='uint8' type='C'/>
    <field name='LE_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='ENT_KRANum' declared_type='uint8' type='C'/>
    <field name='ENT_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_KRANum' declared_type='uint8' type='C'/>
    <field name='INDIV_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_AuthenticationInfo' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='KRSPFlags' declared_type='uint32' type='L' type64='I'/>
    <field name='KRSPExtensions' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='CSSM_KR_PROFILE_PTR' type='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
    <field name='UserName' declared_type='CSSM_KR_NAME' type='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
    <field name='UserCertificate' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KRSCertChain' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='LE_KRANum' declared_type='uint8' type='C'/>
    <field name='LE_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='ENT_KRANum' declared_type='uint8' type='C'/>
    <field name='ENT_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_KRANum' declared_type='uint8' type='C'/>
    <field name='INDIV_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_AuthenticationInfo' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='KRSPFlags' declared_type='uint32' type='L' type64='I'/>
    <field name='KRSPExtensions' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='CSSM_KR_WRAPPEDPRODUCT_INFO' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
    <field name='StandardVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='StandardDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='ProductDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVendor' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_KR_WRAPPEDPRODUCT_INFO_PTR' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
    <field name='StandardVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='StandardDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='ProductDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVendor' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
    <field name='ListType' declared_type='CSSM_LIST_TYPE' type='L' type64='I'/>
    <field name='Head' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='Tail' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
  </struct>
  <struct name='CSSM_LIST_ELEMENT' type='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})}'>
    <field name='NextElement' declared_type='struct cssm_list_element*' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='WordID' declared_type='CSSM_WORDID_TYPE' type='l' type64='i'/>
    <field name='ElementType' declared_type='CSSM_LIST_ELEMENT_TYPE' type='L' type64='I'/>
    <field name='Element' declared_type='union cssm_list_element::' type='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})'/>
  </struct>
  <struct name='CSSM_LIST_ELEMENT_PTR' type='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})}'>
    <field name='NextElement' declared_type='struct cssm_list_element*' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='WordID' declared_type='CSSM_WORDID_TYPE' type='l' type64='i'/>
    <field name='ElementType' declared_type='CSSM_LIST_ELEMENT_TYPE' type='L' type64='I'/>
    <field name='Element' declared_type='union cssm_list_element::' type='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})'/>
  </struct>
  <struct name='CSSM_LIST_PTR' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
    <field name='ListType' declared_type='CSSM_LIST_TYPE' type='L' type64='I'/>
    <field name='Head' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='Tail' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
  </struct>
  <struct name='CSSM_MANAGER_EVENT_NOTIFICATION' type='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='DestinationModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='SourceModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='Event' declared_type='CSSM_MANAGER_EVENT_TYPES' type='L' type64='I'/>
    <field name='EventId' declared_type='uint32' type='L' type64='I'/>
    <field name='EventData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_MANAGER_EVENT_NOTIFICATION_PTR' type='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='DestinationModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='SourceModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='Event' declared_type='CSSM_MANAGER_EVENT_TYPES' type='L' type64='I'/>
    <field name='EventId' declared_type='uint32' type='L' type64='I'/>
    <field name='EventData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_MANAGER_REGISTRATION_INFO' type='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
    <field name='Initialize' function_pointer='true' declared_type='CSSM_RETURN (*)(uint32, uint32)' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Terminate' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' type='^?'>
      <arg declared_type='CSSM_STATE_FUNCS_PTR' type='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeregisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EventNotifyManager' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RefreshFunctionTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_MANAGER_REGISTRATION_INFO_PTR' type='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
    <field name='Initialize' function_pointer='true' declared_type='CSSM_RETURN (*)(uint32, uint32)' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Terminate' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' type='^?'>
      <arg declared_type='CSSM_STATE_FUNCS_PTR' type='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeregisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EventNotifyManager' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RefreshFunctionTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_MEMORY_FUNCS' type='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_MALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_FREE' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_REALLOC' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_CALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='AllocRef' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_MEMORY_FUNCS_PTR' type='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_MALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_FREE' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_REALLOC' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_CALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='AllocRef' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_MODULE_FUNCS' type='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
    <field name='ServiceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
    <field name='NumberOfServiceFuncs' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceFuncs' declared_type='CSSM_PROC_ADDR*' type='^^?' const='true'/>
  </struct>
  <struct name='CSSM_MODULE_FUNCS_PTR' type='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
    <field name='ServiceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
    <field name='NumberOfServiceFuncs' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceFuncs' declared_type='CSSM_PROC_ADDR*' type='^^?' const='true'/>
  </struct>
  <struct name='CSSM_NAME_LIST' type='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
    <field name='NumStrings' declared_type='uint32' type='L' type64='I'/>
    <field name='String' declared_type='char**' type='^*'/>
  </struct>
  <struct name='CSSM_NAME_LIST_PTR' type='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
    <field name='NumStrings' declared_type='uint32' type='L' type64='I'/>
    <field name='String' declared_type='char**' type='^*'/>
  </struct>
  <struct name='CSSM_NET_ADDRESS' type='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='AddressType' declared_type='CSSM_NET_ADDRESS_TYPE' type='L' type64='I'/>
    <field name='Address' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_NET_ADDRESS_PTR' type='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='AddressType' declared_type='CSSM_NET_ADDRESS_TYPE' type='L' type64='I'/>
    <field name='Address' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='CSSM_PARSED_CERT' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='ParsedCertFormat' declared_type='CSSM_CERT_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCert' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_PARSED_CERT_PTR' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='ParsedCertFormat' declared_type='CSSM_CERT_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCert' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_PARSED_CRL' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='ParsedCrlFormat' declared_type='CSSM_CRL_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCrl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_PARSED_CRL_PTR' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='ParsedCrlFormat' declared_type='CSSM_CRL_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCrl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_PKCS1_OAEP_PARAMS' type='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='HashAlgorithm' declared_type='uint32' type='L' type64='I'/>
    <field name='HashParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='MGF' declared_type='CSSM_PKCS_OAEP_MGF' type='L' type64='I'/>
    <field name='MGFParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PSource' declared_type='CSSM_PKCS_OAEP_PSOURCE' type='L' type64='I'/>
    <field name='PSourceParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_PKCS1_OAEP_PARAMS_PTR' type='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='HashAlgorithm' declared_type='uint32' type='L' type64='I'/>
    <field name='HashParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='MGF' declared_type='CSSM_PKCS_OAEP_MGF' type='L' type64='I'/>
    <field name='MGFParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PSource' declared_type='CSSM_PKCS_OAEP_PSOURCE' type='L' type64='I'/>
    <field name='PSourceParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_PKCS5_PBKDF1_PARAMS' type='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='InitVector' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_PKCS5_PBKDF1_PARAMS_PTR' type='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='InitVector' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_PKCS5_PBKDF2_PARAMS' type='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PseudoRandomFunction' declared_type='CSSM_PKCS5_PBKDF2_PRF' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_PKCS5_PBKDF2_PARAMS_PTR' type='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PseudoRandomFunction' declared_type='CSSM_PKCS5_PBKDF2_PRF' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY' type='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='Conjunctive' declared_type='CSSM_DB_CONJUNCTIVE' type='L' type64='I'/>
    <field name='NumSelectionPredicates' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionPredicate' declared_type='CSSM_SELECTION_PREDICATE_PTR' type='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}}'/>
    <field name='QueryLimits' declared_type='CSSM_QUERY_LIMITS' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
    <field name='QueryFlags' declared_type='CSSM_QUERY_FLAGS' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY_LIMITS' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
    <field name='TimeLimit' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeLimit' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY_LIMITS_PTR' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
    <field name='TimeLimit' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeLimit' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY_PTR' type='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='Conjunctive' declared_type='CSSM_DB_CONJUNCTIVE' type='L' type64='I'/>
    <field name='NumSelectionPredicates' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionPredicate' declared_type='CSSM_SELECTION_PREDICATE_PTR' type='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}}'/>
    <field name='QueryLimits' declared_type='CSSM_QUERY_LIMITS' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
    <field name='QueryFlags' declared_type='CSSM_QUERY_FLAGS' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY_SIZE_DATA' type='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
    <field name='SizeInputBlock' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeOutputBlock' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_QUERY_SIZE_DATA_PTR' type='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
    <field name='SizeInputBlock' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeOutputBlock' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_RANGE' type='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
    <field name='Min' declared_type='uint32' type='L' type64='I'/>
    <field name='Max' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_RANGE_PTR' type='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
    <field name='Min' declared_type='uint32' type='L' type64='I'/>
    <field name='Max' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_RESOURCE_CONTROL_CONTEXT' type='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
    <field name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
    <field name='InitialAclEntry' declared_type='CSSM_ACL_ENTRY_INPUT' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
  </struct>
  <struct name='CSSM_RESOURCE_CONTROL_CONTEXT_PTR' type='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
    <field name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
    <field name='InitialAclEntry' declared_type='CSSM_ACL_ENTRY_INPUT' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
  </struct>
  <struct name='CSSM_SAMPLE' type='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
    <field name='TypedSample' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Verifier' declared_type='CSSM_SUBSERVICE_UID*' type='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}' const='true'/>
  </struct>
  <struct name='CSSM_SAMPLEGROUP' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
    <field name='NumberOfSamples' declared_type='uint32' type='L' type64='I'/>
    <field name='Samples' declared_type='CSSM_SAMPLE*' type='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}' const='true'/>
  </struct>
  <struct name='CSSM_SAMPLEGROUP_PTR' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
    <field name='NumberOfSamples' declared_type='uint32' type='L' type64='I'/>
    <field name='Samples' declared_type='CSSM_SAMPLE*' type='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}' const='true'/>
  </struct>
  <struct name='CSSM_SAMPLE_PTR' type='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
    <field name='TypedSample' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Verifier' declared_type='CSSM_SUBSERVICE_UID*' type='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}' const='true'/>
  </struct>
  <struct name='CSSM_SELECTION_PREDICATE' type='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
    <field name='DbOperator' declared_type='CSSM_DB_OPERATOR' type='L' type64='I'/>
    <field name='Attribute' declared_type='CSSM_DB_ATTRIBUTE_DATA' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
  </struct>
  <struct name='CSSM_SELECTION_PREDICATE_PTR' type='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
    <field name='DbOperator' declared_type='CSSM_DB_OPERATOR' type='L' type64='I'/>
    <field name='Attribute' declared_type='CSSM_DB_ATTRIBUTE_DATA' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
  </struct>
  <struct name='CSSM_SPI_AC_FUNCS' type='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='AuthCompute' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_AC_FUNCS_PTR' type='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='AuthCompute' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_CL_FUNCS' type='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetKeyInfo' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR*' type='^^{cssm_key}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToSignedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERT_BUNDLE_HEADER*' type='^{cssm_cert_bundle_header=II}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupFromVerifiedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERT_BUNDLE*' type='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSetFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAddCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlRemoveCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCachedCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllCachedRecordFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_CL_FUNCS_PTR' type='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetKeyInfo' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR*' type='^^{cssm_key}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToSignedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERT_BUNDLE_HEADER*' type='^{cssm_cert_bundle_header=II}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupFromVerifiedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERT_BUNDLE*' type='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSetFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAddCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlRemoveCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCachedCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllCachedRecordFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_CSP_FUNCS' type='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
    <field name='EventNotify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CONTEXT_EVENT' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QuerySize' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_QUERY_SIZE_DATA_PTR' type='^{cssm_query_size_data=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataClone' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QueryKeySizeInBits' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_SIZE_PTR' type='^{cssm_key_size=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKeyPair' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRandom' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateAlgorithmParams' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR*' type='^^{cssm_context_attribute}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='WrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='UnwrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeriveKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Login' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Logout' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ObtainPrivateKeyFromPublicKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveUniqueId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCounter' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDevice' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetTimeValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetOperationalStatistics' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_OPERATIONAL_STATISTICS*' type='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_CSP_FUNCS_PTR' type='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
    <field name='EventNotify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CONTEXT_EVENT' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QuerySize' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_QUERY_SIZE_DATA_PTR' type='^{cssm_query_size_data=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataClone' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QueryKeySizeInBits' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_SIZE_PTR' type='^{cssm_key_size=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKeyPair' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRandom' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateAlgorithmParams' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR*' type='^^{cssm_context_attribute}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='WrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='UnwrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeriveKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Login' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Logout' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ObtainPrivateKeyFromPublicKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveUniqueId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCounter' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDevice' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetTimeValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetOperationalStatistics' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_OPERATIONAL_STATISTICS*' type='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_DL_FUNCS' type='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbCreate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DBINFO*' type='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Authenticate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_DL_FUNCS_PTR' type='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbCreate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DBINFO*' type='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Authenticate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_KR_FUNCS' type='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='RegistrationRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegistrationRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_KR_PROFILE_PTR' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ProcessRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetRecoveredObject' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequestAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_KR_FUNCS_PTR' type='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='RegistrationRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegistrationRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_KR_PROFILE_PTR' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ProcessRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetRecoveredObject' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequestAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_TP_FUNCS' type='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='SubmitCredRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_REQUEST_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_REQUEST_SET*' type='^{cssm_tp_request_set=I^v}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_TP_RESULT_SET_PTR*' type='^^{cssm_tp_result_set}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ConfirmCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE*' type='^{cssm_tp_confirm_response=I^I}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ReceiveConfirmation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE_PTR*' type='^^{cssm_tp_confirm_response}'/>
      <arg declared_type='sint32*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormSubmit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRevoke' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRemoveFromCrlTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ApplyCrlToDb' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupConstruct' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupPrune' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToTupleGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR*' type='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='TupleGroupToCertGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SPI_TP_FUNCS_PTR' type='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='SubmitCredRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_REQUEST_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_REQUEST_SET*' type='^{cssm_tp_request_set=I^v}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_TP_RESULT_SET_PTR*' type='^^{cssm_tp_result_set}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ConfirmCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE*' type='^{cssm_tp_confirm_response=I^I}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ReceiveConfirmation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE_PTR*' type='^^{cssm_tp_confirm_response}'/>
      <arg declared_type='sint32*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormSubmit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRevoke' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRemoveFromCrlTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ApplyCrlToDb' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupConstruct' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupPrune' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToTupleGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR*' type='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='TupleGroupToCertGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_STATE_FUNCS' type='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
    <field name='cssm_GetAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
      <arg declared_type='void**' type='^^v'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_ReleaseAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_GetAppMemoryFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_UPCALLS_PTR' type='^{cssm_upcalls=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_IsFuncCallValid' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <arg declared_type='CSSM_PRIVILEGE*' type='^Q'/>
      <arg declared_type='CSSM_BITMASK' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeregisterManagerServices' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_GUID *)' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeliverModuleManagerEvent' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_STATE_FUNCS_PTR' type='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
    <field name='cssm_GetAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
      <arg declared_type='void**' type='^^v'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_ReleaseAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_GetAppMemoryFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_UPCALLS_PTR' type='^{cssm_upcalls=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_IsFuncCallValid' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <arg declared_type='CSSM_PRIVILEGE*' type='^Q'/>
      <arg declared_type='CSSM_BITMASK' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeregisterManagerServices' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_GUID *)' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeliverModuleManagerEvent' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
    <field name='Guid' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='Version' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='SubserviceId' declared_type='uint32' type='L' type64='I'/>
    <field name='SubserviceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_SUBSERVICE_UID_PTR' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
    <field name='Guid' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='Version' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='SubserviceId' declared_type='uint32' type='L' type64='I'/>
    <field name='SubserviceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_APPLE_EVIDENCE_HEADER' type='{_CSSM_TP_APPLE_EVIDENCE_HEADER=&quot;Version&quot;I}'>
    <field name='Version' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_APPLE_EVIDENCE_INFO' type='{_CSSM_TP_APPLE_EVIDENCE_INFO=&quot;StatusBits&quot;I&quot;NumStatusCodes&quot;I&quot;StatusCodes&quot;^i&quot;Index&quot;I&quot;DlDbHandle&quot;{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}&quot;UniqueRecord&quot;^{cssm_db_unique_record}}'>
    <field name='StatusBits' declared_type='CSSM_TP_APPLE_CERT_STATUS' type='L' type64='I'/>
    <field name='NumStatusCodes' declared_type='uint32' type='L' type64='I'/>
    <field name='StatusCodes' declared_type='CSSM_RETURN*' type='^i'/>
    <field name='Index' declared_type='uint32' type='L' type64='I'/>
    <field name='DlDbHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}'/>
    <field name='UniqueRecord' declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_TP_AUTHORITY_ID' type='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
    <field name='AuthorityCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
    <field name='AuthorityLocation' declared_type='CSSM_NET_ADDRESS_PTR' type='^{cssm_net_address=I{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_TP_AUTHORITY_ID_PTR' type='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
    <field name='AuthorityCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
    <field name='AuthorityLocation' declared_type='CSSM_NET_ADDRESS_PTR' type='^{cssm_net_address=I{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_TP_CALLERAUTH_CONTEXT' type='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Policy' declared_type='CSSM_TP_POLICYINFO' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
    <field name='VerifyTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='VerificationAbortOn' declared_type='CSSM_TP_STOP_ON' type='L' type64='I'/>
    <field name='CallbackWithVerifiedCert' function_pointer='true' declared_type='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='NumberOfAnchorCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='AnchorCerts' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='DBList' declared_type='CSSM_DL_DB_LIST_PTR' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CALLERAUTH_CONTEXT_PTR' type='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Policy' declared_type='CSSM_TP_POLICYINFO' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
    <field name='VerifyTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='VerificationAbortOn' declared_type='CSSM_TP_STOP_ON' type='L' type64='I'/>
    <field name='CallbackWithVerifiedCert' function_pointer='true' declared_type='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='NumberOfAnchorCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='AnchorCerts' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='DBList' declared_type='CSSM_DL_DB_LIST_PTR' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTCHANGE_INPUT' type='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Action' declared_type='CSSM_TP_CERTCHANGE_ACTION' type='L' type64='I'/>
    <field name='Reason' declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='ChangeInfo' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='StartTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTCHANGE_INPUT_PTR' type='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Action' declared_type='CSSM_TP_CERTCHANGE_ACTION' type='L' type64='I'/>
    <field name='Reason' declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='ChangeInfo' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='StartTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTCHANGE_OUTPUT' type='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='ActionStatus' declared_type='CSSM_TP_CERTCHANGE_STATUS' type='L' type64='I'/>
    <field name='RevokeInfo' declared_type='CSSM_FIELD' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_TP_CERTCHANGE_OUTPUT_PTR' type='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='ActionStatus' declared_type='CSSM_TP_CERTCHANGE_STATUS' type='L' type64='I'/>
    <field name='RevokeInfo' declared_type='CSSM_FIELD' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_TP_CERTISSUE_INPUT' type='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;I&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CSPSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfTemplateFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SubjectCertFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTISSUE_INPUT_PTR' type='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;I&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CSPSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfTemplateFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SubjectCertFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTISSUE_OUTPUT' type='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CERTISSUE_STATUS' type='L' type64='I'/>
    <field name='CertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_CERTISSUE_OUTPUT_PTR' type='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CERTISSUE_STATUS' type='L' type64='I'/>
    <field name='CertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_CERTNOTARIZE_INPUT' type='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;I&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='SignScope' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTNOTARIZE_INPUT_PTR' type='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;I&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='SignScope' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTNOTARIZE_OUTPUT' type='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='NotarizeStatus' declared_type='CSSM_TP_CERTNOTARIZE_STATUS' type='L' type64='I'/>
    <field name='NotarizedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_CERTNOTARIZE_OUTPUT_PTR' type='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='NotarizeStatus' declared_type='CSSM_TP_CERTNOTARIZE_STATUS' type='L' type64='I'/>
    <field name='NotarizedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_TP_CERTRECLAIM_INPUT' type='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;I&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfSelectionFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTRECLAIM_INPUT_PTR' type='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;I&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfSelectionFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTRECLAIM_OUTPUT' type='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
    <field name='ReclaimStatus' declared_type='CSSM_TP_CERTRECLAIM_STATUS' type='L' type64='I'/>
    <field name='ReclaimedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KeyCacheHandle' declared_type='CSSM_LONG_HANDLE' type='Q'/>
  </struct>
  <struct name='CSSM_TP_CERTRECLAIM_OUTPUT_PTR' type='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
    <field name='ReclaimStatus' declared_type='CSSM_TP_CERTRECLAIM_STATUS' type='L' type64='I'/>
    <field name='ReclaimedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KeyCacheHandle' declared_type='CSSM_LONG_HANDLE' type='Q'/>
  </struct>
  <struct name='CSSM_TP_CERTVERIFY_INPUT' type='{cssm_tp_certverify_input=&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='VerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT_PTR' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
  </struct>
  <struct name='CSSM_TP_CERTVERIFY_INPUT_PTR' type='{cssm_tp_certverify_input=&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='VerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT_PTR' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
  </struct>
  <struct name='CSSM_TP_CERTVERIFY_OUTPUT' type='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='VerifyStatus' declared_type='CSSM_TP_CERTVERIFY_STATUS' type='L' type64='I'/>
    <field name='NumberOfEvidence' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='CSSM_TP_CERTVERIFY_OUTPUT_PTR' type='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='VerifyStatus' declared_type='CSSM_TP_CERTVERIFY_STATUS' type='L' type64='I'/>
    <field name='NumberOfEvidence' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='CSSM_TP_CONFIRM_RESPONSE' type='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
    <field name='NumberOfResponses' declared_type='uint32' type='L' type64='I'/>
    <field name='Responses' declared_type='CSSM_TP_CONFIRM_STATUS_PTR' type='^I'/>
  </struct>
  <struct name='CSSM_TP_CONFIRM_RESPONSE_PTR' type='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
    <field name='NumberOfResponses' declared_type='uint32' type='L' type64='I'/>
    <field name='Responses' declared_type='CSSM_TP_CONFIRM_STATUS_PTR' type='^I'/>
  </struct>
  <struct name='CSSM_TP_CRLISSUE_INPUT' type='{cssm_tp_crlissue_input=&quot;CLHandle&quot;I&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='CrlIdentifier' declared_type='uint32' type='L' type64='I'/>
    <field name='CrlThisTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='PolicyIdentifier' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CRLISSUE_INPUT_PTR' type='{cssm_tp_crlissue_input=&quot;CLHandle&quot;I&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='CrlIdentifier' declared_type='uint32' type='L' type64='I'/>
    <field name='CrlThisTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='PolicyIdentifier' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='CSSM_TP_CRLISSUE_OUTPUT' type='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CRLISSUE_STATUS' type='L' type64='I'/>
    <field name='Crl' declared_type='CSSM_ENCODED_CRL_PTR' type='^{cssm_encoded_crl=II{cssm_data=I*}}'/>
    <field name='CrlNextTime' declared_type='CSSM_TIMESTRING' type='*'/>
  </struct>
  <struct name='CSSM_TP_CRLISSUE_OUTPUT_PTR' type='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CRLISSUE_STATUS' type='L' type64='I'/>
    <field name='Crl' declared_type='CSSM_ENCODED_CRL_PTR' type='^{cssm_encoded_crl=II{cssm_data=I*}}'/>
    <field name='CrlNextTime' declared_type='CSSM_TIMESTRING' type='*'/>
  </struct>
  <struct name='CSSM_TP_POLICYINFO' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
    <field name='NumberOfPolicyIds' declared_type='uint32' type='L' type64='I'/>
    <field name='PolicyIds' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='PolicyControl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_POLICYINFO_PTR' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
    <field name='NumberOfPolicyIds' declared_type='uint32' type='L' type64='I'/>
    <field name='PolicyIds' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='PolicyControl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_REQUEST_SET' type='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
    <field name='NumberOfRequests' declared_type='uint32' type='L' type64='I'/>
    <field name='Requests' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_REQUEST_SET_PTR' type='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
    <field name='NumberOfRequests' declared_type='uint32' type='L' type64='I'/>
    <field name='Requests' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_RESULT_SET' type='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
    <field name='NumberOfResults' declared_type='uint32' type='L' type64='I'/>
    <field name='Results' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_RESULT_SET_PTR' type='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
    <field name='NumberOfResults' declared_type='uint32' type='L' type64='I'/>
    <field name='Results' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_TP_VERIFY_CONTEXT' type='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
    <field name='Action' declared_type='CSSM_TP_ACTION' type='L' type64='I'/>
    <field name='ActionData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Crls' declared_type='CSSM_CRLGROUP' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
    <field name='Cred' declared_type='CSSM_TP_CALLERAUTH_CONTEXT_PTR' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
  </struct>
  <struct name='CSSM_TP_VERIFY_CONTEXT_PTR' type='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
    <field name='Action' declared_type='CSSM_TP_ACTION' type='L' type64='I'/>
    <field name='ActionData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Crls' declared_type='CSSM_CRLGROUP' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
    <field name='Cred' declared_type='CSSM_TP_CALLERAUTH_CONTEXT_PTR' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
  </struct>
  <struct name='CSSM_TP_VERIFY_CONTEXT_RESULT' type='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='NumberOfEvidences' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='NumberOfEvidences' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='CSSM_TUPLE' type='{_CSSM_TUPLE=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'>
    <field name='Issuer' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Subject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='AuthorizationTag' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='ValidityPeriod' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
  </struct>
  <struct name='CSSM_TUPLEGROUP' type='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
    <field name='NumberOfTuples' declared_type='uint32' type='L' type64='I'/>
    <field name='Tuples' declared_type='CSSM_TUPLE_PTR' type='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
  </struct>
  <struct name='CSSM_TUPLEGROUP_PTR' type='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
    <field name='NumberOfTuples' declared_type='uint32' type='L' type64='I'/>
    <field name='Tuples' declared_type='CSSM_TUPLE_PTR' type='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
  </struct>
  <struct name='CSSM_TUPLE_PTR' type='{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'>
    <field name='Issuer' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Subject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='AuthorizationTag' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='ValidityPeriod' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
  </struct>
  <struct name='CSSM_UPCALLS' type='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_MALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_UPCALLS_FREE' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_REALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_CALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='CcToHandle_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_MODULE_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetModuleInfo_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_VERSION_PTR' type='^{cssm_version=II}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_SERVICE_TYPE*' type='^I'/>
      <arg declared_type='CSSM_ATTACH_FLAGS*' type='^I'/>
      <arg declared_type='CSSM_KEY_HIERARCHY*' type='^I'/>
      <arg declared_type='CSSM_API_MEMORY_FUNCS_PTR' type='^{cssm_memory_funcs=^?^?^?^?^v}'/>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_UPCALLS_PTR' type='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_MALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_UPCALLS_FREE' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_REALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_CALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='CcToHandle_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_MODULE_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetModuleInfo_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_VERSION_PTR' type='^{cssm_version=II}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_SERVICE_TYPE*' type='^I'/>
      <arg declared_type='CSSM_ATTACH_FLAGS*' type='^I'/>
      <arg declared_type='CSSM_KEY_HIERARCHY*' type='^I'/>
      <arg declared_type='CSSM_API_MEMORY_FUNCS_PTR' type='^{cssm_memory_funcs=^?^?^?^?^v}'/>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
    <field name='Major' declared_type='uint32' type='L' type64='I'/>
    <field name='Minor' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_VERSION_PTR' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
    <field name='Major' declared_type='uint32' type='L' type64='I'/>
    <field name='Minor' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_WRAP_KEY' type='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='KeyHeader' declared_type='CSSM_KEYHEADER' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
    <field name='KeyData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509EXT_BASICCONSTRAINTS' type='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
    <field name='cA' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='pathLenConstraintPresent' declared_type='CSSM_X509_OPTION' type='l' type64='i'/>
    <field name='pathLenConstraint' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_X509EXT_BASICCONSTRAINTS_PTR' type='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
    <field name='cA' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='pathLenConstraintPresent' declared_type='CSSM_X509_OPTION' type='l' type64='i'/>
    <field name='pathLenConstraint' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='CSSM_X509EXT_PAIR' type='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
    <field name='tagAndValue' declared_type='CSSM_X509EXT_TAGandVALUE' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='parsedValue' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_X509EXT_PAIR_PTR' type='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
    <field name='tagAndValue' declared_type='CSSM_X509EXT_TAGandVALUE' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='parsedValue' declared_type='void*' type='^v'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYINFO' type='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
    <field name='policyIdentifier' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='policyQualifiers' declared_type='CSSM_X509EXT_POLICYQUALIFIERS' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYINFO_PTR' type='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
    <field name='policyIdentifier' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='policyQualifiers' declared_type='CSSM_X509EXT_POLICYQUALIFIERS' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYQUALIFIERINFO' type='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='policyQualifierId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYQUALIFIERINFO_PTR' type='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='policyQualifierId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYQUALIFIERS' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
    <field name='numberOfPolicyQualifiers' declared_type='uint32' type='L' type64='I'/>
    <field name='policyQualifier' declared_type='CSSM_X509EXT_POLICYQUALIFIERINFO*' type='^{cssm_x509ext_policyQualifierInfo={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509EXT_POLICYQUALIFIERS_PTR' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
    <field name='numberOfPolicyQualifiers' declared_type='uint32' type='L' type64='I'/>
    <field name='policyQualifier' declared_type='CSSM_X509EXT_POLICYQUALIFIERINFO*' type='^{cssm_x509ext_policyQualifierInfo={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509EXT_TAGandVALUE' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509EXT_TAGandVALUE_PTR' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='parameters' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_ALGORITHM_IDENTIFIER_PTR' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='parameters' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_EXTENSION' type='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='extnId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='critical' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='format' declared_type='CSSM_X509EXT_DATA_FORMAT' type='i'/>
    <field name='value' declared_type='union cssm_x509ext_value' type='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
    <field name='BERvalue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
    <field name='numberOfExtensions' declared_type='uint32' type='L' type64='I'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSION_PTR' type='^{cssm_x509_extension={cssm_data=I*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509_EXTENSIONS_PTR' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
    <field name='numberOfExtensions' declared_type='uint32' type='L' type64='I'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSION_PTR' type='^{cssm_x509_extension={cssm_data=I*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509_EXTENSION_PTR' type='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='extnId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='critical' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='format' declared_type='CSSM_X509EXT_DATA_FORMAT' type='i'/>
    <field name='value' declared_type='union cssm_x509ext_value' type='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
    <field name='BERvalue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
    <field name='numberOfRDNs' declared_type='uint32' type='L' type64='I'/>
    <field name='RelativeDistinguishedName' declared_type='CSSM_X509_RDN_PTR' type='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
  </struct>
  <struct name='CSSM_X509_NAME_PTR' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
    <field name='numberOfRDNs' declared_type='uint32' type='L' type64='I'/>
    <field name='RelativeDistinguishedName' declared_type='CSSM_X509_RDN_PTR' type='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
  </struct>
  <struct name='CSSM_X509_RDN' type='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
    <field name='numberOfPairs' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeTypeAndValue' declared_type='CSSM_X509_TYPE_VALUE_PAIR_PTR' type='^{cssm_x509_type_value_pair={cssm_data=I*}C{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509_RDN_PTR' type='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
    <field name='numberOfPairs' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeTypeAndValue' declared_type='CSSM_X509_TYPE_VALUE_PAIR_PTR' type='^{cssm_x509_type_value_pair={cssm_data=I*}C{cssm_data=I*}}'/>
  </struct>
  <struct name='CSSM_X509_REVOKED_CERT_ENTRY' type='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='certificateSerialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='revocationDate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_REVOKED_CERT_ENTRY_PTR' type='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='certificateSerialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='revocationDate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_REVOKED_CERT_LIST' type='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
    <field name='numberOfRevokedCertEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='revokedCertEntry' declared_type='CSSM_X509_REVOKED_CERT_ENTRY_PTR' type='^{cssm_x509_revoked_cert_entry={cssm_data=I*}{cssm_x509_time=C{cssm_data=I*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
  </struct>
  <struct name='CSSM_X509_REVOKED_CERT_LIST_PTR' type='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
    <field name='numberOfRevokedCertEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='revokedCertEntry' declared_type='CSSM_X509_REVOKED_CERT_ENTRY_PTR' type='^{cssm_x509_revoked_cert_entry={cssm_data=I*}{cssm_x509_time=C{cssm_data=I*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
  </struct>
  <struct name='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithmIdentifier' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='encrypted' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_SIGNATURE_PTR' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithmIdentifier' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='encrypted' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_SIGNED_CERTIFICATE' type='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='certificate' declared_type='CSSM_X509_TBS_CERTIFICATE' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_X509_SIGNED_CERTIFICATE_PTR' type='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='certificate' declared_type='CSSM_X509_TBS_CERTIFICATE' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_X509_SIGNED_CRL' type='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='tbsCertList' declared_type='CSSM_X509_TBS_CERTLIST' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_X509_SIGNED_CRL_PTR' type='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='tbsCertList' declared_type='CSSM_X509_TBS_CERTLIST' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='subjectPublicKey' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='subjectPublicKey' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_TBS_CERTIFICATE' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='serialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='validity' declared_type='CSSM_X509_VALIDITY' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
    <field name='subject' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='subjectPublicKeyInfo' declared_type='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuerUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='subjectUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_TBS_CERTIFICATE_PTR' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='serialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='validity' declared_type='CSSM_X509_VALIDITY' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
    <field name='subject' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='subjectPublicKeyInfo' declared_type='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuerUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='subjectUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_TBS_CERTLIST' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='thisUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='nextUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='revokedCertificates' declared_type='CSSM_X509_REVOKED_CERT_LIST_PTR' type='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_TBS_CERTLIST_PTR' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='thisUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='nextUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='revokedCertificates' declared_type='CSSM_X509_REVOKED_CERT_LIST_PTR' type='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='timeType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='time' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_TIME_PTR' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='timeType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='time' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_TYPE_VALUE_PAIR' type='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='valueType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_TYPE_VALUE_PAIR_PTR' type='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='valueType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='CSSM_X509_VALIDITY' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='notBefore' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='notAfter' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='CSSM_X509_VALIDITY_PTR' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='notBefore' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='notAfter' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='ISL_CONST_DATA' type='{isl_const_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*' const='true'/>
  </struct>
  <struct name='ISL_CONST_DATA_PTR' type='{isl_const_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*' const='true'/>
  </struct>
  <struct name='ISL_DATA' type='{isl_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='ISL_DATA_PTR' type='{isl_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='MDS_DB_HANDLE' type='{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}'>
    <field name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <field name='DBHandle' declared_type='CSSM_DB_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='MDS_FUNCS' type='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='MDS_FUNCS_PTR' type='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='SecKeyImportExportParameters' type='{_SecKeyImportExportParameters=&quot;version&quot;I&quot;flags&quot;I&quot;passphrase&quot;^v&quot;alertTitle&quot;^{__CFString}&quot;alertPrompt&quot;^{__CFString}&quot;accessRef&quot;^{OpaqueSecAccessRef}&quot;keyUsage&quot;I&quot;keyAttributes&quot;I}'>
    <field name='version' declared_type='uint32_t' type='I'/>
    <field name='flags' declared_type='SecKeyImportExportFlags' type='I'/>
    <field name='passphrase' declared_type='CFTypeRef' type='@'/>
    <field name='alertTitle' declared_type='CFStringRef' type='^{__CFString=}'/>
    <field name='alertPrompt' declared_type='CFStringRef' type='^{__CFString=}'/>
    <field name='accessRef' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <field name='keyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <field name='keyAttributes' declared_type='CSSM_KEYATTR_FLAGS' type='L' type64='I'/>
  </struct>
  <struct name='SecKeychainAttributeInfo' type='{SecKeychainAttributeInfo=&quot;count&quot;I&quot;tag&quot;^I&quot;format&quot;^I}'>
    <field name='count' declared_type='UInt32' type='L' type64='I'/>
    <field name='tag' declared_type='UInt32*' type='^I'/>
    <field name='format' declared_type='UInt32*' type='^I'/>
  </struct>
  <struct name='SecKeychainCallbackInfo' type='{SecKeychainCallbackInfo=&quot;version&quot;I&quot;item&quot;^{OpaqueSecKeychainItemRef}&quot;keychain&quot;^{OpaqueSecKeychainRef}&quot;pid&quot;i}'>
    <field name='version' declared_type='UInt32' type='L' type64='I'/>
    <field name='item' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <field name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <field name='pid' declared_type='pid_t' type='i'/>
  </struct>
  <struct name='SecKeychainSettings' type='{SecKeychainSettings=&quot;version&quot;I&quot;lockOnSleep&quot;B&quot;useLockInterval&quot;B&quot;lockInterval&quot;I}'>
    <field name='version' declared_type='UInt32' type='L' type64='I'/>
    <field name='lockOnSleep' declared_type='Boolean' type='B'/>
    <field name='useLockInterval' declared_type='Boolean' type='B'/>
    <field name='lockInterval' declared_type='UInt32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_access_credentials' type='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='BaseCerts' declared_type='CSSM_BASE_CERTS' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
    <field name='Samples' declared_type='CSSM_SAMPLEGROUP' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CHALLENGE_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_SAMPLEGROUP_PTR' type='^{cssm_samplegroup=I^{cssm_sample}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_acl_edit' type='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;I&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
    <field name='EditMode' declared_type='CSSM_ACL_EDIT_MODE' type='L' type64='I'/>
    <field name='OldEntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
    <field name='NewEntry' declared_type='CSSM_ACL_ENTRY_INPUT*' type='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}' const='true'/>
  </struct>
  <struct name='cssm_acl_entry_info' type='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;I}'>
    <field name='EntryPublicInfo' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='EntryHandle' declared_type='CSSM_ACL_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='cssm_acl_entry_input' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
    <field name='Prototype' declared_type='CSSM_ACL_ENTRY_PROTOTYPE' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_ACL_SUBJECT_CALLBACK' type='^?'>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST_PTR' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerContext' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_acl_entry_prototype' type='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='Authorization' declared_type='CSSM_AUTHORIZATIONGROUP' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
    <field name='TimeRange' declared_type='CSSM_ACL_VALIDITY_PERIOD' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='EntryTag' declared_type='CSSM_STRING' type='[68c]'/>
  </struct>
  <struct name='cssm_acl_keychain_prompt_selector' type='{cssm_acl_keychain_prompt_selector=&quot;version&quot;S&quot;flags&quot;S}'>
    <field name='version' declared_type='uint16' type='S'/>
    <field name='flags' declared_type='uint16' type='S'/>
  </struct>
  <struct name='cssm_acl_owner_prototype' type='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
    <field name='TypedSubject' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Delegate' declared_type='CSSM_BOOL' type='l' type64='i'/>
  </struct>
  <struct name='cssm_acl_process_subject_selector' type='{cssm_acl_process_subject_selector=&quot;version&quot;S&quot;mask&quot;S&quot;uid&quot;I&quot;gid&quot;I}'>
    <field name='version' declared_type='uint16' type='S'/>
    <field name='mask' declared_type='uint16' type='S'/>
    <field name='uid' declared_type='uint32' type='L' type64='I'/>
    <field name='gid' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_acl_validity_period' type='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='StartDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='EndDate' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_applecspdl_db_change_password_parameters' type='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
    <field name='accessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_applecspdl_db_is_locked_parameters' type='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
    <field name='isLocked' declared_type='uint8' type='C'/>
  </struct>
  <struct name='cssm_applecspdl_db_settings_parameters' type='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
    <field name='idleTimeout' declared_type='uint32' type='L' type64='I'/>
    <field name='lockOnSleep' declared_type='uint8' type='C'/>
  </struct>
  <struct name='cssm_appledl_open_parameters' type='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
    <field name='length' declared_type='uint32' type='L' type64='I'/>
    <field name='version' declared_type='uint32' type='L' type64='I'/>
    <field name='autoCommit' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='mask' declared_type='uint32' type='L' type64='I'/>
    <field name='mode' declared_type='mode_t' type='S'/>
  </struct>
  <struct name='cssm_authorizationgroup' type='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
    <field name='NumberOfAuthTags' declared_type='uint32' type='L' type64='I'/>
    <field name='AuthTags' declared_type='CSSM_ACL_AUTHORIZATION_TAG*' type='^i'/>
  </struct>
  <struct name='cssm_base_certs' type='{cssm_base_certs=&quot;TPHandle&quot;I&quot;CLHandle&quot;I&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
    <field name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Certs' declared_type='CSSM_CERTGROUP' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
  </struct>
  <struct name='cssm_cert_bundle' type='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='BundleHeader' declared_type='CSSM_CERT_BUNDLE_HEADER' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
    <field name='Bundle' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_cert_bundle_header' type='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
    <field name='BundleType' declared_type='CSSM_CERT_BUNDLE_TYPE' type='L' type64='I'/>
    <field name='BundleEncoding' declared_type='CSSM_CERT_BUNDLE_ENCODING' type='L' type64='I'/>
  </struct>
  <struct name='cssm_cert_pair' type='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
    <field name='EncodedCert' declared_type='CSSM_ENCODED_CERT' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCert' declared_type='CSSM_PARSED_CERT' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
  </struct>
  <struct name='cssm_certgroup' type='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='NumCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupList' declared_type='union cssm_certgroup::' type='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
    <field name='CertGroupType' declared_type='CSSM_CERTGROUP_TYPE' type='L' type64='I'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_context' type='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;I&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
    <field name='ContextType' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
    <field name='AlgorithmType' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='ContextAttributes' declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR' type='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
    <field name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <field name='Privileged' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='EncryptionProhibited' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint32' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_context_attribute' type='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
    <field name='AttributeType' declared_type='CSSM_ATTRIBUTE_TYPE' type='L' type64='I'/>
    <field name='AttributeLength' declared_type='uint32' type='L' type64='I'/>
    <field name='Attribute' declared_type='union cssm_context_attribute_value' type='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
  </struct>
  <struct name='cssm_crl_pair' type='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
    <field name='EncodedCrl' declared_type='CSSM_ENCODED_CRL' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='ParsedCrl' declared_type='CSSM_PARSED_CRL' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
  </struct>
  <struct name='cssm_crlgroup' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='NumberOfCrls' declared_type='uint32' type='L' type64='I'/>
    <field name='GroupCrlList' declared_type='union cssm_crlgroup::' type='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
    <field name='CrlGroupType' declared_type='CSSM_CRLGROUP_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='cssm_crypto_data' type='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
    <field name='Param' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Callback' function_pointer='true' declared_type='CSSM_CALLBACK' type='^?'>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CallerCtx' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_csp_operational_statistics' type='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
    <field name='UserAuthenticated' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='DeviceFlags' declared_type='CSSM_CSP_FLAGS' type='L' type64='I'/>
    <field name='TokenMaxSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenMaxRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenOpenedRWSessionCount' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePublicMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenTotalPrivateMem' declared_type='uint32' type='L' type64='I'/>
    <field name='TokenFreePrivateMem' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_data' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='cssm_date' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
    <field name='Year' declared_type='uint8*' type='[4C]'/>
    <field name='Month' declared_type='uint8*' type='[2C]'/>
    <field name='Day' declared_type='uint8*' type='[2C]'/>
  </struct>
  <struct name='cssm_db_attribute_data' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
    <field name='NumberOfValues' declared_type='uint32' type='L' type64='I'/>
    <field name='Value' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='cssm_db_attribute_info' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
    <field name='AttributeNameFormat' declared_type='CSSM_DB_ATTRIBUTE_NAME_FORMAT' type='L' type64='I'/>
    <field name='Label' declared_type='union cssm_db_attribute_label' type='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
    <field name='AttributeFormat' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='cssm_db_index_info' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
    <field name='Info' declared_type='CSSM_DB_ATTRIBUTE_INFO' type='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
  </struct>
  <struct name='cssm_db_parsing_module_info' type='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='ModuleSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
  </struct>
  <struct name='cssm_db_record_attribute_data' type='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='SemanticInformation' declared_type='uint32' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeData' declared_type='CSSM_DB_ATTRIBUTE_DATA_PTR' type='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}'/>
  </struct>
  <struct name='cssm_db_record_attribute_info' type='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeInfo' declared_type='CSSM_DB_ATTRIBUTE_INFO_PTR' type='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}'/>
  </struct>
  <struct name='cssm_db_record_index_info' type='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
    <field name='DataRecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='NumberOfIndexes' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexInfo' declared_type='CSSM_DB_INDEX_INFO_PTR' type='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}'/>
  </struct>
  <struct name='cssm_db_schema_attribute_info' type='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;DataType&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeName' declared_type='char*' type='*'/>
    <field name='AttributeNameID' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='DataType' declared_type='CSSM_DB_ATTRIBUTE_FORMAT' type='L' type64='I'/>
  </struct>
  <struct name='cssm_db_schema_index_info' type='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
    <field name='AttributeId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexId' declared_type='uint32' type='L' type64='I'/>
    <field name='IndexType' declared_type='CSSM_DB_INDEX_TYPE' type='L' type64='I'/>
    <field name='IndexedDataLocation' declared_type='CSSM_DB_INDEXED_DATA_LOCATION' type='L' type64='I'/>
  </struct>
  <struct name='cssm_db_unique_record' type='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='RecordLocator' declared_type='CSSM_DB_INDEX_INFO' type='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
    <field name='RecordIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_dbinfo' type='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
    <field name='NumberOfRecordTypes' declared_type='uint32' type='L' type64='I'/>
    <field name='DefaultParsingModules' declared_type='CSSM_DB_PARSING_MODULE_INFO_PTR' type='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
    <field name='RecordAttributeNames' declared_type='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' type='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
    <field name='RecordIndexes' declared_type='CSSM_DB_RECORD_INDEX_INFO_PTR' type='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
    <field name='IsLocal' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='AccessPath' declared_type='char*' type='*'/>
    <field name='Reserved' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_dl_db_handle' type='{cssm_dl_db_handle=&quot;DLHandle&quot;I&quot;DBHandle&quot;I}'>
    <field name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <field name='DBHandle' declared_type='CSSM_DB_HANDLE' type='L' type64='I'/>
  </struct>
  <struct name='cssm_dl_db_list' type='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
    <field name='NumHandles' declared_type='uint32' type='L' type64='I'/>
    <field name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE_PTR' type='^{cssm_dl_db_handle=II}'/>
  </struct>
  <struct name='cssm_dl_pkcs11_attributes' type='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
    <field name='DeviceAccessFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_encoded_cert' type='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='CertEncoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <field name='CertBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_encoded_crl' type='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='CrlEncoding' declared_type='CSSM_CRL_ENCODING' type='L' type64='I'/>
    <field name='CrlBlob' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_evidence' type='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
    <field name='EvidenceForm' declared_type='CSSM_EVIDENCE_FORM' type='L' type64='I'/>
    <field name='Evidence' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_field' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='FieldOid' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='FieldValue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_fieldgroup' type='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
    <field name='NumberOfFields' declared_type='int' type='i'/>
    <field name='Fields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='cssm_func_name_addr' type='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
    <field name='Name' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='Address' function_pointer='true' declared_type='CSSM_PROC_ADDR' type='^?'>
      <retval declared_type='void' type='v'/>
    </field>
  </struct>
  <struct name='cssm_guid' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
    <field name='Data1' declared_type='uint32' type='L' type64='I'/>
    <field name='Data2' declared_type='uint16' type='S'/>
    <field name='Data3' declared_type='uint16' type='S'/>
    <field name='Data4' declared_type='uint8*' type='[8C]'/>
  </struct>
  <struct name='cssm_kea_derive_params' type='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Rb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Yb' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_key' type='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='KeyHeader' declared_type='CSSM_KEYHEADER' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
    <field name='KeyData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_key_size' type='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='EffectiveKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_keyheader' type='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
    <field name='HeaderVersion' declared_type='CSSM_HEADERVERSION' type='L' type64='I'/>
    <field name='CspId' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='BlobType' declared_type='CSSM_KEYBLOB_TYPE' type='L' type64='I'/>
    <field name='Format' declared_type='CSSM_KEYBLOB_FORMAT' type='L' type64='I'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='KeyClass' declared_type='CSSM_KEYCLASS' type='L' type64='I'/>
    <field name='LogicalKeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <field name='KeyAttr' declared_type='CSSM_KEYATTR_FLAGS' type='L' type64='I'/>
    <field name='KeyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <field name='StartDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='EndDate' declared_type='CSSM_DATE' type='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
    <field name='WrapAlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='WrapMode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='Reserved' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_kr_name' type='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'>
    <field name='Type' declared_type='uint8' type='C'/>
    <field name='Length' declared_type='uint8' type='C'/>
    <field name='Name' declared_type='char*' type='*'/>
  </struct>
  <struct name='cssm_kr_policy_info' type='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
    <field name='krbNotAllowed' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='numberOfEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='policyEntry' declared_type='CSSM_KR_POLICY_LIST_ITEM*' type='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
  </struct>
  <struct name='cssm_kr_policy_list_item' type='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
    <field name='next' declared_type='struct kr_policy_list_item*' type='^{kr_policy_list_item=}'/>
    <field name='AlgorithmId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <field name='Mode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <field name='MaxKeyLength' declared_type='uint32' type='L' type64='I'/>
    <field name='MaxRounds' declared_type='uint32' type='L' type64='I'/>
    <field name='WorkFactor' declared_type='uint8' type='C'/>
    <field name='PolicyFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <field name='AlgClass' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='cssm_kr_profile' type='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
    <field name='UserName' declared_type='CSSM_KR_NAME' type='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
    <field name='UserCertificate' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KRSCertChain' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='LE_KRANum' declared_type='uint8' type='C'/>
    <field name='LE_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='ENT_KRANum' declared_type='uint8' type='C'/>
    <field name='ENT_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_KRANum' declared_type='uint8' type='C'/>
    <field name='INDIV_KRACertChainList' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='INDIV_AuthenticationInfo' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='KRSPFlags' declared_type='uint32' type='L' type64='I'/>
    <field name='KRSPExtensions' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
  </struct>
  <struct name='cssm_kr_wrappedproductinfo' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
    <field name='StandardVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='StandardDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVersion' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='ProductDescription' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductVendor' declared_type='CSSM_STRING' type='[68c]'/>
    <field name='ProductFlags' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_krsubservice' type='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
    <field name='SubServiceId' declared_type='uint32' type='L' type64='I'/>
    <field name='Description' declared_type='char*' type='*'/>
    <field name='WrappedProduct' declared_type='CSSM_KR_WRAPPEDPRODUCT_INFO' type='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
  </struct>
  <struct name='cssm_list' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
    <field name='ListType' declared_type='CSSM_LIST_TYPE' type='L' type64='I'/>
    <field name='Head' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='Tail' declared_type='CSSM_LIST_ELEMENT_PTR' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
  </struct>
  <struct name='cssm_list_element' type='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})}'>
    <field name='NextElement' declared_type='struct cssm_list_element*' type='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=I*})}'/>
    <field name='WordID' declared_type='CSSM_WORDID_TYPE' type='l' type64='i'/>
    <field name='ElementType' declared_type='CSSM_LIST_ELEMENT_TYPE' type='L' type64='I'/>
    <field name='Element' declared_type='union cssm_list_element::' type='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*})'/>
  </struct>
  <struct name='cssm_manager_event_notification' type='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='DestinationModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='SourceModuleManagerType' declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
    <field name='Event' declared_type='CSSM_MANAGER_EVENT_TYPES' type='L' type64='I'/>
    <field name='EventId' declared_type='uint32' type='L' type64='I'/>
    <field name='EventData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_manager_registration_info' type='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
    <field name='Initialize' function_pointer='true' declared_type='CSSM_RETURN (*)(uint32, uint32)' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Terminate' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' type='^?'>
      <arg declared_type='CSSM_STATE_FUNCS_PTR' type='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeregisterDispatchTable' function_pointer='true' declared_type='CSSM_RETURN (*)(void)' type='^?'>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EventNotifyManager' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RefreshFunctionTable' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_memory_funcs' type='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_MALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_FREE' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_REALLOC' type='^?'>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_CALLOC' type='^?'>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='AllocRef' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_module_funcs' type='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
    <field name='ServiceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
    <field name='NumberOfServiceFuncs' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceFuncs' declared_type='CSSM_PROC_ADDR*' type='^^?' const='true'/>
  </struct>
  <struct name='cssm_name_list' type='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
    <field name='NumStrings' declared_type='uint32' type='L' type64='I'/>
    <field name='String' declared_type='char**' type='^*'/>
  </struct>
  <struct name='cssm_net_address' type='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='AddressType' declared_type='CSSM_NET_ADDRESS_TYPE' type='L' type64='I'/>
    <field name='Address' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_parsed_cert' type='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
    <field name='CertType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <field name='ParsedCertFormat' declared_type='CSSM_CERT_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCert' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_parsed_crl' type='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
    <field name='CrlType' declared_type='CSSM_CRL_TYPE' type='L' type64='I'/>
    <field name='ParsedCrlFormat' declared_type='CSSM_CRL_PARSE_FORMAT' type='L' type64='I'/>
    <field name='ParsedCrl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_pkcs1_oaep_params' type='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='HashAlgorithm' declared_type='uint32' type='L' type64='I'/>
    <field name='HashParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='MGF' declared_type='CSSM_PKCS_OAEP_MGF' type='L' type64='I'/>
    <field name='MGFParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PSource' declared_type='CSSM_PKCS_OAEP_PSOURCE' type='L' type64='I'/>
    <field name='PSourceParams' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_pkcs5_pbkdf1_params' type='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='InitVector' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_pkcs5_pbkdf2_params' type='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
    <field name='Passphrase' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='PseudoRandomFunction' declared_type='CSSM_PKCS5_PBKDF2_PRF' type='L' type64='I'/>
  </struct>
  <struct name='cssm_query' type='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
    <field name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <field name='Conjunctive' declared_type='CSSM_DB_CONJUNCTIVE' type='L' type64='I'/>
    <field name='NumSelectionPredicates' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionPredicate' declared_type='CSSM_SELECTION_PREDICATE_PTR' type='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}I^{cssm_data}}}'/>
    <field name='QueryLimits' declared_type='CSSM_QUERY_LIMITS' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
    <field name='QueryFlags' declared_type='CSSM_QUERY_FLAGS' type='L' type64='I'/>
  </struct>
  <struct name='cssm_query_limits' type='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
    <field name='TimeLimit' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeLimit' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_query_size_data' type='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
    <field name='SizeInputBlock' declared_type='uint32' type='L' type64='I'/>
    <field name='SizeOutputBlock' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_range' type='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
    <field name='Min' declared_type='uint32' type='L' type64='I'/>
    <field name='Max' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_resource_control_context' type='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
    <field name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
    <field name='InitialAclEntry' declared_type='CSSM_ACL_ENTRY_INPUT' type='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
  </struct>
  <struct name='cssm_sample' type='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
    <field name='TypedSample' declared_type='CSSM_LIST' type='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
    <field name='Verifier' declared_type='CSSM_SUBSERVICE_UID*' type='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}' const='true'/>
  </struct>
  <struct name='cssm_samplegroup' type='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
    <field name='NumberOfSamples' declared_type='uint32' type='L' type64='I'/>
    <field name='Samples' declared_type='CSSM_SAMPLE*' type='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}' const='true'/>
  </struct>
  <struct name='cssm_selection_predicate' type='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
    <field name='DbOperator' declared_type='CSSM_DB_OPERATOR' type='L' type64='I'/>
    <field name='Attribute' declared_type='CSSM_DB_ATTRIBUTE_DATA' type='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
  </struct>
  <struct name='cssm_spi_ac_funcs' type='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='AuthCompute' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_spi_cl_funcs' type='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetKeyInfo' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR*' type='^^{cssm_key}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToSignedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERT_BUNDLE_HEADER*' type='^{cssm_cert_bundle_header=II}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupFromVerifiedBundle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CERT_BUNDLE*' type='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSetFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAddCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlRemoveCert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerifyWithKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='IsCertInCachedCrl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetFirstCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetNextCachedFieldValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlGetAllCachedRecordFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlAbortCache' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlDescribeFormat' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_spi_csp_funcs' type='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
    <field name='EventNotify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CONTEXT_EVENT' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QuerySize' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_QUERY_SIZE_DATA_PTR' type='^{cssm_query_size_data=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='SignDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataClone' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DigestDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMac' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyMacFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='EncryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptData' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataInit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataUpdate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, uint32 *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DecryptDataFinal' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='QueryKeySizeInBits' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_SIZE_PTR' type='^{cssm_key_size=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateKeyPair' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRandom' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateAlgorithmParams' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR*' type='^^{cssm_context_attribute}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='WrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='UnwrapKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_WRAP_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DeriveKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_BOOL' type='l' type64='i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Login' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Logout' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ObtainPrivateKeyFromPublicKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveUniqueId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCounter' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='VerifyDevice' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetTimeValue' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetOperationalStatistics' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_OPERATIONAL_STATISTICS*' type='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeKeyOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeLoginOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_spi_dl_funcs' type='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbCreate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DBINFO*' type='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='Authenticate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbAcl' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ChangeDbOwner' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_spi_kr_funcs' type='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='RegistrationRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RegistrationRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_KR_PROFILE_PTR' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GenerateRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ProcessRecoveryFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRetrieve' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='uint32*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetRecoveredObject' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RecoveryRequestAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_spi_tp_funcs' type='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
    <field name='SubmitCredRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_REQUEST_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_REQUEST_SET*' type='^{cssm_tp_request_set=I^v}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='RetrieveCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='sint32*' type='^i'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <arg declared_type='CSSM_TP_RESULT_SET_PTR*' type='^^{cssm_tp_result_set}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ConfirmCredResult' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE*' type='^{cssm_tp_confirm_response=I^I}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ReceiveConfirmation' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_CONFIRM_RESPONSE_PTR*' type='^^{cssm_tp_confirm_response}'/>
      <arg declared_type='sint32*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimKey' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertReclaimAbort' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_LONG_HANDLE' type='Q'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormRequest' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FormSubmit' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGetAllTemplateFields' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlVerify' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlCreateTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRevoke' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertRemoveFromCrlTemplate' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CrlSign' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='ApplyCrlToDb' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
      <arg declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupConstruct' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupPrune' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CertGroupToTupleGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
      <arg declared_type='CSSM_TUPLEGROUP_PTR*' type='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='TupleGroupToCertGroup' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
      <arg declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='PassThrough' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' type='^?'>
      <arg declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='void**' type='^^v'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_state_funcs' type='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
    <field name='cssm_GetAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_MASK' type='L' type64='I'/>
      <arg declared_type='void**' type='^^v'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_ReleaseAttachFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_GetAppMemoryFunctions' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_UPCALLS_PTR' type='^{cssm_upcalls=^?^?^?^?^?^?}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_IsFuncCallValid' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PROC_ADDR' type='^?'/>
      <arg declared_type='CSSM_PRIVILEGE' type='Q'/>
      <arg declared_type='CSSM_PRIVILEGE*' type='^Q'/>
      <arg declared_type='CSSM_BITMASK' type='L' type64='I'/>
      <arg declared_type='CSSM_BOOL*' type='^i'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeregisterManagerServices' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_GUID *)' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='cssm_DeliverModuleManagerEvent' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MANAGER_EVENT_NOTIFICATION *)' type='^?'>
      <arg declared_type='CSSM_MANAGER_EVENT_NOTIFICATION*' type='^{cssm_manager_event_notification=IIII{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_subservice_uid' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
    <field name='Guid' declared_type='CSSM_GUID' type='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
    <field name='Version' declared_type='CSSM_VERSION' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
    <field name='SubserviceId' declared_type='uint32' type='L' type64='I'/>
    <field name='SubserviceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
  </struct>
  <struct name='cssm_tp_authority_id' type='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
    <field name='AuthorityCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
    <field name='AuthorityLocation' declared_type='CSSM_NET_ADDRESS_PTR' type='^{cssm_net_address=I{cssm_data=I*}}'/>
  </struct>
  <struct name='cssm_tp_callerauth_context' type='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Policy' declared_type='CSSM_TP_POLICYINFO' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
    <field name='VerifyTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='VerificationAbortOn' declared_type='CSSM_TP_STOP_ON' type='L' type64='I'/>
    <field name='CallbackWithVerifiedCert' function_pointer='true' declared_type='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='NumberOfAnchorCerts' declared_type='uint32' type='L' type64='I'/>
    <field name='AnchorCerts' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='DBList' declared_type='CSSM_DL_DB_LIST_PTR' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_certchange_input' type='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='Action' declared_type='CSSM_TP_CERTCHANGE_ACTION' type='L' type64='I'/>
    <field name='Reason' declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='ChangeInfo' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='StartTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_certchange_output' type='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='ActionStatus' declared_type='CSSM_TP_CERTCHANGE_STATUS' type='L' type64='I'/>
    <field name='RevokeInfo' declared_type='CSSM_FIELD' type='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='cssm_tp_certissue_input' type='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;I&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CSPSubserviceUid' declared_type='CSSM_SUBSERVICE_UID' type='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfTemplateFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SubjectCertFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_certissue_output' type='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CERTISSUE_STATUS' type='L' type64='I'/>
    <field name='CertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='cssm_tp_certnotarize_input' type='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;I&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='SignScope' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <field name='MoreServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
    <field name='NumberOfServiceControls' declared_type='uint32' type='L' type64='I'/>
    <field name='ServiceControls' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_certnotarize_output' type='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
    <field name='NotarizeStatus' declared_type='CSSM_TP_CERTNOTARIZE_STATUS' type='L' type64='I'/>
    <field name='NotarizedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='PerformedServiceRequests' declared_type='CSSM_TP_SERVICES' type='L' type64='I'/>
  </struct>
  <struct name='cssm_tp_certreclaim_input' type='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;I&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='NumberOfSelectionFields' declared_type='uint32' type='L' type64='I'/>
    <field name='SelectionFields' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='UserCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_certreclaim_output' type='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
    <field name='ReclaimStatus' declared_type='CSSM_TP_CERTRECLAIM_STATUS' type='L' type64='I'/>
    <field name='ReclaimedCertGroup' declared_type='CSSM_CERTGROUP_PTR' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
    <field name='KeyCacheHandle' declared_type='CSSM_LONG_HANDLE' type='Q'/>
  </struct>
  <struct name='cssm_tp_certverify_input' type='{cssm_tp_certverify_input=&quot;CLHandle&quot;I&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='Cert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <field name='VerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT_PTR' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
  </struct>
  <struct name='cssm_tp_certverify_output' type='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='VerifyStatus' declared_type='CSSM_TP_CERTVERIFY_STATUS' type='L' type64='I'/>
    <field name='NumberOfEvidence' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='cssm_tp_confirm_response' type='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
    <field name='NumberOfResponses' declared_type='uint32' type='L' type64='I'/>
    <field name='Responses' declared_type='CSSM_TP_CONFIRM_STATUS_PTR' type='^I'/>
  </struct>
  <struct name='cssm_tp_crlissue_input' type='{cssm_tp_crlissue_input=&quot;CLHandle&quot;I&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
    <field name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <field name='CrlIdentifier' declared_type='uint32' type='L' type64='I'/>
    <field name='CrlThisTime' declared_type='CSSM_TIMESTRING' type='*'/>
    <field name='PolicyIdentifier' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='CallerCredentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
  </struct>
  <struct name='cssm_tp_crlissue_output' type='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
    <field name='IssueStatus' declared_type='CSSM_TP_CRLISSUE_STATUS' type='L' type64='I'/>
    <field name='Crl' declared_type='CSSM_ENCODED_CRL_PTR' type='^{cssm_encoded_crl=II{cssm_data=I*}}'/>
    <field name='CrlNextTime' declared_type='CSSM_TIMESTRING' type='*'/>
  </struct>
  <struct name='cssm_tp_policyinfo' type='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
    <field name='NumberOfPolicyIds' declared_type='uint32' type='L' type64='I'/>
    <field name='PolicyIds' declared_type='CSSM_FIELD_PTR' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}'/>
    <field name='PolicyControl' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_tp_request_set' type='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
    <field name='NumberOfRequests' declared_type='uint32' type='L' type64='I'/>
    <field name='Requests' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_tp_result_set' type='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
    <field name='NumberOfResults' declared_type='uint32' type='L' type64='I'/>
    <field name='Results' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_tp_verify_context' type='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
    <field name='Action' declared_type='CSSM_TP_ACTION' type='L' type64='I'/>
    <field name='ActionData' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='Crls' declared_type='CSSM_CRLGROUP' type='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
    <field name='Cred' declared_type='CSSM_TP_CALLERAUTH_CONTEXT_PTR' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
  </struct>
  <struct name='cssm_tp_verify_context_result' type='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
    <field name='NumberOfEvidences' declared_type='uint32' type='L' type64='I'/>
    <field name='Evidence' declared_type='CSSM_EVIDENCE_PTR' type='^{cssm_evidence=I^v}'/>
  </struct>
  <struct name='cssm_tuplegroup' type='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
    <field name='NumberOfTuples' declared_type='uint32' type='L' type64='I'/>
    <field name='Tuples' declared_type='CSSM_TUPLE_PTR' type='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
  </struct>
  <struct name='cssm_upcalls' type='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
    <field name='malloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_MALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='free_func' function_pointer='true' declared_type='CSSM_UPCALLS_FREE' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </field>
    <field name='realloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_REALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='calloc_func' function_pointer='true' declared_type='CSSM_UPCALLS_CALLOC' type='^?'>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='void*' type='^v'/>
    </field>
    <field name='CcToHandle_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' type='^?'>
      <arg declared_type='CSSM_CC_HANDLE' type='Q'/>
      <arg declared_type='CSSM_MODULE_HANDLE_PTR' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetModuleInfo_func' function_pointer='true' declared_type='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' type='^?'>
      <arg declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
      <arg declared_type='CSSM_VERSION_PTR' type='^{cssm_version=II}'/>
      <arg declared_type='uint32*' type='^I'/>
      <arg declared_type='CSSM_SERVICE_TYPE*' type='^I'/>
      <arg declared_type='CSSM_ATTACH_FLAGS*' type='^I'/>
      <arg declared_type='CSSM_KEY_HIERARCHY*' type='^I'/>
      <arg declared_type='CSSM_API_MEMORY_FUNCS_PTR' type='^{cssm_memory_funcs=^?^?^?^?^v}'/>
      <arg declared_type='CSSM_FUNC_NAME_ADDR_PTR' type='^{cssm_func_name_addr=[68c]^?}'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='cssm_version' type='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
    <field name='Major' declared_type='uint32' type='L' type64='I'/>
    <field name='Minor' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_x509_algorithm_identifier' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='parameters' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_extension' type='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='extnId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='critical' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='format' declared_type='CSSM_X509EXT_DATA_FORMAT' type='i'/>
    <field name='value' declared_type='union cssm_x509ext_value' type='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
    <field name='BERvalue' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_extensionTagAndValue' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_extensions' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
    <field name='numberOfExtensions' declared_type='uint32' type='L' type64='I'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSION_PTR' type='^{cssm_x509_extension={cssm_data=I*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=I*}}'/>
  </struct>
  <struct name='cssm_x509_name' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
    <field name='numberOfRDNs' declared_type='uint32' type='L' type64='I'/>
    <field name='RelativeDistinguishedName' declared_type='CSSM_X509_RDN_PTR' type='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
  </struct>
  <struct name='cssm_x509_rdn' type='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
    <field name='numberOfPairs' declared_type='uint32' type='L' type64='I'/>
    <field name='AttributeTypeAndValue' declared_type='CSSM_X509_TYPE_VALUE_PAIR_PTR' type='^{cssm_x509_type_value_pair={cssm_data=I*}C{cssm_data=I*}}'/>
  </struct>
  <struct name='cssm_x509_revoked_cert_entry' type='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='certificateSerialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='revocationDate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='cssm_x509_revoked_cert_list' type='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
    <field name='numberOfRevokedCertEntries' declared_type='uint32' type='L' type64='I'/>
    <field name='revokedCertEntry' declared_type='CSSM_X509_REVOKED_CERT_ENTRY_PTR' type='^{cssm_x509_revoked_cert_entry={cssm_data=I*}{cssm_x509_time=C{cssm_data=I*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
  </struct>
  <struct name='cssm_x509_signature' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithmIdentifier' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='encrypted' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_signed_certificate' type='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='certificate' declared_type='CSSM_X509_TBS_CERTIFICATE' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='cssm_x509_signed_crl' type='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='tbsCertList' declared_type='CSSM_X509_TBS_CERTLIST' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
    <field name='signature' declared_type='CSSM_X509_SIGNATURE' type='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <struct name='cssm_x509_subject_public_key_info' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='algorithm' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='subjectPublicKey' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_tbs_certificate' type='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='serialNumber' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='validity' declared_type='CSSM_X509_VALIDITY' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'/>
    <field name='subject' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='subjectPublicKeyInfo' declared_type='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' type='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuerUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='subjectUniqueIdentifier' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='cssm_x509_tbs_certlist' type='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
    <field name='version' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='signature' declared_type='CSSM_X509_ALGORITHM_IDENTIFIER' type='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='issuer' declared_type='CSSM_X509_NAME' type='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
    <field name='thisUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='nextUpdate' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='revokedCertificates' declared_type='CSSM_X509_REVOKED_CERT_LIST_PTR' type='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
    <field name='extensions' declared_type='CSSM_X509_EXTENSIONS' type='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
  </struct>
  <struct name='cssm_x509_time' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='timeType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='time' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509_type_value_pair' type='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='type' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='valueType' declared_type='CSSM_BER_TAG' type='C'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509ext_basicConstraints' type='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
    <field name='cA' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <field name='pathLenConstraintPresent' declared_type='CSSM_X509_OPTION' type='l' type64='i'/>
    <field name='pathLenConstraint' declared_type='uint32' type='L' type64='I'/>
  </struct>
  <struct name='cssm_x509ext_pair' type='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
    <field name='tagAndValue' declared_type='CSSM_X509EXT_TAGandVALUE' type='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='parsedValue' declared_type='void*' type='^v'/>
  </struct>
  <struct name='cssm_x509ext_policyInfo' type='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
    <field name='policyIdentifier' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='policyQualifiers' declared_type='CSSM_X509EXT_POLICYQUALIFIERS' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
  </struct>
  <struct name='cssm_x509ext_policyQualifierInfo' type='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'>
    <field name='policyQualifierId' declared_type='CSSM_OID' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
    <field name='value' declared_type='CSSM_DATA' type='{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}'/>
  </struct>
  <struct name='cssm_x509ext_policyQualifiers' type='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
    <field name='numberOfPolicyQualifiers' declared_type='uint32' type='L' type64='I'/>
    <field name='policyQualifier' declared_type='CSSM_X509EXT_POLICYQUALIFIERINFO*' type='^{cssm_x509ext_policyQualifierInfo={cssm_data=I*}{cssm_data=I*}}'/>
  </struct>
  <struct name='isl_const_data' type='{isl_const_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*' const='true'/>
  </struct>
  <struct name='isl_data' type='{isl_data=&quot;Length&quot;I&quot;Data&quot;*}'>
    <field name='Length' declared_type='uint32' type='L' type64='I'/>
    <field name='Data' declared_type='uint8*' type='*'/>
  </struct>
  <struct name='mds_funcs' type='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
    <field name='DbOpen' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='CSSM_DB_HANDLE*' type='^I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DbClose' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNames' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='GetDbNameFromHandle' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='char**' type='^*'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeNameList' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' type='^?'>
      <arg declared_type='MDS_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataInsert' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataDelete' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataModify' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
      <arg declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
      <arg declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFirst' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
      <arg declared_type='CSSM_HANDLE_PTR' type='^I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetNext' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataAbortQuery' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_HANDLE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DataGetFromUniqueRecordId' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
      <arg declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
      <arg declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='FreeUniqueRecord' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='CreateRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <arg declared_type='char*' type='*' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
    <field name='DestroyRelation' function_pointer='true' declared_type='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' type='^?'>
      <arg declared_type='MDS_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
      <arg declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </field>
  </struct>
  <struct name='x509_validity' type='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}}'>
    <field name='notBefore' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
    <field name='notAfter' declared_type='CSSM_X509_TIME' type='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;I&quot;Data&quot;*}}'/>
  </struct>
  <cftype name='AuthorizationEngineRef' type='^{__OpaqueAuthorizationEngine=}'/>
  <cftype name='AuthorizationMechanismRef' type='^v'/>
  <cftype name='AuthorizationPluginRef' type='^v'/>
  <cftype name='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
  <cftype name='SSLConnectionRef' type='^v'/>
  <cftype name='SSLContextRef' type='^{SSLContext=}'/>
  <cftype name='SecACLRef' gettypeid_func='SecACLGetTypeID' type='^{OpaqueSecTrustRef=}'/>
  <cftype name='SecAccessRef' gettypeid_func='SecAccessGetTypeID' type='^{OpaqueSecAccessRef=}'/>
  <cftype name='SecCertificateRef' gettypeid_func='SecCertificateGetTypeID' type='^{OpaqueSecCertificateRef=}'/>
  <cftype name='SecIdentityRef' gettypeid_func='SecIdentityGetTypeID' type='^{OpaqueSecIdentityRef=}'/>
  <cftype name='SecIdentitySearchRef' gettypeid_func='SecIdentitySearchGetTypeID' type='^{OpaqueSecIdentitySearchRef=}'/>
  <cftype name='SecKeyRef' gettypeid_func='SecKeyGetTypeID' type='^{OpaqueSecKeyRef=}'/>
  <cftype name='SecPasswordRef' type='^{OpaqueSecPasswordRef=}'/>
  <cftype name='SecPolicyRef' gettypeid_func='SecPolicyGetTypeID' type='^{OpaqueSecPolicyRef=}'/>
  <cftype name='SecPolicySearchRef' gettypeid_func='SecPolicySearchGetTypeID' type='^{OpaquePolicySearchRef=}'/>
  <cftype name='SecTrustRef' gettypeid_func='SecTrustGetTypeID' type='^{OpaqueSecTrustRef=}'/>
  <cftype name='SecTrustedApplicationRef' gettypeid_func='SecTrustedApplicationGetTypeID' type='^{OpaqueSecTrustedApplicationRef=}'/>
  <constant name='CSSMOID_AD_CA_ISSUERS' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AD_CA_REPOSITORY' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AD_OCSP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AD_TIME_STAMPING' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_EPHEM' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_EPHEM_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_HYBRID1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_HYBRID1_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_HYBRID2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_HYBRID2_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_HYBRID_ONEFLOW' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_ONE_FLOW' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_ONE_FLOW_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_PUB_NUMBER' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_STATIC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_DH_STATIC_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_MQV1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_MQV1_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_MQV2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ANSI_MQV2_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_ASC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_CERT_POLICY' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_ECDSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_EKU_CODE_SIGNING' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_EKU_CODE_SIGNING_DEV' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_EKU_ICHAT_ENCRYPTION' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_EKU_ICHAT_SIGNING' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_FEE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_FEED' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_FEEDEXP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_FEE_MD5' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_FEE_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_ISIGN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_CODE_SIGN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_CSR_GEN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_EAP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_ICHAT' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_IP_SEC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_LOCAL_CERT_GEN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_REVOCATION_CRL' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_REVOCATION_OCSP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_SMIME' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_TP_SSL' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_APPLE_X509_BASIC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AliasedEntryName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AuthorityInfoAccess' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AuthorityKeyIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_AuthorityRevocationList' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_BasicConstraints' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_BusinessCategory' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CACertificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CSSMKeyStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CertIssuer' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CertificatePolicies' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CertificateRevocationList' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ChallengePassword' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ClientAuth' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveFacsimileTelephoneNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveInternationalISDNNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveOrganizationName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveOrganizationalUnitName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectivePhysicalDeliveryOfficeName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectivePostOfficeBox' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectivePostalAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectivePostalCode' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveStateProvinceName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveStreetAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveTelephoneNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveTelexNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CollectiveTelexTerminalIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CommonName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ContentType' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CounterSignature' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CountryName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CrlDistributionPoints' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CrlNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CrlReason' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_CrossCertificatePair' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DES_CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DH' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DNQualifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_EMAIL_ENCRYPT' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_EMAIL_SIGN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_EXTENSION' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_IDENTITY' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_POLICY' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_FETCH' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_LIST' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_REMOVE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_STORE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_EMAIL_ENCRYPT' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_EMAIL_SIGN' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_IDENTITY' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_ASYNC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_HOSTNAME' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_IS_PENDING' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_PASSWORD' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_RENEW' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DOTMAC_CERT_REQ_VALUE_USERNAME' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DSA_CMS' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DSA_JDK' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DeltaCrlIndicator' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Description' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DestinationIndicator' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_DistinguishedName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_EKU_IPSec' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_EmailAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_EmailProtection' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_EnhancedSearchGuide' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ExtendedCertificateAttributes' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ExtendedKeyUsage' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ExtendedKeyUsageAny' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ExtendedUseCodeSigning' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_FacsimileTelephoneNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_GenerationQualifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_GivenName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_HoldInstructionCode' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_HouseIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Initials' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_InternationalISDNNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_InvalidityDate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_IssuerAltName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_IssuingDistributionPoint' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_IssuingDistributionPoints' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_KeyUsage' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_KnowledgeInformation' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_LocalityName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD2WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD4' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD4WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD5' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MD5WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Member' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MessageDigest' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_MicrosoftSGC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Name' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_NameConstraints' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_NetscapeCertSequence' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_NetscapeCertType' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_NetscapeSGC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_OAEP_ID_PSPECIFIED' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_OAEP_MGF1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_OCSPSigning' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ObjectClass' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_OrganizationName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_OrganizationalUnitName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Owner' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_certBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_crlBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_keyBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbeWithSHAAnd128BitRC2CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbeWithSHAAnd128BitRC4' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbeWithSHAAnd2Key3DESCBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbeWithSHAAnd3Key3DESCBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbeWithSHAAnd40BitRC4' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_pbewithSHAAnd40BitRC2CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_safeContentsBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_secretBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS12_shroudedKeyBag' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS3' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_DES_EDE3_CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_DIGEST_ALG' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_ENCRYPT_ALG' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_HMAC_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_PBES2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_PBKDF2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_PBMAC1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_RC2_CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_RC5_CBC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithMD2AndDES' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithMD2AndRC2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithMD5AndDES' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithMD5AndRC2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithSHA1AndDES' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS5_pbeWithSHA1AndRC2' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_Data' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_DataWithAttributes' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_DigestedData' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_EncryptedData' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_EncryptedPrivateKeyInfo' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_EnvelopedData' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_SignedAndEnvelopedData' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS7_SignedData' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_CertTypes' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_CrlTypes' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_FriendlyName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_LocalKeyId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_SdsiCertificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_X509Certificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKCS9_X509Crl' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_ARCHIVE_CUTOFF' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_BASIC' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_CRL' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_NOCHECK' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_NONCE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_RESPONSE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PKIX_OCSP_SERVICE_LOCATOR' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PhysicalDeliveryOfficeName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PolicyConstraints' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PolicyMappings' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PostOfficeBox' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PostalAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PostalCode' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PreferredDeliveryMethod' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PresentationAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_PrivateKeyUsagePeriod' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ProtocolInformation' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_QT_CPS' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_QT_UNOTICE' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_RSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_RSAWithOAEP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_RegisteredAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_RoleOccupant' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1WithDSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1WithDSA_CMS' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1WithDSA_JDK' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA1WithRSA_OIW' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA224' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA224WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA256' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA256WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA384' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA384WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA512' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SHA512WithRSA' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SearchGuide' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SeeAlso' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SerialNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_ServerAuth' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SigningTime' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_StateProvinceName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_StreetAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectAltName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectDirectoryAttributes' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectEmailAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectInfoAccess' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectKeyIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectPicture' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SubjectSignatureBitmap' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_SupportedApplicationContext' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Surname' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_TelephoneNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_TelexNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_TelexTerminalIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_TimeStamping' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_Title' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UniqueIdentifier' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UniqueMember' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UnstructuredAddress' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UnstructuredName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UseExemptions' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UserCertificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_UserPassword' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLIssuerNameCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLIssuerNameLDAP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLIssuerStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLNextUpdate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLNumberOfRevokedCertEntries' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedCertificatesCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedCertificatesStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedEntryCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedEntryRevocationDate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedEntrySerialNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLRevokedEntryStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CRLThisUpdate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CertificateIssuerUniqueId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1CertificateSubjectUniqueId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1IssuerName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1IssuerNameCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1IssuerNameLDAP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1IssuerNameStd' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SerialNumber' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1Signature' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SignatureAlgorithm' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SignatureAlgorithmParameters' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SignatureAlgorithmTBS' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SignatureCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SignatureStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectName' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectNameCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectNameLDAP' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectNameStd' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectPublicKey' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectPublicKeyAlgorithm' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectPublicKeyAlgorithmParameters' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1SubjectPublicKeyCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1ValidityNotAfter' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1ValidityNotBefore' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V1Version' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLAllExtensionsCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLAllExtensionsStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLExtensionCritical' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLExtensionId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLExtensionType' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLNumberOfExtensions' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryAllExtensionsCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryAllExtensionsStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryExtensionCritical' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryExtensionId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryExtensionType' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryExtensionValue' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntryNumberOfExtensions' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntrySingleExtensionCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLRevokedEntrySingleExtensionStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLSignedCrlCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLSignedCrlStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLSingleExtensionCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLSingleExtensionStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLTbsCertListCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLTbsCertListStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V2CRLVersion' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3Certificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionCritical' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionId' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionType' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionValue' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionsCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateExtensionsStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3CertificateNumberOfExtensions' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3SignedCertificate' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X509V3SignedCertificateCStruct' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='CSSMOID_X_121Address' declared_type='CSSM_OID' type='{cssm_data=I*}' const='true'/>
  <constant name='gGuidAppleCSP' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleCSPDL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleDotMacDL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleDotMacTP' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleFileDL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleLDAPDL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleSdCSPDL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleX509CL' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidAppleX509TP' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <constant name='gGuidCssm' declared_type='CSSM_GUID' type='{cssm_guid=ISS[8C]}' const='true'/>
  <string_constant name='CSSM_APPLE_CRL_END_OF_TIME' value='99991231235959'/>
  <string_constant name='MDS_CDSA_DIRECTORY_NAME' value='MDS CDSA Directory'/>
  <string_constant name='MDS_OBJECT_DIRECTORY_NAME' value='MDS Object Directory'/>
  <string_constant name='kAuthorizationComment' value='comment'/>
  <string_constant name='kAuthorizationEnvironmentIcon' value='icon'/>
  <string_constant name='kAuthorizationEnvironmentPassword' value='password'/>
  <string_constant name='kAuthorizationEnvironmentPrompt' value='prompt'/>
  <string_constant name='kAuthorizationEnvironmentShared' value='shared'/>
  <string_constant name='kAuthorizationEnvironmentUsername' value='username'/>
  <string_constant name='kAuthorizationRightExecute' value='system.privilege.admin'/>
  <string_constant name='kAuthorizationRightRule' value='rule'/>
  <string_constant name='kAuthorizationRuleAuthenticateAsAdmin' value='authenticate-admin'/>
  <string_constant name='kAuthorizationRuleAuthenticateAsSessionUser' value='authenticate-session-user'/>
  <string_constant name='kAuthorizationRuleClassAllow' value='allow'/>
  <string_constant name='kAuthorizationRuleClassDeny' value='deny'/>
  <string_constant name='kAuthorizationRuleIsAdmin' value='is-admin'/>
  <string_constant name='kKeychainSuffix' value='.keychain'/>
  <string_constant name='kSystemKeychainDir' value='/Library/Keychains/'/>
  <string_constant name='kSystemKeychainName' value='System.keychain'/>
  <string_constant name='kSystemUnlockFile' value='/var/db/SystemKey'/>
  <enum name='APPLE_ADS_OID' value='100'/>
  <enum name='APPLE_ADS_OID_LENGTH' value='7'/>
  <enum name='APPLE_ALG_OID' value='2'/>
  <enum name='APPLE_ALG_OID_LENGTH' value='8'/>
  <enum name='APPLE_CERT_POLICIES' value='5'/>
  <enum name='APPLE_CERT_POLICIES_LENGTH' value='8'/>
  <enum name='APPLE_DOTMAC_CERT_EXTEN_OID' value='2'/>
  <enum name='APPLE_DOTMAC_CERT_EXTEN_OID_LENGTH' value='9'/>
  <enum name='APPLE_DOTMAC_CERT_OID' value='3'/>
  <enum name='APPLE_DOTMAC_CERT_OID_LENGTH' value='8'/>
  <enum name='APPLE_DOTMAC_CERT_REQ_OID' value='1'/>
  <enum name='APPLE_DOTMAC_CERT_REQ_OID_LENGTH' value='9'/>
  <enum name='APPLE_DOTMAC_CERT_REQ_VALUE_OID' value='3'/>
  <enum name='APPLE_DOTMAC_CERT_REQ_VALUE_OID_LENGTH' value='9'/>
  <enum name='APPLE_EKU_CODE_SIGNING' value='1'/>
  <enum name='APPLE_EKU_CODE_SIGNING_LENGTH' value='9'/>
  <enum name='APPLE_EKU_OID' value='4'/>
  <enum name='APPLE_EKU_OID_LENGTH' value='8'/>
  <enum name='APPLE_OID' value='99'/>
  <enum name='APPLE_OID_LENGTH' value='6'/>
  <enum name='APPLE_TP_OID' value='1'/>
  <enum name='APPLE_TP_OID_LENGTH' value='8'/>
  <enum name='BER_TAG_BIT_STRING' value='3'/>
  <enum name='BER_TAG_BOOLEAN' value='1'/>
  <enum name='BER_TAG_ENUMERATED' value='10'/>
  <enum name='BER_TAG_EXTERNAL' value='8'/>
  <enum name='BER_TAG_GENERALIZED_TIME' value='24'/>
  <enum name='BER_TAG_GENERAL_STRING' value='27'/>
  <enum name='BER_TAG_GRAPHIC_STRING' value='25'/>
  <enum name='BER_TAG_IA5_STRING' value='22'/>
  <enum name='BER_TAG_INTEGER' value='2'/>
  <enum name='BER_TAG_ISO646_STRING' value='26'/>
  <enum name='BER_TAG_NULL' value='5'/>
  <enum name='BER_TAG_NUMERIC_STRING' value='18'/>
  <enum name='BER_TAG_OBJECT_DESCRIPTOR' value='7'/>
  <enum name='BER_TAG_OCTET_STRING' value='4'/>
  <enum name='BER_TAG_OID' value='6'/>
  <enum name='BER_TAG_PKIX_BMP_STRING' value='30'/>
  <enum name='BER_TAG_PKIX_UNIVERSAL_STRING' value='28'/>
  <enum name='BER_TAG_PKIX_UTF8_STRING' value='12'/>
  <enum name='BER_TAG_PRINTABLE_STRING' value='19'/>
  <enum name='BER_TAG_REAL' value='9'/>
  <enum name='BER_TAG_SEQUENCE' value='16'/>
  <enum name='BER_TAG_SET' value='17'/>
  <enum name='BER_TAG_T61_STRING' value='20'/>
  <enum name='BER_TAG_TELETEX_STRING' value='20'/>
  <enum name='BER_TAG_UNKNOWN' value='0'/>
  <enum name='BER_TAG_UTC_TIME' value='23'/>
  <enum name='BER_TAG_VIDEOTEX_STRING' value='21'/>
  <enum name='BER_TAG_VISIBLE_STRING' value='26'/>
  <enum name='CE_CDNT_FullName' value='0'/>
  <enum name='CE_CDNT_NameRelativeToCrlIssuer' value='1'/>
  <enum name='CE_CD_AffiliationChanged' value='16'/>
  <enum name='CE_CD_CACompromise' value='32'/>
  <enum name='CE_CD_CertificateHold' value='2'/>
  <enum name='CE_CD_CessationOfOperation' value='4'/>
  <enum name='CE_CD_KeyCompromise' value='64'/>
  <enum name='CE_CD_Superseded' value='8'/>
  <enum name='CE_CD_Unspecified' value='128'/>
  <enum name='CE_CR_AffiliationChanged' value='3'/>
  <enum name='CE_CR_CACompromise' value='2'/>
  <enum name='CE_CR_CertificateHold' value='6'/>
  <enum name='CE_CR_CessationOfOperation' value='5'/>
  <enum name='CE_CR_KeyCompromise' value='1'/>
  <enum name='CE_CR_RemoveFromCRL' value='8'/>
  <enum name='CE_CR_Superseded' value='4'/>
  <enum name='CE_CR_Unspecified' value='0'/>
  <enum name='CE_KU_CRLSign' value='512'/>
  <enum name='CE_KU_DataEncipherment' value='4096'/>
  <enum name='CE_KU_DecipherOnly' value='128'/>
  <enum name='CE_KU_DigitalSignature' value='32768'/>
  <enum name='CE_KU_EncipherOnly' value='256'/>
  <enum name='CE_KU_KeyAgreement' value='2048'/>
  <enum name='CE_KU_KeyCertSign' value='1024'/>
  <enum name='CE_KU_KeyEncipherment' value='8192'/>
  <enum name='CE_KU_NonRepudiation' value='16384'/>
  <enum name='CE_NCT_ObjSign' value='4096'/>
  <enum name='CE_NCT_ObjSignCA' value='256'/>
  <enum name='CE_NCT_Reserved' value='2048'/>
  <enum name='CE_NCT_SMIME' value='8192'/>
  <enum name='CE_NCT_SMIME_CA' value='512'/>
  <enum name='CE_NCT_SSL_CA' value='1024'/>
  <enum name='CE_NCT_SSL_Client' value='32768'/>
  <enum name='CE_NCT_SSL_Server' value='16384'/>
  <enum name='CSSMERR_AC_DEVICE_FAILED' value='-2147405595'/>
  <enum name='CSSMERR_AC_DEVICE_RESET' value='-2147405596'/>
  <enum name='CSSMERR_AC_FUNCTION_FAILED' value='-2147405814'/>
  <enum name='CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED' value='-2147405817'/>
  <enum name='CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147405597'/>
  <enum name='CSSMERR_AC_INTERNAL_ERROR' value='-2147405823'/>
  <enum name='CSSMERR_AC_INVALID_BASE_ACLS' value='-2147405567'/>
  <enum name='CSSMERR_AC_INVALID_CL_HANDLE' value='-2147405742'/>
  <enum name='CSSMERR_AC_INVALID_CONTEXT_HANDLE' value='-2147405760'/>
  <enum name='CSSMERR_AC_INVALID_DATA' value='-2147405754'/>
  <enum name='CSSMERR_AC_INVALID_DB_HANDLE' value='-2147405750'/>
  <enum name='CSSMERR_AC_INVALID_DB_LIST' value='-2147405748'/>
  <enum name='CSSMERR_AC_INVALID_DB_LIST_POINTER' value='-2147405747'/>
  <enum name='CSSMERR_AC_INVALID_DL_HANDLE' value='-2147405743'/>
  <enum name='CSSMERR_AC_INVALID_ENCODING' value='-2147405565'/>
  <enum name='CSSMERR_AC_INVALID_INPUT_POINTER' value='-2147405819'/>
  <enum name='CSSMERR_AC_INVALID_OUTPUT_POINTER' value='-2147405818'/>
  <enum name='CSSMERR_AC_INVALID_PASSTHROUGH_ID' value='-2147405738'/>
  <enum name='CSSMERR_AC_INVALID_POINTER' value='-2147405820'/>
  <enum name='CSSMERR_AC_INVALID_REQUESTOR' value='-2147405563'/>
  <enum name='CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR' value='-2147405562'/>
  <enum name='CSSMERR_AC_INVALID_TP_HANDLE' value='-2147405741'/>
  <enum name='CSSMERR_AC_INVALID_TUPLE_CREDENTIALS' value='-2147405566'/>
  <enum name='CSSMERR_AC_INVALID_VALIDITY_PERIOD' value='-2147405564'/>
  <enum name='CSSMERR_AC_MDS_ERROR' value='-2147405821'/>
  <enum name='CSSMERR_AC_MEMORY_ERROR' value='-2147405822'/>
  <enum name='CSSMERR_AC_NO_USER_INTERACTION' value='-2147405600'/>
  <enum name='CSSMERR_AC_OS_ACCESS_DENIED' value='-2147405815'/>
  <enum name='CSSMERR_AC_SELF_CHECK_FAILED' value='-2147405816'/>
  <enum name='CSSMERR_AC_SERVICE_NOT_AVAILABLE' value='-2147405598'/>
  <enum name='CSSMERR_AC_USER_CANCELED' value='-2147405599'/>
  <enum name='CSSMERR_APPLEDL_DISK_FULL' value='-2147412991'/>
  <enum name='CSSMERR_APPLEDL_FILE_TOO_BIG' value='-2147412989'/>
  <enum name='CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB' value='-2147412986'/>
  <enum name='CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB' value='-2147412985'/>
  <enum name='CSSMERR_APPLEDL_INVALID_DATABASE_BLOB' value='-2147412988'/>
  <enum name='CSSMERR_APPLEDL_INVALID_KEY_BLOB' value='-2147412987'/>
  <enum name='CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS' value='-2147412992'/>
  <enum name='CSSMERR_APPLEDL_QUOTA_EXCEEDED' value='-2147412990'/>
  <enum name='CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER' value='-2147408873'/>
  <enum name='CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER' value='-2147408874'/>
  <enum name='CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT' value='-2147408845'/>
  <enum name='CSSMERR_APPLETP_CRL_BAD_URI' value='-2147408881'/>
  <enum name='CSSMERR_APPLETP_CRL_EXPIRED' value='-2147408885'/>
  <enum name='CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT' value='-2147408877'/>
  <enum name='CSSMERR_APPLETP_CRL_NOT_FOUND' value='-2147408883'/>
  <enum name='CSSMERR_APPLETP_CRL_NOT_TRUSTED' value='-2147408878'/>
  <enum name='CSSMERR_APPLETP_CRL_NOT_VALID_YET' value='-2147408884'/>
  <enum name='CSSMERR_APPLETP_CRL_POLICY_FAIL' value='-2147408876'/>
  <enum name='CSSMERR_APPLETP_CRL_SERVER_DOWN' value='-2147408882'/>
  <enum name='CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH' value='-2147408849'/>
  <enum name='CSSMERR_APPLETP_CS_BAD_PATH_LENGTH' value='-2147408847'/>
  <enum name='CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS' value='-2147408848'/>
  <enum name='CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE' value='-2147408846'/>
  <enum name='CSSMERR_APPLETP_HOSTNAME_MISMATCH' value='-2147408896'/>
  <enum name='CSSMERR_APPLETP_IDP_FAIL' value='-2147408875'/>
  <enum name='CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK' value='-2147408861'/>
  <enum name='CSSMERR_APPLETP_INVALID_AUTHORITY_ID' value='-2147408892'/>
  <enum name='CSSMERR_APPLETP_INVALID_CA' value='-2147408893'/>
  <enum name='CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE' value='-2147408889'/>
  <enum name='CSSMERR_APPLETP_INVALID_ID_LINKAGE' value='-2147408888'/>
  <enum name='CSSMERR_APPLETP_INVALID_KEY_USAGE' value='-2147408890'/>
  <enum name='CSSMERR_APPLETP_INVALID_ROOT' value='-2147408886'/>
  <enum name='CSSMERR_APPLETP_INVALID_SUBJECT_ID' value='-2147408891'/>
  <enum name='CSSMERR_APPLETP_NETWORK_FAILURE' value='-2147408860'/>
  <enum name='CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS' value='-2147408894'/>
  <enum name='CSSMERR_APPLETP_OCSP_BAD_REQUEST' value='-2147408864'/>
  <enum name='CSSMERR_APPLETP_OCSP_BAD_RESPONSE' value='-2147408865'/>
  <enum name='CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT' value='-2147408858'/>
  <enum name='CSSMERR_APPLETP_OCSP_NONCE_MISMATCH' value='-2147408850'/>
  <enum name='CSSMERR_APPLETP_OCSP_NOT_TRUSTED' value='-2147408859'/>
  <enum name='CSSMERR_APPLETP_OCSP_NO_SIGNER' value='-2147408856'/>
  <enum name='CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR' value='-2147408854'/>
  <enum name='CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ' value='-2147408855'/>
  <enum name='CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED' value='-2147408852'/>
  <enum name='CSSMERR_APPLETP_OCSP_RESP_TRY_LATER' value='-2147408853'/>
  <enum name='CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED' value='-2147408851'/>
  <enum name='CSSMERR_APPLETP_OCSP_SIG_ERROR' value='-2147408857'/>
  <enum name='CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED' value='-2147408862'/>
  <enum name='CSSMERR_APPLETP_OCSP_UNAVAILABLE' value='-2147408863'/>
  <enum name='CSSMERR_APPLETP_PATH_LEN_CONSTRAINT' value='-2147408887'/>
  <enum name='CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE' value='-2147408871'/>
  <enum name='CSSMERR_APPLETP_SMIME_BAD_KEY_USE' value='-2147408870'/>
  <enum name='CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND' value='-2147408872'/>
  <enum name='CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL' value='-2147408869'/>
  <enum name='CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS' value='-2147408868'/>
  <enum name='CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT' value='-2147408867'/>
  <enum name='CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE' value='-2147408866'/>
  <enum name='CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN' value='-2147408880'/>
  <enum name='CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN' value='-2147408895'/>
  <enum name='CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN' value='-2147408879'/>
  <enum name='CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING' value='-2147408786'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING' value='-2147408787'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_QUEUED' value='-2147408796'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_REDIRECT' value='-2147408795'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST' value='-2147408789'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH' value='-2147408792'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR' value='-2147408794'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL' value='-2147408790'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM' value='-2147408793'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR' value='-2147408788'/>
  <enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL' value='-2147408791'/>
  <enum name='CSSMERR_CL_CRL_ALREADY_SIGNED' value='-2147411897'/>
  <enum name='CSSMERR_CL_DEVICE_FAILED' value='-2147411739'/>
  <enum name='CSSMERR_CL_DEVICE_RESET' value='-2147411740'/>
  <enum name='CSSMERR_CL_FUNCTION_FAILED' value='-2147411958'/>
  <enum name='CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED' value='-2147411961'/>
  <enum name='CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147411741'/>
  <enum name='CSSMERR_CL_INTERNAL_ERROR' value='-2147411967'/>
  <enum name='CSSMERR_CL_INVALID_BUNDLE_INFO' value='-2147411708'/>
  <enum name='CSSMERR_CL_INVALID_BUNDLE_POINTER' value='-2147411711'/>
  <enum name='CSSMERR_CL_INVALID_CACHE_HANDLE' value='-2147411710'/>
  <enum name='CSSMERR_CL_INVALID_CERTGROUP_POINTER' value='-2147411902'/>
  <enum name='CSSMERR_CL_INVALID_CERT_POINTER' value='-2147411901'/>
  <enum name='CSSMERR_CL_INVALID_CONTEXT_HANDLE' value='-2147411904'/>
  <enum name='CSSMERR_CL_INVALID_CRL_INDEX' value='-2147411707'/>
  <enum name='CSSMERR_CL_INVALID_CRL_POINTER' value='-2147411900'/>
  <enum name='CSSMERR_CL_INVALID_DATA' value='-2147411898'/>
  <enum name='CSSMERR_CL_INVALID_FIELD_POINTER' value='-2147411899'/>
  <enum name='CSSMERR_CL_INVALID_INPUT_POINTER' value='-2147411963'/>
  <enum name='CSSMERR_CL_INVALID_NUMBER_OF_FIELDS' value='-2147411896'/>
  <enum name='CSSMERR_CL_INVALID_OUTPUT_POINTER' value='-2147411962'/>
  <enum name='CSSMERR_CL_INVALID_PASSTHROUGH_ID' value='-2147411882'/>
  <enum name='CSSMERR_CL_INVALID_POINTER' value='-2147411964'/>
  <enum name='CSSMERR_CL_INVALID_RESULTS_HANDLE' value='-2147411709'/>
  <enum name='CSSMERR_CL_INVALID_SCOPE' value='-2147411706'/>
  <enum name='CSSMERR_CL_MDS_ERROR' value='-2147411965'/>
  <enum name='CSSMERR_CL_MEMORY_ERROR' value='-2147411966'/>
  <enum name='CSSMERR_CL_NO_FIELD_VALUES' value='-2147411705'/>
  <enum name='CSSMERR_CL_NO_USER_INTERACTION' value='-2147411744'/>
  <enum name='CSSMERR_CL_OS_ACCESS_DENIED' value='-2147411959'/>
  <enum name='CSSMERR_CL_SCOPE_NOT_SUPPORTED' value='-2147411704'/>
  <enum name='CSSMERR_CL_SELF_CHECK_FAILED' value='-2147411960'/>
  <enum name='CSSMERR_CL_SERVICE_NOT_AVAILABLE' value='-2147411742'/>
  <enum name='CSSMERR_CL_UNKNOWN_FORMAT' value='-2147411890'/>
  <enum name='CSSMERR_CL_UNKNOWN_TAG' value='-2147411889'/>
  <enum name='CSSMERR_CL_USER_CANCELED' value='-2147411743'/>
  <enum name='CSSMERR_CL_VERIFICATION_FAILURE' value='-2147411895'/>
  <enum name='CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR' value='-2147415035'/>
  <enum name='CSSMERR_CSP_ACL_ADD_FAILED' value='-2147416010'/>
  <enum name='CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED' value='-2147416025'/>
  <enum name='CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED' value='-2147416019'/>
  <enum name='CSSMERR_CSP_ACL_CHANGE_FAILED' value='-2147416015'/>
  <enum name='CSSMERR_CSP_ACL_DELETE_FAILED' value='-2147416012'/>
  <enum name='CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND' value='-2147416017'/>
  <enum name='CSSMERR_CSP_ACL_REPLACE_FAILED' value='-2147416011'/>
  <enum name='CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value='-2147416021'/>
  <enum name='CSSMERR_CSP_ALGID_MISMATCH' value='-2147415789'/>
  <enum name='CSSMERR_CSP_ALREADY_LOGGED_IN' value='-2147415726'/>
  <enum name='CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT' value='-2147415040'/>
  <enum name='CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE' value='-2147415036'/>
  <enum name='CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE' value='-2147415037'/>
  <enum name='CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE' value='-2147415039'/>
  <enum name='CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH' value='-2147415038'/>
  <enum name='CSSMERR_CSP_ATTACH_HANDLE_BUSY' value='-2147415802'/>
  <enum name='CSSMERR_CSP_BLOCK_SIZE_MISMATCH' value='-2147415731'/>
  <enum name='CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED' value='-2147415722'/>
  <enum name='CSSMERR_CSP_DEVICE_ERROR' value='-2147415804'/>
  <enum name='CSSMERR_CSP_DEVICE_FAILED' value='-2147415835'/>
  <enum name='CSSMERR_CSP_DEVICE_MEMORY_ERROR' value='-2147415803'/>
  <enum name='CSSMERR_CSP_DEVICE_RESET' value='-2147415836'/>
  <enum name='CSSMERR_CSP_DEVICE_VERIFY_FAILED' value='-2147415728'/>
  <enum name='CSSMERR_CSP_FUNCTION_FAILED' value='-2147416054'/>
  <enum name='CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED' value='-2147416057'/>
  <enum name='CSSMERR_CSP_INPUT_LENGTH_ERROR' value='-2147415807'/>
  <enum name='CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147415837'/>
  <enum name='CSSMERR_CSP_INTERNAL_ERROR' value='-2147416063'/>
  <enum name='CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS' value='-2147416027'/>
  <enum name='CSSMERR_CSP_INVALID_ACL_BASE_CERTS' value='-2147416026'/>
  <enum name='CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK' value='-2147416020'/>
  <enum name='CSSMERR_CSP_INVALID_ACL_EDIT_MODE' value='-2147416016'/>
  <enum name='CSSMERR_CSP_INVALID_ACL_ENTRY_TAG' value='-2147416018'/>
  <enum name='CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE' value='-2147416022'/>
  <enum name='CSSMERR_CSP_INVALID_ALGORITHM' value='-2147415759'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS' value='-2147415678'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS' value='-2147415704'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_BASE' value='-2147415686'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE' value='-2147415738'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE' value='-2147415680'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS' value='-2147415696'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_END_DATE' value='-2147415692'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR' value='-2147415752'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT' value='-2147415682'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_KEY' value='-2147415754'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH' value='-2147415740'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_KEY_TYPE' value='-2147415700'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_LABEL' value='-2147415702'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_MODE' value='-2147415698'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE' value='-2147415708'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_PADDING' value='-2147415748'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_PASSPHRASE' value='-2147415742'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_PRIME' value='-2147415688'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT' value='-2147415674'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT' value='-2147415676'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_RANDOM' value='-2147415746'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_ROUNDS' value='-2147415706'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_SALT' value='-2147415750'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_SEED' value='-2147415744'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_START_DATE' value='-2147415694'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_SUBPRIME' value='-2147415684'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT' value='-2147415672'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_VERSION' value='-2147415690'/>
  <enum name='CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT' value='-2147415670'/>
  <enum name='CSSMERR_CSP_INVALID_CONTEXT' value='-2147415760'/>
  <enum name='CSSMERR_CSP_INVALID_CONTEXT_HANDLE' value='-2147416000'/>
  <enum name='CSSMERR_CSP_INVALID_CRYPTO_DATA' value='-2147415976'/>
  <enum name='CSSMERR_CSP_INVALID_DATA' value='-2147415994'/>
  <enum name='CSSMERR_CSP_INVALID_DATA_COUNT' value='-2147415768'/>
  <enum name='CSSMERR_CSP_INVALID_DIGEST_ALGORITHM' value='-2147415723'/>
  <enum name='CSSMERR_CSP_INVALID_INPUT_POINTER' value='-2147416059'/>
  <enum name='CSSMERR_CSP_INVALID_INPUT_VECTOR' value='-2147415766'/>
  <enum name='CSSMERR_CSP_INVALID_KEY' value='-2147415792'/>
  <enum name='CSSMERR_CSP_INVALID_KEYATTR_MASK' value='-2147415780'/>
  <enum name='CSSMERR_CSP_INVALID_KEYUSAGE_MASK' value='-2147415782'/>
  <enum name='CSSMERR_CSP_INVALID_KEY_CLASS' value='-2147415790'/>
  <enum name='CSSMERR_CSP_INVALID_KEY_FORMAT' value='-2147415776'/>
  <enum name='CSSMERR_CSP_INVALID_KEY_LABEL' value='-2147415778'/>
  <enum name='CSSMERR_CSP_INVALID_KEY_POINTER' value='-2147415783'/>
  <enum name='CSSMERR_CSP_INVALID_KEY_REFERENCE' value='-2147415791'/>
  <enum name='CSSMERR_CSP_INVALID_LOGIN_NAME' value='-2147415727'/>
  <enum name='CSSMERR_CSP_INVALID_NEW_ACL_ENTRY' value='-2147416014'/>
  <enum name='CSSMERR_CSP_INVALID_NEW_ACL_OWNER' value='-2147416013'/>
  <enum name='CSSMERR_CSP_INVALID_OUTPUT_POINTER' value='-2147416058'/>
  <enum name='CSSMERR_CSP_INVALID_OUTPUT_VECTOR' value='-2147415765'/>
  <enum name='CSSMERR_CSP_INVALID_PASSTHROUGH_ID' value='-2147415978'/>
  <enum name='CSSMERR_CSP_INVALID_POINTER' value='-2147416060'/>
  <enum name='CSSMERR_CSP_INVALID_SAMPLE_VALUE' value='-2147416024'/>
  <enum name='CSSMERR_CSP_INVALID_SIGNATURE' value='-2147415733'/>
  <enum name='CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT' value='-2147415787'/>
  <enum name='CSSMERR_CSP_KEY_HEADER_INCONSISTENT' value='-2147415786'/>
  <enum name='CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS' value='-2147415724'/>
  <enum name='CSSMERR_CSP_KEY_USAGE_INCORRECT' value='-2147415788'/>
  <enum name='CSSMERR_CSP_MDS_ERROR' value='-2147416061'/>
  <enum name='CSSMERR_CSP_MEMORY_ERROR' value='-2147416062'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS' value='-2147415677'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS' value='-2147415703'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_BASE' value='-2147415685'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE' value='-2147415737'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE' value='-2147415679'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS' value='-2147415695'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_END_DATE' value='-2147415691'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR' value='-2147415751'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT' value='-2147415681'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_KEY' value='-2147415753'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH' value='-2147415739'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_KEY_TYPE' value='-2147415699'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_LABEL' value='-2147415701'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_MODE' value='-2147415697'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE' value='-2147415707'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_PADDING' value='-2147415747'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_PASSPHRASE' value='-2147415741'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_PRIME' value='-2147415687'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT' value='-2147415673'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT' value='-2147415675'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_RANDOM' value='-2147415745'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_ROUNDS' value='-2147415705'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_SALT' value='-2147415749'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_SEED' value='-2147415743'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_START_DATE' value='-2147415693'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_SUBPRIME' value='-2147415683'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT' value='-2147415671'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_VERSION' value='-2147415689'/>
  <enum name='CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT' value='-2147415669'/>
  <enum name='CSSMERR_CSP_NOT_LOGGED_IN' value='-2147415801'/>
  <enum name='CSSMERR_CSP_NO_USER_INTERACTION' value='-2147415840'/>
  <enum name='CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED' value='-2147416029'/>
  <enum name='CSSMERR_CSP_OBJECT_ACL_REQUIRED' value='-2147416028'/>
  <enum name='CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED' value='-2147416030'/>
  <enum name='CSSMERR_CSP_OBJECT_USE_AUTH_DENIED' value='-2147416031'/>
  <enum name='CSSMERR_CSP_OPERATION_AUTH_DENIED' value='-2147416032'/>
  <enum name='CSSMERR_CSP_OS_ACCESS_DENIED' value='-2147416055'/>
  <enum name='CSSMERR_CSP_OUTPUT_LENGTH_ERROR' value='-2147415806'/>
  <enum name='CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS' value='-2147415725'/>
  <enum name='CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND' value='-2147415730'/>
  <enum name='CSSMERR_CSP_PRIVILEGE_NOT_GRANTED' value='-2147415989'/>
  <enum name='CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED' value='-2147415805'/>
  <enum name='CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT' value='-2147415729'/>
  <enum name='CSSMERR_CSP_QUERY_SIZE_UNKNOWN' value='-2147415732'/>
  <enum name='CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED' value='-2147416023'/>
  <enum name='CSSMERR_CSP_SELF_CHECK_FAILED' value='-2147416056'/>
  <enum name='CSSMERR_CSP_SERVICE_NOT_AVAILABLE' value='-2147415838'/>
  <enum name='CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS' value='-2147415736'/>
  <enum name='CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED' value='-2147415735'/>
  <enum name='CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK' value='-2147415779'/>
  <enum name='CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK' value='-2147415781'/>
  <enum name='CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT' value='-2147415785'/>
  <enum name='CSSMERR_CSP_UNSUPPORTED_KEY_LABEL' value='-2147415777'/>
  <enum name='CSSMERR_CSP_UNSUPPORTED_KEY_SIZE' value='-2147415784'/>
  <enum name='CSSMERR_CSP_USER_CANCELED' value='-2147415839'/>
  <enum name='CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED' value='-2147415767'/>
  <enum name='CSSMERR_CSP_VERIFY_FAILED' value='-2147415734'/>
  <enum name='CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED' value='-2147417828'/>
  <enum name='CSSMERR_CSSM_ADDIN_LOAD_FAILED' value='-2147417834'/>
  <enum name='CSSMERR_CSSM_ADDIN_UNLOAD_FAILED' value='-2147417832'/>
  <enum name='CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT' value='-2147417822'/>
  <enum name='CSSMERR_CSSM_BUFFER_TOO_SMALL' value='-2147417824'/>
  <enum name='CSSMERR_CSSM_DEVICE_FAILED' value='-2147417883'/>
  <enum name='CSSMERR_CSSM_DEVICE_RESET' value='-2147417884'/>
  <enum name='CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED' value='-2147417829'/>
  <enum name='CSSMERR_CSSM_EMM_LOAD_FAILED' value='-2147417836'/>
  <enum name='CSSMERR_CSSM_EMM_UNLOAD_FAILED' value='-2147417835'/>
  <enum name='CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND' value='-2147417819'/>
  <enum name='CSSMERR_CSSM_FUNCTION_FAILED' value='-2147418102'/>
  <enum name='CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL' value='-2147417851'/>
  <enum name='CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED' value='-2147418105'/>
  <enum name='CSSMERR_CSSM_INCOMPATIBLE_VERSION' value='-2147418047'/>
  <enum name='CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147417885'/>
  <enum name='CSSMERR_CSSM_INTERNAL_ERROR' value='-2147418111'/>
  <enum name='CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE' value='-2147417830'/>
  <enum name='CSSMERR_CSSM_INVALID_ADDIN_HANDLE' value='-2147417855'/>
  <enum name='CSSMERR_CSSM_INVALID_ATTRIBUTE' value='-2147417823'/>
  <enum name='CSSMERR_CSSM_INVALID_CONTEXT_HANDLE' value='-2147418048'/>
  <enum name='CSSMERR_CSSM_INVALID_GUID' value='-2147418100'/>
  <enum name='CSSMERR_CSSM_INVALID_HANDLE_USAGE' value='-2147417853'/>
  <enum name='CSSMERR_CSSM_INVALID_INPUT_POINTER' value='-2147418107'/>
  <enum name='CSSMERR_CSSM_INVALID_KEY_HIERARCHY' value='-2147417833'/>
  <enum name='CSSMERR_CSSM_INVALID_OUTPUT_POINTER' value='-2147418106'/>
  <enum name='CSSMERR_CSSM_INVALID_POINTER' value='-2147418108'/>
  <enum name='CSSMERR_CSSM_INVALID_PVC' value='-2147417837'/>
  <enum name='CSSMERR_CSSM_INVALID_SERVICE_MASK' value='-2147417827'/>
  <enum name='CSSMERR_CSSM_INVALID_SUBSERVICEID' value='-2147417825'/>
  <enum name='CSSMERR_CSSM_LIB_REF_NOT_FOUND' value='-2147417831'/>
  <enum name='CSSMERR_CSSM_MDS_ERROR' value='-2147418109'/>
  <enum name='CSSMERR_CSSM_MEMORY_ERROR' value='-2147418110'/>
  <enum name='CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL' value='-2147417821'/>
  <enum name='CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND' value='-2147417820'/>
  <enum name='CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED' value='-2147418101'/>
  <enum name='CSSMERR_CSSM_MODULE_NOT_LOADED' value='-2147417826'/>
  <enum name='CSSMERR_CSSM_NOT_INITIALIZED' value='-2147417854'/>
  <enum name='CSSMERR_CSSM_NO_USER_INTERACTION' value='-2147417888'/>
  <enum name='CSSMERR_CSSM_OS_ACCESS_DENIED' value='-2147418103'/>
  <enum name='CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED' value='-2147418037'/>
  <enum name='CSSMERR_CSSM_PVC_ALREADY_CONFIGURED' value='-2147417838'/>
  <enum name='CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND' value='-2147417852'/>
  <enum name='CSSMERR_CSSM_SCOPE_NOT_SUPPORTED' value='-2147417839'/>
  <enum name='CSSMERR_CSSM_SELF_CHECK_FAILED' value='-2147418104'/>
  <enum name='CSSMERR_CSSM_SERVICE_NOT_AVAILABLE' value='-2147417886'/>
  <enum name='CSSMERR_CSSM_USER_CANCELED' value='-2147417887'/>
  <enum name='CSSMERR_DL_ACL_ADD_FAILED' value='-2147413962'/>
  <enum name='CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED' value='-2147413977'/>
  <enum name='CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED' value='-2147413971'/>
  <enum name='CSSMERR_DL_ACL_CHANGE_FAILED' value='-2147413967'/>
  <enum name='CSSMERR_DL_ACL_DELETE_FAILED' value='-2147413964'/>
  <enum name='CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND' value='-2147413969'/>
  <enum name='CSSMERR_DL_ACL_REPLACE_FAILED' value='-2147413963'/>
  <enum name='CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value='-2147413973'/>
  <enum name='CSSMERR_DL_DATABASE_CORRUPT' value='-2147413759'/>
  <enum name='CSSMERR_DL_DATASTORE_ALREADY_EXISTS' value='-2147413736'/>
  <enum name='CSSMERR_DL_DATASTORE_DOESNOT_EXIST' value='-2147413737'/>
  <enum name='CSSMERR_DL_DATASTORE_IS_OPEN' value='-2147413734'/>
  <enum name='CSSMERR_DL_DB_LOCKED' value='-2147413735'/>
  <enum name='CSSMERR_DL_DEVICE_FAILED' value='-2147413787'/>
  <enum name='CSSMERR_DL_DEVICE_RESET' value='-2147413788'/>
  <enum name='CSSMERR_DL_ENDOFDATA' value='-2147413715'/>
  <enum name='CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE' value='-2147413742'/>
  <enum name='CSSMERR_DL_FUNCTION_FAILED' value='-2147414006'/>
  <enum name='CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED' value='-2147414009'/>
  <enum name='CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT' value='-2147413741'/>
  <enum name='CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147413789'/>
  <enum name='CSSMERR_DL_INTERNAL_ERROR' value='-2147414015'/>
  <enum name='CSSMERR_DL_INVALID_ACCESS_CREDENTIALS' value='-2147413979'/>
  <enum name='CSSMERR_DL_INVALID_ACCESS_REQUEST' value='-2147413724'/>
  <enum name='CSSMERR_DL_INVALID_ACL_BASE_CERTS' value='-2147413978'/>
  <enum name='CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK' value='-2147413972'/>
  <enum name='CSSMERR_DL_INVALID_ACL_EDIT_MODE' value='-2147413968'/>
  <enum name='CSSMERR_DL_INVALID_ACL_ENTRY_TAG' value='-2147413970'/>
  <enum name='CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE' value='-2147413974'/>
  <enum name='CSSMERR_DL_INVALID_CL_HANDLE' value='-2147413934'/>
  <enum name='CSSMERR_DL_INVALID_CSP_HANDLE' value='-2147413936'/>
  <enum name='CSSMERR_DL_INVALID_DB_HANDLE' value='-2147413942'/>
  <enum name='CSSMERR_DL_INVALID_DB_LIST_POINTER' value='-2147413939'/>
  <enum name='CSSMERR_DL_INVALID_DB_LOCATION' value='-2147413725'/>
  <enum name='CSSMERR_DL_INVALID_DB_NAME' value='-2147413738'/>
  <enum name='CSSMERR_DL_INVALID_DL_HANDLE' value='-2147413935'/>
  <enum name='CSSMERR_DL_INVALID_FIELD_NAME' value='-2147413750'/>
  <enum name='CSSMERR_DL_INVALID_INDEX_INFO' value='-2147413723'/>
  <enum name='CSSMERR_DL_INVALID_INPUT_POINTER' value='-2147414011'/>
  <enum name='CSSMERR_DL_INVALID_MODIFY_MODE' value='-2147413718'/>
  <enum name='CSSMERR_DL_INVALID_NETWORK_ADDR' value='-2147413929'/>
  <enum name='CSSMERR_DL_INVALID_NEW_ACL_ENTRY' value='-2147413966'/>
  <enum name='CSSMERR_DL_INVALID_NEW_ACL_OWNER' value='-2147413965'/>
  <enum name='CSSMERR_DL_INVALID_NEW_OWNER' value='-2147413721'/>
  <enum name='CSSMERR_DL_INVALID_OPEN_PARAMETERS' value='-2147413717'/>
  <enum name='CSSMERR_DL_INVALID_OUTPUT_POINTER' value='-2147414010'/>
  <enum name='CSSMERR_DL_INVALID_PARSING_MODULE' value='-2147413740'/>
  <enum name='CSSMERR_DL_INVALID_PASSTHROUGH_ID' value='-2147413930'/>
  <enum name='CSSMERR_DL_INVALID_POINTER' value='-2147414012'/>
  <enum name='CSSMERR_DL_INVALID_QUERY' value='-2147413714'/>
  <enum name='CSSMERR_DL_INVALID_RECORDTYPE' value='-2147413751'/>
  <enum name='CSSMERR_DL_INVALID_RECORD_INDEX' value='-2147413752'/>
  <enum name='CSSMERR_DL_INVALID_RECORD_UID' value='-2147413720'/>
  <enum name='CSSMERR_DL_INVALID_RESULTS_HANDLE' value='-2147413726'/>
  <enum name='CSSMERR_DL_INVALID_SAMPLE_VALUE' value='-2147413976'/>
  <enum name='CSSMERR_DL_INVALID_SELECTION_TAG' value='-2147413722'/>
  <enum name='CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA' value='-2147413719'/>
  <enum name='CSSMERR_DL_INVALID_VALUE' value='-2147413713'/>
  <enum name='CSSMERR_DL_MDS_ERROR' value='-2147414013'/>
  <enum name='CSSMERR_DL_MEMORY_ERROR' value='-2147414014'/>
  <enum name='CSSMERR_DL_MISSING_VALUE' value='-2147413732'/>
  <enum name='CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED' value='-2147413712'/>
  <enum name='CSSMERR_DL_NO_USER_INTERACTION' value='-2147413792'/>
  <enum name='CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED' value='-2147413981'/>
  <enum name='CSSMERR_DL_OBJECT_ACL_REQUIRED' value='-2147413980'/>
  <enum name='CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED' value='-2147413982'/>
  <enum name='CSSMERR_DL_OBJECT_USE_AUTH_DENIED' value='-2147413983'/>
  <enum name='CSSMERR_DL_OPERATION_AUTH_DENIED' value='-2147413984'/>
  <enum name='CSSMERR_DL_OS_ACCESS_DENIED' value='-2147414007'/>
  <enum name='CSSMERR_DL_RECORD_MODIFIED' value='-2147413716'/>
  <enum name='CSSMERR_DL_RECORD_NOT_FOUND' value='-2147413733'/>
  <enum name='CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED' value='-2147413975'/>
  <enum name='CSSMERR_DL_SELF_CHECK_FAILED' value='-2147414008'/>
  <enum name='CSSMERR_DL_SERVICE_NOT_AVAILABLE' value='-2147413790'/>
  <enum name='CSSMERR_DL_STALE_UNIQUE_RECORD' value='-2147413711'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT' value='-2147413749'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_INDEX_INFO' value='-2147413748'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_LOCALITY' value='-2147413747'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES' value='-2147413746'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_NUM_INDEXES' value='-2147413745'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES' value='-2147413744'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS' value='-2147413729'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_OPERATOR' value='-2147413727'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_QUERY' value='-2147413731'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS' value='-2147413730'/>
  <enum name='CSSMERR_DL_UNSUPPORTED_RECORDTYPE' value='-2147413743'/>
  <enum name='CSSMERR_DL_USER_CANCELED' value='-2147413791'/>
  <enum name='CSSMERR_TP_AUTHENTICATION_FAILED' value='-2147409657'/>
  <enum name='CSSMERR_TP_CERTGROUP_INCOMPLETE' value='-2147409656'/>
  <enum name='CSSMERR_TP_CERTIFICATE_CANT_OPERATE' value='-2147409655'/>
  <enum name='CSSMERR_TP_CERT_EXPIRED' value='-2147409654'/>
  <enum name='CSSMERR_TP_CERT_NOT_VALID_YET' value='-2147409653'/>
  <enum name='CSSMERR_TP_CERT_REVOKED' value='-2147409652'/>
  <enum name='CSSMERR_TP_CERT_SUSPENDED' value='-2147409651'/>
  <enum name='CSSMERR_TP_CRL_ALREADY_SIGNED' value='-2147409849'/>
  <enum name='CSSMERR_TP_DEVICE_FAILED' value='-2147409691'/>
  <enum name='CSSMERR_TP_DEVICE_RESET' value='-2147409692'/>
  <enum name='CSSMERR_TP_FUNCTION_FAILED' value='-2147409910'/>
  <enum name='CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED' value='-2147409913'/>
  <enum name='CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION' value='-2147409693'/>
  <enum name='CSSMERR_TP_INSUFFICIENT_CREDENTIALS' value='-2147409650'/>
  <enum name='CSSMERR_TP_INTERNAL_ERROR' value='-2147409919'/>
  <enum name='CSSMERR_TP_INVALID_ACTION' value='-2147409649'/>
  <enum name='CSSMERR_TP_INVALID_ACTION_DATA' value='-2147409648'/>
  <enum name='CSSMERR_TP_INVALID_ANCHOR_CERT' value='-2147409646'/>
  <enum name='CSSMERR_TP_INVALID_AUTHORITY' value='-2147409645'/>
  <enum name='CSSMERR_TP_INVALID_CALLBACK' value='-2147409625'/>
  <enum name='CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER' value='-2147409663'/>
  <enum name='CSSMERR_TP_INVALID_CERTGROUP' value='-2147409660'/>
  <enum name='CSSMERR_TP_INVALID_CERTGROUP_POINTER' value='-2147409854'/>
  <enum name='CSSMERR_TP_INVALID_CERTIFICATE' value='-2147409643'/>
  <enum name='CSSMERR_TP_INVALID_CERT_AUTHORITY' value='-2147409642'/>
  <enum name='CSSMERR_TP_INVALID_CERT_POINTER' value='-2147409853'/>
  <enum name='CSSMERR_TP_INVALID_CL_HANDLE' value='-2147409838'/>
  <enum name='CSSMERR_TP_INVALID_CONTEXT_HANDLE' value='-2147409856'/>
  <enum name='CSSMERR_TP_INVALID_CRL' value='-2147409638'/>
  <enum name='CSSMERR_TP_INVALID_CRLGROUP' value='-2147409659'/>
  <enum name='CSSMERR_TP_INVALID_CRLGROUP_POINTER' value='-2147409658'/>
  <enum name='CSSMERR_TP_INVALID_CRL_AUTHORITY' value='-2147409641'/>
  <enum name='CSSMERR_TP_INVALID_CRL_ENCODING' value='-2147409640'/>
  <enum name='CSSMERR_TP_INVALID_CRL_POINTER' value='-2147409852'/>
  <enum name='CSSMERR_TP_INVALID_CRL_TYPE' value='-2147409639'/>
  <enum name='CSSMERR_TP_INVALID_CSP_HANDLE' value='-2147409840'/>
  <enum name='CSSMERR_TP_INVALID_DATA' value='-2147409850'/>
  <enum name='CSSMERR_TP_INVALID_DB_HANDLE' value='-2147409846'/>
  <enum name='CSSMERR_TP_INVALID_DB_LIST' value='-2147409844'/>
  <enum name='CSSMERR_TP_INVALID_DB_LIST_POINTER' value='-2147409843'/>
  <enum name='CSSMERR_TP_INVALID_DL_HANDLE' value='-2147409839'/>
  <enum name='CSSMERR_TP_INVALID_FIELD_POINTER' value='-2147409851'/>
  <enum name='CSSMERR_TP_INVALID_FORM_TYPE' value='-2147409637'/>
  <enum name='CSSMERR_TP_INVALID_ID' value='-2147409636'/>
  <enum name='CSSMERR_TP_INVALID_IDENTIFIER' value='-2147409635'/>
  <enum name='CSSMERR_TP_INVALID_IDENTIFIER_POINTER' value='-2147409662'/>
  <enum name='CSSMERR_TP_INVALID_INDEX' value='-2147409634'/>
  <enum name='CSSMERR_TP_INVALID_INPUT_POINTER' value='-2147409915'/>
  <enum name='CSSMERR_TP_INVALID_KEYCACHE_HANDLE' value='-2147409661'/>
  <enum name='CSSMERR_TP_INVALID_NAME' value='-2147409633'/>
  <enum name='CSSMERR_TP_INVALID_NETWORK_ADDR' value='-2147409833'/>
  <enum name='CSSMERR_TP_INVALID_NUMBER_OF_FIELDS' value='-2147409848'/>
  <enum name='CSSMERR_TP_INVALID_OUTPUT_POINTER' value='-2147409914'/>
  <enum name='CSSMERR_TP_INVALID_PASSTHROUGH_ID' value='-2147409834'/>
  <enum name='CSSMERR_TP_INVALID_POINTER' value='-2147409916'/>
  <enum name='CSSMERR_TP_INVALID_POLICY_IDENTIFIERS' value='-2147409632'/>
  <enum name='CSSMERR_TP_INVALID_REASON' value='-2147409630'/>
  <enum name='CSSMERR_TP_INVALID_REQUEST_INPUTS' value='-2147409629'/>
  <enum name='CSSMERR_TP_INVALID_RESPONSE_VECTOR' value='-2147409628'/>
  <enum name='CSSMERR_TP_INVALID_SIGNATURE' value='-2147409627'/>
  <enum name='CSSMERR_TP_INVALID_STOP_ON_POLICY' value='-2147409626'/>
  <enum name='CSSMERR_TP_INVALID_TIMESTRING' value='-2147409631'/>
  <enum name='CSSMERR_TP_INVALID_TUPLE' value='-2147409624'/>
  <enum name='CSSMERR_TP_INVALID_TUPLEGROUP' value='-2147409614'/>
  <enum name='CSSMERR_TP_INVALID_TUPLEGROUP_POINTER' value='-2147409615'/>
  <enum name='CSSMERR_TP_MDS_ERROR' value='-2147409917'/>
  <enum name='CSSMERR_TP_MEMORY_ERROR' value='-2147409918'/>
  <enum name='CSSMERR_TP_NOT_SIGNER' value='-2147409623'/>
  <enum name='CSSMERR_TP_NOT_TRUSTED' value='-2147409622'/>
  <enum name='CSSMERR_TP_NO_DEFAULT_AUTHORITY' value='-2147409621'/>
  <enum name='CSSMERR_TP_NO_USER_INTERACTION' value='-2147409696'/>
  <enum name='CSSMERR_TP_OS_ACCESS_DENIED' value='-2147409911'/>
  <enum name='CSSMERR_TP_REJECTED_FORM' value='-2147409620'/>
  <enum name='CSSMERR_TP_REQUEST_LOST' value='-2147409619'/>
  <enum name='CSSMERR_TP_REQUEST_REJECTED' value='-2147409618'/>
  <enum name='CSSMERR_TP_SELF_CHECK_FAILED' value='-2147409912'/>
  <enum name='CSSMERR_TP_SERVICE_NOT_AVAILABLE' value='-2147409694'/>
  <enum name='CSSMERR_TP_UNKNOWN_FORMAT' value='-2147409842'/>
  <enum name='CSSMERR_TP_UNKNOWN_TAG' value='-2147409841'/>
  <enum name='CSSMERR_TP_UNSUPPORTED_ADDR_TYPE' value='-2147409617'/>
  <enum name='CSSMERR_TP_UNSUPPORTED_SERVICE' value='-2147409616'/>
  <enum name='CSSMERR_TP_USER_CANCELED' value='-2147409695'/>
  <enum name='CSSMERR_TP_VERIFICATION_FAILURE' value='-2147409847'/>
  <enum name='CSSMERR_TP_VERIFY_ACTION_FAILED' value='-2147409644'/>
  <enum name='CSSM_ACL_AUTHORIZATION_ANY' value='1'/>
  <enum name='CSSM_ACL_AUTHORIZATION_CHANGE_ACL' value='65536'/>
  <enum name='CSSM_ACL_AUTHORIZATION_CHANGE_OWNER' value='65537'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DBS_CREATE' value='22'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DBS_DELETE' value='23'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DB_DELETE' value='17'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DB_INSERT' value='19'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DB_MODIFY' value='20'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DB_READ' value='21'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DECRYPT' value='24'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DELETE' value='25'/>
  <enum name='CSSM_ACL_AUTHORIZATION_DERIVE' value='28'/>
  <enum name='CSSM_ACL_AUTHORIZATION_ENCRYPT' value='35'/>
  <enum name='CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR' value='37'/>
  <enum name='CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED' value='38'/>
  <enum name='CSSM_ACL_AUTHORIZATION_GENKEY' value='41'/>
  <enum name='CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR' value='47'/>
  <enum name='CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED' value='48'/>
  <enum name='CSSM_ACL_AUTHORIZATION_LOGIN' value='57'/>
  <enum name='CSSM_ACL_AUTHORIZATION_MAC' value='59'/>
  <enum name='CSSM_ACL_AUTHORIZATION_PREAUTH_BASE' value='16842752'/>
  <enum name='CSSM_ACL_AUTHORIZATION_PREAUTH_END' value='16908288'/>
  <enum name='CSSM_ACL_AUTHORIZATION_SIGN' value='115'/>
  <enum name='CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START' value='65536'/>
  <enum name='CSSM_ACL_CODE_SIGNATURE_INVALID' value='0'/>
  <enum name='CSSM_ACL_CODE_SIGNATURE_OSX' value='1'/>
  <enum name='CSSM_ACL_EDIT_MODE_ADD' value='1'/>
  <enum name='CSSM_ACL_EDIT_MODE_DELETE' value='2'/>
  <enum name='CSSM_ACL_EDIT_MODE_REPLACE' value='3'/>
  <enum name='CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION' value='257'/>
  <enum name='CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE' value='1'/>
  <enum name='CSSM_ACL_MATCH_BITS' value='3'/>
  <enum name='CSSM_ACL_MATCH_GID' value='2'/>
  <enum name='CSSM_ACL_MATCH_HONOR_ROOT' value='256'/>
  <enum name='CSSM_ACL_MATCH_UID' value='1'/>
  <enum name='CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED' value='2147483648'/>
  <enum name='CSSM_ACL_PREAUTH_TRACKING_BLOCKED' value='0'/>
  <enum name='CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK' value='255'/>
  <enum name='CSSM_ACL_PREAUTH_TRACKING_UNKNOWN' value='1073741824'/>
  <enum name='CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION' value='257'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_ANY' value='1'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_BIOMETRIC' value='8'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE' value='116'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_COMMENT' value='12'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME' value='78'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT' value='44'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT' value='65536'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME' value='58'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PASSWORD' value='79'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PREAUTH' value='65545'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE' value='65546'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PROCESS' value='65539'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC' value='83'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD' value='84'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC' value='86'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD' value='87'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY' value='89'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY' value='65541'/>
  <enum name='CSSM_ACL_SUBJECT_TYPE_THRESHOLD' value='123'/>
  <enum name='CSSM_AC_BASE_AC_ERROR' value='-2147405568'/>
  <enum name='CSSM_AC_BASE_ERROR' value='-2147405824'/>
  <enum name='CSSM_AC_PRIVATE_ERROR' value='-2147404800'/>
  <enum name='CSSM_ADDR_CUSTOM' value='1'/>
  <enum name='CSSM_ADDR_NAME' value='4'/>
  <enum name='CSSM_ADDR_NONE' value='0'/>
  <enum name='CSSM_ADDR_SOCKADDR' value='3'/>
  <enum name='CSSM_ADDR_URL' value='2'/>
  <enum name='CSSM_ALGCLASS_ASYMMETRIC' value='8'/>
  <enum name='CSSM_ALGCLASS_CUSTOM' value='1'/>
  <enum name='CSSM_ALGCLASS_DERIVEKEY' value='10'/>
  <enum name='CSSM_ALGCLASS_DIGEST' value='4'/>
  <enum name='CSSM_ALGCLASS_KEYGEN' value='9'/>
  <enum name='CSSM_ALGCLASS_MAC' value='7'/>
  <enum name='CSSM_ALGCLASS_NONE' value='0'/>
  <enum name='CSSM_ALGCLASS_RANDOMGEN' value='5'/>
  <enum name='CSSM_ALGCLASS_SIGNATURE' value='2'/>
  <enum name='CSSM_ALGCLASS_SYMMETRIC' value='3'/>
  <enum name='CSSM_ALGCLASS_UNIQUEGEN' value='6'/>
  <enum name='CSSM_ALGID_3DES' value='77'/>
  <enum name='CSSM_ALGID_3DES_1KEY' value='20'/>
  <enum name='CSSM_ALGID_3DES_1KEY_EEE' value='19'/>
  <enum name='CSSM_ALGID_3DES_2KEY' value='18'/>
  <enum name='CSSM_ALGID_3DES_2KEY_EDE' value='18'/>
  <enum name='CSSM_ALGID_3DES_2KEY_EEE' value='21'/>
  <enum name='CSSM_ALGID_3DES_3KEY' value='17'/>
  <enum name='CSSM_ALGID_3DES_3KEY_EDE' value='17'/>
  <enum name='CSSM_ALGID_3DES_3KEY_EEE' value='20'/>
  <enum name='CSSM_ALGID_AES' value='2147483649'/>
  <enum name='CSSM_ALGID_APPLE_YARROW' value='2147483648'/>
  <enum name='CSSM_ALGID_ASC' value='2147483655'/>
  <enum name='CSSM_ALGID_BATON' value='72'/>
  <enum name='CSSM_ALGID_BLOWFISH' value='28'/>
  <enum name='CSSM_ALGID_CAST' value='27'/>
  <enum name='CSSM_ALGID_CAST3' value='53'/>
  <enum name='CSSM_ALGID_CAST5' value='54'/>
  <enum name='CSSM_ALGID_CDMF' value='52'/>
  <enum name='CSSM_ALGID_CRAB' value='41'/>
  <enum name='CSSM_ALGID_CUSTOM' value='1'/>
  <enum name='CSSM_ALGID_ConcatBaseAndData' value='58'/>
  <enum name='CSSM_ALGID_ConcatBaseAndKey' value='56'/>
  <enum name='CSSM_ALGID_ConcatDataAndBase' value='59'/>
  <enum name='CSSM_ALGID_ConcatKeyAndBase' value='57'/>
  <enum name='CSSM_ALGID_DES' value='14'/>
  <enum name='CSSM_ALGID_DESRandom' value='50'/>
  <enum name='CSSM_ALGID_DESX' value='15'/>
  <enum name='CSSM_ALGID_DH' value='2'/>
  <enum name='CSSM_ALGID_DSA' value='43'/>
  <enum name='CSSM_ALGID_DSA_BSAFE' value='83'/>
  <enum name='CSSM_ALGID_ECAES' value='90'/>
  <enum name='CSSM_ALGID_ECC' value='93'/>
  <enum name='CSSM_ALGID_ECDH' value='84'/>
  <enum name='CSSM_ALGID_ECDSA' value='73'/>
  <enum name='CSSM_ALGID_ECES' value='89'/>
  <enum name='CSSM_ALGID_ECMQV' value='85'/>
  <enum name='CSSM_ALGID_ECNRA' value='87'/>
  <enum name='CSSM_ALGID_ENTROPY_DEFAULT' value='2147483665'/>
  <enum name='CSSM_ALGID_ElGamal' value='46'/>
  <enum name='CSSM_ALGID_ExtractFromKey' value='61'/>
  <enum name='CSSM_ALGID_FASTHASH' value='76'/>
  <enum name='CSSM_ALGID_FEAL' value='32'/>
  <enum name='CSSM_ALGID_FEE' value='2147483650'/>
  <enum name='CSSM_ALGID_FEED' value='2147483653'/>
  <enum name='CSSM_ALGID_FEEDEXP' value='2147483654'/>
  <enum name='CSSM_ALGID_FEE_MD5' value='2147483651'/>
  <enum name='CSSM_ALGID_FEE_SHA1' value='2147483652'/>
  <enum name='CSSM_ALGID_FIPS186Random' value='92'/>
  <enum name='CSSM_ALGID_FortezzaTimestamp' value='80'/>
  <enum name='CSSM_ALGID_GOST' value='39'/>
  <enum name='CSSM_ALGID_GenericSecret' value='55'/>
  <enum name='CSSM_ALGID_HAVAL' value='10'/>
  <enum name='CSSM_ALGID_HAVAL3' value='98'/>
  <enum name='CSSM_ALGID_HAVAL4' value='99'/>
  <enum name='CSSM_ALGID_HAVAL5' value='100'/>
  <enum name='CSSM_ALGID_IBCHASH' value='12'/>
  <enum name='CSSM_ALGID_IDEA' value='22'/>
  <enum name='CSSM_ALGID_IntelPlatformRandom' value='96'/>
  <enum name='CSSM_ALGID_JUNIPER' value='75'/>
  <enum name='CSSM_ALGID_KEA' value='4'/>
  <enum name='CSSM_ALGID_KEYCHAIN_KEY' value='2147483657'/>
  <enum name='CSSM_ALGID_KHAFRE' value='37'/>
  <enum name='CSSM_ALGID_KHUFU' value='36'/>
  <enum name='CSSM_ALGID_LAST' value='2147483647'/>
  <enum name='CSSM_ALGID_LOKI' value='35'/>
  <enum name='CSSM_ALGID_LUCIFER' value='30'/>
  <enum name='CSSM_ALGID_MADRYGA' value='31'/>
  <enum name='CSSM_ALGID_MAYFLY' value='74'/>
  <enum name='CSSM_ALGID_MD2' value='5'/>
  <enum name='CSSM_ALGID_MD2Random' value='47'/>
  <enum name='CSSM_ALGID_MD2WithRSA' value='45'/>
  <enum name='CSSM_ALGID_MD4' value='6'/>
  <enum name='CSSM_ALGID_MD5' value='7'/>
  <enum name='CSSM_ALGID_MD5HMAC' value='102'/>
  <enum name='CSSM_ALGID_MD5Random' value='48'/>
  <enum name='CSSM_ALGID_MD5WithRSA' value='44'/>
  <enum name='CSSM_ALGID_MMB' value='38'/>
  <enum name='CSSM_ALGID_MQV' value='94'/>
  <enum name='CSSM_ALGID_NHASH' value='9'/>
  <enum name='CSSM_ALGID_NONE' value='0'/>
  <enum name='CSSM_ALGID_NRA' value='95'/>
  <enum name='CSSM_ALGID_PBE_OPENSSL_MD5' value='2147483661'/>
  <enum name='CSSM_ALGID_PH' value='3'/>
  <enum name='CSSM_ALGID_PKCS12_PBE_ENCR' value='2147483658'/>
  <enum name='CSSM_ALGID_PKCS12_PBE_MAC' value='2147483659'/>
  <enum name='CSSM_ALGID_PKCS12_SHA1_PBE' value='86'/>
  <enum name='CSSM_ALGID_PKCS5_PBKDF1_MD2' value='68'/>
  <enum name='CSSM_ALGID_PKCS5_PBKDF1_MD5' value='67'/>
  <enum name='CSSM_ALGID_PKCS5_PBKDF1_SHA1' value='69'/>
  <enum name='CSSM_ALGID_PKCS5_PBKDF2' value='103'/>
  <enum name='CSSM_ALGID_RC2' value='23'/>
  <enum name='CSSM_ALGID_RC4' value='25'/>
  <enum name='CSSM_ALGID_RC5' value='24'/>
  <enum name='CSSM_ALGID_RDES' value='16'/>
  <enum name='CSSM_ALGID_REDOC' value='33'/>
  <enum name='CSSM_ALGID_REDOC3' value='34'/>
  <enum name='CSSM_ALGID_RIPEMAC' value='13'/>
  <enum name='CSSM_ALGID_RIPEMD' value='11'/>
  <enum name='CSSM_ALGID_RSA' value='42'/>
  <enum name='CSSM_ALGID_RUNNING_COUNTER' value='104'/>
  <enum name='CSSM_ALGID_SAFER' value='40'/>
  <enum name='CSSM_ALGID_SEAL' value='26'/>
  <enum name='CSSM_ALGID_SECURE_PASSPHRASE' value='2147483660'/>
  <enum name='CSSM_ALGID_SHA1' value='8'/>
  <enum name='CSSM_ALGID_SHA1HMAC' value='91'/>
  <enum name='CSSM_ALGID_SHA1HMAC_LEGACY' value='2147483656'/>
  <enum name='CSSM_ALGID_SHA1WithDSA' value='81'/>
  <enum name='CSSM_ALGID_SHA1WithECDSA' value='82'/>
  <enum name='CSSM_ALGID_SHA1WithECNRA' value='88'/>
  <enum name='CSSM_ALGID_SHA1WithRSA' value='51'/>
  <enum name='CSSM_ALGID_SHA224' value='2147483666'/>
  <enum name='CSSM_ALGID_SHA224WithRSA' value='2147483667'/>
  <enum name='CSSM_ALGID_SHA256' value='2147483662'/>
  <enum name='CSSM_ALGID_SHA256WithRSA' value='2147483668'/>
  <enum name='CSSM_ALGID_SHA384' value='2147483663'/>
  <enum name='CSSM_ALGID_SHA384WithRSA' value='2147483669'/>
  <enum name='CSSM_ALGID_SHA512' value='2147483664'/>
  <enum name='CSSM_ALGID_SHA512WithRSA' value='2147483670'/>
  <enum name='CSSM_ALGID_SHARandom' value='49'/>
  <enum name='CSSM_ALGID_SKIPJACK' value='29'/>
  <enum name='CSSM_ALGID_SSL3KeyAndMacDerive' value='64'/>
  <enum name='CSSM_ALGID_SSL3MD5' value='78'/>
  <enum name='CSSM_ALGID_SSL3MD5_MAC' value='65'/>
  <enum name='CSSM_ALGID_SSL3MasterDerive' value='63'/>
  <enum name='CSSM_ALGID_SSL3PreMasterGen' value='62'/>
  <enum name='CSSM_ALGID_SSL3SHA1' value='79'/>
  <enum name='CSSM_ALGID_SSL3SHA1_MAC' value='66'/>
  <enum name='CSSM_ALGID_TIGER' value='101'/>
  <enum name='CSSM_ALGID_UTC' value='97'/>
  <enum name='CSSM_ALGID_VENDOR_DEFINED' value='2147483648'/>
  <enum name='CSSM_ALGID_WrapLynks' value='70'/>
  <enum name='CSSM_ALGID_WrapSET_OAEP' value='71'/>
  <enum name='CSSM_ALGID_XORBaseAndData' value='60'/>
  <enum name='CSSM_ALGID__FIRST_UNUSED' value='2147483671'/>
  <enum name='CSSM_ALGMODE_BC' value='14'/>
  <enum name='CSSM_ALGMODE_CBC' value='4'/>
  <enum name='CSSM_ALGMODE_CBC128' value='36'/>
  <enum name='CSSM_ALGMODE_CBC64' value='25'/>
  <enum name='CSSM_ALGMODE_CBCC' value='16'/>
  <enum name='CSSM_ALGMODE_CBCPD' value='20'/>
  <enum name='CSSM_ALGMODE_CBCPadIV8' value='6'/>
  <enum name='CSSM_ALGMODE_CBC_IV8' value='5'/>
  <enum name='CSSM_ALGMODE_CFB' value='7'/>
  <enum name='CSSM_ALGMODE_CFB16' value='29'/>
  <enum name='CSSM_ALGMODE_CFB32' value='28'/>
  <enum name='CSSM_ALGMODE_CFB8' value='30'/>
  <enum name='CSSM_ALGMODE_CFBPadIV8' value='9'/>
  <enum name='CSSM_ALGMODE_CFB_IV8' value='8'/>
  <enum name='CSSM_ALGMODE_COUNTER' value='13'/>
  <enum name='CSSM_ALGMODE_CUSTOM' value='1'/>
  <enum name='CSSM_ALGMODE_ECB' value='2'/>
  <enum name='CSSM_ALGMODE_ECB128' value='34'/>
  <enum name='CSSM_ALGMODE_ECB64' value='24'/>
  <enum name='CSSM_ALGMODE_ECB96' value='35'/>
  <enum name='CSSM_ALGMODE_ECBPad' value='3'/>
  <enum name='CSSM_ALGMODE_ISO_9796' value='41'/>
  <enum name='CSSM_ALGMODE_LAST' value='2147483647'/>
  <enum name='CSSM_ALGMODE_NONE' value='0'/>
  <enum name='CSSM_ALGMODE_OAEP_HASH' value='37'/>
  <enum name='CSSM_ALGMODE_OFB' value='10'/>
  <enum name='CSSM_ALGMODE_OFB64' value='26'/>
  <enum name='CSSM_ALGMODE_OFBNLF' value='17'/>
  <enum name='CSSM_ALGMODE_OFBPadIV8' value='12'/>
  <enum name='CSSM_ALGMODE_OFB_IV8' value='11'/>
  <enum name='CSSM_ALGMODE_PBC' value='18'/>
  <enum name='CSSM_ALGMODE_PCBC' value='15'/>
  <enum name='CSSM_ALGMODE_PFB' value='19'/>
  <enum name='CSSM_ALGMODE_PKCS1_EME_OAEP' value='39'/>
  <enum name='CSSM_ALGMODE_PKCS1_EME_V15' value='38'/>
  <enum name='CSSM_ALGMODE_PKCS1_EMSA_V15' value='40'/>
  <enum name='CSSM_ALGMODE_PRIVATE_KEY' value='22'/>
  <enum name='CSSM_ALGMODE_PRIVATE_WRAP' value='32'/>
  <enum name='CSSM_ALGMODE_PUBLIC_KEY' value='21'/>
  <enum name='CSSM_ALGMODE_RELAYX' value='33'/>
  <enum name='CSSM_ALGMODE_SHUFFLE' value='23'/>
  <enum name='CSSM_ALGMODE_VENDOR_DEFINED' value='2147483648'/>
  <enum name='CSSM_ALGMODE_WRAP' value='31'/>
  <enum name='CSSM_ALGMODE_X9_31' value='42'/>
  <enum name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD' value='5'/>
  <enum name='CSSM_APPLECSPDL_DB_GET_HANDLE' value='6'/>
  <enum name='CSSM_APPLECSPDL_DB_GET_SETTINGS' value='2'/>
  <enum name='CSSM_APPLECSPDL_DB_IS_LOCKED' value='4'/>
  <enum name='CSSM_APPLECSPDL_DB_LOCK' value='0'/>
  <enum name='CSSM_APPLECSPDL_DB_SET_SETTINGS' value='3'/>
  <enum name='CSSM_APPLECSPDL_DB_UNLOCK' value='1'/>
  <enum name='CSSM_APPLECSP_KEYDIGEST' value='256'/>
  <enum name='CSSM_APPLEDL_OPEN_PARAMETERS_VERSION' value='1'/>
  <enum name='CSSM_APPLEFILEDL_COMMIT' value='1'/>
  <enum name='CSSM_APPLEFILEDL_ROLLBACK' value='2'/>
  <enum name='CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT' value='0'/>
  <enum name='CSSM_APPLESCPDL_CSP_GET_KEYHANDLE' value='7'/>
  <enum name='CSSM_APPLEX509CL_OBTAIN_CSR' value='0'/>
  <enum name='CSSM_APPLEX509CL_VERIFY_CSR' value='1'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_10' value='10'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_11' value='11'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_12' value='12'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_13' value='13'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_14' value='14'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_15' value='15'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_8' value='8'/>
  <enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_9' value='9'/>
  <enum name='CSSM_APPLE_TP_ACTION_VERSION' value='0'/>
  <enum name='CSSM_APPLE_TP_CRL_OPTS_VERSION' value='0'/>
  <enum name='CSSM_APPLE_TP_SMIME_OPTS_VERSION' value='0'/>
  <enum name='CSSM_APPLE_TP_SSL_CLIENT' value='1'/>
  <enum name='CSSM_APPLE_TP_SSL_OPTS_VERSION' value='1'/>
  <enum name='CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT' value='1'/>
  <enum name='CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE' value='2'/>
  <enum name='CSSM_ASC_OPTIMIZE_ASCII' value='5'/>
  <enum name='CSSM_ASC_OPTIMIZE_DEFAULT' value='0'/>
  <enum name='CSSM_ASC_OPTIMIZE_SECURITY' value='2'/>
  <enum name='CSSM_ASC_OPTIMIZE_SIZE' value='1'/>
  <enum name='CSSM_ASC_OPTIMIZE_TIME' value='3'/>
  <enum name='CSSM_ASC_OPTIMIZE_TIME_SIZE' value='4'/>
  <enum name='CSSM_ATTACH_READ_ONLY' value='1'/>
  <enum name='CSSM_ATTRIBUTE_ACCESS_CREDENTIALS' value='2147483684'/>
  <enum name='CSSM_ATTRIBUTE_ALERT_TITLE' value='545259527'/>
  <enum name='CSSM_ATTRIBUTE_ALG_ID' value='268435485'/>
  <enum name='CSSM_ATTRIBUTE_ALG_PARAMS' value='536870928'/>
  <enum name='CSSM_ATTRIBUTE_ASC_OPTIMIZATION' value='276824067'/>
  <enum name='CSSM_ATTRIBUTE_BASE' value='536870939'/>
  <enum name='CSSM_ATTRIBUTE_BLOCK_SIZE' value='268435468'/>
  <enum name='CSSM_ATTRIBUTE_CSP_HANDLE' value='268435490'/>
  <enum name='CSSM_ATTRIBUTE_CUSTOM' value='536870913'/>
  <enum name='CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS' value='2147483648'/>
  <enum name='CSSM_ATTRIBUTE_DATA_CRYPTO_DATA' value='805306368'/>
  <enum name='CSSM_ATTRIBUTE_DATA_CSSM_DATA' value='536870912'/>
  <enum name='CSSM_ATTRIBUTE_DATA_DATE' value='1610612736'/>
  <enum name='CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE' value='33554432'/>
  <enum name='CSSM_ATTRIBUTE_DATA_KEY' value='1073741824'/>
  <enum name='CSSM_ATTRIBUTE_DATA_KR_PROFILE' value='50331648'/>
  <enum name='CSSM_ATTRIBUTE_DATA_NONE' value='0'/>
  <enum name='CSSM_ATTRIBUTE_DATA_RANGE' value='1879048192'/>
  <enum name='CSSM_ATTRIBUTE_DATA_STRING' value='1342177280'/>
  <enum name='CSSM_ATTRIBUTE_DATA_UINT32' value='268435456'/>
  <enum name='CSSM_ATTRIBUTE_DATA_VERSION' value='16777216'/>
  <enum name='CSSM_ATTRIBUTE_DESCRIPTION' value='1342177282'/>
  <enum name='CSSM_ATTRIBUTE_DL_DB_HANDLE' value='33554467'/>
  <enum name='CSSM_ATTRIBUTE_EFFECTIVE_BITS' value='268435476'/>
  <enum name='CSSM_ATTRIBUTE_END_DATE' value='1610612758'/>
  <enum name='CSSM_ATTRIBUTE_FEE_CURVE_TYPE' value='276824066'/>
  <enum name='CSSM_ATTRIBUTE_FEE_PRIME_TYPE' value='276824065'/>
  <enum name='CSSM_ATTRIBUTE_INIT_VECTOR' value='536870916'/>
  <enum name='CSSM_ATTRIBUTE_ITERATION_COUNT' value='268435486'/>
  <enum name='CSSM_ATTRIBUTE_IV_SIZE' value='268435471'/>
  <enum name='CSSM_ATTRIBUTE_KEY' value='1073741827'/>
  <enum name='CSSM_ATTRIBUTE_KEYATTR' value='268435480'/>
  <enum name='CSSM_ATTRIBUTE_KEYUSAGE' value='268435479'/>
  <enum name='CSSM_ATTRIBUTE_KEY_LENGTH' value='268435466'/>
  <enum name='CSSM_ATTRIBUTE_KEY_LENGTH_RANGE' value='1879048203'/>
  <enum name='CSSM_ATTRIBUTE_KEY_TYPE' value='268435474'/>
  <enum name='CSSM_ATTRIBUTE_KRPROFILE_LOCAL' value='50331680'/>
  <enum name='CSSM_ATTRIBUTE_KRPROFILE_REMOTE' value='50331681'/>
  <enum name='CSSM_ATTRIBUTE_LABEL' value='536870929'/>
  <enum name='CSSM_ATTRIBUTE_MODE' value='268435475'/>
  <enum name='CSSM_ATTRIBUTE_NONE' value='0'/>
  <enum name='CSSM_ATTRIBUTE_OUTPUT_SIZE' value='268435469'/>
  <enum name='CSSM_ATTRIBUTE_PADDING' value='268435462'/>
  <enum name='CSSM_ATTRIBUTE_PARAM_KEY' value='1082130437'/>
  <enum name='CSSM_ATTRIBUTE_PASSPHRASE' value='805306377'/>
  <enum name='CSSM_ATTRIBUTE_PRIME' value='536870938'/>
  <enum name='CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT' value='268435494'/>
  <enum name='CSSM_ATTRIBUTE_PROMPT' value='545259526'/>
  <enum name='CSSM_ATTRIBUTE_PUBLIC_KEY' value='1082130432'/>
  <enum name='CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT' value='268435493'/>
  <enum name='CSSM_ATTRIBUTE_RANDOM' value='536870919'/>
  <enum name='CSSM_ATTRIBUTE_ROUNDS' value='268435470'/>
  <enum name='CSSM_ATTRIBUTE_ROUNDS_RANGE' value='1879048223'/>
  <enum name='CSSM_ATTRIBUTE_RSA_BLINDING' value='276824068'/>
  <enum name='CSSM_ATTRIBUTE_SALT' value='536870917'/>
  <enum name='CSSM_ATTRIBUTE_SEED' value='805306376'/>
  <enum name='CSSM_ATTRIBUTE_START_DATE' value='1610612757'/>
  <enum name='CSSM_ATTRIBUTE_SUBPRIME' value='536870940'/>
  <enum name='CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT' value='268435495'/>
  <enum name='CSSM_ATTRIBUTE_TYPE_MASK' value='4278190080'/>
  <enum name='CSSM_ATTRIBUTE_VENDOR_DEFINED' value='8388608'/>
  <enum name='CSSM_ATTRIBUTE_VERIFY_PASSPHRASE' value='276824072'/>
  <enum name='CSSM_ATTRIBUTE_VERSION' value='16777241'/>
  <enum name='CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT' value='268435496'/>
  <enum name='CSSM_BASE_ERROR' value='-2147418112'/>
  <enum name='CSSM_CERTGROUP_CERT_PAIR' value='3'/>
  <enum name='CSSM_CERTGROUP_DATA' value='0'/>
  <enum name='CSSM_CERTGROUP_ENCODED_CERT' value='1'/>
  <enum name='CSSM_CERTGROUP_PARSED_CERT' value='2'/>
  <enum name='CSSM_CERT_ACL_ENTRY' value='12'/>
  <enum name='CSSM_CERT_BUNDLE_CUSTOM' value='1'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_BER' value='2'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_CUSTOM' value='1'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_DER' value='3'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_PGP' value='5'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_SEXPR' value='4'/>
  <enum name='CSSM_CERT_BUNDLE_ENCODING_UNKNOWN' value='0'/>
  <enum name='CSSM_CERT_BUNDLE_LAST' value='32767'/>
  <enum name='CSSM_CERT_BUNDLE_PFX' value='5'/>
  <enum name='CSSM_CERT_BUNDLE_PGP_KEYRING' value='7'/>
  <enum name='CSSM_CERT_BUNDLE_PKCS12' value='4'/>
  <enum name='CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA' value='2'/>
  <enum name='CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA' value='3'/>
  <enum name='CSSM_CERT_BUNDLE_SPKI_SEQUENCE' value='6'/>
  <enum name='CSSM_CERT_BUNDLE_UNKNOWN' value='0'/>
  <enum name='CSSM_CERT_ENCODING_BER' value='2'/>
  <enum name='CSSM_CERT_ENCODING_CUSTOM' value='1'/>
  <enum name='CSSM_CERT_ENCODING_DER' value='3'/>
  <enum name='CSSM_CERT_ENCODING_LAST' value='32767'/>
  <enum name='CSSM_CERT_ENCODING_MULTIPLE' value='32766'/>
  <enum name='CSSM_CERT_ENCODING_NDR' value='4'/>
  <enum name='CSSM_CERT_ENCODING_PGP' value='6'/>
  <enum name='CSSM_CERT_ENCODING_SEXPR' value='5'/>
  <enum name='CSSM_CERT_ENCODING_UNKNOWN' value='0'/>
  <enum name='CSSM_CERT_Intel' value='8'/>
  <enum name='CSSM_CERT_LAST' value='32767'/>
  <enum name='CSSM_CERT_MULTIPLE' value='32766'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_COMPLEX' value='3'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_CUSTOM' value='1'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_LAST' value='32767'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_MULTIPLE' value='32766'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_NONE' value='0'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_OID_NAMED' value='4'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_SEXPR' value='2'/>
  <enum name='CSSM_CERT_PARSE_FORMAT_TUPLE' value='5'/>
  <enum name='CSSM_CERT_PGP' value='4'/>
  <enum name='CSSM_CERT_SDSIv1' value='6'/>
  <enum name='CSSM_CERT_SPKI' value='5'/>
  <enum name='CSSM_CERT_STATUS_EXPIRED' value='1'/>
  <enum name='CSSM_CERT_STATUS_IS_FROM_NET' value='32'/>
  <enum name='CSSM_CERT_STATUS_IS_IN_ANCHORS' value='8'/>
  <enum name='CSSM_CERT_STATUS_IS_IN_INPUT_CERTS' value='4'/>
  <enum name='CSSM_CERT_STATUS_IS_ROOT' value='16'/>
  <enum name='CSSM_CERT_STATUS_NOT_VALID_YET' value='2'/>
  <enum name='CSSM_CERT_TUPLE' value='11'/>
  <enum name='CSSM_CERT_UNKNOWN' value='0'/>
  <enum name='CSSM_CERT_X9_ATTRIBUTE' value='10'/>
  <enum name='CSSM_CERT_X_509_ATTRIBUTE' value='9'/>
  <enum name='CSSM_CERT_X_509v1' value='1'/>
  <enum name='CSSM_CERT_X_509v2' value='2'/>
  <enum name='CSSM_CERT_X_509v3' value='3'/>
  <enum name='CSSM_CL_BASE_CL_ERROR' value='-2147411712'/>
  <enum name='CSSM_CL_BASE_ERROR' value='-2147411968'/>
  <enum name='CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE' value='32768'/>
  <enum name='CSSM_CL_CUSTOM_CERT_ENCODING' value='32768'/>
  <enum name='CSSM_CL_CUSTOM_CERT_PARSE_FORMAT' value='32768'/>
  <enum name='CSSM_CL_CUSTOM_CERT_TYPE' value='32768'/>
  <enum name='CSSM_CL_CUSTOM_CRL_PARSE_FORMAT' value='32768'/>
  <enum name='CSSM_CL_PRIVATE_ERROR' value='-2147410944'/>
  <enum name='CSSM_CL_TEMPLATE_INTERMEDIATE_CERT' value='1'/>
  <enum name='CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE' value='2'/>
  <enum name='CSSM_CONTEXT_EVENT_CREATE' value='1'/>
  <enum name='CSSM_CONTEXT_EVENT_DELETE' value='2'/>
  <enum name='CSSM_CONTEXT_EVENT_UPDATE' value='3'/>
  <enum name='CSSM_CRLGROUP_CRL_PAIR' value='3'/>
  <enum name='CSSM_CRLGROUP_DATA' value='0'/>
  <enum name='CSSM_CRLGROUP_ENCODED_CRL' value='1'/>
  <enum name='CSSM_CRLGROUP_PARSED_CRL' value='2'/>
  <enum name='CSSM_CRL_ENCODING_BER' value='2'/>
  <enum name='CSSM_CRL_ENCODING_BLOOM' value='4'/>
  <enum name='CSSM_CRL_ENCODING_CUSTOM' value='1'/>
  <enum name='CSSM_CRL_ENCODING_DER' value='3'/>
  <enum name='CSSM_CRL_ENCODING_MULTIPLE' value='32766'/>
  <enum name='CSSM_CRL_ENCODING_SEXPR' value='5'/>
  <enum name='CSSM_CRL_ENCODING_UNKNOWN' value='0'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_COMPLEX' value='3'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_CUSTOM' value='1'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_LAST' value='32767'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_MULTIPLE' value='32766'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_NONE' value='0'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_OID_NAMED' value='4'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_SEXPR' value='2'/>
  <enum name='CSSM_CRL_PARSE_FORMAT_TUPLE' value='5'/>
  <enum name='CSSM_CRL_TYPE_MULTIPLE' value='32766'/>
  <enum name='CSSM_CRL_TYPE_SPKI' value='3'/>
  <enum name='CSSM_CRL_TYPE_UNKNOWN' value='0'/>
  <enum name='CSSM_CRL_TYPE_X_509v1' value='1'/>
  <enum name='CSSM_CRL_TYPE_X_509v2' value='2'/>
  <enum name='CSSM_CSP_BASE_CSP_ERROR' value='-2147415808'/>
  <enum name='CSSM_CSP_BASE_ERROR' value='-2147416064'/>
  <enum name='CSSM_CSP_HARDWARE' value='2'/>
  <enum name='CSSM_CSP_HYBRID' value='3'/>
  <enum name='CSSM_CSP_PRIVATE_ERROR' value='-2147415040'/>
  <enum name='CSSM_CSP_RDR_EXISTS' value='2'/>
  <enum name='CSSM_CSP_RDR_HW' value='4'/>
  <enum name='CSSM_CSP_RDR_TOKENPRESENT' value='1'/>
  <enum name='CSSM_CSP_SOFTWARE' value='1'/>
  <enum name='CSSM_CSP_STORES_CERTIFICATES' value='134217728'/>
  <enum name='CSSM_CSP_STORES_GENERIC' value='268435456'/>
  <enum name='CSSM_CSP_STORES_PRIVATE_KEYS' value='16777216'/>
  <enum name='CSSM_CSP_STORES_PUBLIC_KEYS' value='33554432'/>
  <enum name='CSSM_CSP_STORES_SESSION_KEYS' value='67108864'/>
  <enum name='CSSM_CSP_TOK_CLOCK_EXISTS' value='64'/>
  <enum name='CSSM_CSP_TOK_LOGIN_REQUIRED' value='4'/>
  <enum name='CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD' value='4194304'/>
  <enum name='CSSM_CSP_TOK_PROT_AUTHENTICATION' value='256'/>
  <enum name='CSSM_CSP_TOK_RNG' value='1'/>
  <enum name='CSSM_CSP_TOK_SESSION_KEY_PASSWORD' value='2097152'/>
  <enum name='CSSM_CSP_TOK_USER_PIN_EXPIRED' value='1048576'/>
  <enum name='CSSM_CSP_TOK_USER_PIN_INITIALIZED' value='8'/>
  <enum name='CSSM_CSP_TOK_WRITE_PROTECTED' value='2'/>
  <enum name='CSSM_CSSM_BASE_CSSM_ERROR' value='-2147417840'/>
  <enum name='CSSM_CSSM_BASE_ERROR' value='-2147418112'/>
  <enum name='CSSM_CSSM_PRIVATE_ERROR' value='-2147417088'/>
  <enum name='CSSM_CUSTOM_COMMON_ERROR_EXTENT' value='224'/>
  <enum name='CSSM_DB_ACCESS_PRIVILEGED' value='4'/>
  <enum name='CSSM_DB_ACCESS_READ' value='1'/>
  <enum name='CSSM_DB_ACCESS_RESET' value='65536'/>
  <enum name='CSSM_DB_ACCESS_WRITE' value='2'/>
  <enum name='CSSM_DB_AND' value='1'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM' value='3'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_BLOB' value='6'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX' value='8'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32' value='7'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_REAL' value='4'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_SINT32' value='1'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_STRING' value='0'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE' value='5'/>
  <enum name='CSSM_DB_ATTRIBUTE_FORMAT_UINT32' value='2'/>
  <enum name='CSSM_DB_ATTRIBUTE_MDS_END' value='1073758208'/>
  <enum name='CSSM_DB_ATTRIBUTE_MDS_START' value='1073741824'/>
  <enum name='CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER' value='2'/>
  <enum name='CSSM_DB_ATTRIBUTE_NAME_AS_OID' value='1'/>
  <enum name='CSSM_DB_ATTRIBUTE_NAME_AS_STRING' value='0'/>
  <enum name='CSSM_DB_CERT_USE_OWNER' value='4'/>
  <enum name='CSSM_DB_CERT_USE_PRIVACY' value='32'/>
  <enum name='CSSM_DB_CERT_USE_REVOKED' value='8'/>
  <enum name='CSSM_DB_CERT_USE_SIGNING' value='16'/>
  <enum name='CSSM_DB_CERT_USE_SYSTEM' value='2'/>
  <enum name='CSSM_DB_CERT_USE_TRUSTED' value='1'/>
  <enum name='CSSM_DB_CONTAINS' value='4'/>
  <enum name='CSSM_DB_CONTAINS_FINAL_SUBSTRING' value='6'/>
  <enum name='CSSM_DB_CONTAINS_INITIAL_SUBSTRING' value='5'/>
  <enum name='CSSM_DB_DATASTORES_UNKNOWN' value='4294967295'/>
  <enum name='CSSM_DB_EQUAL' value='0'/>
  <enum name='CSSM_DB_FILESYSTEMSCAN_MODE' value='1'/>
  <enum name='CSSM_DB_GREATER_THAN' value='3'/>
  <enum name='CSSM_DB_INDEX_NONUNIQUE' value='1'/>
  <enum name='CSSM_DB_INDEX_ON_ATTRIBUTE' value='1'/>
  <enum name='CSSM_DB_INDEX_ON_RECORD' value='2'/>
  <enum name='CSSM_DB_INDEX_ON_UNKNOWN' value='0'/>
  <enum name='CSSM_DB_INDEX_UNIQUE' value='0'/>
  <enum name='CSSM_DB_LESS_THAN' value='2'/>
  <enum name='CSSM_DB_MODIFY_ATTRIBUTE_ADD' value='1'/>
  <enum name='CSSM_DB_MODIFY_ATTRIBUTE_DELETE' value='2'/>
  <enum name='CSSM_DB_MODIFY_ATTRIBUTE_NONE' value='0'/>
  <enum name='CSSM_DB_MODIFY_ATTRIBUTE_REPLACE' value='3'/>
  <enum name='CSSM_DB_NONE' value='0'/>
  <enum name='CSSM_DB_NOT_EQUAL' value='1'/>
  <enum name='CSSM_DB_OR' value='2'/>
  <enum name='CSSM_DB_RECORDTYPE_APP_DEFINED_END' value='4294967295'/>
  <enum name='CSSM_DB_RECORDTYPE_APP_DEFINED_START' value='2147483648'/>
  <enum name='CSSM_DB_RECORDTYPE_OPEN_GROUP_END' value='18'/>
  <enum name='CSSM_DB_RECORDTYPE_OPEN_GROUP_START' value='10'/>
  <enum name='CSSM_DB_RECORDTYPE_SCHEMA_END' value='4'/>
  <enum name='CSSM_DB_RECORDTYPE_SCHEMA_START' value='0'/>
  <enum name='CSSM_DB_RELATIONID_MDS_END' value='1073758208'/>
  <enum name='CSSM_DB_RELATIONID_MDS_START' value='1073741824'/>
  <enum name='CSSM_DB_TRANSACTIONAL_MODE' value='0'/>
  <enum name='CSSM_DL_BASE_DL_ERROR' value='-2147413760'/>
  <enum name='CSSM_DL_BASE_ERROR' value='-2147414016'/>
  <enum name='CSSM_DL_CUSTOM' value='1'/>
  <enum name='CSSM_DL_DB_RECORD_ALL_KEYS' value='18'/>
  <enum name='CSSM_DL_DB_RECORD_ANY' value='10'/>
  <enum name='CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD' value='2147483650'/>
  <enum name='CSSM_DL_DB_RECORD_CERT' value='11'/>
  <enum name='CSSM_DL_DB_RECORD_CRL' value='12'/>
  <enum name='CSSM_DL_DB_RECORD_GENERIC' value='14'/>
  <enum name='CSSM_DL_DB_RECORD_GENERIC_PASSWORD' value='2147483648'/>
  <enum name='CSSM_DL_DB_RECORD_INTERNET_PASSWORD' value='2147483649'/>
  <enum name='CSSM_DL_DB_RECORD_METADATA' value='2147516416'/>
  <enum name='CSSM_DL_DB_RECORD_POLICY' value='13'/>
  <enum name='CSSM_DL_DB_RECORD_PRIVATE_KEY' value='16'/>
  <enum name='CSSM_DL_DB_RECORD_PUBLIC_KEY' value='15'/>
  <enum name='CSSM_DL_DB_RECORD_SYMMETRIC_KEY' value='17'/>
  <enum name='CSSM_DL_DB_RECORD_UNLOCK_REFERRAL' value='2147487747'/>
  <enum name='CSSM_DL_DB_RECORD_USER_TRUST' value='2147487745'/>
  <enum name='CSSM_DL_DB_RECORD_X509_CERTIFICATE' value='2147487744'/>
  <enum name='CSSM_DL_DB_RECORD_X509_CRL' value='2147487746'/>
  <enum name='CSSM_DL_DB_SCHEMA_ATTRIBUTES' value='2'/>
  <enum name='CSSM_DL_DB_SCHEMA_INDEXES' value='1'/>
  <enum name='CSSM_DL_DB_SCHEMA_INFO' value='0'/>
  <enum name='CSSM_DL_DB_SCHEMA_PARSING_MODULE' value='3'/>
  <enum name='CSSM_DL_FFS' value='5'/>
  <enum name='CSSM_DL_LDAP' value='2'/>
  <enum name='CSSM_DL_MEMORY' value='6'/>
  <enum name='CSSM_DL_ODBC' value='3'/>
  <enum name='CSSM_DL_PKCS11' value='4'/>
  <enum name='CSSM_DL_PRIVATE_ERROR' value='-2147412992'/>
  <enum name='CSSM_DL_REMOTEDIR' value='7'/>
  <enum name='CSSM_DL_UNKNOWN' value='0'/>
  <enum name='CSSM_ELAPSED_TIME_COMPLETE' value='-2'/>
  <enum name='CSSM_ELAPSED_TIME_UNKNOWN' value='-1'/>
  <enum name='CSSM_ERRCODE_ACL_ADD_FAILED' value='54'/>
  <enum name='CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED' value='39'/>
  <enum name='CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED' value='45'/>
  <enum name='CSSM_ERRCODE_ACL_CHANGE_FAILED' value='49'/>
  <enum name='CSSM_ERRCODE_ACL_DELETE_FAILED' value='52'/>
  <enum name='CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND' value='47'/>
  <enum name='CSSM_ERRCODE_ACL_REPLACE_FAILED' value='53'/>
  <enum name='CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value='43'/>
  <enum name='CSSM_ERRCODE_CRL_ALREADY_SIGNED' value='71'/>
  <enum name='CSSM_ERRCODE_DEVICE_FAILED' value='229'/>
  <enum name='CSSM_ERRCODE_DEVICE_RESET' value='228'/>
  <enum name='CSSM_ERRCODE_FUNCTION_FAILED' value='10'/>
  <enum name='CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED' value='7'/>
  <enum name='CSSM_ERRCODE_INCOMPATIBLE_VERSION' value='65'/>
  <enum name='CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION' value='227'/>
  <enum name='CSSM_ERRCODE_INTERNAL_ERROR' value='1'/>
  <enum name='CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS' value='37'/>
  <enum name='CSSM_ERRCODE_INVALID_ACL_BASE_CERTS' value='38'/>
  <enum name='CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK' value='44'/>
  <enum name='CSSM_ERRCODE_INVALID_ACL_EDIT_MODE' value='48'/>
  <enum name='CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG' value='46'/>
  <enum name='CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE' value='42'/>
  <enum name='CSSM_ERRCODE_INVALID_AC_HANDLE' value='85'/>
  <enum name='CSSM_ERRCODE_INVALID_CERTGROUP_POINTER' value='66'/>
  <enum name='CSSM_ERRCODE_INVALID_CERT_POINTER' value='67'/>
  <enum name='CSSM_ERRCODE_INVALID_CL_HANDLE' value='82'/>
  <enum name='CSSM_ERRCODE_INVALID_CONTEXT_HANDLE' value='64'/>
  <enum name='CSSM_ERRCODE_INVALID_CRL_POINTER' value='68'/>
  <enum name='CSSM_ERRCODE_INVALID_CRYPTO_DATA' value='88'/>
  <enum name='CSSM_ERRCODE_INVALID_CSP_HANDLE' value='80'/>
  <enum name='CSSM_ERRCODE_INVALID_DATA' value='70'/>
  <enum name='CSSM_ERRCODE_INVALID_DB_HANDLE' value='74'/>
  <enum name='CSSM_ERRCODE_INVALID_DB_LIST' value='76'/>
  <enum name='CSSM_ERRCODE_INVALID_DB_LIST_POINTER' value='77'/>
  <enum name='CSSM_ERRCODE_INVALID_DL_HANDLE' value='81'/>
  <enum name='CSSM_ERRCODE_INVALID_FIELD_POINTER' value='69'/>
  <enum name='CSSM_ERRCODE_INVALID_GUID' value='12'/>
  <enum name='CSSM_ERRCODE_INVALID_INPUT_POINTER' value='5'/>
  <enum name='CSSM_ERRCODE_INVALID_KR_HANDLE' value='84'/>
  <enum name='CSSM_ERRCODE_INVALID_NETWORK_ADDR' value='87'/>
  <enum name='CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY' value='50'/>
  <enum name='CSSM_ERRCODE_INVALID_NEW_ACL_OWNER' value='51'/>
  <enum name='CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS' value='72'/>
  <enum name='CSSM_ERRCODE_INVALID_OUTPUT_POINTER' value='6'/>
  <enum name='CSSM_ERRCODE_INVALID_PASSTHROUGH_ID' value='86'/>
  <enum name='CSSM_ERRCODE_INVALID_POINTER' value='4'/>
  <enum name='CSSM_ERRCODE_INVALID_SAMPLE_VALUE' value='40'/>
  <enum name='CSSM_ERRCODE_INVALID_TP_HANDLE' value='83'/>
  <enum name='CSSM_ERRCODE_MDS_ERROR' value='3'/>
  <enum name='CSSM_ERRCODE_MEMORY_ERROR' value='2'/>
  <enum name='CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED' value='11'/>
  <enum name='CSSM_ERRCODE_NO_USER_INTERACTION' value='224'/>
  <enum name='CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED' value='35'/>
  <enum name='CSSM_ERRCODE_OBJECT_ACL_REQUIRED' value='36'/>
  <enum name='CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED' value='34'/>
  <enum name='CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED' value='33'/>
  <enum name='CSSM_ERRCODE_OPERATION_AUTH_DENIED' value='32'/>
  <enum name='CSSM_ERRCODE_OS_ACCESS_DENIED' value='9'/>
  <enum name='CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED' value='75'/>
  <enum name='CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED' value='41'/>
  <enum name='CSSM_ERRCODE_SELF_CHECK_FAILED' value='8'/>
  <enum name='CSSM_ERRCODE_SERVICE_NOT_AVAILABLE' value='226'/>
  <enum name='CSSM_ERRCODE_UNKNOWN_FORMAT' value='78'/>
  <enum name='CSSM_ERRCODE_UNKNOWN_TAG' value='79'/>
  <enum name='CSSM_ERRCODE_USER_CANCELED' value='225'/>
  <enum name='CSSM_ERRCODE_VERIFICATION_FAILURE' value='73'/>
  <enum name='CSSM_ERRORCODE_COMMON_EXTENT' value='256'/>
  <enum name='CSSM_ERRORCODE_CUSTOM_OFFSET' value='1024'/>
  <enum name='CSSM_ERRORCODE_MODULE_EXTENT' value='2048'/>
  <enum name='CSSM_ESTIMATED_TIME_UNKNOWN' value='-1'/>
  <enum name='CSSM_EVIDENCE_FORM_APPLE_CERTGROUP' value='2147483649'/>
  <enum name='CSSM_EVIDENCE_FORM_APPLE_CERT_INFO' value='2147483650'/>
  <enum name='CSSM_EVIDENCE_FORM_APPLE_CUSTOM' value='2147483648'/>
  <enum name='CSSM_EVIDENCE_FORM_APPLE_HEADER' value='2147483648'/>
  <enum name='CSSM_EVIDENCE_FORM_CERT' value='1'/>
  <enum name='CSSM_EVIDENCE_FORM_CERT_ID' value='3'/>
  <enum name='CSSM_EVIDENCE_FORM_CRL' value='2'/>
  <enum name='CSSM_EVIDENCE_FORM_CRL_ID' value='4'/>
  <enum name='CSSM_EVIDENCE_FORM_CRL_NEXTTIME' value='7'/>
  <enum name='CSSM_EVIDENCE_FORM_CRL_THISTIME' value='6'/>
  <enum name='CSSM_EVIDENCE_FORM_POLICYINFO' value='8'/>
  <enum name='CSSM_EVIDENCE_FORM_TUPLEGROUP' value='9'/>
  <enum name='CSSM_EVIDENCE_FORM_UNSPECIFIC' value='0'/>
  <enum name='CSSM_EVIDENCE_FORM_VERIFIER_TIME' value='5'/>
  <enum name='CSSM_FALSE' value='0'/>
  <enum name='CSSM_FEE_CURVE_TYPE_DEFAULT' value='0'/>
  <enum name='CSSM_FEE_CURVE_TYPE_MONTGOMERY' value='1'/>
  <enum name='CSSM_FEE_CURVE_TYPE_WEIERSTRASS' value='2'/>
  <enum name='CSSM_FEE_PRIME_TYPE_DEFAULT' value='0'/>
  <enum name='CSSM_FEE_PRIME_TYPE_FEE' value='2'/>
  <enum name='CSSM_FEE_PRIME_TYPE_GENERAL' value='3'/>
  <enum name='CSSM_FEE_PRIME_TYPE_MERSENNE' value='1'/>
  <enum name='CSSM_FIELDVALUE_COMPLEX_DATA_TYPE' value='4294967295'/>
  <enum name='CSSM_HINT_ADDRESS_APP' value='1'/>
  <enum name='CSSM_HINT_ADDRESS_SP' value='2'/>
  <enum name='CSSM_HINT_CALLBACK' value='1'/>
  <enum name='CSSM_HINT_NONE' value='0'/>
  <enum name='CSSM_INVALID_HANDLE' value='0'/>
  <enum name='CSSM_KEYATTR_ALWAYS_SENSITIVE' value='16'/>
  <enum name='CSSM_KEYATTR_EXTRACTABLE' value='32'/>
  <enum name='CSSM_KEYATTR_MODIFIABLE' value='4'/>
  <enum name='CSSM_KEYATTR_NEVER_EXTRACTABLE' value='64'/>
  <enum name='CSSM_KEYATTR_PARTIAL' value='65536'/>
  <enum name='CSSM_KEYATTR_PERMANENT' value='1'/>
  <enum name='CSSM_KEYATTR_PRIVATE' value='2'/>
  <enum name='CSSM_KEYATTR_RETURN_DATA' value='268435456'/>
  <enum name='CSSM_KEYATTR_RETURN_DEFAULT' value='0'/>
  <enum name='CSSM_KEYATTR_RETURN_NONE' value='1073741824'/>
  <enum name='CSSM_KEYATTR_RETURN_REF' value='536870912'/>
  <enum name='CSSM_KEYATTR_SENSITIVE' value='8'/>
  <enum name='CSSM_KEYBLOB_OTHER' value='4294967295'/>
  <enum name='CSSM_KEYBLOB_RAW' value='0'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_BSAFE' value='6'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_CCA' value='9'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_FIPS186' value='5'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_MSCAPI' value='3'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_NONE' value='0'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING' value='12'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_OPENSSH' value='2147483649'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_OPENSSL' value='2147483650'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_OTHER' value='4294967295'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_PGP' value='4'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS1' value='1'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS3' value='2'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS8' value='10'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_SPKI' value='11'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED' value='2147483648'/>
  <enum name='CSSM_KEYBLOB_RAW_FORMAT_X509' value='2147483648'/>
  <enum name='CSSM_KEYBLOB_REFERENCE' value='2'/>
  <enum name='CSSM_KEYBLOB_REF_FORMAT_INTEGER' value='0'/>
  <enum name='CSSM_KEYBLOB_REF_FORMAT_OTHER' value='4294967295'/>
  <enum name='CSSM_KEYBLOB_REF_FORMAT_SPKI' value='2'/>
  <enum name='CSSM_KEYBLOB_REF_FORMAT_STRING' value='1'/>
  <enum name='CSSM_KEYBLOB_WRAPPED' value='3'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM' value='100'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI' value='3'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_NONE' value='0'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL' value='101'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER' value='4294967295'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7' value='2'/>
  <enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8' value='1'/>
  <enum name='CSSM_KEYCLASS_OTHER' value='4294967295'/>
  <enum name='CSSM_KEYCLASS_PRIVATE_KEY' value='1'/>
  <enum name='CSSM_KEYCLASS_PUBLIC_KEY' value='0'/>
  <enum name='CSSM_KEYCLASS_SECRET_PART' value='3'/>
  <enum name='CSSM_KEYCLASS_SESSION_KEY' value='2'/>
  <enum name='CSSM_KEYHEADER_VERSION' value='2'/>
  <enum name='CSSM_KEYUSE_ANY' value='2147483648'/>
  <enum name='CSSM_KEYUSE_DECRYPT' value='2'/>
  <enum name='CSSM_KEYUSE_DERIVE' value='256'/>
  <enum name='CSSM_KEYUSE_ENCRYPT' value='1'/>
  <enum name='CSSM_KEYUSE_SIGN' value='4'/>
  <enum name='CSSM_KEYUSE_SIGN_RECOVER' value='16'/>
  <enum name='CSSM_KEYUSE_UNWRAP' value='128'/>
  <enum name='CSSM_KEYUSE_VERIFY' value='8'/>
  <enum name='CSSM_KEYUSE_VERIFY_RECOVER' value='32'/>
  <enum name='CSSM_KEYUSE_WRAP' value='64'/>
  <enum name='CSSM_KEY_HIERARCHY_EXPORT' value='2'/>
  <enum name='CSSM_KEY_HIERARCHY_INTEG' value='1'/>
  <enum name='CSSM_KEY_HIERARCHY_NONE' value='0'/>
  <enum name='CSSM_KR_BASE_ERROR' value='-2147407872'/>
  <enum name='CSSM_KR_DROP_WORKFACTOR' value='32'/>
  <enum name='CSSM_KR_ENT' value='2'/>
  <enum name='CSSM_KR_ENT_POLICY' value='2'/>
  <enum name='CSSM_KR_INDIV' value='1'/>
  <enum name='CSSM_KR_INDIV_POLICY' value='1'/>
  <enum name='CSSM_KR_LE' value='12'/>
  <enum name='CSSM_KR_LE_MAN' value='4'/>
  <enum name='CSSM_KR_LE_MAN_POLICY' value='3'/>
  <enum name='CSSM_KR_LE_USE' value='8'/>
  <enum name='CSSM_KR_LE_USE_POLICY' value='4'/>
  <enum name='CSSM_KR_OPTIMIZE' value='16'/>
  <enum name='CSSM_KR_PRIVATE_ERROR' value='-2147406848'/>
  <enum name='CSSM_LIST_ELEMENT_DATUM' value='0'/>
  <enum name='CSSM_LIST_ELEMENT_SUBLIST' value='1'/>
  <enum name='CSSM_LIST_ELEMENT_WORDID' value='2'/>
  <enum name='CSSM_LIST_TYPE_CUSTOM' value='1'/>
  <enum name='CSSM_LIST_TYPE_SEXPR' value='2'/>
  <enum name='CSSM_LIST_TYPE_UNKNOWN' value='0'/>
  <enum name='CSSM_MANAGER_REPLY' value='2'/>
  <enum name='CSSM_MANAGER_SERVICE_REQUEST' value='1'/>
  <enum name='CSSM_MDS_BASE_ERROR' value='-2147414016'/>
  <enum name='CSSM_MDS_PRIVATE_ERROR' value='-2147412992'/>
  <enum name='CSSM_MODULE_STRING_SIZE' value='64'/>
  <enum name='CSSM_NET_PROTO_CMP' value='10'/>
  <enum name='CSSM_NET_PROTO_CMPS' value='11'/>
  <enum name='CSSM_NET_PROTO_CUSTOM' value='1'/>
  <enum name='CSSM_NET_PROTO_FTP' value='7'/>
  <enum name='CSSM_NET_PROTO_FTPS' value='8'/>
  <enum name='CSSM_NET_PROTO_LDAP' value='3'/>
  <enum name='CSSM_NET_PROTO_LDAPNS' value='5'/>
  <enum name='CSSM_NET_PROTO_LDAPS' value='4'/>
  <enum name='CSSM_NET_PROTO_NONE' value='0'/>
  <enum name='CSSM_NET_PROTO_OCSP' value='9'/>
  <enum name='CSSM_NET_PROTO_UNSPECIFIED' value='2'/>
  <enum name='CSSM_NET_PROTO_X500DAP' value='6'/>
  <enum name='CSSM_NOTIFY_FAULT' value='3'/>
  <enum name='CSSM_NOTIFY_INSERT' value='1'/>
  <enum name='CSSM_NOTIFY_REMOVE' value='2'/>
  <enum name='CSSM_OK' value='0'/>
  <enum name='CSSM_PADDING_ALTERNATE' value='4'/>
  <enum name='CSSM_PADDING_CIPHERSTEALING' value='8'/>
  <enum name='CSSM_PADDING_CUSTOM' value='1'/>
  <enum name='CSSM_PADDING_FF' value='5'/>
  <enum name='CSSM_PADDING_NONE' value='0'/>
  <enum name='CSSM_PADDING_ONE' value='3'/>
  <enum name='CSSM_PADDING_PKCS1' value='10'/>
  <enum name='CSSM_PADDING_PKCS5' value='6'/>
  <enum name='CSSM_PADDING_PKCS7' value='7'/>
  <enum name='CSSM_PADDING_RANDOM' value='9'/>
  <enum name='CSSM_PADDING_VENDOR_DEFINED' value='2147483648'/>
  <enum name='CSSM_PADDING_ZERO' value='2'/>
  <enum name='CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1' value='0'/>
  <enum name='CSSM_PKCS_OAEP_MGF1_MD5' value='2'/>
  <enum name='CSSM_PKCS_OAEP_MGF1_SHA1' value='1'/>
  <enum name='CSSM_PKCS_OAEP_MGF_NONE' value='0'/>
  <enum name='CSSM_PKCS_OAEP_PSOURCE_NONE' value='0'/>
  <enum name='CSSM_PKCS_OAEP_PSOURCE_Pspecified' value='1'/>
  <enum name='CSSM_PRIVILEGE_SCOPE_NONE' value='0'/>
  <enum name='CSSM_PRIVILEGE_SCOPE_PROCESS' value='1'/>
  <enum name='CSSM_PRIVILEGE_SCOPE_THREAD' value='2'/>
  <enum name='CSSM_PVC_APP' value='1'/>
  <enum name='CSSM_PVC_NONE' value='0'/>
  <enum name='CSSM_PVC_SP' value='2'/>
  <enum name='CSSM_QUERY_RETURN_DATA' value='1'/>
  <enum name='CSSM_QUERY_SIZELIMIT_NONE' value='0'/>
  <enum name='CSSM_QUERY_TIMELIMIT_NONE' value='0'/>
  <enum name='CSSM_SAMPLE_TYPE_BIOMETRIC' value='8'/>
  <enum name='CSSM_SAMPLE_TYPE_COMMENT' value='12'/>
  <enum name='CSSM_SAMPLE_TYPE_HASHED_PASSWORD' value='43'/>
  <enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK' value='65538'/>
  <enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK' value='65537'/>
  <enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT' value='65536'/>
  <enum name='CSSM_SAMPLE_TYPE_PASSWORD' value='79'/>
  <enum name='CSSM_SAMPLE_TYPE_PREAUTH' value='65545'/>
  <enum name='CSSM_SAMPLE_TYPE_PROCESS' value='65539'/>
  <enum name='CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC' value='83'/>
  <enum name='CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD' value='84'/>
  <enum name='CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC' value='86'/>
  <enum name='CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD' value='87'/>
  <enum name='CSSM_SAMPLE_TYPE_RETRY_ID' value='85'/>
  <enum name='CSSM_SAMPLE_TYPE_SIGNED_NONCE' value='117'/>
  <enum name='CSSM_SAMPLE_TYPE_SIGNED_SECRET' value='118'/>
  <enum name='CSSM_SAMPLE_TYPE_SYMMETRIC_KEY' value='65541'/>
  <enum name='CSSM_SAMPLE_TYPE_THRESHOLD' value='123'/>
  <enum name='CSSM_SERVICE_AC' value='32'/>
  <enum name='CSSM_SERVICE_CL' value='8'/>
  <enum name='CSSM_SERVICE_CSP' value='2'/>
  <enum name='CSSM_SERVICE_CSSM' value='1'/>
  <enum name='CSSM_SERVICE_DL' value='4'/>
  <enum name='CSSM_SERVICE_KR' value='64'/>
  <enum name='CSSM_SERVICE_TP' value='16'/>
  <enum name='CSSM_TP_ACTION_ALLOW_EXPIRED' value='1'/>
  <enum name='CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT' value='8'/>
  <enum name='CSSM_TP_ACTION_CRL_SUFFICIENT' value='4'/>
  <enum name='CSSM_TP_ACTION_DEFAULT' value='0'/>
  <enum name='CSSM_TP_ACTION_FETCH_CERT_FROM_NET' value='4'/>
  <enum name='CSSM_TP_ACTION_FETCH_CRL_FROM_NET' value='2'/>
  <enum name='CSSM_TP_ACTION_LEAF_IS_CA' value='2'/>
  <enum name='CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT' value='8'/>
  <enum name='CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT' value='1'/>
  <enum name='CSSM_TP_ACTION_REQUIRE_REV_PER_CERT' value='16'/>
  <enum name='CSSM_TP_APPLE_EVIDENCE_VERSION' value='0'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTISSUE' value='1'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE' value='6'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTRESUME' value='4'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE' value='2'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND' value='3'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER' value='7'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY' value='5'/>
  <enum name='CSSM_TP_AUTHORITY_REQUEST_CRLISSUE' value='256'/>
  <enum name='CSSM_TP_BASE_ERROR' value='-2147409920'/>
  <enum name='CSSM_TP_BASE_TP_ERROR' value='-2147409664'/>
  <enum name='CSSM_TP_CERTCHANGE_HOLD' value='2'/>
  <enum name='CSSM_TP_CERTCHANGE_NONE' value='0'/>
  <enum name='CSSM_TP_CERTCHANGE_NOT_AUTHORIZED' value='5'/>
  <enum name='CSSM_TP_CERTCHANGE_OK' value='1'/>
  <enum name='CSSM_TP_CERTCHANGE_OKWITHNEWTIME' value='2'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE' value='4'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE' value='2'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION' value='3'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE' value='7'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE' value='1'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_SUPERCEDED' value='5'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE' value='6'/>
  <enum name='CSSM_TP_CERTCHANGE_REASON_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTCHANGE_REJECTED' value='4'/>
  <enum name='CSSM_TP_CERTCHANGE_RELEASE' value='3'/>
  <enum name='CSSM_TP_CERTCHANGE_REVOKE' value='1'/>
  <enum name='CSSM_TP_CERTCHANGE_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTCHANGE_WRONGCA' value='3'/>
  <enum name='CSSM_TP_CERTISSUE_NOT_AUTHORIZED' value='5'/>
  <enum name='CSSM_TP_CERTISSUE_OK' value='1'/>
  <enum name='CSSM_TP_CERTISSUE_OKWITHCERTMODS' value='2'/>
  <enum name='CSSM_TP_CERTISSUE_OKWITHSERVICEMODS' value='3'/>
  <enum name='CSSM_TP_CERTISSUE_REJECTED' value='4'/>
  <enum name='CSSM_TP_CERTISSUE_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTISSUE_WILL_BE_REVOKED' value='6'/>
  <enum name='CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED' value='5'/>
  <enum name='CSSM_TP_CERTNOTARIZE_OK' value='1'/>
  <enum name='CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS' value='2'/>
  <enum name='CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS' value='3'/>
  <enum name='CSSM_TP_CERTNOTARIZE_REJECTED' value='4'/>
  <enum name='CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTRECLAIM_NOMATCH' value='2'/>
  <enum name='CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED' value='4'/>
  <enum name='CSSM_TP_CERTRECLAIM_OK' value='1'/>
  <enum name='CSSM_TP_CERTRECLAIM_REJECTED' value='3'/>
  <enum name='CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTVERIFY_EXPIRED' value='5'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID' value='2'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_AUTHORITY' value='7'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS' value='13'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_CERTGROUP' value='10'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE' value='9'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT' value='14'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_NAME_TREE' value='15'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_POLICY' value='11'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS' value='12'/>
  <enum name='CSSM_TP_CERTVERIFY_INVALID_SIGNATURE' value='8'/>
  <enum name='CSSM_TP_CERTVERIFY_NOT_VALID_YET' value='6'/>
  <enum name='CSSM_TP_CERTVERIFY_REVOKED' value='3'/>
  <enum name='CSSM_TP_CERTVERIFY_SUSPENDED' value='4'/>
  <enum name='CSSM_TP_CERTVERIFY_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT' value='16'/>
  <enum name='CSSM_TP_CERTVERIFY_VALID' value='1'/>
  <enum name='CSSM_TP_CERT_DIR_UPDATE' value='8'/>
  <enum name='CSSM_TP_CERT_NOTIFY_RENEW' value='4'/>
  <enum name='CSSM_TP_CERT_PUBLISH' value='2'/>
  <enum name='CSSM_TP_CONFIRM_ACCEPT' value='1'/>
  <enum name='CSSM_TP_CONFIRM_REJECT' value='2'/>
  <enum name='CSSM_TP_CONFIRM_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CRLISSUE_INVALID_DOMAIN' value='3'/>
  <enum name='CSSM_TP_CRLISSUE_NOT_AUTHORIZED' value='6'/>
  <enum name='CSSM_TP_CRLISSUE_NOT_CURRENT' value='2'/>
  <enum name='CSSM_TP_CRLISSUE_OK' value='1'/>
  <enum name='CSSM_TP_CRLISSUE_REJECTED' value='5'/>
  <enum name='CSSM_TP_CRLISSUE_STATUS_UNKNOWN' value='0'/>
  <enum name='CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER' value='4'/>
  <enum name='CSSM_TP_CRL_DISTRIBUTE' value='16'/>
  <enum name='CSSM_TP_FORM_TYPE_GENERIC' value='0'/>
  <enum name='CSSM_TP_FORM_TYPE_REGISTRATION' value='1'/>
  <enum name='CSSM_TP_KEY_ARCHIVE' value='1'/>
  <enum name='CSSM_TP_PRIVATE_ERROR' value='-2147408896'/>
  <enum name='CSSM_TP_STOP_ON_FIRST_FAIL' value='3'/>
  <enum name='CSSM_TP_STOP_ON_FIRST_PASS' value='2'/>
  <enum name='CSSM_TP_STOP_ON_NONE' value='1'/>
  <enum name='CSSM_TP_STOP_ON_POLICY' value='0'/>
  <enum name='CSSM_TRUE' value='1'/>
  <enum name='CSSM_USEE_AUTHENTICATION' value='6'/>
  <enum name='CSSM_USEE_DOMESTIC' value='1'/>
  <enum name='CSSM_USEE_FINANCIAL' value='2'/>
  <enum name='CSSM_USEE_INSURANCE' value='9'/>
  <enum name='CSSM_USEE_KEYEXCH' value='7'/>
  <enum name='CSSM_USEE_KRENT' value='4'/>
  <enum name='CSSM_USEE_KRLE' value='3'/>
  <enum name='CSSM_USEE_LAST' value='255'/>
  <enum name='CSSM_USEE_MEDICAL' value='8'/>
  <enum name='CSSM_USEE_NONE' value='0'/>
  <enum name='CSSM_USEE_SSL' value='5'/>
  <enum name='CSSM_USEE_WEAK' value='10'/>
  <enum name='CSSM_VALUE_NOT_AVAILABLE' value='4294967295'/>
  <enum name='CSSM_WORDID_A' value='2'/>
  <enum name='CSSM_WORDID_ACL' value='3'/>
  <enum name='CSSM_WORDID_ALPHA' value='4'/>
  <enum name='CSSM_WORDID_B' value='5'/>
  <enum name='CSSM_WORDID_BER' value='6'/>
  <enum name='CSSM_WORDID_BINARY' value='7'/>
  <enum name='CSSM_WORDID_BIOMETRIC' value='8'/>
  <enum name='CSSM_WORDID_C' value='9'/>
  <enum name='CSSM_WORDID_CANCELED' value='10'/>
  <enum name='CSSM_WORDID_CERT' value='11'/>
  <enum name='CSSM_WORDID_COMMENT' value='12'/>
  <enum name='CSSM_WORDID_CRL' value='13'/>
  <enum name='CSSM_WORDID_CUSTOM' value='14'/>
  <enum name='CSSM_WORDID_D' value='15'/>
  <enum name='CSSM_WORDID_DATE' value='16'/>
  <enum name='CSSM_WORDID_DBS_CREATE' value='22'/>
  <enum name='CSSM_WORDID_DBS_DELETE' value='23'/>
  <enum name='CSSM_WORDID_DB_DELETE' value='17'/>
  <enum name='CSSM_WORDID_DB_EXEC_STORED_QUERY' value='18'/>
  <enum name='CSSM_WORDID_DB_INSERT' value='19'/>
  <enum name='CSSM_WORDID_DB_MODIFY' value='20'/>
  <enum name='CSSM_WORDID_DB_READ' value='21'/>
  <enum name='CSSM_WORDID_DECRYPT' value='24'/>
  <enum name='CSSM_WORDID_DELETE' value='25'/>
  <enum name='CSSM_WORDID_DELTA_CRL' value='26'/>
  <enum name='CSSM_WORDID_DER' value='27'/>
  <enum name='CSSM_WORDID_DERIVE' value='28'/>
  <enum name='CSSM_WORDID_DISPLAY' value='29'/>
  <enum name='CSSM_WORDID_DO' value='30'/>
  <enum name='CSSM_WORDID_DSA' value='31'/>
  <enum name='CSSM_WORDID_DSA_SHA1' value='32'/>
  <enum name='CSSM_WORDID_E' value='33'/>
  <enum name='CSSM_WORDID_ELGAMAL' value='34'/>
  <enum name='CSSM_WORDID_ENCRYPT' value='35'/>
  <enum name='CSSM_WORDID_ENTRY' value='36'/>
  <enum name='CSSM_WORDID_EXPORT_CLEAR' value='37'/>
  <enum name='CSSM_WORDID_EXPORT_WRAPPED' value='38'/>
  <enum name='CSSM_WORDID_G' value='39'/>
  <enum name='CSSM_WORDID_GE' value='40'/>
  <enum name='CSSM_WORDID_GENKEY' value='41'/>
  <enum name='CSSM_WORDID_HASH' value='42'/>
  <enum name='CSSM_WORDID_HASHED_PASSWORD' value='43'/>
  <enum name='CSSM_WORDID_HASHED_SUBJECT' value='44'/>
  <enum name='CSSM_WORDID_HAVAL' value='45'/>
  <enum name='CSSM_WORDID_IBCHASH' value='46'/>
  <enum name='CSSM_WORDID_IMPORT_CLEAR' value='47'/>
  <enum name='CSSM_WORDID_IMPORT_WRAPPED' value='48'/>
  <enum name='CSSM_WORDID_INTEL' value='49'/>
  <enum name='CSSM_WORDID_ISSUER' value='50'/>
  <enum name='CSSM_WORDID_ISSUER_INFO' value='51'/>
  <enum name='CSSM_WORDID_KEA' value='53'/>
  <enum name='CSSM_WORDID_KEY' value='65543'/>
  <enum name='CSSM_WORDID_KEYCHAIN_CHANGE_LOCK' value='65538'/>
  <enum name='CSSM_WORDID_KEYCHAIN_LOCK' value='65537'/>
  <enum name='CSSM_WORDID_KEYCHAIN_PROMPT' value='65536'/>
  <enum name='CSSM_WORDID_KEYHOLDER' value='54'/>
  <enum name='CSSM_WORDID_K_OF_N' value='52'/>
  <enum name='CSSM_WORDID_L' value='55'/>
  <enum name='CSSM_WORDID_LE' value='56'/>
  <enum name='CSSM_WORDID_LOGIN' value='57'/>
  <enum name='CSSM_WORDID_LOGIN_NAME' value='58'/>
  <enum name='CSSM_WORDID_MAC' value='59'/>
  <enum name='CSSM_WORDID_MD2' value='60'/>
  <enum name='CSSM_WORDID_MD2WITHRSA' value='61'/>
  <enum name='CSSM_WORDID_MD4' value='62'/>
  <enum name='CSSM_WORDID_MD5' value='63'/>
  <enum name='CSSM_WORDID_MD5WITHRSA' value='64'/>
  <enum name='CSSM_WORDID_N' value='65'/>
  <enum name='CSSM_WORDID_NAME' value='66'/>
  <enum name='CSSM_WORDID_NDR' value='67'/>
  <enum name='CSSM_WORDID_NHASH' value='68'/>
  <enum name='CSSM_WORDID_NOT_AFTER' value='69'/>
  <enum name='CSSM_WORDID_NOT_BEFORE' value='70'/>
  <enum name='CSSM_WORDID_NULL' value='71'/>
  <enum name='CSSM_WORDID_NUMERIC' value='72'/>
  <enum name='CSSM_WORDID_OBJECT_HASH' value='73'/>
  <enum name='CSSM_WORDID_ONE_TIME' value='74'/>
  <enum name='CSSM_WORDID_ONLINE' value='75'/>
  <enum name='CSSM_WORDID_OWNER' value='76'/>
  <enum name='CSSM_WORDID_P' value='77'/>
  <enum name='CSSM_WORDID_PAM_NAME' value='78'/>
  <enum name='CSSM_WORDID_PASSWORD' value='79'/>
  <enum name='CSSM_WORDID_PGP' value='80'/>
  <enum name='CSSM_WORDID_PIN' value='65544'/>
  <enum name='CSSM_WORDID_PREAUTH' value='65545'/>
  <enum name='CSSM_WORDID_PREAUTH_SOURCE' value='65546'/>
  <enum name='CSSM_WORDID_PREFIX' value='81'/>
  <enum name='CSSM_WORDID_PRIVATE_KEY' value='82'/>
  <enum name='CSSM_WORDID_PROCESS' value='65539'/>
  <enum name='CSSM_WORDID_PROMPTED_BIOMETRIC' value='83'/>
  <enum name='CSSM_WORDID_PROMPTED_PASSWORD' value='84'/>
  <enum name='CSSM_WORDID_PROPAGATE' value='85'/>
  <enum name='CSSM_WORDID_PROTECTED_BIOMETRIC' value='86'/>
  <enum name='CSSM_WORDID_PROTECTED_PASSWORD' value='87'/>
  <enum name='CSSM_WORDID_PROTECTED_PIN' value='88'/>
  <enum name='CSSM_WORDID_PUBLIC_KEY' value='89'/>
  <enum name='CSSM_WORDID_PUBLIC_KEY_FROM_CERT' value='90'/>
  <enum name='CSSM_WORDID_Q' value='91'/>
  <enum name='CSSM_WORDID_RANGE' value='92'/>
  <enum name='CSSM_WORDID_REVAL' value='93'/>
  <enum name='CSSM_WORDID_RIPEMAC' value='94'/>
  <enum name='CSSM_WORDID_RIPEMD' value='95'/>
  <enum name='CSSM_WORDID_RIPEMD160' value='96'/>
  <enum name='CSSM_WORDID_RSA' value='97'/>
  <enum name='CSSM_WORDID_RSA_ISO9796' value='98'/>
  <enum name='CSSM_WORDID_RSA_PKCS' value='99'/>
  <enum name='CSSM_WORDID_RSA_PKCS1' value='102'/>
  <enum name='CSSM_WORDID_RSA_PKCS1_MD5' value='103'/>
  <enum name='CSSM_WORDID_RSA_PKCS1_SHA1' value='104'/>
  <enum name='CSSM_WORDID_RSA_PKCS1_SIG' value='105'/>
  <enum name='CSSM_WORDID_RSA_PKCS_MD5' value='100'/>
  <enum name='CSSM_WORDID_RSA_PKCS_SHA1' value='101'/>
  <enum name='CSSM_WORDID_RSA_RAW' value='106'/>
  <enum name='CSSM_WORDID_SDSIV1' value='107'/>
  <enum name='CSSM_WORDID_SEQUENCE' value='108'/>
  <enum name='CSSM_WORDID_SET' value='109'/>
  <enum name='CSSM_WORDID_SEXPR' value='110'/>
  <enum name='CSSM_WORDID_SHA1' value='111'/>
  <enum name='CSSM_WORDID_SHA1WITHDSA' value='112'/>
  <enum name='CSSM_WORDID_SHA1WITHECDSA' value='113'/>
  <enum name='CSSM_WORDID_SHA1WITHRSA' value='114'/>
  <enum name='CSSM_WORDID_SIGN' value='115'/>
  <enum name='CSSM_WORDID_SIGNATURE' value='116'/>
  <enum name='CSSM_WORDID_SIGNED_NONCE' value='117'/>
  <enum name='CSSM_WORDID_SIGNED_SECRET' value='118'/>
  <enum name='CSSM_WORDID_SPKI' value='119'/>
  <enum name='CSSM_WORDID_SUBJECT' value='120'/>
  <enum name='CSSM_WORDID_SUBJECT_INFO' value='121'/>
  <enum name='CSSM_WORDID_SYMMETRIC_KEY' value='65541'/>
  <enum name='CSSM_WORDID_SYSTEM' value='65542'/>
  <enum name='CSSM_WORDID_TAG' value='122'/>
  <enum name='CSSM_WORDID_THRESHOLD' value='123'/>
  <enum name='CSSM_WORDID_TIME' value='124'/>
  <enum name='CSSM_WORDID_URI' value='125'/>
  <enum name='CSSM_WORDID_VENDOR_END' value='2147418112'/>
  <enum name='CSSM_WORDID_VENDOR_START' value='65536'/>
  <enum name='CSSM_WORDID_VERSION' value='126'/>
  <enum name='CSSM_WORDID_X509V1' value='128'/>
  <enum name='CSSM_WORDID_X509V2' value='129'/>
  <enum name='CSSM_WORDID_X509V3' value='130'/>
  <enum name='CSSM_WORDID_X509_ATTRIBUTE' value='127'/>
  <enum name='CSSM_WORDID_X9_ATTRIBUTE' value='131'/>
  <enum name='CSSM_WORDID__FIRST_UNUSED' value='65547'/>
  <enum name='CSSM_WORDID__NLU_' value='0'/>
  <enum name='CSSM_WORDID__RESERVED_1' value='65540'/>
  <enum name='CSSM_WORDID__STAR_' value='1'/>
  <enum name='CSSM_WORDID__UNK_' value='-1'/>
  <enum name='CSSM_X509_DATAFORMAT_ENCODED' value='0'/>
  <enum name='CSSM_X509_DATAFORMAT_PAIR' value='2'/>
  <enum name='CSSM_X509_DATAFORMAT_PARSED' value='1'/>
  <enum name='CSSM_X509_OPTION_NOT_PRESENT' value='0'/>
  <enum name='CSSM_X509_OPTION_PRESENT' value='1'/>
  <enum name='DT_AuthorityInfoAccess' value='14'/>
  <enum name='DT_AuthorityKeyID' value='0'/>
  <enum name='DT_BasicConstraints' value='6'/>
  <enum name='DT_CertPolicies' value='7'/>
  <enum name='DT_CrlDistributionPoints' value='12'/>
  <enum name='DT_CrlNumber' value='9'/>
  <enum name='DT_CrlReason' value='11'/>
  <enum name='DT_DeltaCrl' value='10'/>
  <enum name='DT_ExtendedKeyUsage' value='5'/>
  <enum name='DT_IssuerAltName' value='4'/>
  <enum name='DT_IssuingDistributionPoint' value='13'/>
  <enum name='DT_KeyUsage' value='2'/>
  <enum name='DT_NetscapeCertType' value='8'/>
  <enum name='DT_Other' value='15'/>
  <enum name='DT_SubjectAltName' value='3'/>
  <enum name='DT_SubjectKeyID' value='1'/>
  <enum name='GNT_DNSName' value='2'/>
  <enum name='GNT_DirectoryName' value='4'/>
  <enum name='GNT_EdiPartyName' value='5'/>
  <enum name='GNT_IPAddress' value='7'/>
  <enum name='GNT_OtherName' value='0'/>
  <enum name='GNT_RFC822Name' value='1'/>
  <enum name='GNT_RegisteredID' value='8'/>
  <enum name='GNT_URI' value='6'/>
  <enum name='GNT_X400Address' value='3'/>
  <enum name='INTEL' value='77'/>
  <enum name='INTEL_CDSASECURITY' value='2'/>
  <enum name='INTEL_CDSASECURITY_LENGTH' value='8'/>
  <enum name='INTEL_CERT_AND_PRIVATE_KEY_2_0' value='1'/>
  <enum name='INTEL_CERT_AND_PRIVATE_KEY_2_0_LENGTH' value='11'/>
  <enum name='INTEL_LENGTH' value='7'/>
  <enum name='INTEL_SEC_ALGS' value='5'/>
  <enum name='INTEL_SEC_ALGS_LENGTH' value='10'/>
  <enum name='INTEL_SEC_FORMATS' value='1'/>
  <enum name='INTEL_SEC_FORMATS_LENGTH' value='9'/>
  <enum name='INTEL_SEC_OBJECT_BUNDLE' value='4'/>
  <enum name='INTEL_SEC_OBJECT_BUNDLE_LENGTH' value='10'/>
  <enum name='INTEL_X509V2_CRL_R08' value='1'/>
  <enum name='INTEL_X509V2_CRL_R08_LENGTH' value='11'/>
  <enum name='INTEL_X509V3_CERT_PRIVATE_EXTENSIONS' value='50'/>
  <enum name='INTEL_X509V3_CERT_PRIVATE_EXTENSIONS_LENGTH' value='12'/>
  <enum name='INTEL_X509V3_CERT_R08' value='1'/>
  <enum name='INTEL_X509V3_CERT_R08_LENGTH' value='11'/>
  <enum name='INTEL_X509V3_SIGN_R08' value='2'/>
  <enum name='INTEL_X509V3_SIGN_R08_LENGTH' value='11'/>
  <enum name='INTEL_X509_C_DATATYPE' value='1'/>
  <enum name='INTEL_X509_LDAPSTRING_DATATYPE' value='2'/>
  <enum name='ISL_FAIL' value='-1'/>
  <enum name='ISL_OK' value='0'/>
  <enum name='MDS_CDSAATTR_ACLSUBJECTTYPES' value='1073741890'/>
  <enum name='MDS_CDSAATTR_ALG_TYPE' value='1073741850'/>
  <enum name='MDS_CDSAATTR_ATTRIBUTE_TYPE' value='1073741852'/>
  <enum name='MDS_CDSAATTR_ATTRIBUTE_VALUE' value='1073741853'/>
  <enum name='MDS_CDSAATTR_AUTHORITY_REQUEST_TYPE' value='1073741898'/>
  <enum name='MDS_CDSAATTR_AUTHTAGS' value='1073741891'/>
  <enum name='MDS_CDSAATTR_BUNDLE_TYPEFORMAT' value='1073741883'/>
  <enum name='MDS_CDSAATTR_CDSAVERSION' value='1073741829'/>
  <enum name='MDS_CDSAATTR_CERT_CLASSNAME' value='1073741884'/>
  <enum name='MDS_CDSAATTR_CERT_FIELDNAMES' value='1073741882'/>
  <enum name='MDS_CDSAATTR_CERT_TYPEFORMAT' value='1073741880'/>
  <enum name='MDS_CDSAATTR_CONJUNCTIVE_OPS' value='1073741877'/>
  <enum name='MDS_CDSAATTR_CONTEXT_TYPE' value='1073741849'/>
  <enum name='MDS_CDSAATTR_CRL_TYPEFORMAT' value='1073741881'/>
  <enum name='MDS_CDSAATTR_CSP_CUSTOMFLAGS' value='1073741847'/>
  <enum name='MDS_CDSAATTR_CSP_FLAGS' value='1073741846'/>
  <enum name='MDS_CDSAATTR_CSP_TYPE' value='1073741845'/>
  <enum name='MDS_CDSAATTR_DEFAULT_TEMPLATE_TYPE' value='1073741896'/>
  <enum name='MDS_CDSAATTR_DESC' value='1073741832'/>
  <enum name='MDS_CDSAATTR_DL_TYPE' value='1073741875'/>
  <enum name='MDS_CDSAATTR_DYNAMIC_FLAG' value='1073741842'/>
  <enum name='MDS_CDSAATTR_EMMSPECVERSION' value='1073741835'/>
  <enum name='MDS_CDSAATTR_EMM_TYPE' value='1073741838'/>
  <enum name='MDS_CDSAATTR_EMM_VENDOR' value='1073741837'/>
  <enum name='MDS_CDSAATTR_EMM_VERSION' value='1073741836'/>
  <enum name='MDS_CDSAATTR_GROUP_ID' value='1073741851'/>
  <enum name='MDS_CDSAATTR_INTERFACE_GUID' value='1073741833'/>
  <enum name='MDS_CDSAATTR_MANIFEST' value='1073741826'/>
  <enum name='MDS_CDSAATTR_MODULE_ID' value='1073741825'/>
  <enum name='MDS_CDSAATTR_MODULE_NAME' value='1073741827'/>
  <enum name='MDS_CDSAATTR_MULTITHREAD_FLAG' value='1073741843'/>
  <enum name='MDS_CDSAATTR_NATIVE_SERVICES' value='1073741841'/>
  <enum name='MDS_CDSAATTR_OID' value='1073741894'/>
  <enum name='MDS_CDSAATTR_PATH' value='1073741828'/>
  <enum name='MDS_CDSAATTR_POLICY_STMT' value='1073741834'/>
  <enum name='MDS_CDSAATTR_PRODUCT_CUSTOMFLAGS' value='1073741858'/>
  <enum name='MDS_CDSAATTR_PRODUCT_DESC' value='1073741854'/>
  <enum name='MDS_CDSAATTR_PRODUCT_FLAGS' value='1073741857'/>
  <enum name='MDS_CDSAATTR_PRODUCT_VENDOR' value='1073741855'/>
  <enum name='MDS_CDSAATTR_PRODUCT_VERSION' value='1073741856'/>
  <enum name='MDS_CDSAATTR_PROTOCOL' value='1073741879'/>
  <enum name='MDS_CDSAATTR_QUERY_LIMITS' value='1073741876'/>
  <enum name='MDS_CDSAATTR_READER_CUSTOMFLAGS' value='1073741866'/>
  <enum name='MDS_CDSAATTR_READER_DESC' value='1073741861'/>
  <enum name='MDS_CDSAATTR_READER_FLAGS' value='1073741865'/>
  <enum name='MDS_CDSAATTR_READER_FWVERSION' value='1073741864'/>
  <enum name='MDS_CDSAATTR_READER_SERIALNUMBER' value='1073741867'/>
  <enum name='MDS_CDSAATTR_READER_VENDOR' value='1073741862'/>
  <enum name='MDS_CDSAATTR_READER_VERSION' value='1073741863'/>
  <enum name='MDS_CDSAATTR_RELATIONAL_OPS' value='1073741878'/>
  <enum name='MDS_CDSAATTR_REQCREDENTIALS' value='1073741888'/>
  <enum name='MDS_CDSAATTR_RETRIEVALMODE' value='1073741893'/>
  <enum name='MDS_CDSAATTR_ROOTCERT' value='1073741885'/>
  <enum name='MDS_CDSAATTR_ROOTCERT_TYPEFORMAT' value='1073741886'/>
  <enum name='MDS_CDSAATTR_SAMPLETYPES' value='1073741889'/>
  <enum name='MDS_CDSAATTR_SC_CUSTOMFLAGS' value='1073741873'/>
  <enum name='MDS_CDSAATTR_SC_DESC' value='1073741868'/>
  <enum name='MDS_CDSAATTR_SC_FLAGS' value='1073741872'/>
  <enum name='MDS_CDSAATTR_SC_FWVERSION' value='1073741871'/>
  <enum name='MDS_CDSAATTR_SC_SERIALNUMBER' value='1073741874'/>
  <enum name='MDS_CDSAATTR_SC_VENDOR' value='1073741869'/>
  <enum name='MDS_CDSAATTR_SC_VERSION' value='1073741870'/>
  <enum name='MDS_CDSAATTR_SERVICE_MASK' value='1073741844'/>
  <enum name='MDS_CDSAATTR_SERVICE_TYPE' value='1073741840'/>
  <enum name='MDS_CDSAATTR_SSID' value='1073741839'/>
  <enum name='MDS_CDSAATTR_STANDARD_DESC' value='1073741859'/>
  <enum name='MDS_CDSAATTR_STANDARD_VERSION' value='1073741860'/>
  <enum name='MDS_CDSAATTR_TEMPLATE_FIELD_NAMES' value='1073741897'/>
  <enum name='MDS_CDSAATTR_USEETAG' value='1073741892'/>
  <enum name='MDS_CDSAATTR_USEE_TAGS' value='1073741848'/>
  <enum name='MDS_CDSAATTR_VALUE' value='1073741887'/>
  <enum name='MDS_CDSAATTR_VENDOR' value='1073741830'/>
  <enum name='MDS_CDSAATTR_XLATIONTYPEFORMAT' value='1073741895'/>
  <enum name='MDS_CDSADIR_AC_PRIMARY_NUM_ATTRIBUTES' value='6'/>
  <enum name='MDS_CDSADIR_AC_PRIMARY_RECORDTYPE' value='1073741841'/>
  <enum name='MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value='8'/>
  <enum name='MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_RECORDTYPE' value='1073741836'/>
  <enum name='MDS_CDSADIR_CL_PRIMARY_NUM_ATTRIBUTES' value='13'/>
  <enum name='MDS_CDSADIR_CL_PRIMARY_RECORDTYPE' value='1073741835'/>
  <enum name='MDS_CDSADIR_COMMON_NUM_ATTRIBUTES' value='9'/>
  <enum name='MDS_CDSADIR_COMMON_RECORDTYPE' value='1073741828'/>
  <enum name='MDS_CDSADIR_CSP_CAPABILITY_NUM_ATTRIBUTES' value='9'/>
  <enum name='MDS_CDSADIR_CSP_CAPABILITY_RECORDTYPE' value='1073741830'/>
  <enum name='MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value='16'/>
  <enum name='MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_RECORDTYPE' value='1073741831'/>
  <enum name='MDS_CDSADIR_CSP_PRIMARY_NUM_ATTRIBUTES' value='13'/>
  <enum name='MDS_CDSADIR_CSP_PRIMARY_RECORDTYPE' value='1073741829'/>
  <enum name='MDS_CDSADIR_CSP_SC_INFO_NUM_ATTRIBUTES' value='9'/>
  <enum name='MDS_CDSADIR_CSP_SC_INFO_RECORDTYPE' value='1073741832'/>
  <enum name='MDS_CDSADIR_CSSM_NUM_ATTRIBUTES' value='4'/>
  <enum name='MDS_CDSADIR_CSSM_RECORDTYPE' value='1073741825'/>
  <enum name='MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value='10'/>
  <enum name='MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_RECORDTYPE' value='1073741834'/>
  <enum name='MDS_CDSADIR_DL_PRIMARY_NUM_ATTRIBUTES' value='13'/>
  <enum name='MDS_CDSADIR_DL_PRIMARY_RECORDTYPE' value='1073741833'/>
  <enum name='MDS_CDSADIR_EMM_NUM_ATTRIBUTES' value='11'/>
  <enum name='MDS_CDSADIR_EMM_PRIMARY_NUM_ATTRIBUTES' value='9'/>
  <enum name='MDS_CDSADIR_EMM_PRIMARY_RECORDTYPE' value='1073741840'/>
  <enum name='MDS_CDSADIR_EMM_RECORDTYPE' value='1073741827'/>
  <enum name='MDS_CDSADIR_KRMM_RECORDTYPE' value='1073741826'/>
  <enum name='MDS_CDSADIR_KR_PRIMARY_RECORDTYPE' value='1073741842'/>
  <enum name='MDS_CDSADIR_MDS_SCHEMA_ATTRIBUTES' value='1073741844'/>
  <enum name='MDS_CDSADIR_MDS_SCHEMA_INDEXES' value='1073741845'/>
  <enum name='MDS_CDSADIR_MDS_SCHEMA_RELATIONS' value='1073741843'/>
  <enum name='MDS_CDSADIR_NUM_RELATIONS' value='19'/>
  <enum name='MDS_CDSADIR_SCHEMA_ATTRIBUTES_NUM_ATTRIBUTES' value='6'/>
  <enum name='MDS_CDSADIR_SCHEMA_INDEXES_NUM_ATTRIBUTES' value='5'/>
  <enum name='MDS_CDSADIR_SCHEMA_RELATONS_NUM_ATTRIBUTES' value='2'/>
  <enum name='MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value='14'/>
  <enum name='MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_RECORDTYPE' value='1073741839'/>
  <enum name='MDS_CDSADIR_TP_OIDS_NUM_ATTRIBUTES' value='4'/>
  <enum name='MDS_CDSADIR_TP_OIDS_RECORDTYPE' value='1073741838'/>
  <enum name='MDS_CDSADIR_TP_PRIMARY_NUM_ATTRIBUTES' value='10'/>
  <enum name='MDS_CDSADIR_TP_PRIMARY_RECORDTYPE' value='1073741837'/>
  <enum name='MDS_CDSA_SCHEMA_START' value='1073741824'/>
  <enum name='MDS_OBJECT_NUM_ATTRIBUTES' value='4'/>
  <enum name='MDS_OBJECT_NUM_RELATIONS' value='1'/>
  <enum name='MDS_OBJECT_RECORDTYPE' value='1073741824'/>
  <enum name='NETSCAPE_BASE_OID' value='66'/>
  <enum name='NETSCAPE_BASE_OID_LEN' value='7'/>
  <enum name='NETSCAPE_CERT_EXTEN' value='1'/>
  <enum name='NETSCAPE_CERT_EXTEN_LENGTH' value='8'/>
  <enum name='NETSCAPE_CERT_POLICY' value='4'/>
  <enum name='NETSCAPE_CERT_POLICY_LENGTH' value='8'/>
  <enum name='OID_AD' value='48'/>
  <enum name='OID_AD_LENGTH' value='7'/>
  <enum name='OID_AD_OCSP' value='1'/>
  <enum name='OID_AD_OCSP_LENGTH' value='8'/>
  <enum name='OID_ANSI_X9_42' value='2'/>
  <enum name='OID_ANSI_X9_42_LEN' value='6'/>
  <enum name='OID_ANSI_X9_42_NAMED_SCHEME' value='4'/>
  <enum name='OID_ANSI_X9_42_NAMED_SCHEME_LEN' value='7'/>
  <enum name='OID_ANSI_X9_42_SCHEME' value='3'/>
  <enum name='OID_ANSI_X9_42_SCHEME_LEN' value='7'/>
  <enum name='OID_ATTR_TYPE' value='4'/>
  <enum name='OID_ATTR_TYPE_LENGTH' value='2'/>
  <enum name='OID_DOD' value='6'/>
  <enum name='OID_DS' value='85'/>
  <enum name='OID_DS_LENGTH' value='1'/>
  <enum name='OID_EXTENSION' value='29'/>
  <enum name='OID_EXTENSION_LENGTH' value='2'/>
  <enum name='OID_GOSIP' value='5'/>
  <enum name='OID_ISO_CCITT_DIR_SERVICE' value='85'/>
  <enum name='OID_ISO_IDENTIFIED_ORG' value='43'/>
  <enum name='OID_ISO_MEMBER' value='42'/>
  <enum name='OID_ISO_MEMBER_LENGTH' value='1'/>
  <enum name='OID_ISO_STANDARD' value='40'/>
  <enum name='OID_KP' value='3'/>
  <enum name='OID_KP_LENGTH' value='7'/>
  <enum name='OID_NIST_HASHALG' value='2'/>
  <enum name='OID_NIST_HASHALG_LENGTH' value='8'/>
  <enum name='OID_OIW' value='14'/>
  <enum name='OID_OIW_ALGORITHM' value='2'/>
  <enum name='OID_OIW_ALGORITHM_LENGTH' value='4'/>
  <enum name='OID_OIW_LENGTH' value='2'/>
  <enum name='OID_OIW_SECSIG' value='3'/>
  <enum name='OID_OIW_SECSIG_LENGTH' value='3'/>
  <enum name='OID_OSINET' value='4'/>
  <enum name='OID_PE' value='1'/>
  <enum name='OID_PE_LENGTH' value='7'/>
  <enum name='OID_PKCS' value='1'/>
  <enum name='OID_PKCS_1' value='1'/>
  <enum name='OID_PKCS_10' value='10'/>
  <enum name='OID_PKCS_11' value='11'/>
  <enum name='OID_PKCS_11_LENGTH' value='8'/>
  <enum name='OID_PKCS_12' value='12'/>
  <enum name='OID_PKCS_12_LENGTH' value='8'/>
  <enum name='OID_PKCS_1_LENGTH' value='8'/>
  <enum name='OID_PKCS_2' value='2'/>
  <enum name='OID_PKCS_3' value='3'/>
  <enum name='OID_PKCS_3_LENGTH' value='8'/>
  <enum name='OID_PKCS_4' value='4'/>
  <enum name='OID_PKCS_5' value='5'/>
  <enum name='OID_PKCS_5_LENGTH' value='8'/>
  <enum name='OID_PKCS_6' value='6'/>
  <enum name='OID_PKCS_7' value='7'/>
  <enum name='OID_PKCS_7_LENGTH' value='8'/>
  <enum name='OID_PKCS_8' value='8'/>
  <enum name='OID_PKCS_9' value='9'/>
  <enum name='OID_PKCS_9_LENGTH' value='8'/>
  <enum name='OID_PKCS_LENGTH' value='7'/>
  <enum name='OID_PKIX' value='7'/>
  <enum name='OID_PKIX_LENGTH' value='6'/>
  <enum name='OID_QT' value='2'/>
  <enum name='OID_QT_LENGTH' value='7'/>
  <enum name='OID_RSA' value='13'/>
  <enum name='OID_RSA_ENCRYPT' value='3'/>
  <enum name='OID_RSA_ENCRYPT_LENGTH' value='7'/>
  <enum name='OID_RSA_HASH' value='2'/>
  <enum name='OID_RSA_HASH_LENGTH' value='7'/>
  <enum name='OID_RSA_LENGTH' value='6'/>
  <enum name='OID_US' value='72'/>
  <enum name='OID_US_LENGTH' value='3'/>
  <enum name='SEC_KEYCHAIN_SETTINGS_VERS1' value='1'/>
  <enum name='SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION' value='0'/>
  <enum name='SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA' value='17'/>
  <enum name='SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA' value='19'/>
  <enum name='SSL_DHE_DSS_WITH_DES_CBC_SHA' value='18'/>
  <enum name='SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA' value='20'/>
  <enum name='SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA' value='22'/>
  <enum name='SSL_DHE_RSA_WITH_DES_CBC_SHA' value='21'/>
  <enum name='SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA' value='11'/>
  <enum name='SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA' value='13'/>
  <enum name='SSL_DH_DSS_WITH_DES_CBC_SHA' value='12'/>
  <enum name='SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA' value='14'/>
  <enum name='SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA' value='16'/>
  <enum name='SSL_DH_RSA_WITH_DES_CBC_SHA' value='15'/>
  <enum name='SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA' value='25'/>
  <enum name='SSL_DH_anon_EXPORT_WITH_RC4_40_MD5' value='23'/>
  <enum name='SSL_DH_anon_WITH_3DES_EDE_CBC_SHA' value='27'/>
  <enum name='SSL_DH_anon_WITH_DES_CBC_SHA' value='26'/>
  <enum name='SSL_DH_anon_WITH_RC4_128_MD5' value='24'/>
  <enum name='SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA' value='29'/>
  <enum name='SSL_FORTEZZA_DMS_WITH_NULL_SHA' value='28'/>
  <enum name='SSL_NO_SUCH_CIPHERSUITE' value='65535'/>
  <enum name='SSL_NULL_WITH_NULL_NULL' value='0'/>
  <enum name='SSL_RSA_EXPORT_WITH_DES40_CBC_SHA' value='8'/>
  <enum name='SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5' value='6'/>
  <enum name='SSL_RSA_EXPORT_WITH_RC4_40_MD5' value='3'/>
  <enum name='SSL_RSA_WITH_3DES_EDE_CBC_MD5' value='65411'/>
  <enum name='SSL_RSA_WITH_3DES_EDE_CBC_SHA' value='10'/>
  <enum name='SSL_RSA_WITH_DES_CBC_MD5' value='65410'/>
  <enum name='SSL_RSA_WITH_DES_CBC_SHA' value='9'/>
  <enum name='SSL_RSA_WITH_IDEA_CBC_MD5' value='65409'/>
  <enum name='SSL_RSA_WITH_IDEA_CBC_SHA' value='7'/>
  <enum name='SSL_RSA_WITH_NULL_MD5' value='1'/>
  <enum name='SSL_RSA_WITH_NULL_SHA' value='2'/>
  <enum name='SSL_RSA_WITH_RC2_CBC_MD5' value='65408'/>
  <enum name='SSL_RSA_WITH_RC4_128_MD5' value='4'/>
  <enum name='SSL_RSA_WITH_RC4_128_SHA' value='5'/>
  <enum name='TLS_DHE_DSS_WITH_AES_128_CBC_SHA' value='50'/>
  <enum name='TLS_DHE_DSS_WITH_AES_256_CBC_SHA' value='56'/>
  <enum name='TLS_DHE_RSA_WITH_AES_128_CBC_SHA' value='51'/>
  <enum name='TLS_DHE_RSA_WITH_AES_256_CBC_SHA' value='57'/>
  <enum name='TLS_DH_DSS_WITH_AES_128_CBC_SHA' value='48'/>
  <enum name='TLS_DH_DSS_WITH_AES_256_CBC_SHA' value='54'/>
  <enum name='TLS_DH_RSA_WITH_AES_128_CBC_SHA' value='49'/>
  <enum name='TLS_DH_RSA_WITH_AES_256_CBC_SHA' value='55'/>
  <enum name='TLS_DH_anon_WITH_AES_128_CBC_SHA' value='52'/>
  <enum name='TLS_DH_anon_WITH_AES_256_CBC_SHA' value='58'/>
  <enum name='TLS_RSA_WITH_AES_128_CBC_SHA' value='47'/>
  <enum name='TLS_RSA_WITH_AES_256_CBC_SHA' value='53'/>
  <enum name='callerSecuritySession' value='4294967295'/>
  <enum name='errAuthorizationBadAddress' value='-60033'/>
  <enum name='errAuthorizationCanceled' value='-60006'/>
  <enum name='errAuthorizationDenied' value='-60005'/>
  <enum name='errAuthorizationExternalizeNotAllowed' value='-60009'/>
  <enum name='errAuthorizationInteractionNotAllowed' value='-60007'/>
  <enum name='errAuthorizationInternal' value='-60008'/>
  <enum name='errAuthorizationInternalizeNotAllowed' value='-60010'/>
  <enum name='errAuthorizationInvalidFlags' value='-60011'/>
  <enum name='errAuthorizationInvalidPointer' value='-60004'/>
  <enum name='errAuthorizationInvalidRef' value='-60002'/>
  <enum name='errAuthorizationInvalidSet' value='-60001'/>
  <enum name='errAuthorizationInvalidTag' value='-60003'/>
  <enum name='errAuthorizationSuccess' value='0'/>
  <enum name='errAuthorizationToolEnvironmentError' value='-60032'/>
  <enum name='errAuthorizationToolExecuteFailure' value='-60031'/>
  <enum name='errSSLBadCert' value='-9808'/>
  <enum name='errSSLBadCipherSuite' value='-9818'/>
  <enum name='errSSLBadConfiguration' value='-9848'/>
  <enum name='errSSLBadRecordMac' value='-9846'/>
  <enum name='errSSLBufferOverflow' value='-9817'/>
  <enum name='errSSLCertExpired' value='-9814'/>
  <enum name='errSSLCertNotYetValid' value='-9815'/>
  <enum name='errSSLClosedAbort' value='-9806'/>
  <enum name='errSSLClosedGraceful' value='-9805'/>
  <enum name='errSSLClosedNoNotify' value='-9816'/>
  <enum name='errSSLConnectionRefused' value='-9844'/>
  <enum name='errSSLCrypto' value='-9809'/>
  <enum name='errSSLDecryptionFail' value='-9845'/>
  <enum name='errSSLFatalAlert' value='-9802'/>
  <enum name='errSSLHostNameMismatch' value='-9843'/>
  <enum name='errSSLIllegalParam' value='-9830'/>
  <enum name='errSSLInternal' value='-9810'/>
  <enum name='errSSLLast' value='-9849'/>
  <enum name='errSSLModuleAttach' value='-9811'/>
  <enum name='errSSLNegotiation' value='-9801'/>
  <enum name='errSSLNoRootCert' value='-9813'/>
  <enum name='errSSLPeerAccessDenied' value='-9832'/>
  <enum name='errSSLPeerBadCert' value='-9825'/>
  <enum name='errSSLPeerBadRecordMac' value='-9820'/>
  <enum name='errSSLPeerCertExpired' value='-9828'/>
  <enum name='errSSLPeerCertRevoked' value='-9827'/>
  <enum name='errSSLPeerCertUnknown' value='-9829'/>
  <enum name='errSSLPeerDecodeError' value='-9833'/>
  <enum name='errSSLPeerDecompressFail' value='-9823'/>
  <enum name='errSSLPeerDecryptError' value='-9834'/>
  <enum name='errSSLPeerDecryptionFail' value='-9821'/>
  <enum name='errSSLPeerExportRestriction' value='-9835'/>
  <enum name='errSSLPeerHandshakeFail' value='-9824'/>
  <enum name='errSSLPeerInsufficientSecurity' value='-9837'/>
  <enum name='errSSLPeerInternalError' value='-9838'/>
  <enum name='errSSLPeerNoRenegotiation' value='-9840'/>
  <enum name='errSSLPeerProtocolVersion' value='-9836'/>
  <enum name='errSSLPeerRecordOverflow' value='-9822'/>
  <enum name='errSSLPeerUnexpectedMsg' value='-9819'/>
  <enum name='errSSLPeerUnknownCA' value='-9831'/>
  <enum name='errSSLPeerUnsupportedCert' value='-9826'/>
  <enum name='errSSLPeerUserCancelled' value='-9839'/>
  <enum name='errSSLProtocol' value='-9800'/>
  <enum name='errSSLRecordOverflow' value='-9847'/>
  <enum name='errSSLSessionNotFound' value='-9804'/>
  <enum name='errSSLUnknownRootCert' value='-9812'/>
  <enum name='errSSLWouldBlock' value='-9803'/>
  <enum name='errSSLXCertChainInvalid' value='-9807'/>
  <enum name='errSecACLNotSimple' value='-25240'/>
  <enum name='errSecAuthFailed' value='-25293'/>
  <enum name='errSecBufferTooSmall' value='-25301'/>
  <enum name='errSecCreateChainFailed' value='-25318'/>
  <enum name='errSecDataNotAvailable' value='-25316'/>
  <enum name='errSecDataNotModifiable' value='-25317'/>
  <enum name='errSecDataTooLarge' value='-25302'/>
  <enum name='errSecDuplicateCallback' value='-25297'/>
  <enum name='errSecDuplicateItem' value='-25299'/>
  <enum name='errSecDuplicateKeychain' value='-25296'/>
  <enum name='errSecErrnoBase' value='100000'/>
  <enum name='errSecErrnoLimit' value='100255'/>
  <enum name='errSecInteractionNotAllowed' value='-25308'/>
  <enum name='errSecInteractionRequired' value='-25315'/>
  <enum name='errSecInvalidCallback' value='-25298'/>
  <enum name='errSecInvalidItemRef' value='-25304'/>
  <enum name='errSecInvalidKeychain' value='-25295'/>
  <enum name='errSecInvalidOwnerEdit' value='-25244'/>
  <enum name='errSecInvalidPasswordRef' value='-25261'/>
  <enum name='errSecInvalidPrefsDomain' value='-25319'/>
  <enum name='errSecInvalidSearchRef' value='-25305'/>
  <enum name='errSecInvalidTrustSetting' value='-25242'/>
  <enum name='errSecItemNotFound' value='-25300'/>
  <enum name='errSecKeyIsSensitive' value='-25258'/>
  <enum name='errSecKeySizeNotAllowed' value='-25311'/>
  <enum name='errSecMultiplePrivKeys' value='-25259'/>
  <enum name='errSecNoAccessForItem' value='-25243'/>
  <enum name='errSecNoCertificateModule' value='-25313'/>
  <enum name='errSecNoDefaultKeychain' value='-25307'/>
  <enum name='errSecNoPolicyModule' value='-25314'/>
  <enum name='errSecNoStorageModule' value='-25312'/>
  <enum name='errSecNoSuchAttr' value='-25303'/>
  <enum name='errSecNoSuchClass' value='-25306'/>
  <enum name='errSecNoSuchKeychain' value='-25294'/>
  <enum name='errSecNotAvailable' value='-25291'/>
  <enum name='errSecPassphraseRequired' value='-25260'/>
  <enum name='errSecPolicyNotFound' value='-25241'/>
  <enum name='errSecReadOnly' value='-25292'/>
  <enum name='errSecReadOnlyAttr' value='-25309'/>
  <enum name='errSecTrustNotAvailable' value='-25245'/>
  <enum name='errSecUnknownFormat' value='-25257'/>
  <enum name='errSecUnsupportedFormat' value='-25256'/>
  <enum name='errSecWrongSecVersion' value='-25310'/>
  <enum name='errSessionAuthorizationDenied' value='-60502'/>
  <enum name='errSessionInternal' value='-60008'/>
  <enum name='errSessionInvalidAttributes' value='-60501'/>
  <enum name='errSessionInvalidFlags' value='-60011'/>
  <enum name='errSessionInvalidId' value='-60500'/>
  <enum name='errSessionSuccess' value='0'/>
  <enum name='errSessionValueNotSet' value='-60503'/>
  <enum name='kAlwaysAuthenticate' value='1'/>
  <enum name='kAuthorizationCallbacksVersion' value='0'/>
  <enum name='kAuthorizationContextFlagExtractable' value='1'/>
  <enum name='kAuthorizationContextFlagVolatile' value='2'/>
  <enum name='kAuthorizationExternalFormLength' value='32'/>
  <enum name='kAuthorizationFlagCanNotPreAuthorize' value='1'/>
  <enum name='kAuthorizationFlagDefaults' value='0'/>
  <enum name='kAuthorizationFlagDestroyRights' value='8'/>
  <enum name='kAuthorizationFlagExtendRights' value='2'/>
  <enum name='kAuthorizationFlagInteractionAllowed' value='1'/>
  <enum name='kAuthorizationFlagNoData' value='1048576'/>
  <enum name='kAuthorizationFlagPartialRights' value='4'/>
  <enum name='kAuthorizationFlagPreAuthorize' value='16'/>
  <enum name='kAuthorizationPluginInterfaceVersion' value='0'/>
  <enum name='kAuthorizationResultAllow' value='0'/>
  <enum name='kAuthorizationResultDeny' value='1'/>
  <enum name='kAuthorizationResultUndefined' value='2'/>
  <enum name='kAuthorizationResultUserCanceled' value='3'/>
  <enum name='kCSSM_APPLEDL_MASK_MODE' value='1'/>
  <enum name='kNeverAuthenticate' value='0'/>
  <enum name='kSSLAborted' value='4'/>
  <enum name='kSSLClientCertNone' value='0'/>
  <enum name='kSSLClientCertRejected' value='3'/>
  <enum name='kSSLClientCertRequested' value='1'/>
  <enum name='kSSLClientCertSent' value='2'/>
  <enum name='kSSLClosed' value='3'/>
  <enum name='kSSLConnected' value='2'/>
  <enum name='kSSLHandshake' value='1'/>
  <enum name='kSSLIdle' value='0'/>
  <enum name='kSSLProtocol2' value='1'/>
  <enum name='kSSLProtocol3' value='2'/>
  <enum name='kSSLProtocol3Only' value='3'/>
  <enum name='kSSLProtocolAll' value='6'/>
  <enum name='kSSLProtocolUnknown' value='0'/>
  <enum name='kSecAccountItemAttr' value='1633903476'/>
  <enum name='kSecAddEvent' value='3'/>
  <enum name='kSecAddEventMask' value='8'/>
  <enum name='kSecAddressItemAttr' value='1633969266'/>
  <enum name='kSecAlias' value='1634494835'/>
  <enum name='kSecAppleSharePasswordItemClass' value='1634953328'/>
  <enum name='kSecAuthenticationTypeDPA' value='1633775716'/>
  <enum name='kSecAuthenticationTypeDefault' value='1953261156'/>
  <enum name='kSecAuthenticationTypeHTMLForm' value='1836216166'/>
  <enum name='kSecAuthenticationTypeHTTPBasic' value='1886680168'/>
  <enum name='kSecAuthenticationTypeHTTPDigest' value='1685353576'/>
  <enum name='kSecAuthenticationTypeItemAttr' value='1635023216'/>
  <enum name='kSecAuthenticationTypeMSN' value='1634628461'/>
  <enum name='kSecAuthenticationTypeNTLM' value='1835824238'/>
  <enum name='kSecAuthenticationTypeRPA' value='1633775730'/>
  <enum name='kSecCertEncodingItemAttr' value='1667591779'/>
  <enum name='kSecCertTypeItemAttr' value='1668577648'/>
  <enum name='kSecCertificateEncoding' value='1667591779'/>
  <enum name='kSecCertificateItemClass' value='2147487744'/>
  <enum name='kSecCertificateType' value='1668577648'/>
  <enum name='kSecCommentItemAttr' value='1768123764'/>
  <enum name='kSecCreationDateItemAttr' value='1667522932'/>
  <enum name='kSecCreatorItemAttr' value='1668445298'/>
  <enum name='kSecCrlEncoding' value='1668443747'/>
  <enum name='kSecCrlType' value='1668445296'/>
  <enum name='kSecCustomIconItemAttr' value='1668641641'/>
  <enum name='kSecDataAccessEvent' value='10'/>
  <enum name='kSecDataAccessEventMask' value='1024'/>
  <enum name='kSecDefaultChangedEvent' value='9'/>
  <enum name='kSecDefaultChangedEventMask' value='512'/>
  <enum name='kSecDeleteEvent' value='4'/>
  <enum name='kSecDeleteEventMask' value='16'/>
  <enum name='kSecDescriptionItemAttr' value='1684370275'/>
  <enum name='kSecEveryEventMask' value='4294967295'/>
  <enum name='kSecFormatBSAFE' value='3'/>
  <enum name='kSecFormatNetscapeCertSequence' value='13'/>
  <enum name='kSecFormatOpenSSL' value='1'/>
  <enum name='kSecFormatPEMSequence' value='10'/>
  <enum name='kSecFormatPKCS12' value='12'/>
  <enum name='kSecFormatPKCS7' value='11'/>
  <enum name='kSecFormatRawKey' value='4'/>
  <enum name='kSecFormatSSH' value='2'/>
  <enum name='kSecFormatUnknown' value='0'/>
  <enum name='kSecFormatWrappedLSH' value='8'/>
  <enum name='kSecFormatWrappedOpenSSL' value='6'/>
  <enum name='kSecFormatWrappedPKCS8' value='5'/>
  <enum name='kSecFormatWrappedSSH' value='7'/>
  <enum name='kSecFormatX509Cert' value='9'/>
  <enum name='kSecGenericItemAttr' value='1734700641'/>
  <enum name='kSecGenericPasswordItemClass' value='1734700656'/>
  <enum name='kSecInternetPasswordItemClass' value='1768842612'/>
  <enum name='kSecInvisibleItemAttr' value='1768846953'/>
  <enum name='kSecIssuerItemAttr' value='1769173877'/>
  <enum name='kSecItemPemArmour' value='1'/>
  <enum name='kSecItemTypeAggregate' value='5'/>
  <enum name='kSecItemTypeCertificate' value='4'/>
  <enum name='kSecItemTypePrivateKey' value='1'/>
  <enum name='kSecItemTypePublicKey' value='2'/>
  <enum name='kSecItemTypeSessionKey' value='3'/>
  <enum name='kSecItemTypeUnknown' value='0'/>
  <enum name='kSecKeyAlias' value='2'/>
  <enum name='kSecKeyAlwaysSensitive' value='15'/>
  <enum name='kSecKeyApplicationTag' value='7'/>
  <enum name='kSecKeyDecrypt' value='19'/>
  <enum name='kSecKeyDerive' value='20'/>
  <enum name='kSecKeyEffectiveKeySize' value='11'/>
  <enum name='kSecKeyEncrypt' value='18'/>
  <enum name='kSecKeyEndDate' value='13'/>
  <enum name='kSecKeyExtractable' value='16'/>
  <enum name='kSecKeyImportOnlyOne' value='1'/>
  <enum name='kSecKeyKeyClass' value='0'/>
  <enum name='kSecKeyKeyCreator' value='8'/>
  <enum name='kSecKeyKeySizeInBits' value='10'/>
  <enum name='kSecKeyKeyType' value='9'/>
  <enum name='kSecKeyLabel' value='6'/>
  <enum name='kSecKeyModifiable' value='5'/>
  <enum name='kSecKeyNeverExtractable' value='17'/>
  <enum name='kSecKeyNoAccessControl' value='4'/>
  <enum name='kSecKeyPermanent' value='3'/>
  <enum name='kSecKeyPrintName' value='1'/>
  <enum name='kSecKeyPrivate' value='4'/>
  <enum name='kSecKeySecurePassphrase' value='2'/>
  <enum name='kSecKeySensitive' value='14'/>
  <enum name='kSecKeySign' value='21'/>
  <enum name='kSecKeySignRecover' value='23'/>
  <enum name='kSecKeyStartDate' value='12'/>
  <enum name='kSecKeyUnwrap' value='26'/>
  <enum name='kSecKeyVerify' value='22'/>
  <enum name='kSecKeyVerifyRecover' value='24'/>
  <enum name='kSecKeyWrap' value='25'/>
  <enum name='kSecKeychainListChangedEvent' value='11'/>
  <enum name='kSecKeychainListChangedMask' value='2048'/>
  <enum name='kSecLabelItemAttr' value='1818321516'/>
  <enum name='kSecLockEvent' value='1'/>
  <enum name='kSecLockEventMask' value='2'/>
  <enum name='kSecModDateItemAttr' value='1835295092'/>
  <enum name='kSecNegativeItemAttr' value='1852139361'/>
  <enum name='kSecPasswordChangedEvent' value='6'/>
  <enum name='kSecPasswordChangedEventMask' value='64'/>
  <enum name='kSecPathItemAttr' value='1885434984'/>
  <enum name='kSecPortItemAttr' value='1886351988'/>
  <enum name='kSecPreferencesDomainCommon' value='2'/>
  <enum name='kSecPreferencesDomainDynamic' value='3'/>
  <enum name='kSecPreferencesDomainSystem' value='1'/>
  <enum name='kSecPreferencesDomainUser' value='0'/>
  <enum name='kSecProtocolItemAttr' value='1886675820'/>
  <enum name='kSecProtocolTypeAFP' value='1634103328'/>
  <enum name='kSecProtocolTypeAppleTalk' value='1635019883'/>
  <enum name='kSecProtocolTypeDAAP' value='1684103536'/>
  <enum name='kSecProtocolTypeEPPC' value='1701867619'/>
  <enum name='kSecProtocolTypeFTP' value='1718906912'/>
  <enum name='kSecProtocolTypeFTPAccount' value='1718906977'/>
  <enum name='kSecProtocolTypeFTPProxy' value='1718907000'/>
  <enum name='kSecProtocolTypeFTPS' value='1718906995'/>
  <enum name='kSecProtocolTypeHTTP' value='1752462448'/>
  <enum name='kSecProtocolTypeHTTPProxy' value='1752461432'/>
  <enum name='kSecProtocolTypeHTTPS' value='1752461427'/>
  <enum name='kSecProtocolTypeHTTPSProxy' value='1752462200'/>
  <enum name='kSecProtocolTypeIMAP' value='1768776048'/>
  <enum name='kSecProtocolTypeIMAPS' value='1768779891'/>
  <enum name='kSecProtocolTypeIPP' value='1768976416'/>
  <enum name='kSecProtocolTypeIRC' value='1769104160'/>
  <enum name='kSecProtocolTypeIRCS' value='1769104243'/>
  <enum name='kSecProtocolTypeLDAP' value='1818517872'/>
  <enum name='kSecProtocolTypeLDAPS' value='1818521715'/>
  <enum name='kSecProtocolTypeNNTP' value='1852732528'/>
  <enum name='kSecProtocolTypeNNTPS' value='1853124723'/>
  <enum name='kSecProtocolTypePOP3' value='1886351411'/>
  <enum name='kSecProtocolTypePOP3S' value='1886351475'/>
  <enum name='kSecProtocolTypeRTSP' value='1920234352'/>
  <enum name='kSecProtocolTypeRTSPProxy' value='1920234360'/>
  <enum name='kSecProtocolTypeSMB' value='1936548384'/>
  <enum name='kSecProtocolTypeSMTP' value='1936553072'/>
  <enum name='kSecProtocolTypeSOCKS' value='1936685088'/>
  <enum name='kSecProtocolTypeSSH' value='1936943136'/>
  <enum name='kSecProtocolTypeTelnet' value='1952803950'/>
  <enum name='kSecProtocolTypeTelnetS' value='1952803955'/>
  <enum name='kSecPublicKeyHashItemAttr' value='1752198009'/>
  <enum name='kSecReadPermStatus' value='2'/>
  <enum name='kSecScriptCodeItemAttr' value='1935897200'/>
  <enum name='kSecSecurityDomainItemAttr' value='1935961454'/>
  <enum name='kSecSerialNumberItemAttr' value='1936614002'/>
  <enum name='kSecServerItemAttr' value='1936881266'/>
  <enum name='kSecServiceItemAttr' value='1937138533'/>
  <enum name='kSecSignatureItemAttr' value='1936943463'/>
  <enum name='kSecSubjectItemAttr' value='1937072746'/>
  <enum name='kSecSubjectKeyIdentifierItemAttr' value='1936419172'/>
  <enum name='kSecTrustResultConfirm' value='2'/>
  <enum name='kSecTrustResultDeny' value='3'/>
  <enum name='kSecTrustResultFatalTrustFailure' value='6'/>
  <enum name='kSecTrustResultInvalid' value='0'/>
  <enum name='kSecTrustResultOtherError' value='7'/>
  <enum name='kSecTrustResultProceed' value='1'/>
  <enum name='kSecTrustResultRecoverableTrustFailure' value='5'/>
  <enum name='kSecTrustResultUnspecified' value='4'/>
  <enum name='kSecTypeItemAttr' value='1954115685'/>
  <enum name='kSecUnlockEvent' value='2'/>
  <enum name='kSecUnlockEventMask' value='4'/>
  <enum name='kSecUnlockStateStatus' value='1'/>
  <enum name='kSecUpdateEvent' value='5'/>
  <enum name='kSecUpdateEventMask' value='32'/>
  <enum name='kSecVolumeItemAttr' value='1986817381'/>
  <enum name='kSecWritePermStatus' value='4'/>
  <enum name='kTLSProtocol1' value='4'/>
  <enum name='kTLSProtocol1Only' value='5'/>
  <enum name='kTryAuthenticate' value='2'/>
  <enum name='noSecuritySession' value='0'/>
  <enum name='sessionHasGraphicAccess' value='16'/>
  <enum name='sessionHasTTY' value='32'/>
  <enum name='sessionIsRemote' value='4096'/>
  <enum name='sessionIsRoot' value='1'/>
  <enum name='sessionKeepCurrentBootstrap' value='32768'/>
  <enum name='sessionWasInitialized' value='32768'/>
  <function name='AuthorizationCopyInfo'>
    <arg name='authorization' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='tag' declared_type='AuthorizationString' type='*'/>
    <arg name='info' declared_type='AuthorizationItemSet**' type='^^{?}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationCopyPrivilegedReference'>
    <arg name='authorization' declared_type='AuthorizationRef*' type='^^{AuthorizationOpaqueRef}'/>
    <arg name='flags' declared_type='AuthorizationFlags' type='L' type64='I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationCopyRights'>
    <arg name='authorization' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='rights' declared_type='AuthorizationRights*' type='^{_AuthorizationRights=I^{_AuthorizationItem=*I^vI}}' const='true'/>
    <arg name='environment' declared_type='AuthorizationEnvironment*' type='^{_AuthorizationEnvironment=I^{_AuthorizationItem=*I^vI}}' const='true'/>
    <arg name='flags' declared_type='AuthorizationFlags' type='L' type64='I'/>
    <arg name='authorizedRights' declared_type='AuthorizationRights**' type='^^{?}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationCreate'>
    <arg name='rights' declared_type='AuthorizationRights*' type='^{_AuthorizationRights=I^{_AuthorizationItem=*I^vI}}' const='true'/>
    <arg name='environment' declared_type='AuthorizationEnvironment*' type='^{_AuthorizationEnvironment=I^{_AuthorizationItem=*I^vI}}' const='true'/>
    <arg name='flags' declared_type='AuthorizationFlags' type='L' type64='I'/>
    <arg name='authorization' declared_type='AuthorizationRef*' type='^^{AuthorizationOpaqueRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationCreateFromExternalForm'>
    <arg name='extForm' declared_type='AuthorizationExternalForm*' type='^{_AuthorizationExternalForm=[32c]}' const='true'/>
    <arg name='authorization' declared_type='AuthorizationRef*' type='^^{AuthorizationOpaqueRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationExecuteWithPrivileges'>
    <arg name='authorization' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='pathToTool' declared_type='char*' type='*' const='true'/>
    <arg name='options' declared_type='AuthorizationFlags' type='L' type64='I'/>
    <arg name='arguments' declared_type='char **' type='^*' const='true'/>
    <arg name='communicationsPipe' declared_type='FILE**' type='^^{__sFILE}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationFree'>
    <arg name='authorization' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='flags' declared_type='AuthorizationFlags' type='L' type64='I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationFreeItemSet'>
    <arg name='set' declared_type='AuthorizationItemSet*' type='^{_AuthorizationItemSet=I^{_AuthorizationItem=*I^vI}}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationMakeExternalForm'>
    <arg name='authorization' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='extForm' declared_type='AuthorizationExternalForm*' type='^{_AuthorizationExternalForm=[32c]}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationPluginCreate'>
    <arg name='callbacks' declared_type='AuthorizationCallbacks*' type='^{AuthorizationCallbacks=I^?^?^?^?^?^?^?^?^?}' const='true'/>
    <arg name='outPlugin' declared_type='AuthorizationPluginRef*' type='^^v'/>
    <arg name='outPluginInterface' declared_type='AuthorizationPluginInterface**' type='^^{AuthorizationPluginInterface}' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationRightGet'>
    <arg name='rightName' declared_type='char*' type='*' const='true'/>
    <arg name='rightDefinition' declared_type='CFDictionaryRef*' type='^^{__CFDictionary}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationRightRemove'>
    <arg name='authRef' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='rightName' declared_type='char*' type='*' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='AuthorizationRightSet'>
    <arg name='authRef' declared_type='AuthorizationRef' type='^{AuthorizationOpaqueRef=}'/>
    <arg name='rightName' declared_type='char*' type='*' const='true'/>
    <arg name='rightDefinition' declared_type='CFTypeRef' type='@'/>
    <arg name='descriptionKey' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='bundle' declared_type='CFBundleRef' type='^{__CFBundle=}'/>
    <arg name='localeTableName' declared_type='CFStringRef' type='^{__CFString=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='CSSM_AC_AuthCompute'>
    <arg name='ACHandle' declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
    <arg name='BaseAuthorizations' declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
    <arg name='Credentials' declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
    <arg name='NumberOfRequestors' declared_type='uint32' type='L' type64='I'/>
    <arg name='Requestors' declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
    <arg name='RequestedAuthorizationPeriod' declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
    <arg name='RequestedAuthorization' declared_type='CSSM_LIST*' type='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}' const='true'/>
    <arg name='AuthorizationResult' declared_type='CSSM_TUPLEGROUP_PTR' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_AC_PassThrough'>
    <arg name='ACHandle' declared_type='CSSM_AC_HANDLE' type='L' type64='I'/>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DBList' declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InputParams' declared_type='void*' type='^v' const='true'/>
    <arg name='OutputParams' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertAbortCache'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertAbortQuery'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertCache'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertCreateTemplate'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CertFields' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='CertTemplate' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertDescribeFormat'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='OidList' declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetAllFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='CertFields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetAllTemplateFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertTemplate' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='CertFields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetFirstCachedFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='CertField' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='NumberOfMatchedFields' declared_type='uint32*' type='^I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetFirstFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertField' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='NumberOfMatchedFields' declared_type='uint32*' type='^I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetKeyInfo'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY_PTR*' type='^^{cssm_key}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetNextCachedFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGetNextFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGroupFromVerifiedBundle'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertBundle' declared_type='CSSM_CERT_BUNDLE*' type='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=I*}}' const='true'/>
    <arg name='SignerCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertGroup' declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertGroupToSignedBundle'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertGroupToBundle' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='BundleInfo' declared_type='CSSM_CERT_BUNDLE_HEADER*' type='^{cssm_cert_bundle_header=II}' const='true'/>
    <arg name='SignedBundle' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertSign'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertTemplate' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='SignScope' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <arg name='SignedCert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertVerify'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertToBeVerified' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='SignerCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='VerifyScope' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CertVerifyWithKey'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertToBeVerified' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlAbortCache'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CrlHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlAbortQuery'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlAddCert'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CrlEntryFields' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='OldCrl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NewCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlCache'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Crl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CrlHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlCreateTemplate'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CrlTemplate' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='NewCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlDescribeFormat'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='OidList' declared_type='CSSM_OID_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetAllCachedRecordFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CrlHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='CrlRecordIndex' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='CrlFields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetAllFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Crl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfCrlFields' declared_type='uint32*' type='^I'/>
    <arg name='CrlFields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetFirstCachedFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CrlHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='CrlRecordIndex' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CrlField' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='NumberOfMatchedFields' declared_type='uint32*' type='^I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetFirstFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Crl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CrlField' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='NumberOfMatchedFields' declared_type='uint32*' type='^I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetNextCachedFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlGetNextFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR*' type='^^{cssm_data}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlRemoveCert'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='OldCrl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NewCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlSetFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CrlTemplate' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='OldCrl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ModifiedCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlSign'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='UnsignedCrl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='SignScope' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <arg name='SignedCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlVerify'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CrlToBeVerified' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='SignerCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='VerifyScope' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='ScopeSize' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_CrlVerifyWithKey'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CrlToBeVerified' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_FreeFieldValue'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertOrCrlOid' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Value' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_FreeFields'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='Fields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_IsCertInCachedCrl'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CrlHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='CertFound' declared_type='CSSM_BOOL*' type='^i'/>
    <arg name='CrlRecordIndex' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_IsCertInCrl'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='Cert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Crl' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertFound' declared_type='CSSM_BOOL*' type='^i'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CL_PassThrough'>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InputParams' declared_type='void*' type='^v' const='true'/>
    <arg name='OutputParams' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_ChangeLoginAcl'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='AclEdit' declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_ChangeLoginOwner'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='NewOwner' declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateAsymmetricContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='Padding' declared_type='CSSM_PADDING' type='L' type64='I'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateDeriveKeyContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='DeriveKeyType' declared_type='CSSM_KEY_TYPE' type='L' type64='I'/>
    <arg name='DeriveKeyLengthInBits' declared_type='uint32' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='BaseKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='IterationCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='Salt' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Seed' declared_type='CSSM_CRYPTO_DATA*' type='^{cssm_crypto_data={cssm_data=I*}^?^v}' const='true'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateDigestContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateKeyGenContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='KeySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <arg name='Seed' declared_type='CSSM_CRYPTO_DATA*' type='^{cssm_crypto_data={cssm_data=I*}^?^v}' const='true'/>
    <arg name='Salt' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='StartDate' declared_type='CSSM_DATE*' type='^{cssm_date=[4C][2C][2C]}' const='true'/>
    <arg name='EndDate' declared_type='CSSM_DATE*' type='^{cssm_date=[4C][2C][2C]}' const='true'/>
    <arg name='Params' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateMacContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreatePassThroughContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateRandomGenContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Seed' declared_type='CSSM_CRYPTO_DATA*' type='^{cssm_crypto_data={cssm_data=I*}^?^v}' const='true'/>
    <arg name='Length' declared_type='uint32' type='L' type64='I'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateSignatureContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_CreateSymmetricContext'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Mode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='InitVector' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Padding' declared_type='CSSM_PADDING' type='L' type64='I'/>
    <arg name='Reserved' declared_type='void*' type='^v'/>
    <arg name='NewContextHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_GetLoginAcl'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='SelectionTag' declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
    <arg name='NumberOfAclInfos' declared_type='uint32*' type='^I'/>
    <arg name='AclInfos' declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_GetLoginOwner'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Owner' declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_GetOperationalStatistics'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Statistics' declared_type='CSSM_CSP_OPERATIONAL_STATISTICS*' type='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_Login'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='LoginName' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Reserved' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_Logout'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_ObtainPrivateKeyFromPublicKey'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='PublicKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='PrivateKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_CSP_PassThrough'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InData' declared_type='void*' type='^v' const='true'/>
    <arg name='OutData' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ChangeKeyAcl'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='AclEdit' declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ChangeKeyOwner'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='NewOwner' declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_Authenticate'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='AccessRequest' declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_ChangeDbAcl'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='AclEdit' declared_type='CSSM_ACL_EDIT*' type='^{cssm_acl_edit=II^{cssm_acl_entry_input}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_ChangeDbOwner'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='NewOwner' declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_CreateRelation'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='RelationID' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <arg name='RelationName' declared_type='char*' type='*' const='true'/>
    <arg name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <arg name='pAttributeInfo' declared_type='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type='^{cssm_db_schema_attribute_info=I*{cssm_data=I*}I}' const='true'/>
    <arg name='NumberOfIndexes' declared_type='uint32' type='L' type64='I'/>
    <arg name='pIndexInfo' declared_type='CSSM_DB_SCHEMA_INDEX_INFO*' type='^{cssm_db_schema_index_info=IIII}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataAbortQuery'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataDelete'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='UniqueRecordIdentifier' declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataGetFirst'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='Query' declared_type='CSSM_QUERY*' type='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}' const='true'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='Attributes' declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
    <arg name='Data' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='UniqueId' declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataGetFromUniqueRecordId'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='UniqueRecord' declared_type='CSSM_DB_UNIQUE_RECORD*' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}' const='true'/>
    <arg name='Attributes' declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
    <arg name='Data' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataGetNext'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='ResultsHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='Attributes' declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
    <arg name='Data' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='UniqueId' declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataInsert'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <arg name='Attributes' declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
    <arg name='Data' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='UniqueId' declared_type='CSSM_DB_UNIQUE_RECORD_PTR*' type='^^{cssm_db_unique_record}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DataModify'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='RecordType' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <arg name='UniqueRecordIdentifier' declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
    <arg name='AttributesToBeModified' declared_type='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}' const='true'/>
    <arg name='DataToBeModified' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ModifyMode' declared_type='CSSM_DB_MODIFY_MODE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DbClose'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DbCreate'>
    <arg name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <arg name='DbName' declared_type='char*' type='*' const='true'/>
    <arg name='DbLocation' declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
    <arg name='DBInfo' declared_type='CSSM_DBINFO*' type='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}' const='true'/>
    <arg name='AccessRequest' declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='OpenParameters' declared_type='void*' type='^v' const='true'/>
    <arg name='DbHandle' declared_type='CSSM_DB_HANDLE*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DbDelete'>
    <arg name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <arg name='DbName' declared_type='char*' type='*' const='true'/>
    <arg name='DbLocation' declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DbOpen'>
    <arg name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <arg name='DbName' declared_type='char*' type='*' const='true'/>
    <arg name='DbLocation' declared_type='CSSM_NET_ADDRESS*' type='^{cssm_net_address=I{cssm_data=I*}}' const='true'/>
    <arg name='AccessRequest' declared_type='CSSM_DB_ACCESS_TYPE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='OpenParameters' declared_type='void*' type='^v' const='true'/>
    <arg name='DbHandle' declared_type='CSSM_DB_HANDLE*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_DestroyRelation'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='RelationID' declared_type='CSSM_DB_RECORDTYPE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_FreeNameList'>
    <arg name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <arg name='NameList' declared_type='CSSM_NAME_LIST_PTR' type='^{cssm_name_list=I^*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_FreeUniqueRecord'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='UniqueRecord' declared_type='CSSM_DB_UNIQUE_RECORD_PTR' type='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=I*}I)I}}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_GetDbAcl'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='SelectionTag' declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
    <arg name='NumberOfAclInfos' declared_type='uint32*' type='^I'/>
    <arg name='AclInfos' declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_GetDbNameFromHandle'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='DbName' declared_type='char**' type='^*'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_GetDbNames'>
    <arg name='DLHandle' declared_type='CSSM_DL_HANDLE' type='L' type64='I'/>
    <arg name='NameList' declared_type='CSSM_NAME_LIST_PTR*' type='^^{cssm_name_list}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_GetDbOwner'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='Owner' declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DL_PassThrough'>
    <arg name='DLDBHandle' declared_type='CSSM_DL_DB_HANDLE' type='{cssm_dl_db_handle=II}'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InputParams' declared_type='void*' type='^v' const='true'/>
    <arg name='OutputParams' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptData'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesDecrypted' declared_type='uint32*' type='^I'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptDataFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptDataInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptDataInitP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptDataP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesDecrypted' declared_type='uint32*' type='^I'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DecryptDataUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesDecrypted' declared_type='uint32*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DeleteContext'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DeleteContextAttributes'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <arg name='ContextAttributes' declared_type='CSSM_CONTEXT_ATTRIBUTE*' type='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DeriveKey'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Param' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='KeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='DerivedKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DigestData'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='Digest' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DigestDataClone'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='ClonednewCCHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DigestDataFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Digest' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DigestDataInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_DigestDataUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptData'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesEncrypted' declared_type='uint32*' type='^I'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptDataFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptDataInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptDataInitP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptDataP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesEncrypted' declared_type='uint32*' type='^I'/>
    <arg name='RemData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_EncryptDataUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='ClearBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ClearBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='CipherBufs' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='CipherBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='bytesEncrypted' declared_type='uint32*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_FreeContext'>
    <arg name='Context' declared_type='CSSM_CONTEXT_PTR' type='^{cssm_context=III^{cssm_context_attribute}IiIII}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_FreeKey'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='KeyPtr' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='Delete' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateAlgorithmParams'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='ParamBits' declared_type='uint32' type='L' type64='I'/>
    <arg name='Param' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateKey'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateKeyP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateKeyPair'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PublicKeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='PublicKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='PublicKeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='PrivateKeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='PrivateKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='PrivateKeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='PrivateKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateKeyPairP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PublicKeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='PublicKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='PublicKeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='PrivateKeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='PrivateKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='PrivateKeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='PrivateKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateMac'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='Mac' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateMacFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Mac' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateMacInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateMacUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GenerateRandom'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='RandomNumber' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetAPIMemoryFunctions'>
    <arg name='AddInHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <arg name='AppMemoryFuncs' declared_type='CSSM_API_MEMORY_FUNCS_PTR' type='^{cssm_memory_funcs=^?^?^?^?^v}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetContext'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Context' declared_type='CSSM_CONTEXT_PTR*' type='^^{cssm_context}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetContextAttribute'>
    <arg name='Context' declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
    <arg name='AttributeType' declared_type='uint32' type='L' type64='I'/>
    <arg name='ContextAttribute' declared_type='CSSM_CONTEXT_ATTRIBUTE_PTR*' type='^^{cssm_context_attribute}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetKeyAcl'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='SelectionTag' declared_type='CSSM_STRING*' type='^[68c]' const='true'/>
    <arg name='NumberOfAclInfos' declared_type='uint32*' type='^I'/>
    <arg name='AclInfos' declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetKeyOwner'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='Owner' declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetModuleGUIDFromHandle'>
    <arg name='ModuleHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <arg name='ModuleGUID' declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetPrivilege'>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetSubserviceUIDFromHandle'>
    <arg name='ModuleHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <arg name='SubserviceUID' declared_type='CSSM_SUBSERVICE_UID_PTR' type='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_GetTimeValue'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='TimeAlgorithm' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='TimeData' declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_Init'>
    <arg name='Version' declared_type='CSSM_VERSION*' type='^{cssm_version=II}' const='true'/>
    <arg name='Scope' declared_type='CSSM_PRIVILEGE_SCOPE' type='L' type64='I'/>
    <arg name='CallerGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <arg name='PvcPolicy' declared_type='CSSM_PVC_MODE*' type='^I'/>
    <arg name='Reserved' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_Introduce'>
    <arg name='ModuleID' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_CreateRecoveryEnablementContext'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='LocalProfile' declared_type='CSSM_KR_PROFILE*' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}' const='true'/>
    <arg name='RemoteProfile' declared_type='CSSM_KR_PROFILE*' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}' const='true'/>
    <arg name='NewContext' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_CreateRecoveryRegistrationContext'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='NewContext' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_CreateRecoveryRequestContext'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='LocalProfile' declared_type='CSSM_KR_PROFILE*' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}' const='true'/>
    <arg name='NewContext' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_GenerateRecoveryFields'>
    <arg name='KeyRecoveryContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KRSPOptions' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='KRFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <arg name='KRFields' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='NewCCHandle' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_GetPolicyInfo'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='EncryptionProhibited' declared_type='CSSM_KR_POLICY_FLAGS*' type='^I'/>
    <arg name='WorkFactor' declared_type='uint32*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_GetRecoveredObject'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='CacheHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='IndexInResults' declared_type='uint32' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='Flags' declared_type='uint32' type='L' type64='I'/>
    <arg name='RecoveredKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='OtherInfo' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_PassThrough'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='KeyRecoveryContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CryptoContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InputParams' declared_type='void*' type='^v' const='true'/>
    <arg name='OutputParams' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_ProcessRecoveryFields'>
    <arg name='KeyRecoveryContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CryptoContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KRSPOptions' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='KRFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <arg name='KRFields' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NewCryptoContext' declared_type='CSSM_CC_HANDLE*' type='^Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_QueryPolicyInfo'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='AlgorithmID' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Mode' declared_type='CSSM_ENCRYPT_MODE' type='L' type64='I'/>
    <arg name='Class' declared_type='CSSM_CONTEXT_TYPE' type='L' type64='I'/>
    <arg name='PolicyInfoData' declared_type='CSSM_KR_POLICY_INFO_PTR*' type='^^{cssm_kr_policy_info}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_RecoveryRequest'>
    <arg name='RecoveryRequestContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KRInData' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='AccessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='ReferenceHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_RecoveryRequestAbort'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='CacheHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_RecoveryRetrieve'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='ReferenceHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='AccessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='CacheHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <arg name='NumberOfRecoveredKeys' declared_type='uint32*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_RegistrationRequest'>
    <arg name='RecoveryRegistrationContext' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='KRInData' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='AccessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='KRFlags' declared_type='CSSM_KR_POLICY_FLAGS' type='L' type64='I'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='ReferenceHandle' declared_type='CSSM_HANDLE_PTR' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_RegistrationRetrieve'>
    <arg name='KRSPHandle' declared_type='CSSM_KRSP_HANDLE' type='L' type64='I'/>
    <arg name='ReferenceHandle' declared_type='CSSM_HANDLE' type='L' type64='I'/>
    <arg name='AccessCredentials' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='KRProfile' declared_type='CSSM_KR_PROFILE_PTR' type='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_KR_SetEnterpriseRecoveryPolicy'>
    <arg name='RecoveryPolicyFileName' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='OldPassPhrase' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='NewPassPhrase' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ListAttachedModuleManagers'>
    <arg name='NumberOfModuleManagers' declared_type='uint32*' type='^I'/>
    <arg name='ModuleManagerGuids' declared_type='CSSM_GUID_PTR' type='^{cssm_guid=ISS[8C]}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ModuleAttach'>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='Version' declared_type='CSSM_VERSION*' type='^{cssm_version=II}' const='true'/>
    <arg name='MemoryFuncs' declared_type='CSSM_API_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
    <arg name='SubserviceID' declared_type='uint32' type='L' type64='I'/>
    <arg name='SubServiceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
    <arg name='AttachFlags' declared_type='CSSM_ATTACH_FLAGS' type='L' type64='I'/>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <arg name='FunctionTable' declared_type='CSSM_FUNC_NAME_ADDR*' type='^{cssm_func_name_addr=[68c]^?}'/>
    <arg name='NumFunctionTable' declared_type='uint32' type='L' type64='I'/>
    <arg name='Reserved' declared_type='void*' type='^v' const='true'/>
    <arg name='NewModuleHandle' declared_type='CSSM_MODULE_HANDLE_PTR' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ModuleDetach'>
    <arg name='ModuleHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ModuleLoad'>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <arg name='AppNotifyCallback' function_pointer='true' declared_type='CSSM_API_ModuleEventHandler' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_MODULE_EVENT' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </arg>
    <arg name='AppNotifyCallbackCtx' declared_type='void*' type='^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_ModuleUnload'>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='AppNotifyCallback' function_pointer='true' declared_type='CSSM_API_ModuleEventHandler' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_MODULE_EVENT' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </arg>
    <arg name='AppNotifyCallbackCtx' declared_type='void*' type='^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_QueryKeySizeInBits'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='KeySize' declared_type='CSSM_KEY_SIZE_PTR' type='^{cssm_key_size=II}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_QuerySize'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Encrypt' declared_type='CSSM_BOOL' type='l' type64='i'/>
    <arg name='QuerySizeCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='DataBlockSizes' declared_type='CSSM_QUERY_SIZE_DATA_PTR' type='^{cssm_query_size_data=II}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_RetrieveCounter'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='Counter' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_RetrieveUniqueId'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='UniqueID' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SPI_ModuleAttach'>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='Version' declared_type='CSSM_VERSION*' type='^{cssm_version=II}' const='true'/>
    <arg name='SubserviceID' declared_type='uint32' type='L' type64='I'/>
    <arg name='SubServiceType' declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
    <arg name='AttachFlags' declared_type='CSSM_ATTACH_FLAGS' type='L' type64='I'/>
    <arg name='ModuleHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <arg name='CssmGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='ModuleManagerGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='CallerGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='Upcalls' declared_type='CSSM_UPCALLS*' type='^{cssm_upcalls=^?^?^?^?^?^?}' const='true'/>
    <arg name='FuncTbl' declared_type='CSSM_MODULE_FUNCS_PTR*' type='^^{cssm_module_funcs}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SPI_ModuleDetach'>
    <arg name='ModuleHandle' declared_type='CSSM_MODULE_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SPI_ModuleLoad'>
    <arg name='CssmGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='CssmNotifyCallback' function_pointer='true' declared_type='CSSM_SPI_ModuleEventHandler' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_MODULE_EVENT' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </arg>
    <arg name='CssmNotifyCallbackCtx' declared_type='void*' type='^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SPI_ModuleUnload'>
    <arg name='CssmGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='ModuleGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='CssmNotifyCallback' function_pointer='true' declared_type='CSSM_SPI_ModuleEventHandler' type='^?'>
      <arg declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='uint32' type='L' type64='I'/>
      <arg declared_type='CSSM_SERVICE_TYPE' type='L' type64='I'/>
      <arg declared_type='CSSM_MODULE_EVENT' type='L' type64='I'/>
      <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
    </arg>
    <arg name='CssmNotifyCallbackCtx' declared_type='void*' type='^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SetContext'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Context' declared_type='CSSM_CONTEXT*' type='^{cssm_context=III^{cssm_context_attribute}IiIII}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SetPrivilege'>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SignData'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='DigestAlgorithm' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Signature' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SignDataFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Signature' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SignDataInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_SignDataUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_ApplyCrlToDb'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CrlToBeApplied' declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
    <arg name='SignerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='ApplyCrlVerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='ApplyCrlVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertCreateTemplate'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CertFields' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='CertTemplate' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertGetAllTemplateFields'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertTemplate' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='NumberOfFields' declared_type='uint32*' type='^I'/>
    <arg name='CertFields' declared_type='CSSM_FIELD_PTR*' type='^^{cssm_field}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertGroupConstruct'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='DBList' declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
    <arg name='ConstructParams' declared_type='void*' type='^v' const='true'/>
    <arg name='CertGroupFrag' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='CertGroup' declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertGroupPrune'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='DBList' declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
    <arg name='OrderedCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='PrunedCertGroup' declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertGroupToTupleGroup'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='TupleGroup' declared_type='CSSM_TUPLEGROUP_PTR*' type='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertGroupVerify'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CertGroupToBeVerified' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='VerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='VerifyContextResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertReclaimAbort'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='KeyCacheHandle' declared_type='CSSM_LONG_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertReclaimKey'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='CertIndex' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyCacheHandle' declared_type='CSSM_LONG_HANDLE' type='Q'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertRemoveFromCrlTemplate'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='OldCrlTemplate' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertGroupToBeRemoved' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='RevokerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='RevokerVerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='RevokerVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <arg name='NewCrlTemplate' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertRevoke'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='OldCrlTemplate' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CertGroupToBeRevoked' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='RevokerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='RevokerVerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='RevokerVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <arg name='Reason' declared_type='CSSM_TP_CERTCHANGE_REASON' type='L' type64='I'/>
    <arg name='NewCrlTemplate' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CertSign'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CertTemplateToBeSigned' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='SignerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='SignerVerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='SignerVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <arg name='SignedCert' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_ConfirmCredResult'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='ReferenceIdentifier' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CallerAuthCredentials' declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
    <arg name='Responses' declared_type='CSSM_TP_CONFIRM_RESPONSE*' type='^{cssm_tp_confirm_response=I^I}' const='true'/>
    <arg name='PreferredAuthority' declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CrlCreateTemplate'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='NumberOfFields' declared_type='uint32' type='L' type64='I'/>
    <arg name='CrlFields' declared_type='CSSM_FIELD*' type='^{cssm_field={cssm_data=I*}{cssm_data=I*}}' const='true'/>
    <arg name='NewCrlTemplate' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CrlSign'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='CrlToBeSigned' declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
    <arg name='SignerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='SignerVerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='SignerVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <arg name='SignedCrl' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_CrlVerify'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='CrlToBeVerified' declared_type='CSSM_ENCODED_CRL*' type='^{cssm_encoded_crl=II{cssm_data=I*}}' const='true'/>
    <arg name='SignerCertGroup' declared_type='CSSM_CERTGROUP*' type='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}' const='true'/>
    <arg name='VerifyContext' declared_type='CSSM_TP_VERIFY_CONTEXT*' type='^{cssm_tp_verify_context=I{cssm_data=I*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}' const='true'/>
    <arg name='RevokerVerifyResult' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_FormRequest'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='PreferredAuthority' declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
    <arg name='FormType' declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
    <arg name='BlankForm' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_FormSubmit'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='FormType' declared_type='CSSM_TP_FORM_TYPE' type='L' type64='I'/>
    <arg name='Form' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='ClearanceAuthority' declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
    <arg name='RepresentedAuthority' declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
    <arg name='Credentials' declared_type='CSSM_ACCESS_CREDENTIALS_PTR' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_PassThrough'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DBList' declared_type='CSSM_DL_DB_LIST*' type='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}' const='true'/>
    <arg name='PassThroughId' declared_type='uint32' type='L' type64='I'/>
    <arg name='InputParams' declared_type='void*' type='^v' const='true'/>
    <arg name='OutputParams' declared_type='void**' type='^^v'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_ReceiveConfirmation'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='ReferenceIdentifier' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='Responses' declared_type='CSSM_TP_CONFIRM_RESPONSE_PTR*' type='^^{cssm_tp_confirm_response}'/>
    <arg name='ElapsedTime' declared_type='sint32*' type='^i'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_RetrieveCredResult'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='ReferenceIdentifier' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CallerAuthCredentials' declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='ConfirmationRequired' declared_type='CSSM_BOOL*' type='^i'/>
    <arg name='RetrieveOutput' declared_type='CSSM_TP_RESULT_SET_PTR*' type='^^{cssm_tp_result_set}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_SubmitCredRequest'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='PreferredAuthority' declared_type='CSSM_TP_AUTHORITY_ID*' type='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}' const='true'/>
    <arg name='RequestType' declared_type='CSSM_TP_AUTHORITY_REQUEST_TYPE' type='L' type64='I'/>
    <arg name='RequestInput' declared_type='CSSM_TP_REQUEST_SET*' type='^{cssm_tp_request_set=I^v}' const='true'/>
    <arg name='CallerAuthContext' declared_type='CSSM_TP_CALLERAUTH_CONTEXT*' type='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}' const='true'/>
    <arg name='EstimatedTime' declared_type='sint32*' type='^i'/>
    <arg name='ReferenceIdentifier' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_TP_TupleGroupToCertGroup'>
    <arg name='TPHandle' declared_type='CSSM_TP_HANDLE' type='L' type64='I'/>
    <arg name='CLHandle' declared_type='CSSM_CL_HANDLE' type='L' type64='I'/>
    <arg name='TupleGroup' declared_type='CSSM_TUPLEGROUP*' type='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}' const='true'/>
    <arg name='CertTemplates' declared_type='CSSM_CERTGROUP_PTR*' type='^^{cssm_certgroup}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_Terminate'>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_Unintroduce'>
    <arg name='ModuleID' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_UnwrapKey'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PublicKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='WrappedKey' declared_type='CSSM_WRAP_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='KeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='UnwrappedKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='DescriptiveData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_UnwrapKeyP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='PublicKey' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='WrappedKey' declared_type='CSSM_WRAP_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='KeyUsage' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='KeyLabel' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='CredAndAclEntry' declared_type='CSSM_RESOURCE_CONTROL_CONTEXT*' type='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}^?^v}}' const='true'/>
    <arg name='UnwrappedKey' declared_type='CSSM_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='DescriptiveData' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_UpdateContextAttributes'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='NumberOfAttributes' declared_type='uint32' type='L' type64='I'/>
    <arg name='ContextAttributes' declared_type='CSSM_CONTEXT_ATTRIBUTE*' type='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyData'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='DigestAlgorithm' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='Signature' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyDataFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Signature' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyDataInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyDataUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyDevice'>
    <arg name='CSPHandle' declared_type='CSSM_CSP_HANDLE' type='L' type64='I'/>
    <arg name='DeviceCert' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyMac'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='Mac' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyMacFinal'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='Mac' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyMacInit'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_VerifyMacUpdate'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='DataBufs' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='DataBufCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_WrapKey'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='DescriptiveData' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='WrappedKey' declared_type='CSSM_WRAP_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='CSSM_WrapKeyP'>
    <arg name='CCHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='AccessCred' declared_type='CSSM_ACCESS_CREDENTIALS*' type='^{cssm_access_credentials=[68c]{cssm_base_certs=II{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}' const='true'/>
    <arg name='Key' declared_type='CSSM_KEY*' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}' const='true'/>
    <arg name='DescriptiveData' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='WrappedKey' declared_type='CSSM_WRAP_KEY_PTR' type='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=I*}}'/>
    <arg name='Privilege' declared_type='CSSM_PRIVILEGE' type='Q'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='EISL_CheckAddressWithinModule'>
    <arg name='Verification' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <arg name='Address' function_pointer='true' declared_type='ISL_FUNCTION_PTR' type='^?'>
      <retval declared_type='void' type='v'/>
    </arg>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_CheckDataAddressWithinModule'>
    <arg name='Verification' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <arg name='Address' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_ContinueVerification'>
    <arg name='Module' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <arg name='WorkFactor' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='uint32' type='L' type64='I'/>
  </function>
  <function name='EISL_CopyCertificateChain'>
    <arg name='Verification' declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
    <arg name='Certs' declared_type='ISL_VERIFIED_CERTIFICATE_PTR*' type='^^v'/>
    <arg name='MaxCertificates' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='uint32' type='L' type64='I'/>
  </function>
  <function name='EISL_CreateCertificateAttributeEnumerator'>
    <arg name='Cert' declared_type='ISL_VERIFIED_CERTIFICATE_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateCertificateChain'>
    <arg name='RootIssuer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Credential' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateCertificateChainWithCertificate'>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Credential' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateCertificateChainWithCredentialData'>
    <arg name='RootIssuer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v' const='true'/>
  </function>
  <function name='EISL_CreateCertificateChainWithCredentialDataAndCertificate'>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateManifestAttributeEnumerator'>
    <arg name='Context' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateManifestSectionAttributeEnumerator'>
    <arg name='Section' declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateManifestSectionEnumerator'>
    <arg name='Root' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateSignatureAttributeEnumerator'>
    <arg name='Root' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateSignerInfoAttributeEnumerator'>
    <arg name='Context' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <retval declared_type='ISL_ITERATOR_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateVerfiedSignatureRoot'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateVerfiedSignatureRootWithCertificate'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Cert' declared_type='ISL_VERIFIED_CERTIFICATE_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateVerifiedSignatureRootWithCredentialData'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
  </function>
  <function name='EISL_CreateVerifiedSignatureRootWithCredentialDataAndCertificate'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Cert' declared_type='ISL_VERIFIED_CERTIFICATE_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
  </function>
  <function name='EISL_DuplicateVerifiedModulePtr'>
    <arg name='Module' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_FindCertificateAttribute'>
    <arg name='Cert' declared_type='ISL_VERIFIED_CERTIFICATE_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_FindManifestAttribute'>
    <arg name='Context' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_FindManifestSection'>
    <arg name='Root' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
  </function>
  <function name='EISL_FindManifestSectionAttribute'>
    <arg name='Section' declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_FindSignatureAttribute'>
    <arg name='Root' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_FindSignerInfoAttribute'>
    <arg name='Context' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_GetCertificateChain'>
    <arg name='Module' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
  </function>
  <function name='EISL_GetLibHandle'>
    <arg name='Verification' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <retval declared_type='void*' type='^v'/>
  </function>
  <function name='EISL_GetManifestSignatureRoot'>
    <arg name='Section' declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
  </function>
  <function name='EISL_GetModuleManifestSection'>
    <arg name='Module' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <retval declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
  </function>
  <function name='EISL_GetNextAttribute'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_GetNextCertificateAttribute'>
    <arg name='CertIterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_GetNextManifestSection'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
  </function>
  <function name='EISL_GetNextManifestSectionAttribute'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_GetNextSignatureAttribute'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <arg name='Value' declared_type='ISL_CONST_DATA_PTR' type='^{isl_const_data=I*}'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_LocateProcedureAddress'>
    <arg name='Module' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval function_pointer='true' declared_type='ISL_FUNCTION_PTR' type='^?'>
      <retval declared_type='void' type='v'/>
    </retval>
  </function>
  <function name='EISL_RecycleAttributeEnumerator'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleCertificateAttributeEnumerator'>
    <arg name='CertIterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleManifestSectionAttributeEnumerator'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleManifestSectionEnumerator'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleSignatureAttributeEnumerator'>
    <arg name='Iterator' declared_type='ISL_ITERATOR_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleVerifiedCertificateChain'>
    <arg name='Chain' declared_type='ISL_VERIFIED_CERTIFICATE_CHAIN_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleVerifiedModuleCredentials'>
    <arg name='Verification' declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_RecycleVerifiedSignatureRoot'>
    <arg name='Root' declared_type='ISL_VERIFIED_SIGNATURE_ROOT_PTR' type='^v'/>
    <retval declared_type='ISL_STATUS' type='i'/>
  </function>
  <function name='EISL_SelfCheck'>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyAndLoadModule'>
    <arg name='Section' declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyAndLoadModuleAndCredentialData'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyAndLoadModuleAndCredentialDataWithCertificate'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyAndLoadModuleAndCredentials'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyAndLoadModuleAndCredentialsWithCertificate'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyLoadedModule'>
    <arg name='Section' declared_type='ISL_MANIFEST_SECTION_PTR' type='^v'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyLoadedModuleAndCredentialData'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyLoadedModuleAndCredentialDataWithCertificate'>
    <arg name='CredentialsImage' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='ModuleSearchPath' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyLoadedModuleAndCredentials'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <arg name='PublicKey' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='EISL_VerifyLoadedModuleAndCredentialsWithCertificate'>
    <arg name='Credentials' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Name' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Signer' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <arg name='Certificate' declared_type='ISL_CONST_DATA' type='{isl_const_data=I*}' const='true'/>
    <retval declared_type='ISL_VERIFIED_MODULE_PTR' type='^v'/>
  </function>
  <function name='MDS_Initialize'>
    <arg name='pCallerGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='pMemoryFunctions' declared_type='CSSM_MEMORY_FUNCS*' type='^{cssm_memory_funcs=^?^?^?^?^v}' const='true'/>
    <arg name='pDlFunctions' declared_type='MDS_FUNCS_PTR' type='^{mds_funcs=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
    <arg name='hMds' declared_type='MDS_HANDLE*' type='^I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='MDS_Install'>
    <arg name='MdsHandle' declared_type='MDS_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='MDS_Terminate'>
    <arg name='MdsHandle' declared_type='MDS_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='MDS_Uninstall'>
    <arg name='MdsHandle' declared_type='MDS_HANDLE' type='L' type64='I'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='ModuleManagerAuthenticate'>
    <arg name='KeyHierarchy' declared_type='CSSM_KEY_HIERARCHY' type='L' type64='I'/>
    <arg name='CssmGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='AppGuid' declared_type='CSSM_GUID*' type='^{cssm_guid=ISS[8C]}' const='true'/>
    <arg name='FunctionTable' declared_type='CSSM_MANAGER_REGISTRATION_INFO_PTR' type='^{cssm_manager_registration_info=^?^?^?^?^?^?}'/>
    <retval declared_type='CSSM_RETURN' type='l' type64='i'/>
  </function>
  <function name='SSLAddDistinguishedName'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='derDN' declared_type='void*' type='^v' const='true'/>
    <arg name='derDNLen' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLClose'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLDisposeContext'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetAllowsAnyRoot'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='anyRoot' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetAllowsExpiredCerts'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='allowsExpired' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetAllowsExpiredRoots'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='allowsExpired' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetBufferedReadSize'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='bufSize' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetClientCertificateState'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='clientState' declared_type='SSLClientCertificateState*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetConnection'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='connection' declared_type='SSLConnectionRef*' type='^^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetDiffieHellmanParams'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='dhParams' declared_type='void**' type='^^v' const='true'/>
    <arg name='dhParamsLen' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetEnableCertVerify'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='enableVerify' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetEnabledCiphers'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='ciphers' declared_type='SSLCipherSuite*' type='^I'/>
    <arg name='numCiphers' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetNegotiatedCipher'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='cipherSuite' declared_type='SSLCipherSuite*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetNegotiatedProtocolVersion'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='protocol' declared_type='SSLProtocol*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetNumberEnabledCiphers'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='numCiphers' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetNumberSupportedCiphers'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='numCiphers' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetPeerCertificates'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='certs' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetPeerDomainName'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='peerName' declared_type='char*' type='*'/>
    <arg name='peerNameLen' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetPeerDomainNameLength'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='peerNameLen' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetPeerID'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='peerID' declared_type='void**' type='^^v' const='true'/>
    <arg name='peerIDLen' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetProtocolVersion'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='protocol' declared_type='SSLProtocol*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetProtocolVersionEnabled'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='protocol' declared_type='SSLProtocol' type='i'/>
    <arg name='enable' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetRsaBlinding'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='blinding' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetSessionState'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='state' declared_type='SSLSessionState*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetSupportedCiphers'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='ciphers' declared_type='SSLCipherSuite*' type='^I'/>
    <arg name='numCiphers' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLGetTrustedRoots'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='trustedRoots' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLHandshake'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLNewContext'>
    <arg name='isServer' declared_type='Boolean' type='B'/>
    <arg name='contextPtr' declared_type='SSLContextRef*' type='^^{SSLContext}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLRead'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='data' declared_type='void*' type='^v'/>
    <arg name='dataLength' declared_type='size_t' type='L' type64='Q'/>
    <arg name='processed' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetAllowsAnyRoot'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='anyRoot' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetAllowsExpiredCerts'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='allowsExpired' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetAllowsExpiredRoots'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='allowsExpired' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetCertificate'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='certRefs' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetClientSideAuthenticate'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='auth' declared_type='SSLAuthenticate' type='i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetConnection'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='connection' declared_type='SSLConnectionRef' type='@'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetDiffieHellmanParams'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='dhParams' declared_type='void*' type='^v' const='true'/>
    <arg name='dhParamsLen' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetEnableCertVerify'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='enableVerify' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetEnabledCiphers'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='ciphers' declared_type='SSLCipherSuite*' type='^I' const='true'/>
    <arg name='numCiphers' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetEncryptionCertificate'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='certRefs' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetIOFuncs'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='read' function_pointer='true' declared_type='SSLReadFunc' type='^?'>
      <arg declared_type='SSLConnectionRef' type='@'/>
      <arg declared_type='void*' type='^v'/>
      <arg declared_type='size_t*' type='^I' type64='^Q'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </arg>
    <arg name='write' function_pointer='true' declared_type='SSLWriteFunc' type='^?'>
      <arg declared_type='SSLConnectionRef' type='@'/>
      <arg declared_type='void*' type='^v' const='true'/>
      <arg declared_type='size_t*' type='^I' type64='^Q'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </arg>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetPeerDomainName'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='peerName' declared_type='char*' type='*' const='true'/>
    <arg name='peerNameLen' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetPeerID'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='peerID' declared_type='void*' type='^v' const='true'/>
    <arg name='peerIDLen' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetProtocolVersion'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='version' declared_type='SSLProtocol' type='i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetProtocolVersionEnabled'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='protocol' declared_type='SSLProtocol' type='i'/>
    <arg name='enable' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetRsaBlinding'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='blinding' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLSetTrustedRoots'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='trustedRoots' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <arg name='replaceExisting' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SSLWrite'>
    <arg name='context' declared_type='SSLContextRef' type='^{SSLContext=}'/>
    <arg name='data' declared_type='void*' type='^v' const='true'/>
    <arg name='dataLength' declared_type='size_t' type='L' type64='Q'/>
    <arg name='processed' declared_type='size_t*' type='^I' type64='^Q'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLCopySimpleContents'>
    <arg name='acl' declared_type='SecACLRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='applicationList' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <arg name='description' declared_type='CFStringRef*' type='^^{__CFString}'/>
    <arg name='promptSelector' declared_type='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR*' type='^{cssm_acl_keychain_prompt_selector=SS}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLCreateFromSimpleContents'>
    <arg name='access' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='applicationList' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <arg name='description' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='promptSelector' declared_type='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR*' type='^{cssm_acl_keychain_prompt_selector=SS}' const='true'/>
    <arg name='newAcl' declared_type='SecACLRef*' type='^^{OpaqueSecTrustRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLGetAuthorizations'>
    <arg name='acl' declared_type='SecACLRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='tags' declared_type='CSSM_ACL_AUTHORIZATION_TAG*' type='^i'/>
    <arg name='tagCount' declared_type='uint32*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecACLRemove'>
    <arg name='aclRef' declared_type='SecACLRef' type='^{OpaqueSecTrustRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLSetAuthorizations'>
    <arg name='acl' declared_type='SecACLRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='tags' declared_type='CSSM_ACL_AUTHORIZATION_TAG*' type='^i'/>
    <arg name='tagCount' declared_type='uint32' type='L' type64='I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecACLSetSimpleContents'>
    <arg name='acl' declared_type='SecACLRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='applicationList' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <arg name='description' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='promptSelector' declared_type='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR*' type='^{cssm_acl_keychain_prompt_selector=SS}' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessCopyACLList'>
    <arg name='accessRef' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='aclList' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessCopySelectedACLList'>
    <arg name='accessRef' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='action' declared_type='CSSM_ACL_AUTHORIZATION_TAG' type='l' type64='i'/>
    <arg name='aclList' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessCreate'>
    <arg name='descriptor' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='trustedlist' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <arg name='accessRef' declared_type='SecAccessRef*' type='^^{OpaqueSecAccessRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessCreateFromOwnerAndACL'>
    <arg name='owner' declared_type='CSSM_ACL_OWNER_PROTOTYPE*' type='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}' const='true'/>
    <arg name='aclCount' declared_type='uint32' type='L' type64='I'/>
    <arg name='acls' declared_type='CSSM_ACL_ENTRY_INFO*' type='^{cssm_acl_entry_info={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=I*}{cssm_data=I*}}[68c]}I}' const='true'/>
    <arg name='accessRef' declared_type='SecAccessRef*' type='^^{OpaqueSecAccessRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessGetOwnerAndACL'>
    <arg name='accessRef' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='owner' declared_type='CSSM_ACL_OWNER_PROTOTYPE_PTR*' type='^^{cssm_acl_owner_prototype}'/>
    <arg name='aclCount' declared_type='uint32*' type='^I'/>
    <arg name='acls' declared_type='CSSM_ACL_ENTRY_INFO_PTR*' type='^^{cssm_acl_entry_info}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecAccessGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecCertificateAddToKeychain'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateCreateFromData'>
    <arg name='data' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='type' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <arg name='encoding' declared_type='CSSM_CERT_ENCODING' type='L' type64='I'/>
    <arg name='certificate' declared_type='SecCertificateRef*' type='^^{OpaqueSecCertificateRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetCLHandle'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='clHandle' declared_type='CSSM_CL_HANDLE*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetData'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='data' declared_type='CSSM_DATA_PTR' type='^{cssm_data=I*}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetIssuer'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='issuer' declared_type='CSSM_X509_NAME*' type='^{cssm_x509_name=I^{cssm_x509_rdn}}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetSubject'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='subject' declared_type='CSSM_X509_NAME*' type='^{cssm_x509_name=I^{cssm_x509_rdn}}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetType'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='certificateType' declared_type='CSSM_CERT_TYPE*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecCertificateGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecIdentityCopyCertificate'>
    <arg name='identityRef' declared_type='SecIdentityRef' type='^{OpaqueSecIdentityRef=}'/>
    <arg name='certificateRef' declared_type='SecCertificateRef*' type='^^{OpaqueSecCertificateRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecIdentityCopyPrivateKey'>
    <arg name='identityRef' declared_type='SecIdentityRef' type='^{OpaqueSecIdentityRef=}'/>
    <arg name='privateKeyRef' declared_type='SecKeyRef*' type='^^{OpaqueSecKeyRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecIdentityGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecIdentitySearchCopyNext'>
    <arg name='searchRef' declared_type='SecIdentitySearchRef' type='^{OpaqueSecIdentitySearchRef=}'/>
    <arg name='identity' declared_type='SecIdentityRef*' type='^^{OpaqueSecIdentityRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecIdentitySearchCreate'>
    <arg name='keychainOrArray' declared_type='CFTypeRef' type='@'/>
    <arg name='keyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <arg name='searchRef' declared_type='SecIdentitySearchRef*' type='^^{OpaqueSecIdentitySearchRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecIdentitySearchGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecKeyCreatePair'>
    <arg name='keychainRef' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='algorithm' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <arg name='keySizeInBits' declared_type='uint32' type='L' type64='I'/>
    <arg name='contextHandle' declared_type='CSSM_CC_HANDLE' type='Q'/>
    <arg name='publicKeyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <arg name='publicKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='privateKeyUsage' declared_type='CSSM_KEYUSE' type='L' type64='I'/>
    <arg name='privateKeyAttr' declared_type='uint32' type='L' type64='I'/>
    <arg name='initialAccess' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='publicKey' declared_type='SecKeyRef*' type='^^{OpaqueSecKeyRef}'/>
    <arg name='privateKey' declared_type='SecKeyRef*' type='^^{OpaqueSecKeyRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeyGetCSSMKey'>
    <arg name='key' declared_type='SecKeyRef' type='^{OpaqueSecKeyRef=}'/>
    <arg name='cssmKey' declared_type='CSSM_KEY**' type='^^{cssm_key}' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeyGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecKeychainAddCallback'>
    <arg name='callbackFunction' function_pointer='true' declared_type='SecKeychainCallback' type='^?'>
      <arg declared_type='SecKeychainEvent' type='L' type64='I'/>
      <arg declared_type='SecKeychainCallbackInfo*' type='^{SecKeychainCallbackInfo=I^{OpaqueSecKeychainItemRef}^{OpaqueSecKeychainRef}i}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </arg>
    <arg name='eventMask' declared_type='SecKeychainEventMask' type='L' type64='I'/>
    <arg name='userContext' declared_type='void*' type='^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainAddGenericPassword'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='serviceNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='serviceName' declared_type='char*' type='*' const='true'/>
    <arg name='accountNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='accountName' declared_type='char*' type='*' const='true'/>
    <arg name='passwordLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='passwordData' declared_type='void*' type='^v' const='true'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainAddInternetPassword'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='serverNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='serverName' declared_type='char*' type='*' const='true'/>
    <arg name='securityDomainLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='securityDomain' declared_type='char*' type='*' const='true'/>
    <arg name='accountNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='accountName' declared_type='char*' type='*' const='true'/>
    <arg name='pathLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='path' declared_type='char*' type='*' const='true'/>
    <arg name='port' declared_type='UInt16' type='S'/>
    <arg name='protocol' declared_type='SecProtocolType' type='L' type64='I'/>
    <arg name='authenticationType' declared_type='SecAuthenticationType' type='L' type64='I'/>
    <arg name='passwordLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='passwordData' declared_type='void*' type='^v' const='true'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainAttributeInfoForItemID'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='itemID' declared_type='UInt32' type='L' type64='I'/>
    <arg name='info' declared_type='SecKeychainAttributeInfo**' type='^^{SecKeychainAttributeInfo}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopyAccess'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='access' declared_type='SecAccessRef*' type='^^{OpaqueSecAccessRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopyDefault'>
    <arg name='keychain' declared_type='SecKeychainRef*' type='^^{OpaqueSecKeychainRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopyDomainDefault'>
    <arg name='domain' declared_type='SecPreferencesDomain' type='i'/>
    <arg name='keychain' declared_type='SecKeychainRef*' type='^^{OpaqueSecKeychainRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopyDomainSearchList'>
    <arg name='domain' declared_type='SecPreferencesDomain' type='i'/>
    <arg name='searchList' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopySearchList'>
    <arg name='searchList' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCopySettings'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='outSettings' declared_type='SecKeychainSettings*' type='^{SecKeychainSettings=IBBI}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainCreate'>
    <arg name='pathName' declared_type='char*' type='*' const='true'/>
    <arg name='passwordLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='password' declared_type='void*' type='^v' const='true'/>
    <arg name='promptUser' declared_type='Boolean' type='B'/>
    <arg name='initialAccess' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='keychain' declared_type='SecKeychainRef*' type='^^{OpaqueSecKeychainRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainDelete'>
    <arg name='keychainOrArray' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainFindGenericPassword'>
    <arg name='keychainOrArray' declared_type='CFTypeRef' type='@'/>
    <arg name='serviceNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='serviceName' declared_type='char*' type='*' const='true'/>
    <arg name='accountNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='accountName' declared_type='char*' type='*' const='true'/>
    <arg name='passwordLength' declared_type='UInt32*' type='^I'/>
    <arg name='passwordData' declared_type='void**' type='^^v'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainFindInternetPassword'>
    <arg name='keychainOrArray' declared_type='CFTypeRef' type='@'/>
    <arg name='serverNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='serverName' declared_type='char*' type='*' const='true'/>
    <arg name='securityDomainLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='securityDomain' declared_type='char*' type='*' const='true'/>
    <arg name='accountNameLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='accountName' declared_type='char*' type='*' const='true'/>
    <arg name='pathLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='path' declared_type='char*' type='*' const='true'/>
    <arg name='port' declared_type='UInt16' type='S'/>
    <arg name='protocol' declared_type='SecProtocolType' type='L' type64='I'/>
    <arg name='authenticationType' declared_type='SecAuthenticationType' type='L' type64='I'/>
    <arg name='passwordLength' declared_type='UInt32*' type='^I'/>
    <arg name='passwordData' declared_type='void**' type='^^v'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainFreeAttributeInfo'>
    <arg name='info' declared_type='SecKeychainAttributeInfo*' type='^{SecKeychainAttributeInfo=I^I^I}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetCSPHandle'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='cspHandle' declared_type='CSSM_CSP_HANDLE*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetDLDBHandle'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='dldbHandle' declared_type='CSSM_DL_DB_HANDLE*' type='^{cssm_dl_db_handle=II}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetPath'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='ioPathLength' declared_type='UInt32*' type='^I'/>
    <arg name='pathName' declared_type='char*' type='*'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetPreferenceDomain'>
    <arg name='domain' declared_type='SecPreferencesDomain*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetStatus'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='keychainStatus' declared_type='SecKeychainStatus*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecKeychainGetUserInteractionAllowed'>
    <arg name='state' declared_type='Boolean*' type='^B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainGetVersion'>
    <arg name='returnVers' declared_type='UInt32*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCopyAccess'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='access' declared_type='SecAccessRef*' type='^^{OpaqueSecAccessRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCopyAttributesAndData'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='info' declared_type='SecKeychainAttributeInfo*' type='^{SecKeychainAttributeInfo=I^I^I}'/>
    <arg name='itemClass' declared_type='SecItemClass*' type='^I'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList**' type='^^{SecKeychainAttributeList}'/>
    <arg name='length' declared_type='UInt32*' type='^I'/>
    <arg name='outData' declared_type='void**' type='^^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCopyContent'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='itemClass' declared_type='SecItemClass*' type='^I'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
    <arg name='length' declared_type='UInt32*' type='^I'/>
    <arg name='outData' declared_type='void**' type='^^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCopyKeychain'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='keychainRef' declared_type='SecKeychainRef*' type='^^{OpaqueSecKeychainRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCreateCopy'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='destKeychainRef' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='initialAccess' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='itemCopy' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemCreateFromContent'>
    <arg name='itemClass' declared_type='SecItemClass' type='L' type64='I'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
    <arg name='length' declared_type='UInt32' type='L' type64='I'/>
    <arg name='data' declared_type='void*' type='^v' const='true'/>
    <arg name='keychainRef' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='initialAccess' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemDelete'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemExport'>
    <arg name='keychainItemOrArray' declared_type='CFTypeRef' type='@'/>
    <arg name='outputFormat' declared_type='SecExternalFormat' type='I'/>
    <arg name='flags' declared_type='SecItemImportExportFlags' type='I'/>
    <arg name='keyParams' declared_type='SecKeyImportExportParameters*' type='^{_SecKeyImportExportParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}II}' const='true'/>
    <arg name='exportedData' declared_type='CFDataRef*' type='^^{__CFData}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemFreeAttributesAndData'>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
    <arg name='data' declared_type='void*' type='^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemFreeContent'>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
    <arg name='data' declared_type='void*' type='^v'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemGetDLDBHandle'>
    <arg name='keyItemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='dldbHandle' declared_type='CSSM_DL_DB_HANDLE*' type='^{cssm_dl_db_handle=II}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecKeychainItemGetUniqueRecordID'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='uniqueRecordID' declared_type='CSSM_DB_UNIQUE_RECORD**' type='^^{cssm_db_unique_record}' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemImport'>
    <arg name='importedData' declared_type='CFDataRef' type='^{__CFData=}'/>
    <arg name='fileNameOrExtension' declared_type='CFStringRef' type='^{__CFString=}'/>
    <arg name='inputFormat' declared_type='SecExternalFormat*' type='^I'/>
    <arg name='itemType' declared_type='SecExternalItemType*' type='^I'/>
    <arg name='flags' declared_type='SecItemImportExportFlags' type='I'/>
    <arg name='keyParams' declared_type='SecKeyImportExportParameters*' type='^{_SecKeyImportExportParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}II}' const='true'/>
    <arg name='importKeychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='outItems' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemModifyAttributesAndData'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}' const='true'/>
    <arg name='length' declared_type='UInt32' type='L' type64='I'/>
    <arg name='data' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemModifyContent'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}' const='true'/>
    <arg name='length' declared_type='UInt32' type='L' type64='I'/>
    <arg name='data' declared_type='void*' type='^v' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainItemSetAccess'>
    <arg name='itemRef' declared_type='SecKeychainItemRef' type='^{OpaqueSecKeychainItemRef=}'/>
    <arg name='access' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainLock'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainLockAll'>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainOpen'>
    <arg name='pathName' declared_type='char*' type='*' const='true'/>
    <arg name='keychain' declared_type='SecKeychainRef*' type='^^{OpaqueSecKeychainRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainRemoveCallback'>
    <arg name='callbackFunction' function_pointer='true' declared_type='SecKeychainCallback' type='^?'>
      <arg declared_type='SecKeychainEvent' type='L' type64='I'/>
      <arg declared_type='SecKeychainCallbackInfo*' type='^{SecKeychainCallbackInfo=I^{OpaqueSecKeychainItemRef}^{OpaqueSecKeychainRef}i}'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='OSStatus' type='l' type64='i'/>
    </arg>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSearchCopyNext'>
    <arg name='searchRef' declared_type='SecKeychainSearchRef' type='^{OpaqueSecKeychainSearchRef=}'/>
    <arg name='itemRef' declared_type='SecKeychainItemRef*' type='^^{OpaqueSecKeychainItemRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSearchCreateFromAttributes'>
    <arg name='keychainOrArray' declared_type='CFTypeRef' type='@'/>
    <arg name='itemClass' declared_type='SecItemClass' type='L' type64='I'/>
    <arg name='attrList' declared_type='SecKeychainAttributeList*' type='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}' const='true'/>
    <arg name='searchRef' declared_type='SecKeychainSearchRef*' type='^^{OpaqueSecKeychainSearchRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSearchGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecKeychainSetAccess'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='access' declared_type='SecAccessRef' type='^{OpaqueSecAccessRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetDefault'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetDomainDefault'>
    <arg name='domain' declared_type='SecPreferencesDomain' type='i'/>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetDomainSearchList'>
    <arg name='domain' declared_type='SecPreferencesDomain' type='i'/>
    <arg name='searchList' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetPreferenceDomain'>
    <arg name='domain' declared_type='SecPreferencesDomain' type='i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetSearchList'>
    <arg name='searchList' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetSettings'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='newSettings' declared_type='SecKeychainSettings*' type='^{SecKeychainSettings=IBBI}' const='true'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainSetUserInteractionAllowed'>
    <arg name='state' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecKeychainUnlock'>
    <arg name='keychain' declared_type='SecKeychainRef' type='^{OpaqueSecKeychainRef=}'/>
    <arg name='passwordLength' declared_type='UInt32' type='L' type64='I'/>
    <arg name='password' declared_type='void*' type='^v' const='true'/>
    <arg name='usePassword' declared_type='Boolean' type='B'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicyGetOID'>
    <arg name='policyRef' declared_type='SecPolicyRef' type='^{OpaqueSecPolicyRef=}'/>
    <arg name='oid' declared_type='CSSM_OID*' type='^{cssm_data=I*}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicyGetTPHandle'>
    <arg name='policyRef' declared_type='SecPolicyRef' type='^{OpaqueSecPolicyRef=}'/>
    <arg name='tpHandle' declared_type='CSSM_TP_HANDLE*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicyGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecPolicyGetValue'>
    <arg name='policyRef' declared_type='SecPolicyRef' type='^{OpaqueSecPolicyRef=}'/>
    <arg name='value' declared_type='CSSM_DATA*' type='^{cssm_data=I*}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicySearchCopyNext'>
    <arg name='searchRef' declared_type='SecPolicySearchRef' type='^{OpaquePolicySearchRef=}'/>
    <arg name='policyRef' declared_type='SecPolicyRef*' type='^^{OpaqueSecPolicyRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicySearchCreate'>
    <arg name='certType' declared_type='CSSM_CERT_TYPE' type='L' type64='I'/>
    <arg name='policyOID' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='value' declared_type='CSSM_DATA*' type='^{cssm_data=I*}' const='true'/>
    <arg name='searchRef' declared_type='SecPolicySearchRef*' type='^^{OpaquePolicySearchRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecPolicySearchGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecTrustCopyAnchorCertificates'>
    <arg name='anchors' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustCreateWithCertificates'>
    <arg name='certificates' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <arg name='policies' declared_type='CFTypeRef' type='@'/>
    <arg name='trustRef' declared_type='SecTrustRef*' type='^^{OpaqueSecTrustRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustEvaluate'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='result' declared_type='SecTrustResultType*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustGetCSSMAnchorCertificates'>
    <arg name='cssmAnchors' declared_type='CSSM_DATA**' type='^^{cssm_data}' const='true'/>
    <arg name='cssmAnchorCount' declared_type='uint32*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustGetCssmResult'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='result' declared_type='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR*' type='^^{cssm_tp_verify_context_result}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustGetResult'>
    <arg name='trustRef' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='result' declared_type='SecTrustResultType*' type='^i'/>
    <arg name='certChain' declared_type='CFArrayRef*' type='^^{__CFArray}'/>
    <arg name='statusChain' declared_type='CSSM_TP_APPLE_EVIDENCE_INFO**' type='^^{?}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustGetTPHandle'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='handle' declared_type='CSSM_TP_HANDLE*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecTrustGetUserTrust'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='policy' declared_type='SecPolicyRef' type='^{OpaqueSecPolicyRef=}'/>
    <arg name='trustSetting' declared_type='SecTrustUserSetting*' type='^i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustSetAnchorCertificates'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='anchorCertificates' declared_type='CFArrayRef' type='^{__CFArray=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustSetKeychains'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='keychainOrArray' declared_type='CFTypeRef' type='@'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustSetParameters'>
    <arg name='trustRef' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='action' declared_type='CSSM_TP_ACTION' type='L' type64='I'/>
    <arg name='actionData' declared_type='CFDataRef' type='^{__CFData=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustSetUserTrust'>
    <arg name='certificate' declared_type='SecCertificateRef' type='^{OpaqueSecCertificateRef=}'/>
    <arg name='policy' declared_type='SecPolicyRef' type='^{OpaqueSecPolicyRef=}'/>
    <arg name='trustSetting' declared_type='SecTrustUserSetting' type='i'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustSetVerifyDate'>
    <arg name='trust' declared_type='SecTrustRef' type='^{OpaqueSecTrustRef=}'/>
    <arg name='verifyDate' declared_type='CFDateRef' type='^{__CFDate=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustedApplicationCopyData'>
    <arg name='appRef' declared_type='SecTrustedApplicationRef' type='^{OpaqueSecTrustedApplicationRef=}'/>
    <arg name='data' declared_type='CFDataRef*' type='^^{__CFData}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustedApplicationCreateFromPath'>
    <arg name='path' declared_type='char*' type='*' const='true'/>
    <arg name='app' declared_type='SecTrustedApplicationRef*' type='^^{OpaqueSecTrustedApplicationRef}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SecTrustedApplicationGetTypeID'>
    <retval declared_type='CFTypeID' type='L' type64='I'/>
  </function>
  <function name='SecTrustedApplicationSetData'>
    <arg name='appRef' declared_type='SecTrustedApplicationRef' type='^{OpaqueSecTrustedApplicationRef=}'/>
    <arg name='data' declared_type='CFDataRef' type='^{__CFData=}'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SessionCreate'>
    <arg name='flags' declared_type='SessionCreationFlags' type='L' type64='I'/>
    <arg name='attributes' declared_type='SessionAttributeBits' type='L' type64='I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='SessionGetInfo'>
    <arg name='session' declared_type='SecuritySessionId' type='L' type64='I'/>
    <arg name='sessionId' declared_type='SecuritySessionId*' type='^I'/>
    <arg name='attributes' declared_type='SessionAttributeBits*' type='^I'/>
    <retval declared_type='OSStatus' type='l' type64='i'/>
  </function>
  <function name='cssmAlgToOid'>
    <arg name='algId' declared_type='CSSM_ALGORITHMS' type='L' type64='I'/>
    <retval declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
  </function>
  <function name='cssmOidToAlg'>
    <arg name='oid' declared_type='CSSM_OID*' type='^{cssm_data=I*}' const='true'/>
    <arg name='alg' declared_type='CSSM_ALGORITHMS*' type='^I'/>
    <retval declared_type='_Bool' type='B'/>
  </function>
  <function name='cssmPerror'>
    <arg name='how' declared_type='char*' type='*' const='true'/>
    <arg name='error' declared_type='CSSM_RETURN' type='l' type64='i'/>
    <retval declared_type='void' type='v'/>
  </function>
</signatures>
