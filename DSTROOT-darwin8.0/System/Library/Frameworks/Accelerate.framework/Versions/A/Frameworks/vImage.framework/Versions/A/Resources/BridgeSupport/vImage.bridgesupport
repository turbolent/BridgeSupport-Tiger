<?xml version='1.0'?>
<signatures version='1.0'>
  <struct name='vImage_AffineTransform' type='{vImage_AffineTransform=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f&quot;tx&quot;f&quot;ty&quot;f}'>
    <field name='a' declared_type='float' type='f'/>
    <field name='b' declared_type='float' type='f'/>
    <field name='c' declared_type='float' type='f'/>
    <field name='d' declared_type='float' type='f'/>
    <field name='tx' declared_type='float' type='f'/>
    <field name='ty' declared_type='float' type='f'/>
  </struct>
  <struct name='vImage_Buffer' type='{vImage_Buffer=&quot;data&quot;^v&quot;height&quot;I&quot;width&quot;I&quot;rowBytes&quot;I}' type64='{vImage_Buffer=&quot;data&quot;^v&quot;height&quot;Q&quot;width&quot;Q&quot;rowBytes&quot;Q}'>
    <field name='data' declared_type='void*' type='^v'/>
    <field name='height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <field name='width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <field name='rowBytes' declared_type='size_t' type='L' type64='Q'/>
  </struct>
  <enum name='kRotate0DegreesClockwise' value='0'/>
  <enum name='kRotate0DegreesCounterClockwise' value='0'/>
  <enum name='kRotate180DegreesClockwise' value='2'/>
  <enum name='kRotate180DegreesCounterClockwise' value='2'/>
  <enum name='kRotate270DegreesClockwise' value='1'/>
  <enum name='kRotate270DegreesCounterClockwise' value='3'/>
  <enum name='kRotate90DegreesClockwise' value='3'/>
  <enum name='kRotate90DegreesCounterClockwise' value='1'/>
  <enum name='kvImageBackgroundColorFill' value='4'/>
  <enum name='kvImageBufferSizeMismatch' value='-21774'/>
  <enum name='kvImageCopyInPlace' value='2'/>
  <enum name='kvImageDoNotTile' value='16'/>
  <enum name='kvImageEdgeExtend' value='8'/>
  <enum name='kvImageGamma_11_over_5_half_precision' value='5'/>
  <enum name='kvImageGamma_11_over_9_half_precision' value='8'/>
  <enum name='kvImageGamma_5_over_11_half_precision' value='4'/>
  <enum name='kvImageGamma_5_over_9_half_precision' value='2'/>
  <enum name='kvImageGamma_9_over_11_half_precision' value='9'/>
  <enum name='kvImageGamma_9_over_5_half_precision' value='3'/>
  <enum name='kvImageGamma_BT709_forward_half_precision' value='10'/>
  <enum name='kvImageGamma_BT709_reverse_half_precision' value='11'/>
  <enum name='kvImageGamma_UseGammaValue' value='0'/>
  <enum name='kvImageGamma_UseGammaValue_half_precision' value='1'/>
  <enum name='kvImageGamma_sRGB_forward_half_precision' value='6'/>
  <enum name='kvImageGamma_sRGB_reverse_half_precision' value='7'/>
  <enum name='kvImageGetTempBufferSize' value='128'/>
  <enum name='kvImageHighQualityResampling' value='32'/>
  <enum name='kvImageInvalidEdgeStyle' value='-21768'/>
  <enum name='kvImageInvalidKernelSize' value='-21767'/>
  <enum name='kvImageInvalidOffset_X' value='-21769'/>
  <enum name='kvImageInvalidOffset_Y' value='-21770'/>
  <enum name='kvImageInvalidParameter' value='-21773'/>
  <enum name='kvImageLeaveAlphaUnchanged' value='1'/>
  <enum name='kvImageMemoryAllocationError' value='-21771'/>
  <enum name='kvImageNoError' value='0'/>
  <enum name='kvImageNoFlags' value='0'/>
  <enum name='kvImageNullPointerArgument' value='-21772'/>
  <enum name='kvImageRoiLargerThanInputBuffer' value='-21766'/>
  <enum name='kvImageTruncateKernel' value='64'/>
  <enum name='kvImageUnknownFlagsBit' value='-21775'/>
  <enum name='kvImage_PNG_FILTER_VALUE_AVG' value='3'/>
  <enum name='kvImage_PNG_FILTER_VALUE_NONE' value='0'/>
  <enum name='kvImage_PNG_FILTER_VALUE_PAETH' value='4'/>
  <enum name='kvImage_PNG_FILTER_VALUE_SUB' value='1'/>
  <enum name='kvImage_PNG_FILTER_VALUE_UP' value='2'/>
  <function name='vImageAffineWarp_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='transform' declared_type='vImage_AffineTransform*' type='^{vImage_AffineTransform=ffffff}' const='true'/>
    <arg name='backColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAffineWarp_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='transform' declared_type='vImage_AffineTransform*' type='^{vImage_AffineTransform=ffffff}' const='true'/>
    <arg name='backColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAffineWarp_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='transform' declared_type='vImage_AffineTransform*' type='^{vImage_AffineTransform=ffffff}' const='true'/>
    <arg name='backColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAffineWarp_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='transform' declared_type='vImage_AffineTransform*' type='^{vImage_AffineTransform=ffffff}' const='true'/>
    <arg name='backColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_ARGB8888'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_ARGBFFFF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_Planar8'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottomAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageAlphaBlend_PlanarF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottomAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageBoxConvolve_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageBoxConvolve_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageBufferFill_ARGB8888'>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='color' declared_type='uint8_t*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageBufferFill_ARGBFFFF'>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='color' declared_type='float*' type='^f' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageClipToAlpha_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageClipToAlpha_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageClipToAlpha_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageClipToAlpha_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageClip_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='maxFloat' declared_type='Pixel_F' type='f'/>
    <arg name='minFloat' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageContrastStretch_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageContrastStretch_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageContrastStretch_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageContrastStretch_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_16SToF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='offset' declared_type='float' type='f'/>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_16UToF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='offset' declared_type='float' type='f'/>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_16UToPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB1555toARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB1555toPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB8888toARGB1555'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB8888toPlanar8'>
    <arg name='srcARGB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB8888toRGB565'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGB8888toRGB888'>
    <arg name='argbSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rgbDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ARGBFFFFtoPlanarF'>
    <arg name='srcARGB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ChunkyToPlanar8'>
    <arg name='srcChannels' declared_type='void**' type='^^v' const='true'/>
    <arg name='destPlanarBuffers' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='channelCount' declared_type='unsigned int' type='I'/>
    <arg name='srcStrideBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='srcWidth' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcHeight' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcRowBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_ChunkyToPlanarF'>
    <arg name='srcChannels' declared_type='void**' type='^^v' const='true'/>
    <arg name='destPlanarBuffers' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='channelCount' declared_type='unsigned int' type='I'/>
    <arg name='srcStrideBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='srcWidth' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcHeight' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcRowBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_FTo16S'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='offset' declared_type='float' type='f'/>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_FTo16U'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='offset' declared_type='float' type='f'/>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar16FtoPlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8To16U'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8toARGB1555'>
    <arg name='srcA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8toARGB8888'>
    <arg name='srcA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8toPlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='maxFloat' declared_type='Pixel_F' type='f'/>
    <arg name='minFloat' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8toRGB565'>
    <arg name='srcR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_Planar8toRGB888'>
    <arg name='planarRed' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='planarGreen' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='planarBlue' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rgbDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarFtoARGBFFFF'>
    <arg name='srcA' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarFtoPlanar16F'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarFtoPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='maxFloat' declared_type='Pixel_F' type='f'/>
    <arg name='minFloat' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarFtoRGBFFF'>
    <arg name='planarRed' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='planarGreen' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='planarBlue' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rgbDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarToChunky8'>
    <arg name='srcPlanarBuffers' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='destChannels' declared_type='void**' type='^^v'/>
    <arg name='channelCount' declared_type='unsigned int' type='I'/>
    <arg name='destStrideBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='destWidth' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='destHeight' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='destRowBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_PlanarToChunkyF'>
    <arg name='srcPlanarBuffers' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='destChannels' declared_type='void**' type='^^v'/>
    <arg name='channelCount' declared_type='unsigned int' type='I'/>
    <arg name='destStrideBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='destWidth' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='destHeight' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='destRowBytes' declared_type='size_t' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_RGB565toARGB8888'>
    <arg name='alpha' declared_type='Pixel_8' type='C'/>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_RGB565toPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destR' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destG' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='destB' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_RGB888toARGB8888'>
    <arg name='rgbSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='aSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='Pixel_8' type='C'/>
    <arg name='argbDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='premultiply' declared_type='_Bool' type='B'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_RGB888toPlanar8'>
    <arg name='rgbSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='redDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='greenDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='blueDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvert_RGBFFFtoPlanarF'>
    <arg name='rgbSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='redDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='greenDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='blueDest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveMultiKernel_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernels' declared_type='int16_t**' type='^^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='divisors' declared_type='int32_t*' type='^i' const='true'/>
    <arg name='biases' declared_type='int32_t*' type='^i' const='true'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveMultiKernel_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernels' declared_type='float**' type='^^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='biases' declared_type='float*' type='^f' const='true'/>
    <arg name='backgroundColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveWithBias_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='bias' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveWithBias_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='bias' declared_type='float' type='f'/>
    <arg name='backgroundColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveWithBias_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='bias' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolveWithBias_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='bias' declared_type='float' type='f'/>
    <arg name='backgroundColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolve_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolve_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolve_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageConvolve_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageCreateGammaFunction'>
    <arg name='gamma' declared_type='float' type='f'/>
    <arg name='gamma_type' declared_type='int' type='i'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='GammaFunction' type='^v'/>
  </function>
  <function name='vImageDestroyGammaFunction'>
    <arg name='f' declared_type='GammaFunction' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='vImageDestroyResamplingFilter'>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <retval declared_type='void' type='v'/>
  </function>
  <function name='vImageDilate_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='unsigned char*' type='*' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageDilate_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageDilate_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='unsigned char*' type='*' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageDilate_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEndsInContrastStretch_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='percent_low' declared_type='unsigned int*' type='^I' const='true'/>
    <arg name='percent_high' declared_type='unsigned int*' type='^I' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEndsInContrastStretch_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='percent_low' declared_type='unsigned int*' type='^I' const='true'/>
    <arg name='percent_high' declared_type='unsigned int*' type='^I' const='true'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEndsInContrastStretch_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='percent_low' declared_type='unsigned int' type='I'/>
    <arg name='percent_high' declared_type='unsigned int' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEndsInContrastStretch_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='percent_low' declared_type='unsigned int' type='I'/>
    <arg name='percent_high' declared_type='unsigned int' type='I'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEqualization_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEqualization_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEqualization_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageEqualization_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageErode_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='unsigned char*' type='*' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageErode_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageErode_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='unsigned char*' type='*' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageErode_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageFlatten_ARGB8888ToRGB888'>
    <arg name='argb8888Src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rgb888dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='isImagePremultiplied' declared_type='_Bool' type='B'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageFlatten_ARGBFFFFToRGBFFF'>
    <arg name='argbFFFFSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rgbFFFdest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='backgroundColor' declared_type='float*' type='^f'/>
    <arg name='isImagePremultiplied' declared_type='_Bool' type='B'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageGamma_Planar8toPlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='gamma' declared_type='GammaFunction' type='^v' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageGamma_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='gamma' declared_type='GammaFunction' type='^v' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageGamma_PlanarFtoPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='gamma' declared_type='GammaFunction' type='^v' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageGetMinimumGeometryTempBufferSize'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <arg name='bytesPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='vImageGetMinimumTempBufferSizeForConvolution'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <arg name='bytesPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='vImageGetMinimumTempBufferSizeForHistogram'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <arg name='bytesPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='vImageGetMinimumTempBufferSizeForMinMax'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <arg name='bytesPerPixel' declared_type='size_t' type='L' type64='Q'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='vImageGetResamplingFilterSize'>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='kernelFunc' function_pointer='true' declared_type='void (*)(float *, float *, unsigned long, void *)' type='^?'>
      <arg declared_type='float*' type='^f' const='true'/>
      <arg declared_type='float*' type='^f'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='kernelWidth' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='size_t' type='L' type64='Q'/>
  </function>
  <function name='vImageHistogramCalculation_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='histogram' declared_type='vImagePixelCount**' type='^^I' type64='^^Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramCalculation_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='histogram' declared_type='vImagePixelCount**' type='^^I' type64='^^Q'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramCalculation_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='histogram' declared_type='vImagePixelCount*' type='^I' type64='^Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramCalculation_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='histogram' declared_type='vImagePixelCount*' type='^I' type64='^Q'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramSpecification_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='desired_histogram' declared_type='vImagePixelCount**' type='^^I' type64='^^Q' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramSpecification_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='desired_histogram' declared_type='vImagePixelCount**' type='^^I' type64='^^Q' const='true'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramSpecification_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='desired_histogram' declared_type='vImagePixelCount*' type='^I' type64='^Q' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHistogramSpecification_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='desired_histogram' declared_type='vImagePixelCount*' type='^I' type64='^Q' const='true'/>
    <arg name='histogram_entries' declared_type='unsigned int' type='I'/>
    <arg name='minVal' declared_type='Pixel_F' type='f'/>
    <arg name='maxVal' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalReflect_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalReflect_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalReflect_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalReflect_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalShear_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='xTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalShear_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='xTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalShear_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='xTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageHorizontalShear_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='xTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageInterpolatedLookupTable_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='table' declared_type='Pixel_F*' type='^f' const='true'/>
    <arg name='tableEntries' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='maxFloat' declared_type='float' type='f'/>
    <arg name='minFloat' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageLookupTable_Planar8toPlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='table' declared_type='Pixel_F*' type='^f' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageLookupTable_PlanarFtoPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='table' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMatrixMultiply_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='matrix' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='pre_bias' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='post_bias' declared_type='int32_t*' type='^i' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMatrixMultiply_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='matrix' declared_type='float*' type='^f' const='true'/>
    <arg name='pre_bias' declared_type='float*' type='^f' const='true'/>
    <arg name='post_bias' declared_type='float*' type='^f' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMatrixMultiply_Planar8'>
    <arg name='srcs' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='dests' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='src_planes' declared_type='uint32_t' type='I'/>
    <arg name='dest_planes' declared_type='uint32_t' type='I'/>
    <arg name='matrix' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='pre_bias' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='post_bias' declared_type='int32_t*' type='^i' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMatrixMultiply_PlanarF'>
    <arg name='srcs' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='dests' declared_type='vImage_Buffer**' type='^^{vImage_Buffer}' const='true'/>
    <arg name='src_planes' declared_type='uint32_t' type='I'/>
    <arg name='dest_planes' declared_type='uint32_t' type='I'/>
    <arg name='matrix' declared_type='float*' type='^f' const='true'/>
    <arg name='pre_bias' declared_type='float*' type='^f' const='true'/>
    <arg name='post_bias' declared_type='float*' type='^f' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMax_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMax_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMax_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMax_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMin_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMin_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMin_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageMin_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_width' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageNewResamplingFilter'>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='ResamplingFilter' type='^v'/>
  </function>
  <function name='vImageNewResamplingFilterForFunctionUsingBuffer'>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='scale' declared_type='float' type='f'/>
    <arg name='kernelFunc' function_pointer='true' declared_type='void (*)(float *, float *, unsigned long, void *)' type='^?'>
      <arg declared_type='float*' type='^f' const='true'/>
      <arg declared_type='float*' type='^f'/>
      <arg declared_type='unsigned long' type='L' type64='Q'/>
      <arg declared_type='void*' type='^v'/>
      <retval declared_type='void' type='v'/>
    </arg>
    <arg name='kernelWidth' declared_type='float' type='f'/>
    <arg name='userData' declared_type='void*' type='^v'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannelsWithScalar_ARGB8888'>
    <arg name='scalar' declared_type='Pixel_8' type='C'/>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='copyMask' declared_type='uint8_t' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannelsWithScalar_ARGBFFFF'>
    <arg name='scalar' declared_type='Pixel_F' type='f'/>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='copyMask' declared_type='uint8_t' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannelsWithScalar_Planar8'>
    <arg name='scalar' declared_type='Pixel_8' type='C'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannelsWithScalar_PlanarF'>
    <arg name='scalar' declared_type='Pixel_F' type='f'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannels_ARGB8888'>
    <arg name='newSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='origSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='copyMask' declared_type='uint8_t' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageOverwriteChannels_ARGBFFFF'>
    <arg name='newSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='origSrc' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='copyMask' declared_type='uint8_t' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePNGDecompressionFilter'>
    <arg name='buffer' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='startScanline' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='scanlineCount' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='bitsPerPixel' declared_type='uint32_t' type='I'/>
    <arg name='filterMethodNumber' declared_type='uint32_t' type='I'/>
    <arg name='filterType' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePermuteChannels_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='permuteMap' declared_type='uint8_t*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePermuteChannels_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='permuteMap' declared_type='uint8_t*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePiecewisePolynomial_Planar8toPlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='coefficients' declared_type='float**' type='^^f' const='true'/>
    <arg name='boundaries' declared_type='float*' type='^f' const='true'/>
    <arg name='order' declared_type='uint32_t' type='I'/>
    <arg name='log2segments' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePiecewisePolynomial_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='coefficients' declared_type='float**' type='^^f' const='true'/>
    <arg name='boundaries' declared_type='float*' type='^f' const='true'/>
    <arg name='order' declared_type='uint32_t' type='I'/>
    <arg name='log2segments' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePiecewisePolynomial_PlanarFtoPlanar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='coefficients' declared_type='float**' type='^^f' const='true'/>
    <arg name='boundaries' declared_type='float*' type='^f' const='true'/>
    <arg name='order' declared_type='uint32_t' type='I'/>
    <arg name='log2segments' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePiecewiseRational_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='topCoefficients' declared_type='float**' type='^^f' const='true'/>
    <arg name='bottomCoefficients' declared_type='float**' type='^^f' const='true'/>
    <arg name='boundaries' declared_type='float*' type='^f' const='true'/>
    <arg name='topOrder' declared_type='uint32_t' type='I'/>
    <arg name='bottomOrder' declared_type='uint32_t' type='I'/>
    <arg name='log2segments' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedAlphaBlend_ARGB8888'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedAlphaBlend_ARGBFFFF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedAlphaBlend_Planar8'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedAlphaBlend_PlanarF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedConstAlphaBlend_ARGB8888'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='constAlpha' declared_type='Pixel_8' type='C'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedConstAlphaBlend_ARGBFFFF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='constAlpha' declared_type='Pixel_F' type='f'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedConstAlphaBlend_Planar8'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='constAlpha' declared_type='Pixel_8' type='C'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultipliedConstAlphaBlend_PlanarF'>
    <arg name='srcTop' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='constAlpha' declared_type='Pixel_F' type='f'/>
    <arg name='srcTopAlpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcBottom' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_RGBA8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImagePremultiplyData_RGBAFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRichardsonLucyDeConvolve_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel2' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='kernel_height2' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width2' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='divisor2' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='iterationCount' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRichardsonLucyDeConvolve_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel2' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='kernel_height2' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width2' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='float*' type='^f'/>
    <arg name='iterationCount' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRichardsonLucyDeConvolve_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel2' declared_type='int16_t*' type='^s' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='kernel_height2' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width2' declared_type='uint32_t' type='I'/>
    <arg name='divisor' declared_type='int32_t' type='i'/>
    <arg name='divisor2' declared_type='int32_t' type='i'/>
    <arg name='backgroundColor' declared_type='Pixel_8' type='C'/>
    <arg name='iterationCount' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRichardsonLucyDeConvolve_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel2' declared_type='float*' type='^f' const='true'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='kernel_height2' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width2' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='Pixel_F' type='f'/>
    <arg name='iterationCount' declared_type='uint32_t' type='I'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate90_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rotationConstant' declared_type='uint8_t' type='C'/>
    <arg name='backColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate90_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rotationConstant' declared_type='uint8_t' type='C'/>
    <arg name='backColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate90_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rotationConstant' declared_type='uint8_t' type='C'/>
    <arg name='backColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate90_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='rotationConstant' declared_type='uint8_t' type='C'/>
    <arg name='backColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='angleInRadians' declared_type='float' type='f'/>
    <arg name='backColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='angleInRadians' declared_type='float' type='f'/>
    <arg name='backColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='angleInRadians' declared_type='float' type='f'/>
    <arg name='backColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageRotate_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='angleInRadians' declared_type='float' type='f'/>
    <arg name='backColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageScale_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageScale_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageScale_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageScale_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageTableLookUp_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alphaTable' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='redTable' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='greenTable' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='blueTable' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageTableLookUp_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='table' declared_type='Pixel_8*' type='*' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageTentConvolve_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageTentConvolve_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='tempBuffer' declared_type='void*' type='^v'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='kernel_height' declared_type='uint32_t' type='I'/>
    <arg name='kernel_width' declared_type='uint32_t' type='I'/>
    <arg name='backgroundColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='alpha' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_RGBA8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageUnpremultiplyData_RGBAFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalReflect_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalReflect_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalReflect_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalReflect_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalShear_ARGB8888'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='yTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='uint8_t*' type='*'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalShear_ARGBFFFF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='yTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='float*' type='^f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalShear_Planar8'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='yTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='Pixel_8' type='C'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
  <function name='vImageVerticalShear_PlanarF'>
    <arg name='src' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='dest' declared_type='vImage_Buffer*' type='^{vImage_Buffer=^vIII}' type64='^{vImage_Buffer=^vQQQ}' const='true'/>
    <arg name='srcOffsetToROI_X' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='srcOffsetToROI_Y' declared_type='vImagePixelCount' type='L' type64='Q'/>
    <arg name='yTranslate' declared_type='float' type='f'/>
    <arg name='shearSlope' declared_type='float' type='f'/>
    <arg name='filter' declared_type='ResamplingFilter' type='^v'/>
    <arg name='backColor' declared_type='Pixel_F' type='f'/>
    <arg name='flags' declared_type='vImage_Flags' type='I'/>
    <retval declared_type='vImage_Error' type='l' type64='q'/>
  </function>
</signatures>
