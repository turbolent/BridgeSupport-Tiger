<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/OpenGL.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework'/>
<struct name='AGLContext' type='{__AGLContextRec=&quot;rend&quot;^{__GLIContextRec}&quot;disp&quot;{__GLIFunctionDispatchRec=&quot;accum&quot;^?&quot;alpha_func&quot;^?&quot;are_textures_resident&quot;^?&quot;array_element&quot;^?&quot;begin&quot;^?&quot;bind_texture&quot;^?&quot;bitmap&quot;^?&quot;blend_func&quot;^?&quot;call_list&quot;^?&quot;call_lists&quot;^?&quot;clear&quot;^?&quot;clear_accum&quot;^?&quot;clear_color&quot;^?&quot;clear_depth&quot;^?&quot;clear_index&quot;^?&quot;clear_stencil&quot;^?&quot;clip_plane&quot;^?&quot;color3b&quot;^?&quot;color3bv&quot;^?&quot;color3d&quot;^?&quot;color3dv&quot;^?&quot;color3f&quot;^?&quot;color3fv&quot;^?&quot;color3i&quot;^?&quot;color3iv&quot;^?&quot;color3s&quot;^?&quot;color3sv&quot;^?&quot;color3ub&quot;^?&quot;color3ubv&quot;^?&quot;color3ui&quot;^?&quot;color3uiv&quot;^?&quot;color3us&quot;^?&quot;color3usv&quot;^?&quot;color4b&quot;^?&quot;color4bv&quot;^?&quot;color4d&quot;^?&quot;color4dv&quot;^?&quot;color4f&quot;^?&quot;color4fv&quot;^?&quot;color4i&quot;^?&quot;color4iv&quot;^?&quot;color4s&quot;^?&quot;color4sv&quot;^?&quot;color4ub&quot;^?&quot;color4ubv&quot;^?&quot;color4ui&quot;^?&quot;color4uiv&quot;^?&quot;color4us&quot;^?&quot;color4usv&quot;^?&quot;color_mask&quot;^?&quot;color_material&quot;^?&quot;color_pointer&quot;^?&quot;copy_pixels&quot;^?&quot;copy_tex_image1D&quot;^?&quot;copy_tex_image2D&quot;^?&quot;copy_tex_sub_image1D&quot;^?&quot;copy_tex_sub_image2D&quot;^?&quot;cull_face&quot;^?&quot;delete_lists&quot;^?&quot;delete_textures&quot;^?&quot;depth_func&quot;^?&quot;depth_mask&quot;^?&quot;depth_range&quot;^?&quot;disable&quot;^?&quot;disable_client_state&quot;^?&quot;draw_arrays&quot;^?&quot;draw_buffer&quot;^?&quot;draw_elements&quot;^?&quot;draw_pixels&quot;^?&quot;edge_flag&quot;^?&quot;edge_flag_pointer&quot;^?&quot;edge_flagv&quot;^?&quot;enable&quot;^?&quot;enable_client_state&quot;^?&quot;end&quot;^?&quot;end_list&quot;^?&quot;eval_coord1d&quot;^?&quot;eval_coord1dv&quot;^?&quot;eval_coord1f&quot;^?&quot;eval_coord1fv&quot;^?&quot;eval_coord2d&quot;^?&quot;eval_coord2dv&quot;^?&quot;eval_coord2f&quot;^?&quot;eval_coord2fv&quot;^?&quot;eval_mesh1&quot;^?&quot;eval_mesh2&quot;^?&quot;eval_point1&quot;^?&quot;eval_point2&quot;^?&quot;feedback_buffer&quot;^?&quot;finish&quot;^?&quot;flush&quot;^?&quot;fogf&quot;^?&quot;fogfv&quot;^?&quot;fogi&quot;^?&quot;fogiv&quot;^?&quot;front_face&quot;^?&quot;frustum&quot;^?&quot;gen_lists&quot;^?&quot;gen_textures&quot;^?&quot;get_booleanv&quot;^?&quot;get_clip_plane&quot;^?&quot;get_doublev&quot;^?&quot;get_error&quot;^?&quot;get_floatv&quot;^?&quot;get_integerv&quot;^?&quot;get_lightfv&quot;^?&quot;get_lightiv&quot;^?&quot;get_mapdv&quot;^?&quot;get_mapfv&quot;^?&quot;get_mapiv&quot;^?&quot;get_materialfv&quot;^?&quot;get_materialiv&quot;^?&quot;get_pixel_mapfv&quot;^?&quot;get_pixel_mapuiv&quot;^?&quot;get_pixel_mapusv&quot;^?&quot;get_pointerv&quot;^?&quot;get_polygon_stipple&quot;^?&quot;get_string&quot;^?&quot;get_tex_envfv&quot;^?&quot;get_tex_enviv&quot;^?&quot;get_tex_gendv&quot;^?&quot;get_tex_genfv&quot;^?&quot;get_tex_geniv&quot;^?&quot;get_tex_image&quot;^?&quot;get_tex_level_parameterfv&quot;^?&quot;get_tex_level_parameteriv&quot;^?&quot;get_tex_parameterfv&quot;^?&quot;get_tex_parameteriv&quot;^?&quot;hint&quot;^?&quot;index_mask&quot;^?&quot;index_pointer&quot;^?&quot;indexd&quot;^?&quot;indexdv&quot;^?&quot;indexf&quot;^?&quot;indexfv&quot;^?&quot;indexi&quot;^?&quot;indexiv&quot;^?&quot;indexs&quot;^?&quot;indexsv&quot;^?&quot;indexub&quot;^?&quot;indexubv&quot;^?&quot;init_names&quot;^?&quot;interleaved_arrays&quot;^?&quot;is_enabled&quot;^?&quot;is_list&quot;^?&quot;is_texture&quot;^?&quot;light_modelf&quot;^?&quot;light_modelfv&quot;^?&quot;light_modeli&quot;^?&quot;light_modeliv&quot;^?&quot;lightf&quot;^?&quot;lightfv&quot;^?&quot;lighti&quot;^?&quot;lightiv&quot;^?&quot;line_stipple&quot;^?&quot;line_width&quot;^?&quot;list_base&quot;^?&quot;load_identity&quot;^?&quot;load_matrixd&quot;^?&quot;load_matrixf&quot;^?&quot;load_name&quot;^?&quot;logic_op&quot;^?&quot;map1d&quot;^?&quot;map1f&quot;^?&quot;map2d&quot;^?&quot;map2f&quot;^?&quot;map_grid1d&quot;^?&quot;map_grid1f&quot;^?&quot;map_grid2d&quot;^?&quot;map_grid2f&quot;^?&quot;materialf&quot;^?&quot;materialfv&quot;^?&quot;materiali&quot;^?&quot;materialiv&quot;^?&quot;matrix_mode&quot;^?&quot;mult_matrixd&quot;^?&quot;mult_matrixf&quot;^?&quot;new_list&quot;^?&quot;normal3b&quot;^?&quot;normal3bv&quot;^?&quot;normal3d&quot;^?&quot;normal3dv&quot;^?&quot;normal3f&quot;^?&quot;normal3fv&quot;^?&quot;normal3i&quot;^?&quot;normal3iv&quot;^?&quot;normal3s&quot;^?&quot;normal3sv&quot;^?&quot;normal_pointer&quot;^?&quot;ortho&quot;^?&quot;pass_through&quot;^?&quot;pixel_mapfv&quot;^?&quot;pixel_mapuiv&quot;^?&quot;pixel_mapusv&quot;^?&quot;pixel_storef&quot;^?&quot;pixel_storei&quot;^?&quot;pixel_transferf&quot;^?&quot;pixel_transferi&quot;^?&quot;pixel_zoom&quot;^?&quot;point_size&quot;^?&quot;polygon_mode&quot;^?&quot;polygon_offset&quot;^?&quot;polygon_stipple&quot;^?&quot;pop_attrib&quot;^?&quot;pop_client_attrib&quot;^?&quot;pop_matrix&quot;^?&quot;pop_name&quot;^?&quot;prioritize_textures&quot;^?&quot;push_attrib&quot;^?&quot;push_client_attrib&quot;^?&quot;push_matrix&quot;^?&quot;push_name&quot;^?&quot;raster_pos2d&quot;^?&quot;raster_pos2dv&quot;^?&quot;raster_pos2f&quot;^?&quot;raster_pos2fv&quot;^?&quot;raster_pos2i&quot;^?&quot;raster_pos2iv&quot;^?&quot;raster_pos2s&quot;^?&quot;raster_pos2sv&quot;^?&quot;raster_pos3d&quot;^?&quot;raster_pos3dv&quot;^?&quot;raster_pos3f&quot;^?&quot;raster_pos3fv&quot;^?&quot;raster_pos3i&quot;^?&quot;raster_pos3iv&quot;^?&quot;raster_pos3s&quot;^?&quot;raster_pos3sv&quot;^?&quot;raster_pos4d&quot;^?&quot;raster_pos4dv&quot;^?&quot;raster_pos4f&quot;^?&quot;raster_pos4fv&quot;^?&quot;raster_pos4i&quot;^?&quot;raster_pos4iv&quot;^?&quot;raster_pos4s&quot;^?&quot;raster_pos4sv&quot;^?&quot;read_buffer&quot;^?&quot;read_pixels&quot;^?&quot;rectd&quot;^?&quot;rectdv&quot;^?&quot;rectf&quot;^?&quot;rectfv&quot;^?&quot;recti&quot;^?&quot;rectiv&quot;^?&quot;rects&quot;^?&quot;rectsv&quot;^?&quot;render_mode&quot;^?&quot;rotated&quot;^?&quot;rotatef&quot;^?&quot;scaled&quot;^?&quot;scalef&quot;^?&quot;scissor&quot;^?&quot;select_buffer&quot;^?&quot;shade_model&quot;^?&quot;stencil_func&quot;^?&quot;stencil_mask&quot;^?&quot;stencil_op&quot;^?&quot;tex_coord1d&quot;^?&quot;tex_coord1dv&quot;^?&quot;tex_coord1f&quot;^?&quot;tex_coord1fv&quot;^?&quot;tex_coord1i&quot;^?&quot;tex_coord1iv&quot;^?&quot;tex_coord1s&quot;^?&quot;tex_coord1sv&quot;^?&quot;tex_coord2d&quot;^?&quot;tex_coord2dv&quot;^?&quot;tex_coord2f&quot;^?&quot;tex_coord2fv&quot;^?&quot;tex_coord2i&quot;^?&quot;tex_coord2iv&quot;^?&quot;tex_coord2s&quot;^?&quot;tex_coord2sv&quot;^?&quot;tex_coord3d&quot;^?&quot;tex_coord3dv&quot;^?&quot;tex_coord3f&quot;^?&quot;tex_coord3fv&quot;^?&quot;tex_coord3i&quot;^?&quot;tex_coord3iv&quot;^?&quot;tex_coord3s&quot;^?&quot;tex_coord3sv&quot;^?&quot;tex_coord4d&quot;^?&quot;tex_coord4dv&quot;^?&quot;tex_coord4f&quot;^?&quot;tex_coord4fv&quot;^?&quot;tex_coord4i&quot;^?&quot;tex_coord4iv&quot;^?&quot;tex_coord4s&quot;^?&quot;tex_coord4sv&quot;^?&quot;tex_coord_pointer&quot;^?&quot;tex_envf&quot;^?&quot;tex_envfv&quot;^?&quot;tex_envi&quot;^?&quot;tex_enviv&quot;^?&quot;tex_gend&quot;^?&quot;tex_gendv&quot;^?&quot;tex_genf&quot;^?&quot;tex_genfv&quot;^?&quot;tex_geni&quot;^?&quot;tex_geniv&quot;^?&quot;tex_image1D&quot;^?&quot;tex_image2D&quot;^?&quot;tex_parameterf&quot;^?&quot;tex_parameterfv&quot;^?&quot;tex_parameteri&quot;^?&quot;tex_parameteriv&quot;^?&quot;tex_sub_image1D&quot;^?&quot;tex_sub_image2D&quot;^?&quot;translated&quot;^?&quot;translatef&quot;^?&quot;vertex2d&quot;^?&quot;vertex2dv&quot;^?&quot;vertex2f&quot;^?&quot;vertex2fv&quot;^?&quot;vertex2i&quot;^?&quot;vertex2iv&quot;^?&quot;vertex2s&quot;^?&quot;vertex2sv&quot;^?&quot;vertex3d&quot;^?&quot;vertex3dv&quot;^?&quot;vertex3f&quot;^?&quot;vertex3fv&quot;^?&quot;vertex3i&quot;^?&quot;vertex3iv&quot;^?&quot;vertex3s&quot;^?&quot;vertex3sv&quot;^?&quot;vertex4d&quot;^?&quot;vertex4dv&quot;^?&quot;vertex4f&quot;^?&quot;vertex4fv&quot;^?&quot;vertex4i&quot;^?&quot;vertex4iv&quot;^?&quot;vertex4s&quot;^?&quot;vertex4sv&quot;^?&quot;vertex_pointer&quot;^?&quot;viewport&quot;^?&quot;blend_func_separate&quot;^?&quot;blend_color&quot;^?&quot;blend_equation&quot;^?&quot;lock_arrays_EXT&quot;^?&quot;unlock_arrays_EXT&quot;^?&quot;client_active_texture&quot;^?&quot;active_texture&quot;^?&quot;multi_tex_coord1d&quot;^?&quot;multi_tex_coord1dv&quot;^?&quot;multi_tex_coord1f&quot;^?&quot;multi_tex_coord1fv&quot;^?&quot;multi_tex_coord1i&quot;^?&quot;multi_tex_coord1iv&quot;^?&quot;multi_tex_coord1s&quot;^?&quot;multi_tex_coord1sv&quot;^?&quot;multi_tex_coord2d&quot;^?&quot;multi_tex_coord2dv&quot;^?&quot;multi_tex_coord2f&quot;^?&quot;multi_tex_coord2fv&quot;^?&quot;multi_tex_coord2i&quot;^?&quot;multi_tex_coord2iv&quot;^?&quot;multi_tex_coord2s&quot;^?&quot;multi_tex_coord2sv&quot;^?&quot;multi_tex_coord3d&quot;^?&quot;multi_tex_coord3dv&quot;^?&quot;multi_tex_coord3f&quot;^?&quot;multi_tex_coord3fv&quot;^?&quot;multi_tex_coord3i&quot;^?&quot;multi_tex_coord3iv&quot;^?&quot;multi_tex_coord3s&quot;^?&quot;multi_tex_coord3sv&quot;^?&quot;multi_tex_coord4d&quot;^?&quot;multi_tex_coord4dv&quot;^?&quot;multi_tex_coord4f&quot;^?&quot;multi_tex_coord4fv&quot;^?&quot;multi_tex_coord4i&quot;^?&quot;multi_tex_coord4iv&quot;^?&quot;multi_tex_coord4s&quot;^?&quot;multi_tex_coord4sv&quot;^?&quot;load_transpose_matrixd&quot;^?&quot;load_transpose_matrixf&quot;^?&quot;mult_transpose_matrixd&quot;^?&quot;mult_transpose_matrixf&quot;^?&quot;compressed_tex_image3D&quot;^?&quot;compressed_tex_image2D&quot;^?&quot;compressed_tex_image1D&quot;^?&quot;compressed_tex_sub_image3D&quot;^?&quot;compressed_tex_sub_image2D&quot;^?&quot;compressed_tex_sub_image1D&quot;^?&quot;get_compressed_tex_image&quot;^?&quot;secondary_color3b&quot;^?&quot;secondary_color3bv&quot;^?&quot;secondary_color3d&quot;^?&quot;secondary_color3dv&quot;^?&quot;secondary_color3f&quot;^?&quot;secondary_color3fv&quot;^?&quot;secondary_color3i&quot;^?&quot;secondary_color3iv&quot;^?&quot;secondary_color3s&quot;^?&quot;secondary_color3sv&quot;^?&quot;secondary_color3ub&quot;^?&quot;secondary_color3ubv&quot;^?&quot;secondary_color3ui&quot;^?&quot;secondary_color3uiv&quot;^?&quot;secondary_color3us&quot;^?&quot;secondary_color3usv&quot;^?&quot;secondary_color_pointer&quot;^?&quot;vertex_array_range_EXT&quot;^?&quot;flush_vertex_array_range_EXT&quot;^?&quot;draw_range_elements&quot;^?&quot;color_table&quot;^?&quot;color_table_parameterfv&quot;^?&quot;color_table_parameteriv&quot;^?&quot;copy_color_table&quot;^?&quot;get_color_table&quot;^?&quot;get_color_table_parameterfv&quot;^?&quot;get_color_table_parameteriv&quot;^?&quot;color_sub_table&quot;^?&quot;copy_color_sub_table&quot;^?&quot;convolution_filter1D&quot;^?&quot;convolution_filter2D&quot;^?&quot;convolution_parameterf&quot;^?&quot;convolution_parameterfv&quot;^?&quot;convolution_parameteri&quot;^?&quot;convolution_parameteriv&quot;^?&quot;copy_convolution_filter1D&quot;^?&quot;copy_convolution_filter2D&quot;^?&quot;get_convolution_filter&quot;^?&quot;get_convolution_parameterfv&quot;^?&quot;get_convolution_parameteriv&quot;^?&quot;get_separable_filter&quot;^?&quot;separable_filter2D&quot;^?&quot;get_histogram&quot;^?&quot;get_histogram_parameterfv&quot;^?&quot;get_histogram_parameteriv&quot;^?&quot;get_minmax&quot;^?&quot;get_minmax_parameterfv&quot;^?&quot;get_minmax_parameteriv&quot;^?&quot;histogram&quot;^?&quot;minmax&quot;^?&quot;reset_histogram&quot;^?&quot;reset_minmax&quot;^?&quot;tex_image3D&quot;^?&quot;tex_sub_image3D&quot;^?&quot;copy_tex_sub_image3D&quot;^?&quot;combiner_parameterfv_NV&quot;^?&quot;combiner_parameterf_NV&quot;^?&quot;combiner_parameteriv_NV&quot;^?&quot;combiner_parameteri_NV&quot;^?&quot;combiner_input_NV&quot;^?&quot;combiner_output_NV&quot;^?&quot;final_combiner_input_NV&quot;^?&quot;get_combiner_input_parameterfv_NV&quot;^?&quot;get_combiner_input_parameteriv_NV&quot;^?&quot;get_combiner_output_parameterfv_NV&quot;^?&quot;get_combiner_output_parameteriv_NV&quot;^?&quot;get_final_combiner_input_parameterfv_NV&quot;^?&quot;get_final_combiner_input_parameteriv_NV&quot;^?&quot;combiner_stage_parameterfv_NV&quot;^?&quot;get_combiner_stage_parameterfv_NV&quot;^?&quot;texture_range_APPLE&quot;^?&quot;get_tex_parameter_pointerv_APPLE&quot;^?&quot;blend_equation_separate_EXT&quot;^?&quot;sample_coverage&quot;^?&quot;sample_pass&quot;^?&quot;pn_trianglesi_ATI&quot;^?&quot;pn_trianglesf_ATI&quot;^?&quot;gen_fences_APPLE&quot;^?&quot;delete_fences_APPLE&quot;^?&quot;set_fence_APPLE&quot;^?&quot;is_fence_APPLE&quot;^?&quot;test_fence_APPLE&quot;^?&quot;finish_fence_APPLE&quot;^?&quot;test_object_APPLE&quot;^?&quot;finish_object_APPLE&quot;^?&quot;bind_program_ARB&quot;^?&quot;delete_programs_ARB&quot;^?&quot;gen_programs_ARB&quot;^?&quot;is_program_ARB&quot;^?&quot;vertex_attrib1s_ARB&quot;^?&quot;vertex_attrib1f_ARB&quot;^?&quot;vertex_attrib1d_ARB&quot;^?&quot;vertex_attrib2s_ARB&quot;^?&quot;vertex_attrib2f_ARB&quot;^?&quot;vertex_attrib2d_ARB&quot;^?&quot;vertex_attrib3s_ARB&quot;^?&quot;vertex_attrib3f_ARB&quot;^?&quot;vertex_attrib3d_ARB&quot;^?&quot;vertex_attrib4s_ARB&quot;^?&quot;vertex_attrib4f_ARB&quot;^?&quot;vertex_attrib4d_ARB&quot;^?&quot;vertex_attrib4Nub_ARB&quot;^?&quot;vertex_attrib1sv_ARB&quot;^?&quot;vertex_attrib1fv_ARB&quot;^?&quot;vertex_attrib1dv_ARB&quot;^?&quot;vertex_attrib2sv_ARB&quot;^?&quot;vertex_attrib2fv_ARB&quot;^?&quot;vertex_attrib2dv_ARB&quot;^?&quot;vertex_attrib3sv_ARB&quot;^?&quot;vertex_attrib3fv_ARB&quot;^?&quot;vertex_attrib3dv_ARB&quot;^?&quot;vertex_attrib4bv_ARB&quot;^?&quot;vertex_attrib4sv_ARB&quot;^?&quot;vertex_attrib4iv_ARB&quot;^?&quot;vertex_attrib4ubv_ARB&quot;^?&quot;vertex_attrib4usv_ARB&quot;^?&quot;vertex_attrib4uiv_ARB&quot;^?&quot;vertex_attrib4fv_ARB&quot;^?&quot;vertex_attrib4dv_ARB&quot;^?&quot;vertex_attrib4Nbv_ARB&quot;^?&quot;vertex_attrib4Nsv_ARB&quot;^?&quot;vertex_attrib4Niv_ARB&quot;^?&quot;vertex_attrib4Nubv_ARB&quot;^?&quot;vertex_attrib4Nusv_ARB&quot;^?&quot;vertex_attrib4Nuiv_ARB&quot;^?&quot;vertex_attrib_pointer_ARB&quot;^?&quot;enable_vertex_attrib_array_ARB&quot;^?&quot;disable_vertex_attrib_array_ARB&quot;^?&quot;get_vertex_attribdv_ARB&quot;^?&quot;get_vertex_attribfv_ARB&quot;^?&quot;get_vertex_attribiv_ARB&quot;^?&quot;get_vertex_attrib_pointerv_ARB&quot;^?&quot;program_env_parameter4d_ARB&quot;^?&quot;program_env_parameter4dv_ARB&quot;^?&quot;program_env_parameter4f_ARB&quot;^?&quot;program_env_parameter4fv_ARB&quot;^?&quot;program_local_parameter4d_ARB&quot;^?&quot;program_local_parameter4dv_ARB&quot;^?&quot;program_local_parameter4f_ARB&quot;^?&quot;program_local_parameter4fv_ARB&quot;^?&quot;get_program_env_parameterdv_ARB&quot;^?&quot;get_program_env_parameterfv_ARB&quot;^?&quot;get_program_local_parameterdv_ARB&quot;^?&quot;get_program_local_parameterfv_ARB&quot;^?&quot;program_string_ARB&quot;^?&quot;get_program_string_ARB&quot;^?&quot;get_programiv_ARB&quot;^?&quot;enable_vertex_attrib_ARB&quot;^?&quot;disable_vertex_attrib_ARB&quot;^?&quot;is_vertex_attrib_enabled_ARB&quot;^?&quot;map_vertex_attrib1d_ARB&quot;^?&quot;map_vertex_attrib1f_ARB&quot;^?&quot;map_vertex_attrib2d_ARB&quot;^?&quot;map_vertex_attrib2f_ARB&quot;^?&quot;point_parameterf&quot;^?&quot;point_parameterfv&quot;^?&quot;point_parameteri&quot;^?&quot;point_parameteriv&quot;^?&quot;fog_coordf&quot;^?&quot;fog_coordfv&quot;^?&quot;fog_coordd&quot;^?&quot;fog_coorddv&quot;^?&quot;fog_coord_pointer&quot;^?&quot;vertex_array_parameteri_EXT&quot;^?&quot;bind_vertex_array_EXT&quot;^?&quot;delete_vertex_arrays_EXT&quot;^?&quot;gen_vertex_arrays_EXT&quot;^?&quot;is_vertex_array_EXT&quot;^?&quot;element_pointer_APPLE&quot;^?&quot;draw_element_array_APPLE&quot;^?&quot;draw_range_element_array_APPLE&quot;^?&quot;weightbv_ARB&quot;^?&quot;weightsv_ARB&quot;^?&quot;weightiv_ARB&quot;^?&quot;weightfv_ARB&quot;^?&quot;weightdv_ARB&quot;^?&quot;weightubv_ARB&quot;^?&quot;weightusv_ARB&quot;^?&quot;weightuiv_ARB&quot;^?&quot;weight_pointer_ARB&quot;^?&quot;vertex_blend_ARB&quot;^?&quot;multi_draw_arrays&quot;^?&quot;multi_draw_elements&quot;^?&quot;window_pos2d&quot;^?&quot;window_pos2dv&quot;^?&quot;window_pos2f&quot;^?&quot;window_pos2fv&quot;^?&quot;window_pos2i&quot;^?&quot;window_pos2iv&quot;^?&quot;window_pos2s&quot;^?&quot;window_pos2sv&quot;^?&quot;window_pos3d&quot;^?&quot;window_pos3dv&quot;^?&quot;window_pos3f&quot;^?&quot;window_pos3fv&quot;^?&quot;window_pos3i&quot;^?&quot;window_pos3iv&quot;^?&quot;window_pos3s&quot;^?&quot;window_pos3sv&quot;^?&quot;active_stencil_face_EXT&quot;^?&quot;stencil_op_separate_ATI&quot;^?&quot;stencil_func_separate_ATI&quot;^?&quot;flush_render_APPLE&quot;^?&quot;finish_render_APPLE&quot;^?&quot;swap_APPLE&quot;^?&quot;delete_object_ARB&quot;^?&quot;get_handle_ARB&quot;^?&quot;detach_object_ARB&quot;^?&quot;create_shader_object_ARB&quot;^?&quot;shader_source_ARB&quot;^?&quot;compile_shader_ARB&quot;^?&quot;create_program_object_ARB&quot;^?&quot;attach_object_ARB&quot;^?&quot;link_program_ARB&quot;^?&quot;use_program_object_ARB&quot;^?&quot;validate_program_ARB&quot;^?&quot;uniform1f_ARB&quot;^?&quot;uniform2f_ARB&quot;^?&quot;uniform3f_ARB&quot;^?&quot;uniform4f_ARB&quot;^?&quot;uniform1i_ARB&quot;^?&quot;uniform2i_ARB&quot;^?&quot;uniform3i_ARB&quot;^?&quot;uniform4i_ARB&quot;^?&quot;uniform1fv_ARB&quot;^?&quot;uniform2fv_ARB&quot;^?&quot;uniform3fv_ARB&quot;^?&quot;uniform4fv_ARB&quot;^?&quot;uniform1iv_ARB&quot;^?&quot;uniform2iv_ARB&quot;^?&quot;uniform3iv_ARB&quot;^?&quot;uniform4iv_ARB&quot;^?&quot;uniform_matrix2fv_ARB&quot;^?&quot;uniform_matrix3fv_ARB&quot;^?&quot;uniform_matrix4fv_ARB&quot;^?&quot;get_object_parameterfv_ARB&quot;^?&quot;get_object_parameteriv_ARB&quot;^?&quot;get_info_log_ARB&quot;^?&quot;get_attached_objects_ARB&quot;^?&quot;get_uniform_location_ARB&quot;^?&quot;get_active_uniform_ARB&quot;^?&quot;get_uniformfv_ARB&quot;^?&quot;get_uniformiv_ARB&quot;^?&quot;get_shader_source_ARB&quot;^?&quot;bind_attrib_location_ARB&quot;^?&quot;get_active_attrib_ARB&quot;^?&quot;get_attrib_location_ARB&quot;^?&quot;pad&quot;^?&quot;gen_queries&quot;^?&quot;delete_queries&quot;^?&quot;is_query&quot;^?&quot;begin_query&quot;^?&quot;end_query&quot;^?&quot;get_queryiv&quot;^?&quot;get_query_objectiv&quot;^?&quot;get_query_objectuiv&quot;^?&quot;bind_buffer&quot;^?&quot;delete_buffers&quot;^?&quot;gen_buffers&quot;^?&quot;is_buffer&quot;^?&quot;buffer_data&quot;^?&quot;buffer_sub_data&quot;^?&quot;get_buffer_sub_data&quot;^?&quot;map_buffer&quot;^?&quot;unmap_buffer&quot;^?&quot;get_buffer_parameteriv&quot;^?&quot;get_buffer_pointerv&quot;^?&quot;depth_bounds_EXT&quot;^?&quot;draw_buffers_ARB&quot;^?&quot;is_shader&quot;^?&quot;is_program&quot;^?&quot;get_shaderiv&quot;^?&quot;get_programiv&quot;^?&quot;get_shader_info_log&quot;^?&quot;get_program_info_log&quot;^?&quot;stencil_func_separate&quot;^?&quot;stencil_mask_separate&quot;^?&quot;multi_draw_element_array_APPLE&quot;^?&quot;multi_draw_range_element_array_APPLE&quot;^?&quot;is_renderbuffer_EXT&quot;^?&quot;bind_renderbuffer_EXT&quot;^?&quot;delete_renderbuffers_EXT&quot;^?&quot;gen_renderbuffers_EXT&quot;^?&quot;renderbuffer_storage_EXT&quot;^?&quot;get_renderbuffer_parameteriv_EXT&quot;^?&quot;is_framebuffer_EXT&quot;^?&quot;bind_framebuffer_EXT&quot;^?&quot;delete_framebuffers_EXT&quot;^?&quot;gen_framebuffers_EXT&quot;^?&quot;check_framebuffer_status_EXT&quot;^?&quot;framebuffer_texture1D_EXT&quot;^?&quot;framebuffer_texture2D_EXT&quot;^?&quot;framebuffer_texture3D_EXT&quot;^?&quot;framebuffer_renderbuffer_EXT&quot;^?&quot;get_framebuffer_attachment_parameteriv_EXT&quot;^?&quot;generate_mipmap_EXT&quot;^?&quot;buffer_parameteri_APPLE&quot;^?&quot;flush_mapped_buffer_range_APPLE&quot;^?&quot;program_env_parameters4fv_EXT&quot;^?&quot;program_local_parameters4fv_EXT&quot;^?&quot;object_purgeable_APPLE&quot;^?&quot;object_unpurgeable_APPLE&quot;^?&quot;get_object_parameteriv_APPLE&quot;^?&quot;program_parameteri_EXT&quot;^?&quot;framebuffer_texture_EXT&quot;^?&quot;framebuffer_texture_layer_EXT&quot;^?&quot;framebuffer_texture_face_EXT&quot;^?&quot;bind_buffer_range_EXT&quot;^?&quot;bind_buffer_offset_EXT&quot;^?&quot;bind_buffer_base_EXT&quot;^?&quot;begin_transform_feedback_EXT&quot;^?&quot;end_transform_feedback_EXT&quot;^?&quot;transform_feedback_varyings_EXT&quot;^?&quot;get_transform_feedback_varying_EXT&quot;^?&quot;get_integer_indexedv_EXT&quot;^?&quot;get_boolean_indexedv_EXT&quot;^?&quot;uniform_buffer_EXT&quot;^?&quot;get_uniform_buffer_size_EXT&quot;^?&quot;get_uniform_buffer_offset_EXT&quot;^?&quot;clear_colorIi_EXT&quot;^?&quot;clear_colorIui_EXT&quot;^?&quot;tex_parameterIiv_EXT&quot;^?&quot;tex_parameterIuiv_EXT&quot;^?&quot;get_tex_parameterIiv_EXT&quot;^?&quot;get_tex_parameterIiuv_EXT&quot;^?&quot;vertex_attribI1i_EXT&quot;^?&quot;vertex_attribI2i_EXT&quot;^?&quot;vertex_attribI3i_EXT&quot;^?&quot;vertex_attribI4i_EXT&quot;^?&quot;vertex_attribI1ui_EXT&quot;^?&quot;vertex_attribI2ui_EXT&quot;^?&quot;vertex_attribI3ui_EXT&quot;^?&quot;vertex_attribI4ui_EXT&quot;^?&quot;vertex_attribI1iv_EXT&quot;^?&quot;vertex_attribI2iv_EXT&quot;^?&quot;vertex_attribI3iv_EXT&quot;^?&quot;vertex_attribI4iv_EXT&quot;^?&quot;vertex_attribI1uiv_EXT&quot;^?&quot;vertex_attribI2uiv_EXT&quot;^?&quot;vertex_attribI3uiv_EXT&quot;^?&quot;vertex_attribI4uiv_EXT&quot;^?&quot;vertex_attribI4bv_EXT&quot;^?&quot;vertex_attribI4sv_EXT&quot;^?&quot;vertex_attribI4ubv_EXT&quot;^?&quot;vertex_attribI4usv_EXT&quot;^?&quot;vertex_attribI_pointer_EXT&quot;^?&quot;get_vertex_attribIiv_EXT&quot;^?&quot;get_vertex_attribIuiv_EXT&quot;^?&quot;uniform1ui_EXT&quot;^?&quot;uniform2ui_EXT&quot;^?&quot;uniform3ui_EXT&quot;^?&quot;uniform4ui_EXT&quot;^?&quot;uniform1uiv_EXT&quot;^?&quot;uniform2uiv_EXT&quot;^?&quot;uniform3uiv_EXT&quot;^?&quot;uniform4uiv_EXT&quot;^?&quot;get_uniformuiv_EXT&quot;^?&quot;bind_frag_data_location_EXT&quot;^?&quot;get_frag_data_location_EXT&quot;^?&quot;shader_binary_OES&quot;^?&quot;get_shader_precision_format_OES&quot;^?&quot;release_shader_compiler_OES&quot;^?&quot;get_renderbuffer_storage_formatsiv_OES&quot;^?&quot;uniform_matrix2x3fv&quot;^?&quot;uniform_matrix3x2fv&quot;^?&quot;uniform_matrix2x4fv&quot;^?&quot;uniform_matrix4x2fv&quot;^?&quot;uniform_matrix3x4fv&quot;^?&quot;uniform_matrix4x3fv&quot;^?&quot;blit_framebuffer_EXT&quot;^?&quot;renderbuffer_storage_multisample_EXT&quot;^?&quot;depth_rangef&quot;^?&quot;clear_depthf&quot;^?}&quot;priv&quot;^{__AGLPrivateRec}}'>
<field name='rend' declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<field name='disp' declared_type='GLIFunctionDispatch' type='{__GLIFunctionDispatchRec=&quot;accum&quot;^?&quot;alpha_func&quot;^?&quot;are_textures_resident&quot;^?&quot;array_element&quot;^?&quot;begin&quot;^?&quot;bind_texture&quot;^?&quot;bitmap&quot;^?&quot;blend_func&quot;^?&quot;call_list&quot;^?&quot;call_lists&quot;^?&quot;clear&quot;^?&quot;clear_accum&quot;^?&quot;clear_color&quot;^?&quot;clear_depth&quot;^?&quot;clear_index&quot;^?&quot;clear_stencil&quot;^?&quot;clip_plane&quot;^?&quot;color3b&quot;^?&quot;color3bv&quot;^?&quot;color3d&quot;^?&quot;color3dv&quot;^?&quot;color3f&quot;^?&quot;color3fv&quot;^?&quot;color3i&quot;^?&quot;color3iv&quot;^?&quot;color3s&quot;^?&quot;color3sv&quot;^?&quot;color3ub&quot;^?&quot;color3ubv&quot;^?&quot;color3ui&quot;^?&quot;color3uiv&quot;^?&quot;color3us&quot;^?&quot;color3usv&quot;^?&quot;color4b&quot;^?&quot;color4bv&quot;^?&quot;color4d&quot;^?&quot;color4dv&quot;^?&quot;color4f&quot;^?&quot;color4fv&quot;^?&quot;color4i&quot;^?&quot;color4iv&quot;^?&quot;color4s&quot;^?&quot;color4sv&quot;^?&quot;color4ub&quot;^?&quot;color4ubv&quot;^?&quot;color4ui&quot;^?&quot;color4uiv&quot;^?&quot;color4us&quot;^?&quot;color4usv&quot;^?&quot;color_mask&quot;^?&quot;color_material&quot;^?&quot;color_pointer&quot;^?&quot;copy_pixels&quot;^?&quot;copy_tex_image1D&quot;^?&quot;copy_tex_image2D&quot;^?&quot;copy_tex_sub_image1D&quot;^?&quot;copy_tex_sub_image2D&quot;^?&quot;cull_face&quot;^?&quot;delete_lists&quot;^?&quot;delete_textures&quot;^?&quot;depth_func&quot;^?&quot;depth_mask&quot;^?&quot;depth_range&quot;^?&quot;disable&quot;^?&quot;disable_client_state&quot;^?&quot;draw_arrays&quot;^?&quot;draw_buffer&quot;^?&quot;draw_elements&quot;^?&quot;draw_pixels&quot;^?&quot;edge_flag&quot;^?&quot;edge_flag_pointer&quot;^?&quot;edge_flagv&quot;^?&quot;enable&quot;^?&quot;enable_client_state&quot;^?&quot;end&quot;^?&quot;end_list&quot;^?&quot;eval_coord1d&quot;^?&quot;eval_coord1dv&quot;^?&quot;eval_coord1f&quot;^?&quot;eval_coord1fv&quot;^?&quot;eval_coord2d&quot;^?&quot;eval_coord2dv&quot;^?&quot;eval_coord2f&quot;^?&quot;eval_coord2fv&quot;^?&quot;eval_mesh1&quot;^?&quot;eval_mesh2&quot;^?&quot;eval_point1&quot;^?&quot;eval_point2&quot;^?&quot;feedback_buffer&quot;^?&quot;finish&quot;^?&quot;flush&quot;^?&quot;fogf&quot;^?&quot;fogfv&quot;^?&quot;fogi&quot;^?&quot;fogiv&quot;^?&quot;front_face&quot;^?&quot;frustum&quot;^?&quot;gen_lists&quot;^?&quot;gen_textures&quot;^?&quot;get_booleanv&quot;^?&quot;get_clip_plane&quot;^?&quot;get_doublev&quot;^?&quot;get_error&quot;^?&quot;get_floatv&quot;^?&quot;get_integerv&quot;^?&quot;get_lightfv&quot;^?&quot;get_lightiv&quot;^?&quot;get_mapdv&quot;^?&quot;get_mapfv&quot;^?&quot;get_mapiv&quot;^?&quot;get_materialfv&quot;^?&quot;get_materialiv&quot;^?&quot;get_pixel_mapfv&quot;^?&quot;get_pixel_mapuiv&quot;^?&quot;get_pixel_mapusv&quot;^?&quot;get_pointerv&quot;^?&quot;get_polygon_stipple&quot;^?&quot;get_string&quot;^?&quot;get_tex_envfv&quot;^?&quot;get_tex_enviv&quot;^?&quot;get_tex_gendv&quot;^?&quot;get_tex_genfv&quot;^?&quot;get_tex_geniv&quot;^?&quot;get_tex_image&quot;^?&quot;get_tex_level_parameterfv&quot;^?&quot;get_tex_level_parameteriv&quot;^?&quot;get_tex_parameterfv&quot;^?&quot;get_tex_parameteriv&quot;^?&quot;hint&quot;^?&quot;index_mask&quot;^?&quot;index_pointer&quot;^?&quot;indexd&quot;^?&quot;indexdv&quot;^?&quot;indexf&quot;^?&quot;indexfv&quot;^?&quot;indexi&quot;^?&quot;indexiv&quot;^?&quot;indexs&quot;^?&quot;indexsv&quot;^?&quot;indexub&quot;^?&quot;indexubv&quot;^?&quot;init_names&quot;^?&quot;interleaved_arrays&quot;^?&quot;is_enabled&quot;^?&quot;is_list&quot;^?&quot;is_texture&quot;^?&quot;light_modelf&quot;^?&quot;light_modelfv&quot;^?&quot;light_modeli&quot;^?&quot;light_modeliv&quot;^?&quot;lightf&quot;^?&quot;lightfv&quot;^?&quot;lighti&quot;^?&quot;lightiv&quot;^?&quot;line_stipple&quot;^?&quot;line_width&quot;^?&quot;list_base&quot;^?&quot;load_identity&quot;^?&quot;load_matrixd&quot;^?&quot;load_matrixf&quot;^?&quot;load_name&quot;^?&quot;logic_op&quot;^?&quot;map1d&quot;^?&quot;map1f&quot;^?&quot;map2d&quot;^?&quot;map2f&quot;^?&quot;map_grid1d&quot;^?&quot;map_grid1f&quot;^?&quot;map_grid2d&quot;^?&quot;map_grid2f&quot;^?&quot;materialf&quot;^?&quot;materialfv&quot;^?&quot;materiali&quot;^?&quot;materialiv&quot;^?&quot;matrix_mode&quot;^?&quot;mult_matrixd&quot;^?&quot;mult_matrixf&quot;^?&quot;new_list&quot;^?&quot;normal3b&quot;^?&quot;normal3bv&quot;^?&quot;normal3d&quot;^?&quot;normal3dv&quot;^?&quot;normal3f&quot;^?&quot;normal3fv&quot;^?&quot;normal3i&quot;^?&quot;normal3iv&quot;^?&quot;normal3s&quot;^?&quot;normal3sv&quot;^?&quot;normal_pointer&quot;^?&quot;ortho&quot;^?&quot;pass_through&quot;^?&quot;pixel_mapfv&quot;^?&quot;pixel_mapuiv&quot;^?&quot;pixel_mapusv&quot;^?&quot;pixel_storef&quot;^?&quot;pixel_storei&quot;^?&quot;pixel_transferf&quot;^?&quot;pixel_transferi&quot;^?&quot;pixel_zoom&quot;^?&quot;point_size&quot;^?&quot;polygon_mode&quot;^?&quot;polygon_offset&quot;^?&quot;polygon_stipple&quot;^?&quot;pop_attrib&quot;^?&quot;pop_client_attrib&quot;^?&quot;pop_matrix&quot;^?&quot;pop_name&quot;^?&quot;prioritize_textures&quot;^?&quot;push_attrib&quot;^?&quot;push_client_attrib&quot;^?&quot;push_matrix&quot;^?&quot;push_name&quot;^?&quot;raster_pos2d&quot;^?&quot;raster_pos2dv&quot;^?&quot;raster_pos2f&quot;^?&quot;raster_pos2fv&quot;^?&quot;raster_pos2i&quot;^?&quot;raster_pos2iv&quot;^?&quot;raster_pos2s&quot;^?&quot;raster_pos2sv&quot;^?&quot;raster_pos3d&quot;^?&quot;raster_pos3dv&quot;^?&quot;raster_pos3f&quot;^?&quot;raster_pos3fv&quot;^?&quot;raster_pos3i&quot;^?&quot;raster_pos3iv&quot;^?&quot;raster_pos3s&quot;^?&quot;raster_pos3sv&quot;^?&quot;raster_pos4d&quot;^?&quot;raster_pos4dv&quot;^?&quot;raster_pos4f&quot;^?&quot;raster_pos4fv&quot;^?&quot;raster_pos4i&quot;^?&quot;raster_pos4iv&quot;^?&quot;raster_pos4s&quot;^?&quot;raster_pos4sv&quot;^?&quot;read_buffer&quot;^?&quot;read_pixels&quot;^?&quot;rectd&quot;^?&quot;rectdv&quot;^?&quot;rectf&quot;^?&quot;rectfv&quot;^?&quot;recti&quot;^?&quot;rectiv&quot;^?&quot;rects&quot;^?&quot;rectsv&quot;^?&quot;render_mode&quot;^?&quot;rotated&quot;^?&quot;rotatef&quot;^?&quot;scaled&quot;^?&quot;scalef&quot;^?&quot;scissor&quot;^?&quot;select_buffer&quot;^?&quot;shade_model&quot;^?&quot;stencil_func&quot;^?&quot;stencil_mask&quot;^?&quot;stencil_op&quot;^?&quot;tex_coord1d&quot;^?&quot;tex_coord1dv&quot;^?&quot;tex_coord1f&quot;^?&quot;tex_coord1fv&quot;^?&quot;tex_coord1i&quot;^?&quot;tex_coord1iv&quot;^?&quot;tex_coord1s&quot;^?&quot;tex_coord1sv&quot;^?&quot;tex_coord2d&quot;^?&quot;tex_coord2dv&quot;^?&quot;tex_coord2f&quot;^?&quot;tex_coord2fv&quot;^?&quot;tex_coord2i&quot;^?&quot;tex_coord2iv&quot;^?&quot;tex_coord2s&quot;^?&quot;tex_coord2sv&quot;^?&quot;tex_coord3d&quot;^?&quot;tex_coord3dv&quot;^?&quot;tex_coord3f&quot;^?&quot;tex_coord3fv&quot;^?&quot;tex_coord3i&quot;^?&quot;tex_coord3iv&quot;^?&quot;tex_coord3s&quot;^?&quot;tex_coord3sv&quot;^?&quot;tex_coord4d&quot;^?&quot;tex_coord4dv&quot;^?&quot;tex_coord4f&quot;^?&quot;tex_coord4fv&quot;^?&quot;tex_coord4i&quot;^?&quot;tex_coord4iv&quot;^?&quot;tex_coord4s&quot;^?&quot;tex_coord4sv&quot;^?&quot;tex_coord_pointer&quot;^?&quot;tex_envf&quot;^?&quot;tex_envfv&quot;^?&quot;tex_envi&quot;^?&quot;tex_enviv&quot;^?&quot;tex_gend&quot;^?&quot;tex_gendv&quot;^?&quot;tex_genf&quot;^?&quot;tex_genfv&quot;^?&quot;tex_geni&quot;^?&quot;tex_geniv&quot;^?&quot;tex_image1D&quot;^?&quot;tex_image2D&quot;^?&quot;tex_parameterf&quot;^?&quot;tex_parameterfv&quot;^?&quot;tex_parameteri&quot;^?&quot;tex_parameteriv&quot;^?&quot;tex_sub_image1D&quot;^?&quot;tex_sub_image2D&quot;^?&quot;translated&quot;^?&quot;translatef&quot;^?&quot;vertex2d&quot;^?&quot;vertex2dv&quot;^?&quot;vertex2f&quot;^?&quot;vertex2fv&quot;^?&quot;vertex2i&quot;^?&quot;vertex2iv&quot;^?&quot;vertex2s&quot;^?&quot;vertex2sv&quot;^?&quot;vertex3d&quot;^?&quot;vertex3dv&quot;^?&quot;vertex3f&quot;^?&quot;vertex3fv&quot;^?&quot;vertex3i&quot;^?&quot;vertex3iv&quot;^?&quot;vertex3s&quot;^?&quot;vertex3sv&quot;^?&quot;vertex4d&quot;^?&quot;vertex4dv&quot;^?&quot;vertex4f&quot;^?&quot;vertex4fv&quot;^?&quot;vertex4i&quot;^?&quot;vertex4iv&quot;^?&quot;vertex4s&quot;^?&quot;vertex4sv&quot;^?&quot;vertex_pointer&quot;^?&quot;viewport&quot;^?&quot;blend_func_separate&quot;^?&quot;blend_color&quot;^?&quot;blend_equation&quot;^?&quot;lock_arrays_EXT&quot;^?&quot;unlock_arrays_EXT&quot;^?&quot;client_active_texture&quot;^?&quot;active_texture&quot;^?&quot;multi_tex_coord1d&quot;^?&quot;multi_tex_coord1dv&quot;^?&quot;multi_tex_coord1f&quot;^?&quot;multi_tex_coord1fv&quot;^?&quot;multi_tex_coord1i&quot;^?&quot;multi_tex_coord1iv&quot;^?&quot;multi_tex_coord1s&quot;^?&quot;multi_tex_coord1sv&quot;^?&quot;multi_tex_coord2d&quot;^?&quot;multi_tex_coord2dv&quot;^?&quot;multi_tex_coord2f&quot;^?&quot;multi_tex_coord2fv&quot;^?&quot;multi_tex_coord2i&quot;^?&quot;multi_tex_coord2iv&quot;^?&quot;multi_tex_coord2s&quot;^?&quot;multi_tex_coord2sv&quot;^?&quot;multi_tex_coord3d&quot;^?&quot;multi_tex_coord3dv&quot;^?&quot;multi_tex_coord3f&quot;^?&quot;multi_tex_coord3fv&quot;^?&quot;multi_tex_coord3i&quot;^?&quot;multi_tex_coord3iv&quot;^?&quot;multi_tex_coord3s&quot;^?&quot;multi_tex_coord3sv&quot;^?&quot;multi_tex_coord4d&quot;^?&quot;multi_tex_coord4dv&quot;^?&quot;multi_tex_coord4f&quot;^?&quot;multi_tex_coord4fv&quot;^?&quot;multi_tex_coord4i&quot;^?&quot;multi_tex_coord4iv&quot;^?&quot;multi_tex_coord4s&quot;^?&quot;multi_tex_coord4sv&quot;^?&quot;load_transpose_matrixd&quot;^?&quot;load_transpose_matrixf&quot;^?&quot;mult_transpose_matrixd&quot;^?&quot;mult_transpose_matrixf&quot;^?&quot;compressed_tex_image3D&quot;^?&quot;compressed_tex_image2D&quot;^?&quot;compressed_tex_image1D&quot;^?&quot;compressed_tex_sub_image3D&quot;^?&quot;compressed_tex_sub_image2D&quot;^?&quot;compressed_tex_sub_image1D&quot;^?&quot;get_compressed_tex_image&quot;^?&quot;secondary_color3b&quot;^?&quot;secondary_color3bv&quot;^?&quot;secondary_color3d&quot;^?&quot;secondary_color3dv&quot;^?&quot;secondary_color3f&quot;^?&quot;secondary_color3fv&quot;^?&quot;secondary_color3i&quot;^?&quot;secondary_color3iv&quot;^?&quot;secondary_color3s&quot;^?&quot;secondary_color3sv&quot;^?&quot;secondary_color3ub&quot;^?&quot;secondary_color3ubv&quot;^?&quot;secondary_color3ui&quot;^?&quot;secondary_color3uiv&quot;^?&quot;secondary_color3us&quot;^?&quot;secondary_color3usv&quot;^?&quot;secondary_color_pointer&quot;^?&quot;vertex_array_range_EXT&quot;^?&quot;flush_vertex_array_range_EXT&quot;^?&quot;draw_range_elements&quot;^?&quot;color_table&quot;^?&quot;color_table_parameterfv&quot;^?&quot;color_table_parameteriv&quot;^?&quot;copy_color_table&quot;^?&quot;get_color_table&quot;^?&quot;get_color_table_parameterfv&quot;^?&quot;get_color_table_parameteriv&quot;^?&quot;color_sub_table&quot;^?&quot;copy_color_sub_table&quot;^?&quot;convolution_filter1D&quot;^?&quot;convolution_filter2D&quot;^?&quot;convolution_parameterf&quot;^?&quot;convolution_parameterfv&quot;^?&quot;convolution_parameteri&quot;^?&quot;convolution_parameteriv&quot;^?&quot;copy_convolution_filter1D&quot;^?&quot;copy_convolution_filter2D&quot;^?&quot;get_convolution_filter&quot;^?&quot;get_convolution_parameterfv&quot;^?&quot;get_convolution_parameteriv&quot;^?&quot;get_separable_filter&quot;^?&quot;separable_filter2D&quot;^?&quot;get_histogram&quot;^?&quot;get_histogram_parameterfv&quot;^?&quot;get_histogram_parameteriv&quot;^?&quot;get_minmax&quot;^?&quot;get_minmax_parameterfv&quot;^?&quot;get_minmax_parameteriv&quot;^?&quot;histogram&quot;^?&quot;minmax&quot;^?&quot;reset_histogram&quot;^?&quot;reset_minmax&quot;^?&quot;tex_image3D&quot;^?&quot;tex_sub_image3D&quot;^?&quot;copy_tex_sub_image3D&quot;^?&quot;combiner_parameterfv_NV&quot;^?&quot;combiner_parameterf_NV&quot;^?&quot;combiner_parameteriv_NV&quot;^?&quot;combiner_parameteri_NV&quot;^?&quot;combiner_input_NV&quot;^?&quot;combiner_output_NV&quot;^?&quot;final_combiner_input_NV&quot;^?&quot;get_combiner_input_parameterfv_NV&quot;^?&quot;get_combiner_input_parameteriv_NV&quot;^?&quot;get_combiner_output_parameterfv_NV&quot;^?&quot;get_combiner_output_parameteriv_NV&quot;^?&quot;get_final_combiner_input_parameterfv_NV&quot;^?&quot;get_final_combiner_input_parameteriv_NV&quot;^?&quot;combiner_stage_parameterfv_NV&quot;^?&quot;get_combiner_stage_parameterfv_NV&quot;^?&quot;texture_range_APPLE&quot;^?&quot;get_tex_parameter_pointerv_APPLE&quot;^?&quot;blend_equation_separate_EXT&quot;^?&quot;sample_coverage&quot;^?&quot;sample_pass&quot;^?&quot;pn_trianglesi_ATI&quot;^?&quot;pn_trianglesf_ATI&quot;^?&quot;gen_fences_APPLE&quot;^?&quot;delete_fences_APPLE&quot;^?&quot;set_fence_APPLE&quot;^?&quot;is_fence_APPLE&quot;^?&quot;test_fence_APPLE&quot;^?&quot;finish_fence_APPLE&quot;^?&quot;test_object_APPLE&quot;^?&quot;finish_object_APPLE&quot;^?&quot;bind_program_ARB&quot;^?&quot;delete_programs_ARB&quot;^?&quot;gen_programs_ARB&quot;^?&quot;is_program_ARB&quot;^?&quot;vertex_attrib1s_ARB&quot;^?&quot;vertex_attrib1f_ARB&quot;^?&quot;vertex_attrib1d_ARB&quot;^?&quot;vertex_attrib2s_ARB&quot;^?&quot;vertex_attrib2f_ARB&quot;^?&quot;vertex_attrib2d_ARB&quot;^?&quot;vertex_attrib3s_ARB&quot;^?&quot;vertex_attrib3f_ARB&quot;^?&quot;vertex_attrib3d_ARB&quot;^?&quot;vertex_attrib4s_ARB&quot;^?&quot;vertex_attrib4f_ARB&quot;^?&quot;vertex_attrib4d_ARB&quot;^?&quot;vertex_attrib4Nub_ARB&quot;^?&quot;vertex_attrib1sv_ARB&quot;^?&quot;vertex_attrib1fv_ARB&quot;^?&quot;vertex_attrib1dv_ARB&quot;^?&quot;vertex_attrib2sv_ARB&quot;^?&quot;vertex_attrib2fv_ARB&quot;^?&quot;vertex_attrib2dv_ARB&quot;^?&quot;vertex_attrib3sv_ARB&quot;^?&quot;vertex_attrib3fv_ARB&quot;^?&quot;vertex_attrib3dv_ARB&quot;^?&quot;vertex_attrib4bv_ARB&quot;^?&quot;vertex_attrib4sv_ARB&quot;^?&quot;vertex_attrib4iv_ARB&quot;^?&quot;vertex_attrib4ubv_ARB&quot;^?&quot;vertex_attrib4usv_ARB&quot;^?&quot;vertex_attrib4uiv_ARB&quot;^?&quot;vertex_attrib4fv_ARB&quot;^?&quot;vertex_attrib4dv_ARB&quot;^?&quot;vertex_attrib4Nbv_ARB&quot;^?&quot;vertex_attrib4Nsv_ARB&quot;^?&quot;vertex_attrib4Niv_ARB&quot;^?&quot;vertex_attrib4Nubv_ARB&quot;^?&quot;vertex_attrib4Nusv_ARB&quot;^?&quot;vertex_attrib4Nuiv_ARB&quot;^?&quot;vertex_attrib_pointer_ARB&quot;^?&quot;enable_vertex_attrib_array_ARB&quot;^?&quot;disable_vertex_attrib_array_ARB&quot;^?&quot;get_vertex_attribdv_ARB&quot;^?&quot;get_vertex_attribfv_ARB&quot;^?&quot;get_vertex_attribiv_ARB&quot;^?&quot;get_vertex_attrib_pointerv_ARB&quot;^?&quot;program_env_parameter4d_ARB&quot;^?&quot;program_env_parameter4dv_ARB&quot;^?&quot;program_env_parameter4f_ARB&quot;^?&quot;program_env_parameter4fv_ARB&quot;^?&quot;program_local_parameter4d_ARB&quot;^?&quot;program_local_parameter4dv_ARB&quot;^?&quot;program_local_parameter4f_ARB&quot;^?&quot;program_local_parameter4fv_ARB&quot;^?&quot;get_program_env_parameterdv_ARB&quot;^?&quot;get_program_env_parameterfv_ARB&quot;^?&quot;get_program_local_parameterdv_ARB&quot;^?&quot;get_program_local_parameterfv_ARB&quot;^?&quot;program_string_ARB&quot;^?&quot;get_program_string_ARB&quot;^?&quot;get_programiv_ARB&quot;^?&quot;enable_vertex_attrib_ARB&quot;^?&quot;disable_vertex_attrib_ARB&quot;^?&quot;is_vertex_attrib_enabled_ARB&quot;^?&quot;map_vertex_attrib1d_ARB&quot;^?&quot;map_vertex_attrib1f_ARB&quot;^?&quot;map_vertex_attrib2d_ARB&quot;^?&quot;map_vertex_attrib2f_ARB&quot;^?&quot;point_parameterf&quot;^?&quot;point_parameterfv&quot;^?&quot;point_parameteri&quot;^?&quot;point_parameteriv&quot;^?&quot;fog_coordf&quot;^?&quot;fog_coordfv&quot;^?&quot;fog_coordd&quot;^?&quot;fog_coorddv&quot;^?&quot;fog_coord_pointer&quot;^?&quot;vertex_array_parameteri_EXT&quot;^?&quot;bind_vertex_array_EXT&quot;^?&quot;delete_vertex_arrays_EXT&quot;^?&quot;gen_vertex_arrays_EXT&quot;^?&quot;is_vertex_array_EXT&quot;^?&quot;element_pointer_APPLE&quot;^?&quot;draw_element_array_APPLE&quot;^?&quot;draw_range_element_array_APPLE&quot;^?&quot;weightbv_ARB&quot;^?&quot;weightsv_ARB&quot;^?&quot;weightiv_ARB&quot;^?&quot;weightfv_ARB&quot;^?&quot;weightdv_ARB&quot;^?&quot;weightubv_ARB&quot;^?&quot;weightusv_ARB&quot;^?&quot;weightuiv_ARB&quot;^?&quot;weight_pointer_ARB&quot;^?&quot;vertex_blend_ARB&quot;^?&quot;multi_draw_arrays&quot;^?&quot;multi_draw_elements&quot;^?&quot;window_pos2d&quot;^?&quot;window_pos2dv&quot;^?&quot;window_pos2f&quot;^?&quot;window_pos2fv&quot;^?&quot;window_pos2i&quot;^?&quot;window_pos2iv&quot;^?&quot;window_pos2s&quot;^?&quot;window_pos2sv&quot;^?&quot;window_pos3d&quot;^?&quot;window_pos3dv&quot;^?&quot;window_pos3f&quot;^?&quot;window_pos3fv&quot;^?&quot;window_pos3i&quot;^?&quot;window_pos3iv&quot;^?&quot;window_pos3s&quot;^?&quot;window_pos3sv&quot;^?&quot;active_stencil_face_EXT&quot;^?&quot;stencil_op_separate_ATI&quot;^?&quot;stencil_func_separate_ATI&quot;^?&quot;flush_render_APPLE&quot;^?&quot;finish_render_APPLE&quot;^?&quot;swap_APPLE&quot;^?&quot;delete_object_ARB&quot;^?&quot;get_handle_ARB&quot;^?&quot;detach_object_ARB&quot;^?&quot;create_shader_object_ARB&quot;^?&quot;shader_source_ARB&quot;^?&quot;compile_shader_ARB&quot;^?&quot;create_program_object_ARB&quot;^?&quot;attach_object_ARB&quot;^?&quot;link_program_ARB&quot;^?&quot;use_program_object_ARB&quot;^?&quot;validate_program_ARB&quot;^?&quot;uniform1f_ARB&quot;^?&quot;uniform2f_ARB&quot;^?&quot;uniform3f_ARB&quot;^?&quot;uniform4f_ARB&quot;^?&quot;uniform1i_ARB&quot;^?&quot;uniform2i_ARB&quot;^?&quot;uniform3i_ARB&quot;^?&quot;uniform4i_ARB&quot;^?&quot;uniform1fv_ARB&quot;^?&quot;uniform2fv_ARB&quot;^?&quot;uniform3fv_ARB&quot;^?&quot;uniform4fv_ARB&quot;^?&quot;uniform1iv_ARB&quot;^?&quot;uniform2iv_ARB&quot;^?&quot;uniform3iv_ARB&quot;^?&quot;uniform4iv_ARB&quot;^?&quot;uniform_matrix2fv_ARB&quot;^?&quot;uniform_matrix3fv_ARB&quot;^?&quot;uniform_matrix4fv_ARB&quot;^?&quot;get_object_parameterfv_ARB&quot;^?&quot;get_object_parameteriv_ARB&quot;^?&quot;get_info_log_ARB&quot;^?&quot;get_attached_objects_ARB&quot;^?&quot;get_uniform_location_ARB&quot;^?&quot;get_active_uniform_ARB&quot;^?&quot;get_uniformfv_ARB&quot;^?&quot;get_uniformiv_ARB&quot;^?&quot;get_shader_source_ARB&quot;^?&quot;bind_attrib_location_ARB&quot;^?&quot;get_active_attrib_ARB&quot;^?&quot;get_attrib_location_ARB&quot;^?&quot;pad&quot;^?&quot;gen_queries&quot;^?&quot;delete_queries&quot;^?&quot;is_query&quot;^?&quot;begin_query&quot;^?&quot;end_query&quot;^?&quot;get_queryiv&quot;^?&quot;get_query_objectiv&quot;^?&quot;get_query_objectuiv&quot;^?&quot;bind_buffer&quot;^?&quot;delete_buffers&quot;^?&quot;gen_buffers&quot;^?&quot;is_buffer&quot;^?&quot;buffer_data&quot;^?&quot;buffer_sub_data&quot;^?&quot;get_buffer_sub_data&quot;^?&quot;map_buffer&quot;^?&quot;unmap_buffer&quot;^?&quot;get_buffer_parameteriv&quot;^?&quot;get_buffer_pointerv&quot;^?&quot;depth_bounds_EXT&quot;^?&quot;draw_buffers_ARB&quot;^?&quot;is_shader&quot;^?&quot;is_program&quot;^?&quot;get_shaderiv&quot;^?&quot;get_programiv&quot;^?&quot;get_shader_info_log&quot;^?&quot;get_program_info_log&quot;^?&quot;stencil_func_separate&quot;^?&quot;stencil_mask_separate&quot;^?&quot;multi_draw_element_array_APPLE&quot;^?&quot;multi_draw_range_element_array_APPLE&quot;^?&quot;is_renderbuffer_EXT&quot;^?&quot;bind_renderbuffer_EXT&quot;^?&quot;delete_renderbuffers_EXT&quot;^?&quot;gen_renderbuffers_EXT&quot;^?&quot;renderbuffer_storage_EXT&quot;^?&quot;get_renderbuffer_parameteriv_EXT&quot;^?&quot;is_framebuffer_EXT&quot;^?&quot;bind_framebuffer_EXT&quot;^?&quot;delete_framebuffers_EXT&quot;^?&quot;gen_framebuffers_EXT&quot;^?&quot;check_framebuffer_status_EXT&quot;^?&quot;framebuffer_texture1D_EXT&quot;^?&quot;framebuffer_texture2D_EXT&quot;^?&quot;framebuffer_texture3D_EXT&quot;^?&quot;framebuffer_renderbuffer_EXT&quot;^?&quot;get_framebuffer_attachment_parameteriv_EXT&quot;^?&quot;generate_mipmap_EXT&quot;^?&quot;buffer_parameteri_APPLE&quot;^?&quot;flush_mapped_buffer_range_APPLE&quot;^?&quot;program_env_parameters4fv_EXT&quot;^?&quot;program_local_parameters4fv_EXT&quot;^?&quot;object_purgeable_APPLE&quot;^?&quot;object_unpurgeable_APPLE&quot;^?&quot;get_object_parameteriv_APPLE&quot;^?&quot;program_parameteri_EXT&quot;^?&quot;framebuffer_texture_EXT&quot;^?&quot;framebuffer_texture_layer_EXT&quot;^?&quot;framebuffer_texture_face_EXT&quot;^?&quot;bind_buffer_range_EXT&quot;^?&quot;bind_buffer_offset_EXT&quot;^?&quot;bind_buffer_base_EXT&quot;^?&quot;begin_transform_feedback_EXT&quot;^?&quot;end_transform_feedback_EXT&quot;^?&quot;transform_feedback_varyings_EXT&quot;^?&quot;get_transform_feedback_varying_EXT&quot;^?&quot;get_integer_indexedv_EXT&quot;^?&quot;get_boolean_indexedv_EXT&quot;^?&quot;uniform_buffer_EXT&quot;^?&quot;get_uniform_buffer_size_EXT&quot;^?&quot;get_uniform_buffer_offset_EXT&quot;^?&quot;clear_colorIi_EXT&quot;^?&quot;clear_colorIui_EXT&quot;^?&quot;tex_parameterIiv_EXT&quot;^?&quot;tex_parameterIuiv_EXT&quot;^?&quot;get_tex_parameterIiv_EXT&quot;^?&quot;get_tex_parameterIiuv_EXT&quot;^?&quot;vertex_attribI1i_EXT&quot;^?&quot;vertex_attribI2i_EXT&quot;^?&quot;vertex_attribI3i_EXT&quot;^?&quot;vertex_attribI4i_EXT&quot;^?&quot;vertex_attribI1ui_EXT&quot;^?&quot;vertex_attribI2ui_EXT&quot;^?&quot;vertex_attribI3ui_EXT&quot;^?&quot;vertex_attribI4ui_EXT&quot;^?&quot;vertex_attribI1iv_EXT&quot;^?&quot;vertex_attribI2iv_EXT&quot;^?&quot;vertex_attribI3iv_EXT&quot;^?&quot;vertex_attribI4iv_EXT&quot;^?&quot;vertex_attribI1uiv_EXT&quot;^?&quot;vertex_attribI2uiv_EXT&quot;^?&quot;vertex_attribI3uiv_EXT&quot;^?&quot;vertex_attribI4uiv_EXT&quot;^?&quot;vertex_attribI4bv_EXT&quot;^?&quot;vertex_attribI4sv_EXT&quot;^?&quot;vertex_attribI4ubv_EXT&quot;^?&quot;vertex_attribI4usv_EXT&quot;^?&quot;vertex_attribI_pointer_EXT&quot;^?&quot;get_vertex_attribIiv_EXT&quot;^?&quot;get_vertex_attribIuiv_EXT&quot;^?&quot;uniform1ui_EXT&quot;^?&quot;uniform2ui_EXT&quot;^?&quot;uniform3ui_EXT&quot;^?&quot;uniform4ui_EXT&quot;^?&quot;uniform1uiv_EXT&quot;^?&quot;uniform2uiv_EXT&quot;^?&quot;uniform3uiv_EXT&quot;^?&quot;uniform4uiv_EXT&quot;^?&quot;get_uniformuiv_EXT&quot;^?&quot;bind_frag_data_location_EXT&quot;^?&quot;get_frag_data_location_EXT&quot;^?&quot;shader_binary_OES&quot;^?&quot;get_shader_precision_format_OES&quot;^?&quot;release_shader_compiler_OES&quot;^?&quot;get_renderbuffer_storage_formatsiv_OES&quot;^?&quot;uniform_matrix2x3fv&quot;^?&quot;uniform_matrix3x2fv&quot;^?&quot;uniform_matrix2x4fv&quot;^?&quot;uniform_matrix4x2fv&quot;^?&quot;uniform_matrix3x4fv&quot;^?&quot;uniform_matrix4x3fv&quot;^?&quot;blit_framebuffer_EXT&quot;^?&quot;renderbuffer_storage_multisample_EXT&quot;^?&quot;depth_rangef&quot;^?&quot;clear_depthf&quot;^?}'/>
<field name='priv' declared_type='AGLPrivate' type='^{__AGLPrivateRec=}'/>
</struct>
<struct name='GLIFunctionDispatch' type='{__GLIFunctionDispatchRec=&quot;accum&quot;^?&quot;alpha_func&quot;^?&quot;are_textures_resident&quot;^?&quot;array_element&quot;^?&quot;begin&quot;^?&quot;bind_texture&quot;^?&quot;bitmap&quot;^?&quot;blend_func&quot;^?&quot;call_list&quot;^?&quot;call_lists&quot;^?&quot;clear&quot;^?&quot;clear_accum&quot;^?&quot;clear_color&quot;^?&quot;clear_depth&quot;^?&quot;clear_index&quot;^?&quot;clear_stencil&quot;^?&quot;clip_plane&quot;^?&quot;color3b&quot;^?&quot;color3bv&quot;^?&quot;color3d&quot;^?&quot;color3dv&quot;^?&quot;color3f&quot;^?&quot;color3fv&quot;^?&quot;color3i&quot;^?&quot;color3iv&quot;^?&quot;color3s&quot;^?&quot;color3sv&quot;^?&quot;color3ub&quot;^?&quot;color3ubv&quot;^?&quot;color3ui&quot;^?&quot;color3uiv&quot;^?&quot;color3us&quot;^?&quot;color3usv&quot;^?&quot;color4b&quot;^?&quot;color4bv&quot;^?&quot;color4d&quot;^?&quot;color4dv&quot;^?&quot;color4f&quot;^?&quot;color4fv&quot;^?&quot;color4i&quot;^?&quot;color4iv&quot;^?&quot;color4s&quot;^?&quot;color4sv&quot;^?&quot;color4ub&quot;^?&quot;color4ubv&quot;^?&quot;color4ui&quot;^?&quot;color4uiv&quot;^?&quot;color4us&quot;^?&quot;color4usv&quot;^?&quot;color_mask&quot;^?&quot;color_material&quot;^?&quot;color_pointer&quot;^?&quot;copy_pixels&quot;^?&quot;copy_tex_image1D&quot;^?&quot;copy_tex_image2D&quot;^?&quot;copy_tex_sub_image1D&quot;^?&quot;copy_tex_sub_image2D&quot;^?&quot;cull_face&quot;^?&quot;delete_lists&quot;^?&quot;delete_textures&quot;^?&quot;depth_func&quot;^?&quot;depth_mask&quot;^?&quot;depth_range&quot;^?&quot;disable&quot;^?&quot;disable_client_state&quot;^?&quot;draw_arrays&quot;^?&quot;draw_buffer&quot;^?&quot;draw_elements&quot;^?&quot;draw_pixels&quot;^?&quot;edge_flag&quot;^?&quot;edge_flag_pointer&quot;^?&quot;edge_flagv&quot;^?&quot;enable&quot;^?&quot;enable_client_state&quot;^?&quot;end&quot;^?&quot;end_list&quot;^?&quot;eval_coord1d&quot;^?&quot;eval_coord1dv&quot;^?&quot;eval_coord1f&quot;^?&quot;eval_coord1fv&quot;^?&quot;eval_coord2d&quot;^?&quot;eval_coord2dv&quot;^?&quot;eval_coord2f&quot;^?&quot;eval_coord2fv&quot;^?&quot;eval_mesh1&quot;^?&quot;eval_mesh2&quot;^?&quot;eval_point1&quot;^?&quot;eval_point2&quot;^?&quot;feedback_buffer&quot;^?&quot;finish&quot;^?&quot;flush&quot;^?&quot;fogf&quot;^?&quot;fogfv&quot;^?&quot;fogi&quot;^?&quot;fogiv&quot;^?&quot;front_face&quot;^?&quot;frustum&quot;^?&quot;gen_lists&quot;^?&quot;gen_textures&quot;^?&quot;get_booleanv&quot;^?&quot;get_clip_plane&quot;^?&quot;get_doublev&quot;^?&quot;get_error&quot;^?&quot;get_floatv&quot;^?&quot;get_integerv&quot;^?&quot;get_lightfv&quot;^?&quot;get_lightiv&quot;^?&quot;get_mapdv&quot;^?&quot;get_mapfv&quot;^?&quot;get_mapiv&quot;^?&quot;get_materialfv&quot;^?&quot;get_materialiv&quot;^?&quot;get_pixel_mapfv&quot;^?&quot;get_pixel_mapuiv&quot;^?&quot;get_pixel_mapusv&quot;^?&quot;get_pointerv&quot;^?&quot;get_polygon_stipple&quot;^?&quot;get_string&quot;^?&quot;get_tex_envfv&quot;^?&quot;get_tex_enviv&quot;^?&quot;get_tex_gendv&quot;^?&quot;get_tex_genfv&quot;^?&quot;get_tex_geniv&quot;^?&quot;get_tex_image&quot;^?&quot;get_tex_level_parameterfv&quot;^?&quot;get_tex_level_parameteriv&quot;^?&quot;get_tex_parameterfv&quot;^?&quot;get_tex_parameteriv&quot;^?&quot;hint&quot;^?&quot;index_mask&quot;^?&quot;index_pointer&quot;^?&quot;indexd&quot;^?&quot;indexdv&quot;^?&quot;indexf&quot;^?&quot;indexfv&quot;^?&quot;indexi&quot;^?&quot;indexiv&quot;^?&quot;indexs&quot;^?&quot;indexsv&quot;^?&quot;indexub&quot;^?&quot;indexubv&quot;^?&quot;init_names&quot;^?&quot;interleaved_arrays&quot;^?&quot;is_enabled&quot;^?&quot;is_list&quot;^?&quot;is_texture&quot;^?&quot;light_modelf&quot;^?&quot;light_modelfv&quot;^?&quot;light_modeli&quot;^?&quot;light_modeliv&quot;^?&quot;lightf&quot;^?&quot;lightfv&quot;^?&quot;lighti&quot;^?&quot;lightiv&quot;^?&quot;line_stipple&quot;^?&quot;line_width&quot;^?&quot;list_base&quot;^?&quot;load_identity&quot;^?&quot;load_matrixd&quot;^?&quot;load_matrixf&quot;^?&quot;load_name&quot;^?&quot;logic_op&quot;^?&quot;map1d&quot;^?&quot;map1f&quot;^?&quot;map2d&quot;^?&quot;map2f&quot;^?&quot;map_grid1d&quot;^?&quot;map_grid1f&quot;^?&quot;map_grid2d&quot;^?&quot;map_grid2f&quot;^?&quot;materialf&quot;^?&quot;materialfv&quot;^?&quot;materiali&quot;^?&quot;materialiv&quot;^?&quot;matrix_mode&quot;^?&quot;mult_matrixd&quot;^?&quot;mult_matrixf&quot;^?&quot;new_list&quot;^?&quot;normal3b&quot;^?&quot;normal3bv&quot;^?&quot;normal3d&quot;^?&quot;normal3dv&quot;^?&quot;normal3f&quot;^?&quot;normal3fv&quot;^?&quot;normal3i&quot;^?&quot;normal3iv&quot;^?&quot;normal3s&quot;^?&quot;normal3sv&quot;^?&quot;normal_pointer&quot;^?&quot;ortho&quot;^?&quot;pass_through&quot;^?&quot;pixel_mapfv&quot;^?&quot;pixel_mapuiv&quot;^?&quot;pixel_mapusv&quot;^?&quot;pixel_storef&quot;^?&quot;pixel_storei&quot;^?&quot;pixel_transferf&quot;^?&quot;pixel_transferi&quot;^?&quot;pixel_zoom&quot;^?&quot;point_size&quot;^?&quot;polygon_mode&quot;^?&quot;polygon_offset&quot;^?&quot;polygon_stipple&quot;^?&quot;pop_attrib&quot;^?&quot;pop_client_attrib&quot;^?&quot;pop_matrix&quot;^?&quot;pop_name&quot;^?&quot;prioritize_textures&quot;^?&quot;push_attrib&quot;^?&quot;push_client_attrib&quot;^?&quot;push_matrix&quot;^?&quot;push_name&quot;^?&quot;raster_pos2d&quot;^?&quot;raster_pos2dv&quot;^?&quot;raster_pos2f&quot;^?&quot;raster_pos2fv&quot;^?&quot;raster_pos2i&quot;^?&quot;raster_pos2iv&quot;^?&quot;raster_pos2s&quot;^?&quot;raster_pos2sv&quot;^?&quot;raster_pos3d&quot;^?&quot;raster_pos3dv&quot;^?&quot;raster_pos3f&quot;^?&quot;raster_pos3fv&quot;^?&quot;raster_pos3i&quot;^?&quot;raster_pos3iv&quot;^?&quot;raster_pos3s&quot;^?&quot;raster_pos3sv&quot;^?&quot;raster_pos4d&quot;^?&quot;raster_pos4dv&quot;^?&quot;raster_pos4f&quot;^?&quot;raster_pos4fv&quot;^?&quot;raster_pos4i&quot;^?&quot;raster_pos4iv&quot;^?&quot;raster_pos4s&quot;^?&quot;raster_pos4sv&quot;^?&quot;read_buffer&quot;^?&quot;read_pixels&quot;^?&quot;rectd&quot;^?&quot;rectdv&quot;^?&quot;rectf&quot;^?&quot;rectfv&quot;^?&quot;recti&quot;^?&quot;rectiv&quot;^?&quot;rects&quot;^?&quot;rectsv&quot;^?&quot;render_mode&quot;^?&quot;rotated&quot;^?&quot;rotatef&quot;^?&quot;scaled&quot;^?&quot;scalef&quot;^?&quot;scissor&quot;^?&quot;select_buffer&quot;^?&quot;shade_model&quot;^?&quot;stencil_func&quot;^?&quot;stencil_mask&quot;^?&quot;stencil_op&quot;^?&quot;tex_coord1d&quot;^?&quot;tex_coord1dv&quot;^?&quot;tex_coord1f&quot;^?&quot;tex_coord1fv&quot;^?&quot;tex_coord1i&quot;^?&quot;tex_coord1iv&quot;^?&quot;tex_coord1s&quot;^?&quot;tex_coord1sv&quot;^?&quot;tex_coord2d&quot;^?&quot;tex_coord2dv&quot;^?&quot;tex_coord2f&quot;^?&quot;tex_coord2fv&quot;^?&quot;tex_coord2i&quot;^?&quot;tex_coord2iv&quot;^?&quot;tex_coord2s&quot;^?&quot;tex_coord2sv&quot;^?&quot;tex_coord3d&quot;^?&quot;tex_coord3dv&quot;^?&quot;tex_coord3f&quot;^?&quot;tex_coord3fv&quot;^?&quot;tex_coord3i&quot;^?&quot;tex_coord3iv&quot;^?&quot;tex_coord3s&quot;^?&quot;tex_coord3sv&quot;^?&quot;tex_coord4d&quot;^?&quot;tex_coord4dv&quot;^?&quot;tex_coord4f&quot;^?&quot;tex_coord4fv&quot;^?&quot;tex_coord4i&quot;^?&quot;tex_coord4iv&quot;^?&quot;tex_coord4s&quot;^?&quot;tex_coord4sv&quot;^?&quot;tex_coord_pointer&quot;^?&quot;tex_envf&quot;^?&quot;tex_envfv&quot;^?&quot;tex_envi&quot;^?&quot;tex_enviv&quot;^?&quot;tex_gend&quot;^?&quot;tex_gendv&quot;^?&quot;tex_genf&quot;^?&quot;tex_genfv&quot;^?&quot;tex_geni&quot;^?&quot;tex_geniv&quot;^?&quot;tex_image1D&quot;^?&quot;tex_image2D&quot;^?&quot;tex_parameterf&quot;^?&quot;tex_parameterfv&quot;^?&quot;tex_parameteri&quot;^?&quot;tex_parameteriv&quot;^?&quot;tex_sub_image1D&quot;^?&quot;tex_sub_image2D&quot;^?&quot;translated&quot;^?&quot;translatef&quot;^?&quot;vertex2d&quot;^?&quot;vertex2dv&quot;^?&quot;vertex2f&quot;^?&quot;vertex2fv&quot;^?&quot;vertex2i&quot;^?&quot;vertex2iv&quot;^?&quot;vertex2s&quot;^?&quot;vertex2sv&quot;^?&quot;vertex3d&quot;^?&quot;vertex3dv&quot;^?&quot;vertex3f&quot;^?&quot;vertex3fv&quot;^?&quot;vertex3i&quot;^?&quot;vertex3iv&quot;^?&quot;vertex3s&quot;^?&quot;vertex3sv&quot;^?&quot;vertex4d&quot;^?&quot;vertex4dv&quot;^?&quot;vertex4f&quot;^?&quot;vertex4fv&quot;^?&quot;vertex4i&quot;^?&quot;vertex4iv&quot;^?&quot;vertex4s&quot;^?&quot;vertex4sv&quot;^?&quot;vertex_pointer&quot;^?&quot;viewport&quot;^?&quot;blend_func_separate&quot;^?&quot;blend_color&quot;^?&quot;blend_equation&quot;^?&quot;lock_arrays_EXT&quot;^?&quot;unlock_arrays_EXT&quot;^?&quot;client_active_texture&quot;^?&quot;active_texture&quot;^?&quot;multi_tex_coord1d&quot;^?&quot;multi_tex_coord1dv&quot;^?&quot;multi_tex_coord1f&quot;^?&quot;multi_tex_coord1fv&quot;^?&quot;multi_tex_coord1i&quot;^?&quot;multi_tex_coord1iv&quot;^?&quot;multi_tex_coord1s&quot;^?&quot;multi_tex_coord1sv&quot;^?&quot;multi_tex_coord2d&quot;^?&quot;multi_tex_coord2dv&quot;^?&quot;multi_tex_coord2f&quot;^?&quot;multi_tex_coord2fv&quot;^?&quot;multi_tex_coord2i&quot;^?&quot;multi_tex_coord2iv&quot;^?&quot;multi_tex_coord2s&quot;^?&quot;multi_tex_coord2sv&quot;^?&quot;multi_tex_coord3d&quot;^?&quot;multi_tex_coord3dv&quot;^?&quot;multi_tex_coord3f&quot;^?&quot;multi_tex_coord3fv&quot;^?&quot;multi_tex_coord3i&quot;^?&quot;multi_tex_coord3iv&quot;^?&quot;multi_tex_coord3s&quot;^?&quot;multi_tex_coord3sv&quot;^?&quot;multi_tex_coord4d&quot;^?&quot;multi_tex_coord4dv&quot;^?&quot;multi_tex_coord4f&quot;^?&quot;multi_tex_coord4fv&quot;^?&quot;multi_tex_coord4i&quot;^?&quot;multi_tex_coord4iv&quot;^?&quot;multi_tex_coord4s&quot;^?&quot;multi_tex_coord4sv&quot;^?&quot;load_transpose_matrixd&quot;^?&quot;load_transpose_matrixf&quot;^?&quot;mult_transpose_matrixd&quot;^?&quot;mult_transpose_matrixf&quot;^?&quot;compressed_tex_image3D&quot;^?&quot;compressed_tex_image2D&quot;^?&quot;compressed_tex_image1D&quot;^?&quot;compressed_tex_sub_image3D&quot;^?&quot;compressed_tex_sub_image2D&quot;^?&quot;compressed_tex_sub_image1D&quot;^?&quot;get_compressed_tex_image&quot;^?&quot;secondary_color3b&quot;^?&quot;secondary_color3bv&quot;^?&quot;secondary_color3d&quot;^?&quot;secondary_color3dv&quot;^?&quot;secondary_color3f&quot;^?&quot;secondary_color3fv&quot;^?&quot;secondary_color3i&quot;^?&quot;secondary_color3iv&quot;^?&quot;secondary_color3s&quot;^?&quot;secondary_color3sv&quot;^?&quot;secondary_color3ub&quot;^?&quot;secondary_color3ubv&quot;^?&quot;secondary_color3ui&quot;^?&quot;secondary_color3uiv&quot;^?&quot;secondary_color3us&quot;^?&quot;secondary_color3usv&quot;^?&quot;secondary_color_pointer&quot;^?&quot;vertex_array_range_EXT&quot;^?&quot;flush_vertex_array_range_EXT&quot;^?&quot;draw_range_elements&quot;^?&quot;color_table&quot;^?&quot;color_table_parameterfv&quot;^?&quot;color_table_parameteriv&quot;^?&quot;copy_color_table&quot;^?&quot;get_color_table&quot;^?&quot;get_color_table_parameterfv&quot;^?&quot;get_color_table_parameteriv&quot;^?&quot;color_sub_table&quot;^?&quot;copy_color_sub_table&quot;^?&quot;convolution_filter1D&quot;^?&quot;convolution_filter2D&quot;^?&quot;convolution_parameterf&quot;^?&quot;convolution_parameterfv&quot;^?&quot;convolution_parameteri&quot;^?&quot;convolution_parameteriv&quot;^?&quot;copy_convolution_filter1D&quot;^?&quot;copy_convolution_filter2D&quot;^?&quot;get_convolution_filter&quot;^?&quot;get_convolution_parameterfv&quot;^?&quot;get_convolution_parameteriv&quot;^?&quot;get_separable_filter&quot;^?&quot;separable_filter2D&quot;^?&quot;get_histogram&quot;^?&quot;get_histogram_parameterfv&quot;^?&quot;get_histogram_parameteriv&quot;^?&quot;get_minmax&quot;^?&quot;get_minmax_parameterfv&quot;^?&quot;get_minmax_parameteriv&quot;^?&quot;histogram&quot;^?&quot;minmax&quot;^?&quot;reset_histogram&quot;^?&quot;reset_minmax&quot;^?&quot;tex_image3D&quot;^?&quot;tex_sub_image3D&quot;^?&quot;copy_tex_sub_image3D&quot;^?&quot;combiner_parameterfv_NV&quot;^?&quot;combiner_parameterf_NV&quot;^?&quot;combiner_parameteriv_NV&quot;^?&quot;combiner_parameteri_NV&quot;^?&quot;combiner_input_NV&quot;^?&quot;combiner_output_NV&quot;^?&quot;final_combiner_input_NV&quot;^?&quot;get_combiner_input_parameterfv_NV&quot;^?&quot;get_combiner_input_parameteriv_NV&quot;^?&quot;get_combiner_output_parameterfv_NV&quot;^?&quot;get_combiner_output_parameteriv_NV&quot;^?&quot;get_final_combiner_input_parameterfv_NV&quot;^?&quot;get_final_combiner_input_parameteriv_NV&quot;^?&quot;combiner_stage_parameterfv_NV&quot;^?&quot;get_combiner_stage_parameterfv_NV&quot;^?&quot;texture_range_APPLE&quot;^?&quot;get_tex_parameter_pointerv_APPLE&quot;^?&quot;blend_equation_separate_EXT&quot;^?&quot;sample_coverage&quot;^?&quot;sample_pass&quot;^?&quot;pn_trianglesi_ATI&quot;^?&quot;pn_trianglesf_ATI&quot;^?&quot;gen_fences_APPLE&quot;^?&quot;delete_fences_APPLE&quot;^?&quot;set_fence_APPLE&quot;^?&quot;is_fence_APPLE&quot;^?&quot;test_fence_APPLE&quot;^?&quot;finish_fence_APPLE&quot;^?&quot;test_object_APPLE&quot;^?&quot;finish_object_APPLE&quot;^?&quot;bind_program_ARB&quot;^?&quot;delete_programs_ARB&quot;^?&quot;gen_programs_ARB&quot;^?&quot;is_program_ARB&quot;^?&quot;vertex_attrib1s_ARB&quot;^?&quot;vertex_attrib1f_ARB&quot;^?&quot;vertex_attrib1d_ARB&quot;^?&quot;vertex_attrib2s_ARB&quot;^?&quot;vertex_attrib2f_ARB&quot;^?&quot;vertex_attrib2d_ARB&quot;^?&quot;vertex_attrib3s_ARB&quot;^?&quot;vertex_attrib3f_ARB&quot;^?&quot;vertex_attrib3d_ARB&quot;^?&quot;vertex_attrib4s_ARB&quot;^?&quot;vertex_attrib4f_ARB&quot;^?&quot;vertex_attrib4d_ARB&quot;^?&quot;vertex_attrib4Nub_ARB&quot;^?&quot;vertex_attrib1sv_ARB&quot;^?&quot;vertex_attrib1fv_ARB&quot;^?&quot;vertex_attrib1dv_ARB&quot;^?&quot;vertex_attrib2sv_ARB&quot;^?&quot;vertex_attrib2fv_ARB&quot;^?&quot;vertex_attrib2dv_ARB&quot;^?&quot;vertex_attrib3sv_ARB&quot;^?&quot;vertex_attrib3fv_ARB&quot;^?&quot;vertex_attrib3dv_ARB&quot;^?&quot;vertex_attrib4bv_ARB&quot;^?&quot;vertex_attrib4sv_ARB&quot;^?&quot;vertex_attrib4iv_ARB&quot;^?&quot;vertex_attrib4ubv_ARB&quot;^?&quot;vertex_attrib4usv_ARB&quot;^?&quot;vertex_attrib4uiv_ARB&quot;^?&quot;vertex_attrib4fv_ARB&quot;^?&quot;vertex_attrib4dv_ARB&quot;^?&quot;vertex_attrib4Nbv_ARB&quot;^?&quot;vertex_attrib4Nsv_ARB&quot;^?&quot;vertex_attrib4Niv_ARB&quot;^?&quot;vertex_attrib4Nubv_ARB&quot;^?&quot;vertex_attrib4Nusv_ARB&quot;^?&quot;vertex_attrib4Nuiv_ARB&quot;^?&quot;vertex_attrib_pointer_ARB&quot;^?&quot;enable_vertex_attrib_array_ARB&quot;^?&quot;disable_vertex_attrib_array_ARB&quot;^?&quot;get_vertex_attribdv_ARB&quot;^?&quot;get_vertex_attribfv_ARB&quot;^?&quot;get_vertex_attribiv_ARB&quot;^?&quot;get_vertex_attrib_pointerv_ARB&quot;^?&quot;program_env_parameter4d_ARB&quot;^?&quot;program_env_parameter4dv_ARB&quot;^?&quot;program_env_parameter4f_ARB&quot;^?&quot;program_env_parameter4fv_ARB&quot;^?&quot;program_local_parameter4d_ARB&quot;^?&quot;program_local_parameter4dv_ARB&quot;^?&quot;program_local_parameter4f_ARB&quot;^?&quot;program_local_parameter4fv_ARB&quot;^?&quot;get_program_env_parameterdv_ARB&quot;^?&quot;get_program_env_parameterfv_ARB&quot;^?&quot;get_program_local_parameterdv_ARB&quot;^?&quot;get_program_local_parameterfv_ARB&quot;^?&quot;program_string_ARB&quot;^?&quot;get_program_string_ARB&quot;^?&quot;get_programiv_ARB&quot;^?&quot;enable_vertex_attrib_ARB&quot;^?&quot;disable_vertex_attrib_ARB&quot;^?&quot;is_vertex_attrib_enabled_ARB&quot;^?&quot;map_vertex_attrib1d_ARB&quot;^?&quot;map_vertex_attrib1f_ARB&quot;^?&quot;map_vertex_attrib2d_ARB&quot;^?&quot;map_vertex_attrib2f_ARB&quot;^?&quot;point_parameterf&quot;^?&quot;point_parameterfv&quot;^?&quot;point_parameteri&quot;^?&quot;point_parameteriv&quot;^?&quot;fog_coordf&quot;^?&quot;fog_coordfv&quot;^?&quot;fog_coordd&quot;^?&quot;fog_coorddv&quot;^?&quot;fog_coord_pointer&quot;^?&quot;vertex_array_parameteri_EXT&quot;^?&quot;bind_vertex_array_EXT&quot;^?&quot;delete_vertex_arrays_EXT&quot;^?&quot;gen_vertex_arrays_EXT&quot;^?&quot;is_vertex_array_EXT&quot;^?&quot;element_pointer_APPLE&quot;^?&quot;draw_element_array_APPLE&quot;^?&quot;draw_range_element_array_APPLE&quot;^?&quot;weightbv_ARB&quot;^?&quot;weightsv_ARB&quot;^?&quot;weightiv_ARB&quot;^?&quot;weightfv_ARB&quot;^?&quot;weightdv_ARB&quot;^?&quot;weightubv_ARB&quot;^?&quot;weightusv_ARB&quot;^?&quot;weightuiv_ARB&quot;^?&quot;weight_pointer_ARB&quot;^?&quot;vertex_blend_ARB&quot;^?&quot;multi_draw_arrays&quot;^?&quot;multi_draw_elements&quot;^?&quot;window_pos2d&quot;^?&quot;window_pos2dv&quot;^?&quot;window_pos2f&quot;^?&quot;window_pos2fv&quot;^?&quot;window_pos2i&quot;^?&quot;window_pos2iv&quot;^?&quot;window_pos2s&quot;^?&quot;window_pos2sv&quot;^?&quot;window_pos3d&quot;^?&quot;window_pos3dv&quot;^?&quot;window_pos3f&quot;^?&quot;window_pos3fv&quot;^?&quot;window_pos3i&quot;^?&quot;window_pos3iv&quot;^?&quot;window_pos3s&quot;^?&quot;window_pos3sv&quot;^?&quot;active_stencil_face_EXT&quot;^?&quot;stencil_op_separate_ATI&quot;^?&quot;stencil_func_separate_ATI&quot;^?&quot;flush_render_APPLE&quot;^?&quot;finish_render_APPLE&quot;^?&quot;swap_APPLE&quot;^?&quot;delete_object_ARB&quot;^?&quot;get_handle_ARB&quot;^?&quot;detach_object_ARB&quot;^?&quot;create_shader_object_ARB&quot;^?&quot;shader_source_ARB&quot;^?&quot;compile_shader_ARB&quot;^?&quot;create_program_object_ARB&quot;^?&quot;attach_object_ARB&quot;^?&quot;link_program_ARB&quot;^?&quot;use_program_object_ARB&quot;^?&quot;validate_program_ARB&quot;^?&quot;uniform1f_ARB&quot;^?&quot;uniform2f_ARB&quot;^?&quot;uniform3f_ARB&quot;^?&quot;uniform4f_ARB&quot;^?&quot;uniform1i_ARB&quot;^?&quot;uniform2i_ARB&quot;^?&quot;uniform3i_ARB&quot;^?&quot;uniform4i_ARB&quot;^?&quot;uniform1fv_ARB&quot;^?&quot;uniform2fv_ARB&quot;^?&quot;uniform3fv_ARB&quot;^?&quot;uniform4fv_ARB&quot;^?&quot;uniform1iv_ARB&quot;^?&quot;uniform2iv_ARB&quot;^?&quot;uniform3iv_ARB&quot;^?&quot;uniform4iv_ARB&quot;^?&quot;uniform_matrix2fv_ARB&quot;^?&quot;uniform_matrix3fv_ARB&quot;^?&quot;uniform_matrix4fv_ARB&quot;^?&quot;get_object_parameterfv_ARB&quot;^?&quot;get_object_parameteriv_ARB&quot;^?&quot;get_info_log_ARB&quot;^?&quot;get_attached_objects_ARB&quot;^?&quot;get_uniform_location_ARB&quot;^?&quot;get_active_uniform_ARB&quot;^?&quot;get_uniformfv_ARB&quot;^?&quot;get_uniformiv_ARB&quot;^?&quot;get_shader_source_ARB&quot;^?&quot;bind_attrib_location_ARB&quot;^?&quot;get_active_attrib_ARB&quot;^?&quot;get_attrib_location_ARB&quot;^?&quot;pad&quot;^?&quot;gen_queries&quot;^?&quot;delete_queries&quot;^?&quot;is_query&quot;^?&quot;begin_query&quot;^?&quot;end_query&quot;^?&quot;get_queryiv&quot;^?&quot;get_query_objectiv&quot;^?&quot;get_query_objectuiv&quot;^?&quot;bind_buffer&quot;^?&quot;delete_buffers&quot;^?&quot;gen_buffers&quot;^?&quot;is_buffer&quot;^?&quot;buffer_data&quot;^?&quot;buffer_sub_data&quot;^?&quot;get_buffer_sub_data&quot;^?&quot;map_buffer&quot;^?&quot;unmap_buffer&quot;^?&quot;get_buffer_parameteriv&quot;^?&quot;get_buffer_pointerv&quot;^?&quot;depth_bounds_EXT&quot;^?&quot;draw_buffers_ARB&quot;^?&quot;is_shader&quot;^?&quot;is_program&quot;^?&quot;get_shaderiv&quot;^?&quot;get_programiv&quot;^?&quot;get_shader_info_log&quot;^?&quot;get_program_info_log&quot;^?&quot;stencil_func_separate&quot;^?&quot;stencil_mask_separate&quot;^?&quot;multi_draw_element_array_APPLE&quot;^?&quot;multi_draw_range_element_array_APPLE&quot;^?&quot;is_renderbuffer_EXT&quot;^?&quot;bind_renderbuffer_EXT&quot;^?&quot;delete_renderbuffers_EXT&quot;^?&quot;gen_renderbuffers_EXT&quot;^?&quot;renderbuffer_storage_EXT&quot;^?&quot;get_renderbuffer_parameteriv_EXT&quot;^?&quot;is_framebuffer_EXT&quot;^?&quot;bind_framebuffer_EXT&quot;^?&quot;delete_framebuffers_EXT&quot;^?&quot;gen_framebuffers_EXT&quot;^?&quot;check_framebuffer_status_EXT&quot;^?&quot;framebuffer_texture1D_EXT&quot;^?&quot;framebuffer_texture2D_EXT&quot;^?&quot;framebuffer_texture3D_EXT&quot;^?&quot;framebuffer_renderbuffer_EXT&quot;^?&quot;get_framebuffer_attachment_parameteriv_EXT&quot;^?&quot;generate_mipmap_EXT&quot;^?&quot;buffer_parameteri_APPLE&quot;^?&quot;flush_mapped_buffer_range_APPLE&quot;^?&quot;program_env_parameters4fv_EXT&quot;^?&quot;program_local_parameters4fv_EXT&quot;^?&quot;object_purgeable_APPLE&quot;^?&quot;object_unpurgeable_APPLE&quot;^?&quot;get_object_parameteriv_APPLE&quot;^?&quot;program_parameteri_EXT&quot;^?&quot;framebuffer_texture_EXT&quot;^?&quot;framebuffer_texture_layer_EXT&quot;^?&quot;framebuffer_texture_face_EXT&quot;^?&quot;bind_buffer_range_EXT&quot;^?&quot;bind_buffer_offset_EXT&quot;^?&quot;bind_buffer_base_EXT&quot;^?&quot;begin_transform_feedback_EXT&quot;^?&quot;end_transform_feedback_EXT&quot;^?&quot;transform_feedback_varyings_EXT&quot;^?&quot;get_transform_feedback_varying_EXT&quot;^?&quot;get_integer_indexedv_EXT&quot;^?&quot;get_boolean_indexedv_EXT&quot;^?&quot;uniform_buffer_EXT&quot;^?&quot;get_uniform_buffer_size_EXT&quot;^?&quot;get_uniform_buffer_offset_EXT&quot;^?&quot;clear_colorIi_EXT&quot;^?&quot;clear_colorIui_EXT&quot;^?&quot;tex_parameterIiv_EXT&quot;^?&quot;tex_parameterIuiv_EXT&quot;^?&quot;get_tex_parameterIiv_EXT&quot;^?&quot;get_tex_parameterIiuv_EXT&quot;^?&quot;vertex_attribI1i_EXT&quot;^?&quot;vertex_attribI2i_EXT&quot;^?&quot;vertex_attribI3i_EXT&quot;^?&quot;vertex_attribI4i_EXT&quot;^?&quot;vertex_attribI1ui_EXT&quot;^?&quot;vertex_attribI2ui_EXT&quot;^?&quot;vertex_attribI3ui_EXT&quot;^?&quot;vertex_attribI4ui_EXT&quot;^?&quot;vertex_attribI1iv_EXT&quot;^?&quot;vertex_attribI2iv_EXT&quot;^?&quot;vertex_attribI3iv_EXT&quot;^?&quot;vertex_attribI4iv_EXT&quot;^?&quot;vertex_attribI1uiv_EXT&quot;^?&quot;vertex_attribI2uiv_EXT&quot;^?&quot;vertex_attribI3uiv_EXT&quot;^?&quot;vertex_attribI4uiv_EXT&quot;^?&quot;vertex_attribI4bv_EXT&quot;^?&quot;vertex_attribI4sv_EXT&quot;^?&quot;vertex_attribI4ubv_EXT&quot;^?&quot;vertex_attribI4usv_EXT&quot;^?&quot;vertex_attribI_pointer_EXT&quot;^?&quot;get_vertex_attribIiv_EXT&quot;^?&quot;get_vertex_attribIuiv_EXT&quot;^?&quot;uniform1ui_EXT&quot;^?&quot;uniform2ui_EXT&quot;^?&quot;uniform3ui_EXT&quot;^?&quot;uniform4ui_EXT&quot;^?&quot;uniform1uiv_EXT&quot;^?&quot;uniform2uiv_EXT&quot;^?&quot;uniform3uiv_EXT&quot;^?&quot;uniform4uiv_EXT&quot;^?&quot;get_uniformuiv_EXT&quot;^?&quot;bind_frag_data_location_EXT&quot;^?&quot;get_frag_data_location_EXT&quot;^?&quot;shader_binary_OES&quot;^?&quot;get_shader_precision_format_OES&quot;^?&quot;release_shader_compiler_OES&quot;^?&quot;get_renderbuffer_storage_formatsiv_OES&quot;^?&quot;uniform_matrix2x3fv&quot;^?&quot;uniform_matrix3x2fv&quot;^?&quot;uniform_matrix2x4fv&quot;^?&quot;uniform_matrix4x2fv&quot;^?&quot;uniform_matrix3x4fv&quot;^?&quot;uniform_matrix4x3fv&quot;^?&quot;blit_framebuffer_EXT&quot;^?&quot;renderbuffer_storage_multisample_EXT&quot;^?&quot;depth_rangef&quot;^?&quot;clear_depthf&quot;^?}'>
<field name='accum' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='alpha_func' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLclampf)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='are_textures_resident' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLsizei, GLuint *, GLboolean *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<arg declared_type='GLboolean*' type='*'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='array_element' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='begin' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_texture' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bitmap' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blend_func' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='call_list' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='call_lists' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear' function_pointer='true' declared_type='void (*)(GLIContext, GLbitfield)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_accum' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_color' function_pointer='true' declared_type='void (*)(GLIContext, GLclampf, GLclampf, GLclampf, GLclampf)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_depth' function_pointer='true' declared_type='void (*)(GLIContext, GLclampd)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampd' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_index' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_stencil' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clip_plane' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3b' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte, GLbyte, GLbyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3bv' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3ub' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte, GLubyte, GLubyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3ubv' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3ui' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3uiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3us' function_pointer='true' declared_type='void (*)(GLIContext, GLushort, GLushort, GLushort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color3usv' function_pointer='true' declared_type='void (*)(GLIContext, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4b' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte, GLbyte, GLbyte, GLbyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4bv' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4ub' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte, GLubyte, GLubyte, GLubyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4ubv' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4ui' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4uiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4us' function_pointer='true' declared_type='void (*)(GLIContext, GLushort, GLushort, GLushort, GLushort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color4usv' function_pointer='true' declared_type='void (*)(GLIContext, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_mask' function_pointer='true' declared_type='void (*)(GLIContext, GLboolean, GLboolean, GLboolean, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_material' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_pixels' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLsizei, GLsizei, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_tex_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_tex_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_tex_sub_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_tex_sub_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='cull_face' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_lists' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_textures' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='depth_func' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='depth_mask' function_pointer='true' declared_type='void (*)(GLIContext, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='depth_range' function_pointer='true' declared_type='void (*)(GLIContext, GLclampd, GLclampd)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampd' type='d'/>
<arg declared_type='GLclampd' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='disable' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='disable_client_state' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_arrays' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_buffer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_elements' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_pixels' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='edge_flag' function_pointer='true' declared_type='void (*)(GLIContext, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='edge_flag_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='edge_flagv' function_pointer='true' declared_type='void (*)(GLIContext, GLboolean *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLboolean*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='enable' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='enable_client_state' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='end' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='end_list' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord1d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord1dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord1f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord1fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord2d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord2f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_coord2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_mesh1' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_mesh2' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_point1' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='eval_point2' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='feedback_buffer' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='finish' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='flush' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fogf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fogfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fogi' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fogiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='front_face' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='frustum' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_lists' function_pointer='true' declared_type='GLuint (*)(GLIContext, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='GLuint' type='I'/>
</field>
<field name='gen_textures' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_booleanv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLboolean *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_clip_plane' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_doublev' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_error' function_pointer='true' declared_type='GLenum (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='GLenum' type='I'/>
</field>
<field name='get_floatv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_integerv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_lightfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_lightiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_mapdv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_mapfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_mapiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_materialfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_materialiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_pixel_mapfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_pixel_mapuiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_pixel_mapusv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLushort*' type='^S'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_pointerv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLvoid **)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_polygon_stipple' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_string' function_pointer='true' declared_type='GLubyte *(*)(GLIContext, GLenum)' type='^?' const='true'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLubyte*' type='*' const='true'/>
</field>
<field name='get_tex_envfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_enviv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_gendv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_genfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_geniv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_image' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_level_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_level_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='hint' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='index_mask' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='index_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexdv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexfv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexi' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexiv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexs' function_pointer='true' declared_type='void (*)(GLIContext, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexsv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexub' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='indexubv' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='init_names' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='interleaved_arrays' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_enabled' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='is_list' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='is_texture' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='light_modelf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='light_modelfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='light_modeli' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='light_modeliv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lightf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lightfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lighti' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lightiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='line_stipple' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLushort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</field>
<field name='line_width' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='list_base' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_identity' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_matrixd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_matrixf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_name' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='logic_op' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map1d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map1f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map2d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map2f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_grid1d' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_grid1f' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_grid2d' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_grid2f' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='materialf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='materialfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='materiali' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='materialiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='matrix_mode' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='mult_matrixd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='mult_matrixf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='new_list' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3b' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte, GLbyte, GLbyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3bv' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='normal_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='ortho' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pass_through' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_mapfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_mapuiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_mapusv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_storef' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_storei' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_transferf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_transferi' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pixel_zoom' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='point_size' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='polygon_mode' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='polygon_offset' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='polygon_stipple' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pop_attrib' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pop_client_attrib' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pop_matrix' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pop_name' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='prioritize_textures' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *, GLclampf *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<arg declared_type='GLclampf*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='push_attrib' function_pointer='true' declared_type='void (*)(GLIContext, GLbitfield)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='push_client_attrib' function_pointer='true' declared_type='void (*)(GLIContext, GLbitfield)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='push_matrix' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='push_name' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos2sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='raster_pos4sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='read_buffer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='read_pixels' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectdv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectfv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='recti' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectiv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rects' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rectsv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='render_mode' function_pointer='true' declared_type='GLint (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLint' type='i'/>
</field>
<field name='rotated' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='rotatef' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='scaled' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='scalef' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='scissor' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='select_buffer' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='shade_model' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_func' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_mask' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_op' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1i' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord1sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord2sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord4sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_coord_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_envf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_envfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_envi' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_enviv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_gend' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_gendv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_genf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_genfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_geni' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_geniv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLint, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameterf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameteri' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_sub_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_sub_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='translated' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='translatef' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex2sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex4sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='viewport' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blend_func_separate' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blend_color' function_pointer='true' declared_type='void (*)(GLIContext, GLclampf, GLclampf, GLclampf, GLclampf)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blend_equation' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='lock_arrays_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='unlock_arrays_EXT' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='client_active_texture' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='active_texture' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1dv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1fv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1i' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1iv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1s' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord1sv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2i' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2iv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2s' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord2sv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3i' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3s' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4d' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4dv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4f' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4i' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4iv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4s' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_tex_coord4sv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_transpose_matrixd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='load_transpose_matrixf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='mult_transpose_matrixd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='mult_transpose_matrixf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_image3D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_sub_image3D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_sub_image2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compressed_tex_sub_image1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_compressed_tex_image' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3b' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte, GLbyte, GLbyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<arg declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3bv' function_pointer='true' declared_type='void (*)(GLIContext, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3ub' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte, GLubyte, GLubyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3ubv' function_pointer='true' declared_type='void (*)(GLIContext, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3ui' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3uiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3us' function_pointer='true' declared_type='void (*)(GLIContext, GLushort, GLushort, GLushort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<arg declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color3usv' function_pointer='true' declared_type='void (*)(GLIContext, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='secondary_color_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_array_range_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='flush_vertex_array_range_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_range_elements' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint, GLsizei, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_table' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_table_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_table_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_color_table' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_color_table' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_color_table_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_color_table_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='color_sub_table' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_color_sub_table' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLint, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_filter1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_filter2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_parameterf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_parameteri' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='convolution_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_convolution_filter1D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_convolution_filter2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint, GLint, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_convolution_filter' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_convolution_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_convolution_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_separable_filter' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLvoid *, GLvoid *, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<arg declared_type='GLvoid*' type='^v'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='separable_filter2D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, GLvoid *, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_histogram' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLboolean, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_histogram_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_histogram_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_minmax' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLboolean, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_minmax_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_minmax_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='histogram' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLenum, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='minmax' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='reset_histogram' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='reset_minmax' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_image3D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_sub_image3D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='copy_tex_sub_image3D' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_parameterf_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_parameteriv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_parameteri_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_input_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_output_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='final_combiner_input_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_combiner_input_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_combiner_input_parameteriv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_combiner_output_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_combiner_output_parameteriv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_final_combiner_input_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_final_combiner_input_parameteriv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='combiner_stage_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_combiner_stage_parameterfv_NV' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='texture_range_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_parameter_pointerv_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLvoid **)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blend_equation_separate_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='sample_coverage' function_pointer='true' declared_type='void (*)(GLIContext, GLclampf, GLboolean)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='sample_pass' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pn_trianglesi_ATI' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='pn_trianglesf_ATI' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_fences_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_fences_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='set_fence_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_fence_APPLE' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='test_fence_APPLE' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='finish_fence_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='test_object_APPLE' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='finish_object_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_program_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_programs_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_programs_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_program_ARB' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='vertex_attrib1s_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib1f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib1d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2s_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3s_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4s_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nub_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLubyte, GLubyte, GLubyte, GLubyte)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<arg declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib1sv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib1fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib1dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2sv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib2dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3sv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib3dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4bv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4sv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4iv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4ubv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4usv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4uiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nbv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nsv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Niv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nubv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nusv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib4Nuiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attrib_pointer_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLenum, GLboolean, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='enable_vertex_attrib_array_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='disable_vertex_attrib_array_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attribdv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attribfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attribiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attrib_pointerv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLvoid **)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_env_parameter4d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_env_parameter4dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_env_parameter4f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_env_parameter4fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_local_parameter4d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_local_parameter4dv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_local_parameter4f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_local_parameter4fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_env_parameterdv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_env_parameterfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_local_parameterdv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_local_parameterfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_string_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_string_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_programiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='enable_vertex_attrib_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='disable_vertex_attrib_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_vertex_attrib_enabled_ARB' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='map_vertex_attrib1d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_vertex_attrib1f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_vertex_attrib2d_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_vertex_attrib2f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='point_parameterf' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='point_parameterfv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='point_parameteri' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='point_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fog_coordf' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fog_coordfv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fog_coordd' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fog_coorddv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='fog_coord_pointer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_array_parameteri_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_vertex_array_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_vertex_arrays_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_vertex_arrays_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_vertex_array_EXT' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='element_pointer_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_element_array_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_range_element_array_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint, GLint, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightbv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightsv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightdv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightubv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightusv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weightuiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='weight_pointer_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_blend_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_draw_arrays' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *, GLsizei *, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<arg declared_type='GLsizei*' type='^i' const='true'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_draw_elements' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei *, GLenum, GLvoid **, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei*' type='^i' const='true'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid**' type='^^v' const='true'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos2sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3d' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble, GLdouble, GLdouble)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<arg declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3dv' function_pointer='true' declared_type='void (*)(GLIContext, GLdouble *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3f' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3i' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3iv' function_pointer='true' declared_type='void (*)(GLIContext, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3s' function_pointer='true' declared_type='void (*)(GLIContext, GLshort, GLshort, GLshort)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<arg declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field name='window_pos3sv' function_pointer='true' declared_type='void (*)(GLIContext, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='active_stencil_face_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_op_separate_ATI' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_func_separate_ATI' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='flush_render_APPLE' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='finish_render_APPLE' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='swap_APPLE' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_object_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_handle_ARB' function_pointer='true' declared_type='GLhandleARB (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLhandleARB' type='^v'/>
</field>
<field name='detach_object_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='create_shader_object_ARB' function_pointer='true' declared_type='GLhandleARB (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLhandleARB' type='^v'/>
</field>
<field name='shader_source_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLsizei, GLcharARB **, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLcharARB**' type='^*' const='true'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='compile_shader_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='create_program_object_ARB' function_pointer='true' declared_type='GLhandleARB (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='GLhandleARB' type='^v'/>
</field>
<field name='attach_object_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='link_program_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='use_program_object_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='validate_program_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4f_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLfloat, GLfloat, GLfloat, GLfloat)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<arg declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1i_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2i_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3i_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4i_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1iv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2iv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3iv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4iv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix2fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix3fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix4fv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_object_parameterfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLenum, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_object_parameteriv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_info_log_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLsizei, GLsizei *, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLcharARB*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_attached_objects_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLsizei, GLsizei *, GLhandleARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLhandleARB*' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_uniform_location_ARB' function_pointer='true' declared_type='GLint (*)(GLIContext, GLhandleARB, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLcharARB*' type='*' const='true'/>
<retval declared_type='GLint' type='i'/>
</field>
<field name='get_active_uniform_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLint*' type='^i'/>
<arg declared_type='GLenum*' type='^I'/>
<arg declared_type='GLcharARB*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_uniformfv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLint, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_uniformiv_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_shader_source_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLsizei, GLsizei *, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLcharARB*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_attrib_location_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLuint, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLcharARB*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_active_attrib_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLint*' type='^i'/>
<arg declared_type='GLenum*' type='^I'/>
<arg declared_type='GLcharARB*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_attrib_location_ARB' function_pointer='true' declared_type='GLint (*)(GLIContext, GLhandleARB, GLcharARB *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLhandleARB' type='^v'/>
<arg declared_type='GLcharARB*' type='*' const='true'/>
<retval declared_type='GLint' type='i'/>
</field>
<field name='pad' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_queries' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_queries' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_query' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='begin_query' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='end_query' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_queryiv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_query_objectiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_query_objectuiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_buffer' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_buffers' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_buffers' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_buffer' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='buffer_data' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizeiptrARB, GLvoid *, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizeiptrARB' type='l' type64='q'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='buffer_sub_data' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLintptrARB, GLsizeiptrARB, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLintptrARB' type='l' type64='q'/>
<arg declared_type='GLsizeiptrARB' type='l' type64='q'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_buffer_sub_data' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLintptrARB, GLsizeiptrARB, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLintptrARB' type='l' type64='q'/>
<arg declared_type='GLsizeiptrARB' type='l' type64='q'/>
<arg declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='map_buffer' function_pointer='true' declared_type='GLvoid *(*)(GLIContext, GLenum, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLvoid*' type='^v'/>
</field>
<field name='unmap_buffer' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='get_buffer_parameteriv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_buffer_pointerv' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLvoid **)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field name='depth_bounds_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLclampd, GLclampd)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampd' type='d'/>
<arg declared_type='GLclampd' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field name='draw_buffers_ARB' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLenum *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_shader' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='is_program' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='get_shaderiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_programiv' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_shader_info_log' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLsizei, GLsizei *, GLchar *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_program_info_log' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLsizei, GLsizei *, GLchar *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_func_separate' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='stencil_mask_separate' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_draw_element_array_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint *, GLsizei *, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<arg declared_type='GLsizei*' type='^i' const='true'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='multi_draw_range_element_array_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint, GLint *, GLsizei *, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<arg declared_type='GLsizei*' type='^i' const='true'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_renderbuffer_EXT' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='bind_renderbuffer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_renderbuffers_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_renderbuffers_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='renderbuffer_storage_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_renderbuffer_parameteriv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='is_framebuffer_EXT' function_pointer='true' declared_type='GLboolean (*)(GLIContext, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</field>
<field name='bind_framebuffer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='delete_framebuffers_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='gen_framebuffers_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='check_framebuffer_status_EXT' function_pointer='true' declared_type='GLenum (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLenum' type='I'/>
</field>
<field name='framebuffer_texture1D_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_texture2D_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_texture3D_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLuint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_renderbuffer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_framebuffer_attachment_parameteriv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='generate_mipmap_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='buffer_parameteri_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='flush_mapped_buffer_range_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLintptrARB, GLsizeiptrARB)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLintptrARB' type='l' type64='q'/>
<arg declared_type='GLsizeiptrARB' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_env_parameters4fv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_local_parameters4fv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLsizei, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='object_purgeable_APPLE' function_pointer='true' declared_type='GLenum (*)(GLIContext, GLenum, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLenum' type='I'/>
</field>
<field name='object_unpurgeable_APPLE' function_pointer='true' declared_type='GLenum (*)(GLIContext, GLenum, GLuint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='GLenum' type='I'/>
</field>
<field name='get_object_parameteriv_APPLE' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='program_parameteri_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_texture_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_texture_layer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLuint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='framebuffer_texture_face_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLuint, GLint, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_buffer_range_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint, GLintptr, GLsizeiptr)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLintptr' type='l' type64='q'/>
<arg declared_type='GLsizeiptr' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_buffer_offset_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint, GLintptr)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLintptr' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_buffer_base_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='begin_transform_feedback_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='end_transform_feedback_EXT' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='transform_feedback_varyings_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLsizei, GLchar **, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLchar**' type='^*' const='true'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_transform_feedback_varying_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLsizei*' type='^i'/>
<arg declared_type='GLenum*' type='^I'/>
<arg declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_integer_indexedv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_boolean_indexedv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLuint, GLboolean *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLboolean*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_buffer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_uniform_buffer_size_EXT' function_pointer='true' declared_type='GLint (*)(GLIContext, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='GLint' type='i'/>
</field>
<field name='get_uniform_buffer_offset_EXT' function_pointer='true' declared_type='GLintptr (*)(GLIContext, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='GLintptr' type='l' type64='q'/>
</field>
<field name='clear_colorIi_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_colorIui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameterIiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='tex_parameterIuiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_parameterIiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_tex_parameterIiuv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI1i_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI2i_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI3i_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4i_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLint, GLint, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI1ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI2ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI3ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI1iv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI2iv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI3iv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4iv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI1uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI2uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI3uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4bv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLbyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4sv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLshort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4ubv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLubyte *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI4usv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLushort *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='vertex_attribI_pointer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLenum, GLsizei, GLvoid *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attribIiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_vertex_attribIuiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLenum, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4ui_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint, GLuint, GLuint, GLuint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform1uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform2uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform3uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform4uiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_uniformuiv_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLint, GLuint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='bind_frag_data_location_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLuint, GLuint, GLchar *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_frag_data_location_EXT' function_pointer='true' declared_type='GLint (*)(GLIContext, GLuint, GLchar *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='GLint' type='i'/>
</field>
<field name='shader_binary_OES' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLuint *, GLenum, GLvoid *, GLint)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLuint*' type='^I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLvoid*' type='^v' const='true'/>
<arg declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_shader_precision_format_OES' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLenum, GLint *, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint*' type='^i'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='release_shader_compiler_OES' function_pointer='true' declared_type='void (*)(GLIContext)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<retval declared_type='void' type='v'/>
</field>
<field name='get_renderbuffer_storage_formatsiv_OES' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLint, GLint *, GLint *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint*' type='^i'/>
<arg declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix2x3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix3x2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix2x4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix4x2fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix3x4fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='uniform_matrix4x3fv' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLsizei, GLboolean, GLfloat *)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLboolean' type='C'/>
<arg declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</field>
<field name='blit_framebuffer_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLint' type='i'/>
<arg declared_type='GLbitfield' type='I'/>
<arg declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field name='renderbuffer_storage_multisample_EXT' function_pointer='true' declared_type='void (*)(GLIContext, GLenum, GLsizei, GLenum, GLsizei, GLsizei)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLenum' type='I'/>
<arg declared_type='GLsizei' type='i'/>
<arg declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field name='depth_rangef' function_pointer='true' declared_type='void (*)(GLIContext, GLclampf, GLclampf)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampf' type='f'/>
<arg declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</field>
<field name='clear_depthf' function_pointer='true' declared_type='void (*)(GLIContext, GLclampf)' type='^?'>
<arg declared_type='GLIContext' type='^{__GLIContextRec=}'/>
<arg declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<opaque name='AGLPbuffer' type='^{__AGLPBufferRec=}'/>
<opaque name='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<opaque name='AGLPrivate' type='^{__AGLPrivateRec=}'/>
<opaque name='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
<opaque name='GLIContext' type='^{__GLIContextRec=}'/>
<opaque name='GLUnurbs' type='^{GLUnurbs=}'/>
<opaque name='GLUnurbsObj' type='^{GLUnurbs=}'/>
<opaque name='GLUquadric' type='^{GLUquadric=}'/>
<opaque name='GLUquadricObj' type='^{GLUquadric=}'/>
<opaque name='GLUtesselator' type='^{GLUtesselator=}'/>
<opaque name='GLUtesselatorObj' type='^{GLUtesselator=}'/>
<opaque name='GLUtriangulatorObj' type='^{GLUtesselator=}'/>
<enum name='AGL_0_BIT' value='1'/>
<enum name='AGL_10_BIT' value='256'/>
<enum name='AGL_128_BIT' value='65536'/>
<enum name='AGL_12_BIT' value='512'/>
<enum name='AGL_16_BIT' value='1024'/>
<enum name='AGL_1_BIT' value='2'/>
<enum name='AGL_24_BIT' value='2048'/>
<enum name='AGL_2_BIT' value='4'/>
<enum name='AGL_32_BIT' value='4096'/>
<enum name='AGL_3_BIT' value='8'/>
<enum name='AGL_48_BIT' value='8192'/>
<enum name='AGL_4_BIT' value='16'/>
<enum name='AGL_5_BIT' value='32'/>
<enum name='AGL_64_BIT' value='16384'/>
<enum name='AGL_6_BIT' value='64'/>
<enum name='AGL_8_BIT' value='128'/>
<enum name='AGL_96_BIT' value='32768'/>
<enum name='AGL_ACCELERATED' value='73'/>
<enum name='AGL_ACCUM_ALPHA_SIZE' value='17'/>
<enum name='AGL_ACCUM_BLUE_SIZE' value='16'/>
<enum name='AGL_ACCUM_GREEN_SIZE' value='15'/>
<enum name='AGL_ACCUM_MODES' value='104'/>
<enum name='AGL_ACCUM_RED_SIZE' value='14'/>
<enum name='AGL_ALLOW_OFFLINE_RENDERERS' value='96'/>
<enum name='AGL_ALL_RENDERERS' value='1'/>
<enum name='AGL_ALPHA_SIZE' value='11'/>
<enum name='AGL_ARGB12121212_BIT' value='2097152'/>
<enum name='AGL_ARGB1555_BIT' value='1024'/>
<enum name='AGL_ARGB16161616_BIT' value='8388608'/>
<enum name='AGL_ARGB2101010_BIT' value='262144'/>
<enum name='AGL_ARGB4444_BIT' value='128'/>
<enum name='AGL_ARGB8888_BIT' value='32768'/>
<enum name='AGL_AUX_BUFFERS' value='7'/>
<enum name='AGL_AUX_DEPTH_STENCIL' value='57'/>
<enum name='AGL_BACKING_STORE' value='76'/>
<enum name='AGL_BAD_ALLOC' value='10016'/>
<enum name='AGL_BAD_ATTRIBUTE' value='10000'/>
<enum name='AGL_BAD_CONNECTION' value='10017'/>
<enum name='AGL_BAD_CONTEXT' value='10004'/>
<enum name='AGL_BAD_DRAWABLE' value='10005'/>
<enum name='AGL_BAD_ENUM' value='10010'/>
<enum name='AGL_BAD_FULLSCREEN' value='10012'/>
<enum name='AGL_BAD_GDEV' value='10006'/>
<enum name='AGL_BAD_MATCH' value='10009'/>
<enum name='AGL_BAD_MODULE' value='10015'/>
<enum name='AGL_BAD_OFFSCREEN' value='10011'/>
<enum name='AGL_BAD_PIXELFMT' value='10002'/>
<enum name='AGL_BAD_POINTER' value='10014'/>
<enum name='AGL_BAD_PROPERTY' value='10001'/>
<enum name='AGL_BAD_RENDINFO' value='10003'/>
<enum name='AGL_BAD_STATE' value='10007'/>
<enum name='AGL_BAD_VALUE' value='10008'/>
<enum name='AGL_BAD_WINDOW' value='10013'/>
<enum name='AGL_BGR233_A8_BIT' value='8'/>
<enum name='AGL_BGR233_BIT' value='4'/>
<enum name='AGL_BLUE_SIZE' value='10'/>
<enum name='AGL_BUFFER_MODES' value='100'/>
<enum name='AGL_BUFFER_NAME' value='231'/>
<enum name='AGL_BUFFER_RECT' value='202'/>
<enum name='AGL_BUFFER_SIZE' value='2'/>
<enum name='AGL_CLEAR_FORMAT_CACHE' value='502'/>
<enum name='AGL_CLIP_REGION' value='254'/>
<enum name='AGL_CLOSEST_POLICY' value='74'/>
<enum name='AGL_COLORMAP_ENTRY' value='212'/>
<enum name='AGL_COLORMAP_TRACKING' value='210'/>
<enum name='AGL_COLOR_FLOAT' value='58'/>
<enum name='AGL_COLOR_MODES' value='103'/>
<enum name='AGL_COMPLIANT' value='83'/>
<enum name='AGL_CONTEXT_DISPLAY_ID' value='234'/>
<enum name='AGL_CONTEXT_SURFACE_ID' value='233'/>
<enum name='AGL_DEPTH_MODES' value='105'/>
<enum name='AGL_DEPTH_SIZE' value='12'/>
<enum name='AGL_DISPLAY_MASK' value='84'/>
<enum name='AGL_DOUBLEBUFFER' value='5'/>
<enum name='AGL_DOUBLEBUFFER_BIT' value='8'/>
<enum name='AGL_ENABLE_SURFACE_BACKING_SIZE' value='305'/>
<enum name='AGL_FORMAT_CACHE_SIZE' value='501'/>
<enum name='AGL_FS_CAPTURE_SINGLE' value='255'/>
<enum name='AGL_FULLSCREEN' value='54'/>
<enum name='AGL_GREEN_SIZE' value='9'/>
<enum name='AGL_INDEX16_BIT' value='1073741824'/>
<enum name='AGL_INDEX8_BIT' value='536870912'/>
<enum name='AGL_INVALID_FUNCTION' value='10018'/>
<enum name='AGL_LEVEL' value='3'/>
<enum name='AGL_MAXIMUM_POLICY' value='52'/>
<enum name='AGL_MAX_AUX_BUFFERS' value='107'/>
<enum name='AGL_MAX_LEVEL' value='102'/>
<enum name='AGL_MINIMUM_POLICY' value='51'/>
<enum name='AGL_MIN_LEVEL' value='101'/>
<enum name='AGL_MONOSCOPIC_BIT' value='1'/>
<enum name='AGL_MP_SAFE' value='78'/>
<enum name='AGL_MULTISAMPLE' value='59'/>
<enum name='AGL_MULTISCREEN' value='81'/>
<enum name='AGL_NONE' value='0'/>
<enum name='AGL_NO_ERROR' value='0'/>
<enum name='AGL_NO_RECOVERY' value='72'/>
<enum name='AGL_OFFSCREEN' value='53'/>
<enum name='AGL_ORDER_CONTEXT_TO_FRONT' value='232'/>
<enum name='AGL_PBUFFER' value='90'/>
<enum name='AGL_PIXEL_SIZE' value='50'/>
<enum name='AGL_RASTERIZATION' value='220'/>
<enum name='AGL_RED_SIZE' value='8'/>
<enum name='AGL_REMOTE_PBUFFER' value='91'/>
<enum name='AGL_RENDERER_APPLE_SW_ID' value='132608'/>
<enum name='AGL_RENDERER_ATI_RADEON_8500_ID' value='136704'/>
<enum name='AGL_RENDERER_ATI_RADEON_9700_ID' value='137216'/>
<enum name='AGL_RENDERER_ATI_RADEON_ID' value='135680'/>
<enum name='AGL_RENDERER_ATI_RADEON_X1000_ID' value='137472'/>
<enum name='AGL_RENDERER_ATI_RAGE_128_ID' value='135168'/>
<enum name='AGL_RENDERER_ATI_RAGE_PRO_ID' value='136192'/>
<enum name='AGL_RENDERER_COUNT' value='128'/>
<enum name='AGL_RENDERER_GENERIC_FLOAT_ID' value='132096'/>
<enum name='AGL_RENDERER_GENERIC_ID' value='131584'/>
<enum name='AGL_RENDERER_ID' value='70'/>
<enum name='AGL_RENDERER_INTEL_900_ID' value='147456'/>
<enum name='AGL_RENDERER_MESA_3DFX_ID' value='262144'/>
<enum name='AGL_RENDERER_NVIDIA_GEFORCE_2MX_ID' value='139264'/>
<enum name='AGL_RENDERER_NVIDIA_GEFORCE_3_ID' value='139776'/>
<enum name='AGL_RENDERER_NVIDIA_GEFORCE_FX_ID' value='140288'/>
<enum name='AGL_RENDERER_VT_BLADE_XP2_ID' value='143360'/>
<enum name='AGL_RETAIN_RENDERERS' value='503'/>
<enum name='AGL_RGB101010_A8_BIT' value='524288'/>
<enum name='AGL_RGB101010_BIT' value='131072'/>
<enum name='AGL_RGB121212_BIT' value='1048576'/>
<enum name='AGL_RGB161616_BIT' value='4194304'/>
<enum name='AGL_RGB332_A8_BIT' value='32'/>
<enum name='AGL_RGB332_BIT' value='16'/>
<enum name='AGL_RGB444_A8_BIT' value='256'/>
<enum name='AGL_RGB444_BIT' value='64'/>
<enum name='AGL_RGB555_A8_BIT' value='2048'/>
<enum name='AGL_RGB555_BIT' value='512'/>
<enum name='AGL_RGB565_A8_BIT' value='8192'/>
<enum name='AGL_RGB565_BIT' value='4096'/>
<enum name='AGL_RGB888_A8_BIT' value='65536'/>
<enum name='AGL_RGB888_BIT' value='16384'/>
<enum name='AGL_RGB8_A8_BIT' value='2'/>
<enum name='AGL_RGB8_BIT' value='1'/>
<enum name='AGL_RGBA' value='4'/>
<enum name='AGL_RGBAFLOAT128_BIT' value='134217728'/>
<enum name='AGL_RGBAFLOAT256_BIT' value='536870912'/>
<enum name='AGL_RGBAFLOAT64_BIT' value='33554432'/>
<enum name='AGL_RGBFLOAT128_BIT' value='67108864'/>
<enum name='AGL_RGBFLOAT256_BIT' value='268435456'/>
<enum name='AGL_RGBFLOAT64_BIT' value='16777216'/>
<enum name='AGL_ROBUST' value='75'/>
<enum name='AGL_SAMPLES_ARB' value='56'/>
<enum name='AGL_SAMPLE_ALPHA' value='61'/>
<enum name='AGL_SAMPLE_BUFFERS_ARB' value='55'/>
<enum name='AGL_SINGLEBUFFER_BIT' value='4'/>
<enum name='AGL_SINGLE_RENDERER' value='71'/>
<enum name='AGL_STATE_VALIDATION' value='230'/>
<enum name='AGL_STENCIL_MODES' value='106'/>
<enum name='AGL_STENCIL_SIZE' value='13'/>
<enum name='AGL_STEREO' value='6'/>
<enum name='AGL_STEREOSCOPIC_BIT' value='2'/>
<enum name='AGL_SUPERSAMPLE' value='60'/>
<enum name='AGL_SURFACE_BACKING_SIZE' value='304'/>
<enum name='AGL_SURFACE_OPACITY' value='236'/>
<enum name='AGL_SURFACE_ORDER' value='235'/>
<enum name='AGL_SURFACE_VOLATILE' value='306'/>
<enum name='AGL_SWAP_INTERVAL' value='222'/>
<enum name='AGL_SWAP_LIMIT' value='203'/>
<enum name='AGL_SWAP_RECT' value='200'/>
<enum name='AGL_TEXTURE_MEMORY' value='121'/>
<enum name='AGL_VERSION_3_0' value='1'/>
<enum name='AGL_VIDEO_MEMORY' value='120'/>
<enum name='AGL_VIRTUAL_SCREEN' value='82'/>
<enum name='AGL_WINDOW' value='80'/>
<enum name='GLM_APPLICATION_HEAP_MODE' value='3'/>
<enum name='GLM_COPY_FUNC_PTR' value='4'/>
<enum name='GLM_CURRENT_MEMORY' value='3'/>
<enum name='GLM_INVALID_ENUM' value='1'/>
<enum name='GLM_INVALID_OPERATION' value='3'/>
<enum name='GLM_INVALID_VALUE' value='2'/>
<enum name='GLM_MAXIMUM_MEMORY' value='4'/>
<enum name='GLM_MULTIPROCESSOR_MODE' value='4'/>
<enum name='GLM_NO_ERROR' value='0'/>
<enum name='GLM_NUMBER_PAGES' value='2'/>
<enum name='GLM_OUT_OF_MEMORY' value='4'/>
<enum name='GLM_OVERRIDE_MODE' value='1'/>
<enum name='GLM_PAGE_ALLOCATION_FUNC_PTR' value='1'/>
<enum name='GLM_PAGE_FREE_FUNC_PTR' value='2'/>
<enum name='GLM_PAGE_SIZE' value='1'/>
<enum name='GLM_SET_DOUBLE_FUNC_PTR' value='8'/>
<enum name='GLM_SET_UBYTE_FUNC_PTR' value='5'/>
<enum name='GLM_SET_UINT_FUNC_PTR' value='7'/>
<enum name='GLM_SET_USHORT_FUNC_PTR' value='6'/>
<enum name='GLM_SYSTEM_HEAP_MODE' value='2'/>
<enum name='GLM_VERSION_2_0' value='1'/>
<enum name='GLM_ZERO_FUNC_PTR' value='3'/>
<enum name='GLU_AUTO_LOAD_MATRIX' value='100200'/>
<enum name='GLU_BEGIN' value='100100'/>
<enum name='GLU_CCW' value='100121'/>
<enum name='GLU_CULLING' value='100201'/>
<enum name='GLU_CW' value='100120'/>
<enum name='GLU_DISPLAY_MODE' value='100204'/>
<enum name='GLU_DOMAIN_DISTANCE' value='100217'/>
<enum name='GLU_EDGE_FLAG' value='100104'/>
<enum name='GLU_END' value='100102'/>
<enum name='GLU_ERROR' value='100103'/>
<enum name='GLU_EXTENSIONS' value='100801'/>
<enum name='GLU_EXTERIOR' value='100123'/>
<enum name='GLU_EXT_nurbs_tessellator' value='1'/>
<enum name='GLU_EXT_object_space_tess' value='1'/>
<enum name='GLU_FALSE' value='0'/>
<enum name='GLU_FILL' value='100012'/>
<enum name='GLU_FLAT' value='100001'/>
<enum name='GLU_INCOMPATIBLE_GL_VERSION' value='100903'/>
<enum name='GLU_INSIDE' value='100021'/>
<enum name='GLU_INTERIOR' value='100122'/>
<enum name='GLU_INVALID_ENUM' value='100900'/>
<enum name='GLU_INVALID_OPERATION' value='100904'/>
<enum name='GLU_INVALID_VALUE' value='100901'/>
<enum name='GLU_LINE' value='100011'/>
<enum name='GLU_MAP1_TRIM_2' value='100210'/>
<enum name='GLU_MAP1_TRIM_3' value='100211'/>
<enum name='GLU_NONE' value='100002'/>
<enum name='GLU_NURBS_BEGIN' value='100164'/>
<enum name='GLU_NURBS_BEGIN_DATA' value='100170'/>
<enum name='GLU_NURBS_BEGIN_DATA_EXT' value='100170'/>
<enum name='GLU_NURBS_BEGIN_EXT' value='100164'/>
<enum name='GLU_NURBS_COLOR' value='100167'/>
<enum name='GLU_NURBS_COLOR_DATA' value='100173'/>
<enum name='GLU_NURBS_COLOR_DATA_EXT' value='100173'/>
<enum name='GLU_NURBS_COLOR_EXT' value='100167'/>
<enum name='GLU_NURBS_END' value='100169'/>
<enum name='GLU_NURBS_END_DATA' value='100175'/>
<enum name='GLU_NURBS_END_DATA_EXT' value='100175'/>
<enum name='GLU_NURBS_END_EXT' value='100169'/>
<enum name='GLU_NURBS_ERROR' value='100103'/>
<enum name='GLU_NURBS_ERROR1' value='100251'/>
<enum name='GLU_NURBS_ERROR10' value='100260'/>
<enum name='GLU_NURBS_ERROR11' value='100261'/>
<enum name='GLU_NURBS_ERROR12' value='100262'/>
<enum name='GLU_NURBS_ERROR13' value='100263'/>
<enum name='GLU_NURBS_ERROR14' value='100264'/>
<enum name='GLU_NURBS_ERROR15' value='100265'/>
<enum name='GLU_NURBS_ERROR16' value='100266'/>
<enum name='GLU_NURBS_ERROR17' value='100267'/>
<enum name='GLU_NURBS_ERROR18' value='100268'/>
<enum name='GLU_NURBS_ERROR19' value='100269'/>
<enum name='GLU_NURBS_ERROR2' value='100252'/>
<enum name='GLU_NURBS_ERROR20' value='100270'/>
<enum name='GLU_NURBS_ERROR21' value='100271'/>
<enum name='GLU_NURBS_ERROR22' value='100272'/>
<enum name='GLU_NURBS_ERROR23' value='100273'/>
<enum name='GLU_NURBS_ERROR24' value='100274'/>
<enum name='GLU_NURBS_ERROR25' value='100275'/>
<enum name='GLU_NURBS_ERROR26' value='100276'/>
<enum name='GLU_NURBS_ERROR27' value='100277'/>
<enum name='GLU_NURBS_ERROR28' value='100278'/>
<enum name='GLU_NURBS_ERROR29' value='100279'/>
<enum name='GLU_NURBS_ERROR3' value='100253'/>
<enum name='GLU_NURBS_ERROR30' value='100280'/>
<enum name='GLU_NURBS_ERROR31' value='100281'/>
<enum name='GLU_NURBS_ERROR32' value='100282'/>
<enum name='GLU_NURBS_ERROR33' value='100283'/>
<enum name='GLU_NURBS_ERROR34' value='100284'/>
<enum name='GLU_NURBS_ERROR35' value='100285'/>
<enum name='GLU_NURBS_ERROR36' value='100286'/>
<enum name='GLU_NURBS_ERROR37' value='100287'/>
<enum name='GLU_NURBS_ERROR4' value='100254'/>
<enum name='GLU_NURBS_ERROR5' value='100255'/>
<enum name='GLU_NURBS_ERROR6' value='100256'/>
<enum name='GLU_NURBS_ERROR7' value='100257'/>
<enum name='GLU_NURBS_ERROR8' value='100258'/>
<enum name='GLU_NURBS_ERROR9' value='100259'/>
<enum name='GLU_NURBS_MODE' value='100160'/>
<enum name='GLU_NURBS_MODE_EXT' value='100160'/>
<enum name='GLU_NURBS_NORMAL' value='100166'/>
<enum name='GLU_NURBS_NORMAL_DATA' value='100172'/>
<enum name='GLU_NURBS_NORMAL_DATA_EXT' value='100172'/>
<enum name='GLU_NURBS_NORMAL_EXT' value='100166'/>
<enum name='GLU_NURBS_RENDERER' value='100162'/>
<enum name='GLU_NURBS_RENDERER_EXT' value='100162'/>
<enum name='GLU_NURBS_TESSELLATOR' value='100161'/>
<enum name='GLU_NURBS_TESSELLATOR_EXT' value='100161'/>
<enum name='GLU_NURBS_TEXTURE_COORD' value='100168'/>
<enum name='GLU_NURBS_TEXTURE_COORD_DATA' value='100174'/>
<enum name='GLU_NURBS_TEX_COORD_DATA_EXT' value='100174'/>
<enum name='GLU_NURBS_TEX_COORD_EXT' value='100168'/>
<enum name='GLU_NURBS_VERTEX' value='100165'/>
<enum name='GLU_NURBS_VERTEX_DATA' value='100171'/>
<enum name='GLU_NURBS_VERTEX_DATA_EXT' value='100171'/>
<enum name='GLU_NURBS_VERTEX_EXT' value='100165'/>
<enum name='GLU_OBJECT_PARAMETRIC_ERROR' value='100208'/>
<enum name='GLU_OBJECT_PARAMETRIC_ERROR_EXT' value='100208'/>
<enum name='GLU_OBJECT_PATH_LENGTH' value='100209'/>
<enum name='GLU_OBJECT_PATH_LENGTH_EXT' value='100209'/>
<enum name='GLU_OUTLINE_PATCH' value='100241'/>
<enum name='GLU_OUTLINE_POLYGON' value='100240'/>
<enum name='GLU_OUTSIDE' value='100020'/>
<enum name='GLU_OUT_OF_MEMORY' value='100902'/>
<enum name='GLU_PARAMETRIC_ERROR' value='100216'/>
<enum name='GLU_PARAMETRIC_TOLERANCE' value='100202'/>
<enum name='GLU_PATH_LENGTH' value='100215'/>
<enum name='GLU_POINT' value='100010'/>
<enum name='GLU_SAMPLING_METHOD' value='100205'/>
<enum name='GLU_SAMPLING_TOLERANCE' value='100203'/>
<enum name='GLU_SILHOUETTE' value='100013'/>
<enum name='GLU_SMOOTH' value='100000'/>
<enum name='GLU_TESS_BEGIN' value='100100'/>
<enum name='GLU_TESS_BEGIN_DATA' value='100106'/>
<enum name='GLU_TESS_BOUNDARY_ONLY' value='100141'/>
<enum name='GLU_TESS_COMBINE' value='100105'/>
<enum name='GLU_TESS_COMBINE_DATA' value='100111'/>
<enum name='GLU_TESS_COORD_TOO_LARGE' value='100155'/>
<enum name='GLU_TESS_EDGE_FLAG' value='100104'/>
<enum name='GLU_TESS_EDGE_FLAG_DATA' value='100110'/>
<enum name='GLU_TESS_END' value='100102'/>
<enum name='GLU_TESS_END_DATA' value='100108'/>
<enum name='GLU_TESS_ERROR' value='100103'/>
<enum name='GLU_TESS_ERROR1' value='100151'/>
<enum name='GLU_TESS_ERROR2' value='100152'/>
<enum name='GLU_TESS_ERROR3' value='100153'/>
<enum name='GLU_TESS_ERROR4' value='100154'/>
<enum name='GLU_TESS_ERROR5' value='100155'/>
<enum name='GLU_TESS_ERROR6' value='100156'/>
<enum name='GLU_TESS_ERROR7' value='100157'/>
<enum name='GLU_TESS_ERROR8' value='100158'/>
<enum name='GLU_TESS_ERROR_DATA' value='100109'/>
<enum name='GLU_TESS_MAX_COORD' value='1.0e150'/>
<enum name='GLU_TESS_MISSING_BEGIN_CONTOUR' value='100152'/>
<enum name='GLU_TESS_MISSING_BEGIN_POLYGON' value='100151'/>
<enum name='GLU_TESS_MISSING_END_CONTOUR' value='100154'/>
<enum name='GLU_TESS_MISSING_END_POLYGON' value='100153'/>
<enum name='GLU_TESS_NEED_COMBINE_CALLBACK' value='100156'/>
<enum name='GLU_TESS_TOLERANCE' value='100142'/>
<enum name='GLU_TESS_VERTEX' value='100101'/>
<enum name='GLU_TESS_VERTEX_DATA' value='100107'/>
<enum name='GLU_TESS_WINDING_ABS_GEQ_TWO' value='100134'/>
<enum name='GLU_TESS_WINDING_NEGATIVE' value='100133'/>
<enum name='GLU_TESS_WINDING_NONZERO' value='100131'/>
<enum name='GLU_TESS_WINDING_ODD' value='100130'/>
<enum name='GLU_TESS_WINDING_POSITIVE' value='100132'/>
<enum name='GLU_TESS_WINDING_RULE' value='100140'/>
<enum name='GLU_TRUE' value='1'/>
<enum name='GLU_UNKNOWN' value='100124'/>
<enum name='GLU_U_STEP' value='100206'/>
<enum name='GLU_VERSION' value='100800'/>
<enum name='GLU_VERSION_1_1' value='1'/>
<enum name='GLU_VERSION_1_2' value='1'/>
<enum name='GLU_VERSION_1_3' value='1'/>
<enum name='GLU_VERTEX' value='100101'/>
<enum name='GLU_V_STEP' value='100207'/>
<enum name='GL_2D' value='1536'/>
<enum name='GL_2_BYTES' value='5127'/>
<enum name='GL_3D' value='1537'/>
<enum name='GL_3D_COLOR' value='1538'/>
<enum name='GL_3D_COLOR_TEXTURE' value='1539'/>
<enum name='GL_3_BYTES' value='5128'/>
<enum name='GL_4D_COLOR_TEXTURE' value='1540'/>
<enum name='GL_4_BYTES' value='5129'/>
<enum name='GL_ACCUM' value='256'/>
<enum name='GL_ACCUM_ALPHA_BITS' value='3419'/>
<enum name='GL_ACCUM_BLUE_BITS' value='3418'/>
<enum name='GL_ACCUM_BUFFER_BIT' value='512'/>
<enum name='GL_ACCUM_CLEAR_VALUE' value='2944'/>
<enum name='GL_ACCUM_GREEN_BITS' value='3417'/>
<enum name='GL_ACCUM_RED_BITS' value='3416'/>
<enum name='GL_ACTIVE_ATTRIBUTES' value='35721'/>
<enum name='GL_ACTIVE_ATTRIBUTE_MAX_LENGTH' value='35722'/>
<enum name='GL_ACTIVE_TEXTURE' value='34016'/>
<enum name='GL_ACTIVE_UNIFORMS' value='35718'/>
<enum name='GL_ACTIVE_UNIFORM_MAX_LENGTH' value='35719'/>
<enum name='GL_ADD' value='260'/>
<enum name='GL_ADD_SIGNED' value='34164'/>
<enum name='GL_ALIASED_LINE_WIDTH_RANGE' value='33902'/>
<enum name='GL_ALIASED_POINT_SIZE_RANGE' value='33901'/>
<enum name='GL_ALL_ATTRIB_BITS' value='1048575'/>
<enum name='GL_ALPHA' value='6406'/>
<enum name='GL_ALPHA12' value='32829'/>
<enum name='GL_ALPHA16' value='32830'/>
<enum name='GL_ALPHA4' value='32827'/>
<enum name='GL_ALPHA8' value='32828'/>
<enum name='GL_ALPHA_BIAS' value='3357'/>
<enum name='GL_ALPHA_BITS' value='3413'/>
<enum name='GL_ALPHA_SCALE' value='3356'/>
<enum name='GL_ALPHA_TEST' value='3008'/>
<enum name='GL_ALPHA_TEST_FUNC' value='3009'/>
<enum name='GL_ALPHA_TEST_REF' value='3010'/>
<enum name='GL_ALWAYS' value='519'/>
<enum name='GL_AMBIENT' value='4608'/>
<enum name='GL_AMBIENT_AND_DIFFUSE' value='5634'/>
<enum name='GL_AND' value='5377'/>
<enum name='GL_AND_INVERTED' value='5380'/>
<enum name='GL_AND_REVERSE' value='5378'/>
<enum name='GL_ARRAY_BUFFER' value='34962'/>
<enum name='GL_ARRAY_BUFFER_BINDING' value='34964'/>
<enum name='GL_ATTACHED_SHADERS' value='35717'/>
<enum name='GL_ATTRIB_STACK_DEPTH' value='2992'/>
<enum name='GL_AUTO_NORMAL' value='3456'/>
<enum name='GL_AUX0' value='1033'/>
<enum name='GL_AUX1' value='1034'/>
<enum name='GL_AUX2' value='1035'/>
<enum name='GL_AUX3' value='1036'/>
<enum name='GL_AUX_BUFFERS' value='3072'/>
<enum name='GL_BACK' value='1029'/>
<enum name='GL_BACK_LEFT' value='1026'/>
<enum name='GL_BACK_RIGHT' value='1027'/>
<enum name='GL_BGR' value='32992'/>
<enum name='GL_BGRA' value='32993'/>
<enum name='GL_BITMAP' value='6656'/>
<enum name='GL_BITMAP_TOKEN' value='1796'/>
<enum name='GL_BLEND' value='3042'/>
<enum name='GL_BLEND_COLOR' value='32773'/>
<enum name='GL_BLEND_DST' value='3040'/>
<enum name='GL_BLEND_DST_ALPHA' value='32970'/>
<enum name='GL_BLEND_DST_RGB' value='32968'/>
<enum name='GL_BLEND_EQUATION' value='32777'/>
<enum name='GL_BLEND_EQUATION_ALPHA' value='34877'/>
<enum name='GL_BLEND_EQUATION_RGB' value='32777'/>
<enum name='GL_BLEND_SRC' value='3041'/>
<enum name='GL_BLEND_SRC_ALPHA' value='32971'/>
<enum name='GL_BLEND_SRC_RGB' value='32969'/>
<enum name='GL_BLUE' value='6405'/>
<enum name='GL_BLUE_BIAS' value='3355'/>
<enum name='GL_BLUE_BITS' value='3412'/>
<enum name='GL_BLUE_SCALE' value='3354'/>
<enum name='GL_BOOL' value='35670'/>
<enum name='GL_BOOL_VEC2' value='35671'/>
<enum name='GL_BOOL_VEC3' value='35672'/>
<enum name='GL_BOOL_VEC4' value='35673'/>
<enum name='GL_BUFFER_ACCESS' value='35003'/>
<enum name='GL_BUFFER_MAPPED' value='35004'/>
<enum name='GL_BUFFER_MAP_POINTER' value='35005'/>
<enum name='GL_BUFFER_SIZE' value='34660'/>
<enum name='GL_BUFFER_USAGE' value='34661'/>
<enum name='GL_BYTE' value='5120'/>
<enum name='GL_C3F_V3F' value='10788'/>
<enum name='GL_C4F_N3F_V3F' value='10790'/>
<enum name='GL_C4UB_V2F' value='10786'/>
<enum name='GL_C4UB_V3F' value='10787'/>
<enum name='GL_CCW' value='2305'/>
<enum name='GL_CLAMP' value='10496'/>
<enum name='GL_CLAMP_TO_BORDER' value='33069'/>
<enum name='GL_CLAMP_TO_EDGE' value='33071'/>
<enum name='GL_CLEAR' value='5376'/>
<enum name='GL_CLIENT_ACTIVE_TEXTURE' value='34017'/>
<enum name='GL_CLIENT_ALL_ATTRIB_BITS' value='4294967295'/>
<enum name='GL_CLIENT_ATTRIB_STACK_DEPTH' value='2993'/>
<enum name='GL_CLIENT_PIXEL_STORE_BIT' value='1'/>
<enum name='GL_CLIENT_VERTEX_ARRAY_BIT' value='2'/>
<enum name='GL_CLIP_PLANE0' value='12288'/>
<enum name='GL_CLIP_PLANE1' value='12289'/>
<enum name='GL_CLIP_PLANE2' value='12290'/>
<enum name='GL_CLIP_PLANE3' value='12291'/>
<enum name='GL_CLIP_PLANE4' value='12292'/>
<enum name='GL_CLIP_PLANE5' value='12293'/>
<enum name='GL_COEFF' value='2560'/>
<enum name='GL_COLOR' value='6144'/>
<enum name='GL_COLOR_ARRAY' value='32886'/>
<enum name='GL_COLOR_ARRAY_BUFFER_BINDING' value='34968'/>
<enum name='GL_COLOR_ARRAY_POINTER' value='32912'/>
<enum name='GL_COLOR_ARRAY_SIZE' value='32897'/>
<enum name='GL_COLOR_ARRAY_STRIDE' value='32899'/>
<enum name='GL_COLOR_ARRAY_TYPE' value='32898'/>
<enum name='GL_COLOR_BUFFER_BIT' value='16384'/>
<enum name='GL_COLOR_CLEAR_VALUE' value='3106'/>
<enum name='GL_COLOR_INDEX' value='6400'/>
<enum name='GL_COLOR_INDEXES' value='5635'/>
<enum name='GL_COLOR_LOGIC_OP' value='3058'/>
<enum name='GL_COLOR_MATERIAL' value='2903'/>
<enum name='GL_COLOR_MATERIAL_FACE' value='2901'/>
<enum name='GL_COLOR_MATERIAL_PARAMETER' value='2902'/>
<enum name='GL_COLOR_MATRIX' value='32945'/>
<enum name='GL_COLOR_MATRIX_STACK_DEPTH' value='32946'/>
<enum name='GL_COLOR_SUM' value='33880'/>
<enum name='GL_COLOR_TABLE' value='32976'/>
<enum name='GL_COLOR_TABLE_ALPHA_SIZE' value='32989'/>
<enum name='GL_COLOR_TABLE_BIAS' value='32983'/>
<enum name='GL_COLOR_TABLE_BLUE_SIZE' value='32988'/>
<enum name='GL_COLOR_TABLE_FORMAT' value='32984'/>
<enum name='GL_COLOR_TABLE_GREEN_SIZE' value='32987'/>
<enum name='GL_COLOR_TABLE_INTENSITY_SIZE' value='32991'/>
<enum name='GL_COLOR_TABLE_LUMINANCE_SIZE' value='32990'/>
<enum name='GL_COLOR_TABLE_RED_SIZE' value='32986'/>
<enum name='GL_COLOR_TABLE_SCALE' value='32982'/>
<enum name='GL_COLOR_TABLE_WIDTH' value='32985'/>
<enum name='GL_COLOR_WRITEMASK' value='3107'/>
<enum name='GL_COMBINE' value='34160'/>
<enum name='GL_COMBINE_ALPHA' value='34162'/>
<enum name='GL_COMBINE_RGB' value='34161'/>
<enum name='GL_COMPARE_R_TO_TEXTURE' value='34894'/>
<enum name='GL_COMPILE' value='4864'/>
<enum name='GL_COMPILE_AND_EXECUTE' value='4865'/>
<enum name='GL_COMPILE_STATUS' value='35713'/>
<enum name='GL_COMPRESSED_ALPHA' value='34025'/>
<enum name='GL_COMPRESSED_INTENSITY' value='34028'/>
<enum name='GL_COMPRESSED_LUMINANCE' value='34026'/>
<enum name='GL_COMPRESSED_LUMINANCE_ALPHA' value='34027'/>
<enum name='GL_COMPRESSED_RGB' value='34029'/>
<enum name='GL_COMPRESSED_RGBA' value='34030'/>
<enum name='GL_COMPRESSED_SLUMINANCE' value='35914'/>
<enum name='GL_COMPRESSED_SLUMINANCE_ALPHA' value='35915'/>
<enum name='GL_COMPRESSED_SRGB' value='35912'/>
<enum name='GL_COMPRESSED_SRGB_ALPHA' value='35913'/>
<enum name='GL_COMPRESSED_TEXTURE_FORMATS' value='34467'/>
<enum name='GL_CONSTANT' value='34166'/>
<enum name='GL_CONSTANT_ALPHA' value='32771'/>
<enum name='GL_CONSTANT_ATTENUATION' value='4615'/>
<enum name='GL_CONSTANT_BORDER' value='33105'/>
<enum name='GL_CONSTANT_COLOR' value='32769'/>
<enum name='GL_CONVOLUTION_1D' value='32784'/>
<enum name='GL_CONVOLUTION_2D' value='32785'/>
<enum name='GL_CONVOLUTION_BORDER_COLOR' value='33108'/>
<enum name='GL_CONVOLUTION_BORDER_MODE' value='32787'/>
<enum name='GL_CONVOLUTION_FILTER_BIAS' value='32789'/>
<enum name='GL_CONVOLUTION_FILTER_SCALE' value='32788'/>
<enum name='GL_CONVOLUTION_FORMAT' value='32791'/>
<enum name='GL_CONVOLUTION_HEIGHT' value='32793'/>
<enum name='GL_CONVOLUTION_WIDTH' value='32792'/>
<enum name='GL_COORD_REPLACE' value='34914'/>
<enum name='GL_COPY' value='5379'/>
<enum name='GL_COPY_INVERTED' value='5388'/>
<enum name='GL_COPY_PIXEL_TOKEN' value='1798'/>
<enum name='GL_CULL_FACE' value='2884'/>
<enum name='GL_CULL_FACE_MODE' value='2885'/>
<enum name='GL_CURRENT_BIT' value='1'/>
<enum name='GL_CURRENT_COLOR' value='2816'/>
<enum name='GL_CURRENT_FOG_COORD' value='33875'/>
<enum name='GL_CURRENT_FOG_COORDINATE' value='33875'/>
<enum name='GL_CURRENT_INDEX' value='2817'/>
<enum name='GL_CURRENT_NORMAL' value='2818'/>
<enum name='GL_CURRENT_PROGRAM' value='35725'/>
<enum name='GL_CURRENT_QUERY' value='34917'/>
<enum name='GL_CURRENT_RASTER_COLOR' value='2820'/>
<enum name='GL_CURRENT_RASTER_DISTANCE' value='2825'/>
<enum name='GL_CURRENT_RASTER_INDEX' value='2821'/>
<enum name='GL_CURRENT_RASTER_POSITION' value='2823'/>
<enum name='GL_CURRENT_RASTER_POSITION_VALID' value='2824'/>
<enum name='GL_CURRENT_RASTER_SECONDARY_COLOR' value='33887'/>
<enum name='GL_CURRENT_RASTER_TEXTURE_COORDS' value='2822'/>
<enum name='GL_CURRENT_SECONDARY_COLOR' value='33881'/>
<enum name='GL_CURRENT_TEXTURE_COORDS' value='2819'/>
<enum name='GL_CURRENT_VERTEX_ATTRIB' value='34342'/>
<enum name='GL_CW' value='2304'/>
<enum name='GL_DECAL' value='8449'/>
<enum name='GL_DECR' value='7683'/>
<enum name='GL_DECR_WRAP' value='34056'/>
<enum name='GL_DELETE_STATUS' value='35712'/>
<enum name='GL_DEPTH' value='6145'/>
<enum name='GL_DEPTH_BIAS' value='3359'/>
<enum name='GL_DEPTH_BITS' value='3414'/>
<enum name='GL_DEPTH_BUFFER_BIT' value='256'/>
<enum name='GL_DEPTH_CLEAR_VALUE' value='2931'/>
<enum name='GL_DEPTH_COMPONENT' value='6402'/>
<enum name='GL_DEPTH_COMPONENT16' value='33189'/>
<enum name='GL_DEPTH_COMPONENT24' value='33190'/>
<enum name='GL_DEPTH_COMPONENT32' value='33191'/>
<enum name='GL_DEPTH_FUNC' value='2932'/>
<enum name='GL_DEPTH_RANGE' value='2928'/>
<enum name='GL_DEPTH_SCALE' value='3358'/>
<enum name='GL_DEPTH_TEST' value='2929'/>
<enum name='GL_DEPTH_TEXTURE_MODE' value='34891'/>
<enum name='GL_DEPTH_WRITEMASK' value='2930'/>
<enum name='GL_DIFFUSE' value='4609'/>
<enum name='GL_DITHER' value='3024'/>
<enum name='GL_DOMAIN' value='2562'/>
<enum name='GL_DONT_CARE' value='4352'/>
<enum name='GL_DOT3_RGB' value='34478'/>
<enum name='GL_DOT3_RGBA' value='34479'/>
<enum name='GL_DOUBLE' value='5130'/>
<enum name='GL_DOUBLEBUFFER' value='3122'/>
<enum name='GL_DRAW_BUFFER' value='3073'/>
<enum name='GL_DRAW_BUFFER0' value='34853'/>
<enum name='GL_DRAW_BUFFER1' value='34854'/>
<enum name='GL_DRAW_BUFFER10' value='34863'/>
<enum name='GL_DRAW_BUFFER11' value='34864'/>
<enum name='GL_DRAW_BUFFER12' value='34865'/>
<enum name='GL_DRAW_BUFFER13' value='34866'/>
<enum name='GL_DRAW_BUFFER14' value='34867'/>
<enum name='GL_DRAW_BUFFER15' value='34868'/>
<enum name='GL_DRAW_BUFFER2' value='34855'/>
<enum name='GL_DRAW_BUFFER3' value='34856'/>
<enum name='GL_DRAW_BUFFER4' value='34857'/>
<enum name='GL_DRAW_BUFFER5' value='34858'/>
<enum name='GL_DRAW_BUFFER6' value='34859'/>
<enum name='GL_DRAW_BUFFER7' value='34860'/>
<enum name='GL_DRAW_BUFFER8' value='34861'/>
<enum name='GL_DRAW_BUFFER9' value='34862'/>
<enum name='GL_DRAW_PIXEL_TOKEN' value='1797'/>
<enum name='GL_DST_ALPHA' value='772'/>
<enum name='GL_DST_COLOR' value='774'/>
<enum name='GL_DYNAMIC_COPY' value='35050'/>
<enum name='GL_DYNAMIC_DRAW' value='35048'/>
<enum name='GL_DYNAMIC_READ' value='35049'/>
<enum name='GL_EDGE_FLAG' value='2883'/>
<enum name='GL_EDGE_FLAG_ARRAY' value='32889'/>
<enum name='GL_EDGE_FLAG_ARRAY_BUFFER_BINDING' value='34971'/>
<enum name='GL_EDGE_FLAG_ARRAY_POINTER' value='32915'/>
<enum name='GL_EDGE_FLAG_ARRAY_STRIDE' value='32908'/>
<enum name='GL_ELEMENT_ARRAY_BUFFER' value='34963'/>
<enum name='GL_ELEMENT_ARRAY_BUFFER_BINDING' value='34965'/>
<enum name='GL_EMISSION' value='5632'/>
<enum name='GL_ENABLE_BIT' value='8192'/>
<enum name='GL_EQUAL' value='514'/>
<enum name='GL_EQUIV' value='5385'/>
<enum name='GL_EVAL_BIT' value='65536'/>
<enum name='GL_EXP' value='2048'/>
<enum name='GL_EXP2' value='2049'/>
<enum name='GL_EXTENSIONS' value='7939'/>
<enum name='GL_EYE_LINEAR' value='9216'/>
<enum name='GL_EYE_PLANE' value='9474'/>
<enum name='GL_FALSE' value='0'/>
<enum name='GL_FASTEST' value='4353'/>
<enum name='GL_FEEDBACK' value='7169'/>
<enum name='GL_FEEDBACK_BUFFER_POINTER' value='3568'/>
<enum name='GL_FEEDBACK_BUFFER_SIZE' value='3569'/>
<enum name='GL_FEEDBACK_BUFFER_TYPE' value='3570'/>
<enum name='GL_FILL' value='6914'/>
<enum name='GL_FLAT' value='7424'/>
<enum name='GL_FLOAT' value='5126'/>
<enum name='GL_FLOAT_MAT2' value='35674'/>
<enum name='GL_FLOAT_MAT2x3' value='35685'/>
<enum name='GL_FLOAT_MAT2x4' value='35686'/>
<enum name='GL_FLOAT_MAT3' value='35675'/>
<enum name='GL_FLOAT_MAT3x2' value='35687'/>
<enum name='GL_FLOAT_MAT3x4' value='35688'/>
<enum name='GL_FLOAT_MAT4' value='35676'/>
<enum name='GL_FLOAT_MAT4x2' value='35689'/>
<enum name='GL_FLOAT_MAT4x3' value='35690'/>
<enum name='GL_FLOAT_VEC2' value='35664'/>
<enum name='GL_FLOAT_VEC3' value='35665'/>
<enum name='GL_FLOAT_VEC4' value='35666'/>
<enum name='GL_FOG' value='2912'/>
<enum name='GL_FOG_BIT' value='128'/>
<enum name='GL_FOG_COLOR' value='2918'/>
<enum name='GL_FOG_COORD' value='33873'/>
<enum name='GL_FOG_COORDINATE' value='33873'/>
<enum name='GL_FOG_COORDINATE_ARRAY' value='33879'/>
<enum name='GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING' value='34973'/>
<enum name='GL_FOG_COORDINATE_ARRAY_POINTER' value='33878'/>
<enum name='GL_FOG_COORDINATE_ARRAY_STRIDE' value='33877'/>
<enum name='GL_FOG_COORDINATE_ARRAY_TYPE' value='33876'/>
<enum name='GL_FOG_COORDINATE_SOURCE' value='33872'/>
<enum name='GL_FOG_COORD_ARRAY' value='33879'/>
<enum name='GL_FOG_COORD_ARRAY_BUFFER_BINDING' value='34973'/>
<enum name='GL_FOG_COORD_ARRAY_POINTER' value='33878'/>
<enum name='GL_FOG_COORD_ARRAY_STRIDE' value='33877'/>
<enum name='GL_FOG_COORD_ARRAY_TYPE' value='33876'/>
<enum name='GL_FOG_COORD_SRC' value='33872'/>
<enum name='GL_FOG_DENSITY' value='2914'/>
<enum name='GL_FOG_END' value='2916'/>
<enum name='GL_FOG_HINT' value='3156'/>
<enum name='GL_FOG_INDEX' value='2913'/>
<enum name='GL_FOG_MODE' value='2917'/>
<enum name='GL_FOG_START' value='2915'/>
<enum name='GL_FRAGMENT_DEPTH' value='33874'/>
<enum name='GL_FRAGMENT_SHADER' value='35632'/>
<enum name='GL_FRAGMENT_SHADER_DERIVATIVE_HINT' value='35723'/>
<enum name='GL_FRONT' value='1028'/>
<enum name='GL_FRONT_AND_BACK' value='1032'/>
<enum name='GL_FRONT_FACE' value='2886'/>
<enum name='GL_FRONT_LEFT' value='1024'/>
<enum name='GL_FRONT_RIGHT' value='1025'/>
<enum name='GL_FUNC_ADD' value='32774'/>
<enum name='GL_FUNC_REVERSE_SUBTRACT' value='32779'/>
<enum name='GL_FUNC_SUBTRACT' value='32778'/>
<enum name='GL_GENERATE_MIPMAP' value='33169'/>
<enum name='GL_GENERATE_MIPMAP_HINT' value='33170'/>
<enum name='GL_GEQUAL' value='518'/>
<enum name='GL_GREATER' value='516'/>
<enum name='GL_GREEN' value='6404'/>
<enum name='GL_GREEN_BIAS' value='3353'/>
<enum name='GL_GREEN_BITS' value='3411'/>
<enum name='GL_GREEN_SCALE' value='3352'/>
<enum name='GL_HINT_BIT' value='32768'/>
<enum name='GL_HISTOGRAM' value='32804'/>
<enum name='GL_HISTOGRAM_ALPHA_SIZE' value='32811'/>
<enum name='GL_HISTOGRAM_BLUE_SIZE' value='32810'/>
<enum name='GL_HISTOGRAM_FORMAT' value='32807'/>
<enum name='GL_HISTOGRAM_GREEN_SIZE' value='32809'/>
<enum name='GL_HISTOGRAM_LUMINANCE_SIZE' value='32812'/>
<enum name='GL_HISTOGRAM_RED_SIZE' value='32808'/>
<enum name='GL_HISTOGRAM_SINK' value='32813'/>
<enum name='GL_HISTOGRAM_WIDTH' value='32806'/>
<enum name='GL_INCR' value='7682'/>
<enum name='GL_INCR_WRAP' value='34055'/>
<enum name='GL_INDEX_ARRAY' value='32887'/>
<enum name='GL_INDEX_ARRAY_BUFFER_BINDING' value='34969'/>
<enum name='GL_INDEX_ARRAY_POINTER' value='32913'/>
<enum name='GL_INDEX_ARRAY_STRIDE' value='32902'/>
<enum name='GL_INDEX_ARRAY_TYPE' value='32901'/>
<enum name='GL_INDEX_BITS' value='3409'/>
<enum name='GL_INDEX_CLEAR_VALUE' value='3104'/>
<enum name='GL_INDEX_LOGIC_OP' value='3057'/>
<enum name='GL_INDEX_MODE' value='3120'/>
<enum name='GL_INDEX_OFFSET' value='3347'/>
<enum name='GL_INDEX_SHIFT' value='3346'/>
<enum name='GL_INDEX_WRITEMASK' value='3105'/>
<enum name='GL_INFO_LOG_LENGTH' value='35716'/>
<enum name='GL_INT' value='5124'/>
<enum name='GL_INTENSITY' value='32841'/>
<enum name='GL_INTENSITY12' value='32844'/>
<enum name='GL_INTENSITY16' value='32845'/>
<enum name='GL_INTENSITY4' value='32842'/>
<enum name='GL_INTENSITY8' value='32843'/>
<enum name='GL_INTERPOLATE' value='34165'/>
<enum name='GL_INT_VEC2' value='35667'/>
<enum name='GL_INT_VEC3' value='35668'/>
<enum name='GL_INT_VEC4' value='35669'/>
<enum name='GL_INVALID_ENUM' value='1280'/>
<enum name='GL_INVALID_OPERATION' value='1282'/>
<enum name='GL_INVALID_VALUE' value='1281'/>
<enum name='GL_INVERT' value='5386'/>
<enum name='GL_KEEP' value='7680'/>
<enum name='GL_LEFT' value='1030'/>
<enum name='GL_LEQUAL' value='515'/>
<enum name='GL_LESS' value='513'/>
<enum name='GL_LIGHT0' value='16384'/>
<enum name='GL_LIGHT1' value='16385'/>
<enum name='GL_LIGHT2' value='16386'/>
<enum name='GL_LIGHT3' value='16387'/>
<enum name='GL_LIGHT4' value='16388'/>
<enum name='GL_LIGHT5' value='16389'/>
<enum name='GL_LIGHT6' value='16390'/>
<enum name='GL_LIGHT7' value='16391'/>
<enum name='GL_LIGHTING' value='2896'/>
<enum name='GL_LIGHTING_BIT' value='64'/>
<enum name='GL_LIGHT_MODEL_AMBIENT' value='2899'/>
<enum name='GL_LIGHT_MODEL_COLOR_CONTROL' value='33272'/>
<enum name='GL_LIGHT_MODEL_LOCAL_VIEWER' value='2897'/>
<enum name='GL_LIGHT_MODEL_TWO_SIDE' value='2898'/>
<enum name='GL_LINE' value='6913'/>
<enum name='GL_LINEAR' value='9729'/>
<enum name='GL_LINEAR_ATTENUATION' value='4616'/>
<enum name='GL_LINEAR_MIPMAP_LINEAR' value='9987'/>
<enum name='GL_LINEAR_MIPMAP_NEAREST' value='9985'/>
<enum name='GL_LINES' value='1'/>
<enum name='GL_LINE_BIT' value='4'/>
<enum name='GL_LINE_LOOP' value='2'/>
<enum name='GL_LINE_RESET_TOKEN' value='1799'/>
<enum name='GL_LINE_SMOOTH' value='2848'/>
<enum name='GL_LINE_SMOOTH_HINT' value='3154'/>
<enum name='GL_LINE_STIPPLE' value='2852'/>
<enum name='GL_LINE_STIPPLE_PATTERN' value='2853'/>
<enum name='GL_LINE_STIPPLE_REPEAT' value='2854'/>
<enum name='GL_LINE_STRIP' value='3'/>
<enum name='GL_LINE_TOKEN' value='1794'/>
<enum name='GL_LINE_WIDTH' value='2849'/>
<enum name='GL_LINE_WIDTH_GRANULARITY' value='2851'/>
<enum name='GL_LINE_WIDTH_RANGE' value='2850'/>
<enum name='GL_LINK_STATUS' value='35714'/>
<enum name='GL_LIST_BASE' value='2866'/>
<enum name='GL_LIST_BIT' value='131072'/>
<enum name='GL_LIST_INDEX' value='2867'/>
<enum name='GL_LIST_MODE' value='2864'/>
<enum name='GL_LOAD' value='257'/>
<enum name='GL_LOGIC_OP' value='3057'/>
<enum name='GL_LOGIC_OP_MODE' value='3056'/>
<enum name='GL_LOWER_LEFT' value='36001'/>
<enum name='GL_LUMINANCE' value='6409'/>
<enum name='GL_LUMINANCE12' value='32833'/>
<enum name='GL_LUMINANCE12_ALPHA12' value='32839'/>
<enum name='GL_LUMINANCE12_ALPHA4' value='32838'/>
<enum name='GL_LUMINANCE16' value='32834'/>
<enum name='GL_LUMINANCE16_ALPHA16' value='32840'/>
<enum name='GL_LUMINANCE4' value='32831'/>
<enum name='GL_LUMINANCE4_ALPHA4' value='32835'/>
<enum name='GL_LUMINANCE6_ALPHA2' value='32836'/>
<enum name='GL_LUMINANCE8' value='32832'/>
<enum name='GL_LUMINANCE8_ALPHA8' value='32837'/>
<enum name='GL_LUMINANCE_ALPHA' value='6410'/>
<enum name='GL_MAP1_COLOR_4' value='3472'/>
<enum name='GL_MAP1_GRID_DOMAIN' value='3536'/>
<enum name='GL_MAP1_GRID_SEGMENTS' value='3537'/>
<enum name='GL_MAP1_INDEX' value='3473'/>
<enum name='GL_MAP1_NORMAL' value='3474'/>
<enum name='GL_MAP1_TEXTURE_COORD_1' value='3475'/>
<enum name='GL_MAP1_TEXTURE_COORD_2' value='3476'/>
<enum name='GL_MAP1_TEXTURE_COORD_3' value='3477'/>
<enum name='GL_MAP1_TEXTURE_COORD_4' value='3478'/>
<enum name='GL_MAP1_VERTEX_3' value='3479'/>
<enum name='GL_MAP1_VERTEX_4' value='3480'/>
<enum name='GL_MAP2_COLOR_4' value='3504'/>
<enum name='GL_MAP2_GRID_DOMAIN' value='3538'/>
<enum name='GL_MAP2_GRID_SEGMENTS' value='3539'/>
<enum name='GL_MAP2_INDEX' value='3505'/>
<enum name='GL_MAP2_NORMAL' value='3506'/>
<enum name='GL_MAP2_TEXTURE_COORD_1' value='3507'/>
<enum name='GL_MAP2_TEXTURE_COORD_2' value='3508'/>
<enum name='GL_MAP2_TEXTURE_COORD_3' value='3509'/>
<enum name='GL_MAP2_TEXTURE_COORD_4' value='3510'/>
<enum name='GL_MAP2_VERTEX_3' value='3511'/>
<enum name='GL_MAP2_VERTEX_4' value='3512'/>
<enum name='GL_MAP_COLOR' value='3344'/>
<enum name='GL_MAP_STENCIL' value='3345'/>
<enum name='GL_MATRIX_MODE' value='2976'/>
<enum name='GL_MAX' value='32776'/>
<enum name='GL_MAX_3D_TEXTURE_SIZE' value='32883'/>
<enum name='GL_MAX_ATTRIB_STACK_DEPTH' value='3381'/>
<enum name='GL_MAX_CLIENT_ATTRIB_STACK_DEPTH' value='3387'/>
<enum name='GL_MAX_CLIP_PLANES' value='3378'/>
<enum name='GL_MAX_COLOR_MATRIX_STACK_DEPTH' value='32947'/>
<enum name='GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS' value='35661'/>
<enum name='GL_MAX_CONVOLUTION_HEIGHT' value='32795'/>
<enum name='GL_MAX_CONVOLUTION_WIDTH' value='32794'/>
<enum name='GL_MAX_CUBE_MAP_TEXTURE_SIZE' value='34076'/>
<enum name='GL_MAX_DRAW_BUFFERS' value='34852'/>
<enum name='GL_MAX_ELEMENTS_INDICES' value='33001'/>
<enum name='GL_MAX_ELEMENTS_VERTICES' value='33000'/>
<enum name='GL_MAX_EVAL_ORDER' value='3376'/>
<enum name='GL_MAX_FRAGMENT_UNIFORM_COMPONENTS' value='35657'/>
<enum name='GL_MAX_LIGHTS' value='3377'/>
<enum name='GL_MAX_LIST_NESTING' value='2865'/>
<enum name='GL_MAX_MODELVIEW_STACK_DEPTH' value='3382'/>
<enum name='GL_MAX_NAME_STACK_DEPTH' value='3383'/>
<enum name='GL_MAX_PIXEL_MAP_TABLE' value='3380'/>
<enum name='GL_MAX_PROJECTION_STACK_DEPTH' value='3384'/>
<enum name='GL_MAX_TEXTURE_COORDS' value='34929'/>
<enum name='GL_MAX_TEXTURE_IMAGE_UNITS' value='34930'/>
<enum name='GL_MAX_TEXTURE_LOD_BIAS' value='34045'/>
<enum name='GL_MAX_TEXTURE_SIZE' value='3379'/>
<enum name='GL_MAX_TEXTURE_STACK_DEPTH' value='3385'/>
<enum name='GL_MAX_TEXTURE_UNITS' value='34018'/>
<enum name='GL_MAX_VARYING_FLOATS' value='35659'/>
<enum name='GL_MAX_VERTEX_ATTRIBS' value='34921'/>
<enum name='GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS' value='35660'/>
<enum name='GL_MAX_VERTEX_UNIFORM_COMPONENTS' value='35658'/>
<enum name='GL_MAX_VIEWPORT_DIMS' value='3386'/>
<enum name='GL_MIN' value='32775'/>
<enum name='GL_MINMAX' value='32814'/>
<enum name='GL_MINMAX_FORMAT' value='32815'/>
<enum name='GL_MINMAX_SINK' value='32816'/>
<enum name='GL_MIRRORED_REPEAT' value='33648'/>
<enum name='GL_MODELVIEW' value='5888'/>
<enum name='GL_MODELVIEW_MATRIX' value='2982'/>
<enum name='GL_MODELVIEW_STACK_DEPTH' value='2979'/>
<enum name='GL_MODULATE' value='8448'/>
<enum name='GL_MULT' value='259'/>
<enum name='GL_MULTISAMPLE' value='32925'/>
<enum name='GL_MULTISAMPLE_BIT' value='536870912'/>
<enum name='GL_N3F_V3F' value='10789'/>
<enum name='GL_NAME_STACK_DEPTH' value='3440'/>
<enum name='GL_NAND' value='5390'/>
<enum name='GL_NEAREST' value='9728'/>
<enum name='GL_NEAREST_MIPMAP_LINEAR' value='9986'/>
<enum name='GL_NEAREST_MIPMAP_NEAREST' value='9984'/>
<enum name='GL_NEVER' value='512'/>
<enum name='GL_NICEST' value='4354'/>
<enum name='GL_NONE' value='0'/>
<enum name='GL_NOOP' value='5381'/>
<enum name='GL_NOR' value='5384'/>
<enum name='GL_NORMALIZE' value='2977'/>
<enum name='GL_NORMAL_ARRAY' value='32885'/>
<enum name='GL_NORMAL_ARRAY_BUFFER_BINDING' value='34967'/>
<enum name='GL_NORMAL_ARRAY_POINTER' value='32911'/>
<enum name='GL_NORMAL_ARRAY_STRIDE' value='32895'/>
<enum name='GL_NORMAL_ARRAY_TYPE' value='32894'/>
<enum name='GL_NORMAL_MAP' value='34065'/>
<enum name='GL_NOTEQUAL' value='517'/>
<enum name='GL_NO_ERROR' value='0'/>
<enum name='GL_NUM_COMPRESSED_TEXTURE_FORMATS' value='34466'/>
<enum name='GL_OBJECT_LINEAR' value='9217'/>
<enum name='GL_OBJECT_PLANE' value='9473'/>
<enum name='GL_ONE' value='1'/>
<enum name='GL_ONE_MINUS_CONSTANT_ALPHA' value='32772'/>
<enum name='GL_ONE_MINUS_CONSTANT_COLOR' value='32770'/>
<enum name='GL_ONE_MINUS_DST_ALPHA' value='773'/>
<enum name='GL_ONE_MINUS_DST_COLOR' value='775'/>
<enum name='GL_ONE_MINUS_SRC_ALPHA' value='771'/>
<enum name='GL_ONE_MINUS_SRC_COLOR' value='769'/>
<enum name='GL_OPERAND0_ALPHA' value='34200'/>
<enum name='GL_OPERAND0_RGB' value='34192'/>
<enum name='GL_OPERAND1_ALPHA' value='34201'/>
<enum name='GL_OPERAND1_RGB' value='34193'/>
<enum name='GL_OPERAND2_ALPHA' value='34202'/>
<enum name='GL_OPERAND2_RGB' value='34194'/>
<enum name='GL_OPERAND3_ALPHA' value='34203'/>
<enum name='GL_OPERAND3_RGB' value='34195'/>
<enum name='GL_OPERAND4_ALPHA' value='34204'/>
<enum name='GL_OPERAND4_RGB' value='34196'/>
<enum name='GL_OPERAND5_ALPHA' value='34205'/>
<enum name='GL_OPERAND5_RGB' value='34197'/>
<enum name='GL_OPERAND6_ALPHA' value='34206'/>
<enum name='GL_OPERAND6_RGB' value='34198'/>
<enum name='GL_OPERAND7_ALPHA' value='34207'/>
<enum name='GL_OPERAND7_RGB' value='34199'/>
<enum name='GL_OR' value='5383'/>
<enum name='GL_ORDER' value='2561'/>
<enum name='GL_OR_INVERTED' value='5389'/>
<enum name='GL_OR_REVERSE' value='5387'/>
<enum name='GL_OUT_OF_MEMORY' value='1285'/>
<enum name='GL_PACK_ALIGNMENT' value='3333'/>
<enum name='GL_PACK_IMAGE_HEIGHT' value='32876'/>
<enum name='GL_PACK_LSB_FIRST' value='3329'/>
<enum name='GL_PACK_ROW_LENGTH' value='3330'/>
<enum name='GL_PACK_SKIP_IMAGES' value='32875'/>
<enum name='GL_PACK_SKIP_PIXELS' value='3332'/>
<enum name='GL_PACK_SKIP_ROWS' value='3331'/>
<enum name='GL_PACK_SWAP_BYTES' value='3328'/>
<enum name='GL_PASS_THROUGH_TOKEN' value='1792'/>
<enum name='GL_PERSPECTIVE_CORRECTION_HINT' value='3152'/>
<enum name='GL_PIXEL_MAP_A_TO_A' value='3193'/>
<enum name='GL_PIXEL_MAP_A_TO_A_SIZE' value='3257'/>
<enum name='GL_PIXEL_MAP_B_TO_B' value='3192'/>
<enum name='GL_PIXEL_MAP_B_TO_B_SIZE' value='3256'/>
<enum name='GL_PIXEL_MAP_G_TO_G' value='3191'/>
<enum name='GL_PIXEL_MAP_G_TO_G_SIZE' value='3255'/>
<enum name='GL_PIXEL_MAP_I_TO_A' value='3189'/>
<enum name='GL_PIXEL_MAP_I_TO_A_SIZE' value='3253'/>
<enum name='GL_PIXEL_MAP_I_TO_B' value='3188'/>
<enum name='GL_PIXEL_MAP_I_TO_B_SIZE' value='3252'/>
<enum name='GL_PIXEL_MAP_I_TO_G' value='3187'/>
<enum name='GL_PIXEL_MAP_I_TO_G_SIZE' value='3251'/>
<enum name='GL_PIXEL_MAP_I_TO_I' value='3184'/>
<enum name='GL_PIXEL_MAP_I_TO_I_SIZE' value='3248'/>
<enum name='GL_PIXEL_MAP_I_TO_R' value='3186'/>
<enum name='GL_PIXEL_MAP_I_TO_R_SIZE' value='3250'/>
<enum name='GL_PIXEL_MAP_R_TO_R' value='3190'/>
<enum name='GL_PIXEL_MAP_R_TO_R_SIZE' value='3254'/>
<enum name='GL_PIXEL_MAP_S_TO_S' value='3185'/>
<enum name='GL_PIXEL_MAP_S_TO_S_SIZE' value='3249'/>
<enum name='GL_PIXEL_MODE_BIT' value='32'/>
<enum name='GL_PIXEL_PACK_BUFFER' value='35051'/>
<enum name='GL_PIXEL_PACK_BUFFER_BINDING' value='35053'/>
<enum name='GL_PIXEL_UNPACK_BUFFER' value='35052'/>
<enum name='GL_PIXEL_UNPACK_BUFFER_BINDING' value='35055'/>
<enum name='GL_POINT' value='6912'/>
<enum name='GL_POINTS' value='0'/>
<enum name='GL_POINT_BIT' value='2'/>
<enum name='GL_POINT_DISTANCE_ATTENUATION' value='33065'/>
<enum name='GL_POINT_FADE_THRESHOLD_SIZE' value='33064'/>
<enum name='GL_POINT_SIZE' value='2833'/>
<enum name='GL_POINT_SIZE_GRANULARITY' value='2835'/>
<enum name='GL_POINT_SIZE_MAX' value='33063'/>
<enum name='GL_POINT_SIZE_MIN' value='33062'/>
<enum name='GL_POINT_SIZE_RANGE' value='2834'/>
<enum name='GL_POINT_SMOOTH' value='2832'/>
<enum name='GL_POINT_SMOOTH_HINT' value='3153'/>
<enum name='GL_POINT_SPRITE' value='34913'/>
<enum name='GL_POINT_SPRITE_COORD_ORIGIN' value='36000'/>
<enum name='GL_POINT_TOKEN' value='1793'/>
<enum name='GL_POLYGON' value='9'/>
<enum name='GL_POLYGON_BIT' value='8'/>
<enum name='GL_POLYGON_MODE' value='2880'/>
<enum name='GL_POLYGON_OFFSET_FACTOR' value='32824'/>
<enum name='GL_POLYGON_OFFSET_FILL' value='32823'/>
<enum name='GL_POLYGON_OFFSET_LINE' value='10754'/>
<enum name='GL_POLYGON_OFFSET_POINT' value='10753'/>
<enum name='GL_POLYGON_OFFSET_UNITS' value='10752'/>
<enum name='GL_POLYGON_SMOOTH' value='2881'/>
<enum name='GL_POLYGON_SMOOTH_HINT' value='3155'/>
<enum name='GL_POLYGON_STIPPLE' value='2882'/>
<enum name='GL_POLYGON_STIPPLE_BIT' value='16'/>
<enum name='GL_POLYGON_TOKEN' value='1795'/>
<enum name='GL_POSITION' value='4611'/>
<enum name='GL_POST_COLOR_MATRIX_ALPHA_BIAS' value='32955'/>
<enum name='GL_POST_COLOR_MATRIX_ALPHA_SCALE' value='32951'/>
<enum name='GL_POST_COLOR_MATRIX_BLUE_BIAS' value='32954'/>
<enum name='GL_POST_COLOR_MATRIX_BLUE_SCALE' value='32950'/>
<enum name='GL_POST_COLOR_MATRIX_COLOR_TABLE' value='32978'/>
<enum name='GL_POST_COLOR_MATRIX_GREEN_BIAS' value='32953'/>
<enum name='GL_POST_COLOR_MATRIX_GREEN_SCALE' value='32949'/>
<enum name='GL_POST_COLOR_MATRIX_RED_BIAS' value='32952'/>
<enum name='GL_POST_COLOR_MATRIX_RED_SCALE' value='32948'/>
<enum name='GL_POST_CONVOLUTION_ALPHA_BIAS' value='32803'/>
<enum name='GL_POST_CONVOLUTION_ALPHA_SCALE' value='32799'/>
<enum name='GL_POST_CONVOLUTION_BLUE_BIAS' value='32802'/>
<enum name='GL_POST_CONVOLUTION_BLUE_SCALE' value='32798'/>
<enum name='GL_POST_CONVOLUTION_COLOR_TABLE' value='32977'/>
<enum name='GL_POST_CONVOLUTION_GREEN_BIAS' value='32801'/>
<enum name='GL_POST_CONVOLUTION_GREEN_SCALE' value='32797'/>
<enum name='GL_POST_CONVOLUTION_RED_BIAS' value='32800'/>
<enum name='GL_POST_CONVOLUTION_RED_SCALE' value='32796'/>
<enum name='GL_PREVIOUS' value='34168'/>
<enum name='GL_PRIMARY_COLOR' value='34167'/>
<enum name='GL_PROJECTION' value='5889'/>
<enum name='GL_PROJECTION_MATRIX' value='2983'/>
<enum name='GL_PROJECTION_STACK_DEPTH' value='2980'/>
<enum name='GL_PROXY_COLOR_TABLE' value='32979'/>
<enum name='GL_PROXY_HISTOGRAM' value='32805'/>
<enum name='GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE' value='32981'/>
<enum name='GL_PROXY_POST_CONVOLUTION_COLOR_TABLE' value='32980'/>
<enum name='GL_PROXY_TEXTURE_1D' value='32867'/>
<enum name='GL_PROXY_TEXTURE_2D' value='32868'/>
<enum name='GL_PROXY_TEXTURE_3D' value='32880'/>
<enum name='GL_PROXY_TEXTURE_CUBE_MAP' value='34075'/>
<enum name='GL_Q' value='8195'/>
<enum name='GL_QUADRATIC_ATTENUATION' value='4617'/>
<enum name='GL_QUADS' value='7'/>
<enum name='GL_QUAD_STRIP' value='8'/>
<enum name='GL_QUERY_COUNTER_BITS' value='34916'/>
<enum name='GL_QUERY_RESULT' value='34918'/>
<enum name='GL_QUERY_RESULT_AVAILABLE' value='34919'/>
<enum name='GL_R' value='8194'/>
<enum name='GL_R3_G3_B2' value='10768'/>
<enum name='GL_READ_BUFFER' value='3074'/>
<enum name='GL_READ_ONLY' value='35000'/>
<enum name='GL_READ_WRITE' value='35002'/>
<enum name='GL_RED' value='6403'/>
<enum name='GL_REDUCE' value='32790'/>
<enum name='GL_RED_BIAS' value='3349'/>
<enum name='GL_RED_BITS' value='3410'/>
<enum name='GL_RED_SCALE' value='3348'/>
<enum name='GL_REFLECTION_MAP' value='34066'/>
<enum name='GL_RENDER' value='7168'/>
<enum name='GL_RENDERER' value='7937'/>
<enum name='GL_RENDER_MODE' value='3136'/>
<enum name='GL_REPEAT' value='10497'/>
<enum name='GL_REPLACE' value='7681'/>
<enum name='GL_REPLICATE_BORDER' value='33107'/>
<enum name='GL_RESCALE_NORMAL' value='32826'/>
<enum name='GL_RETURN' value='258'/>
<enum name='GL_RGB' value='6407'/>
<enum name='GL_RGB10' value='32850'/>
<enum name='GL_RGB10_A2' value='32857'/>
<enum name='GL_RGB12' value='32851'/>
<enum name='GL_RGB16' value='32852'/>
<enum name='GL_RGB4' value='32847'/>
<enum name='GL_RGB5' value='32848'/>
<enum name='GL_RGB5_A1' value='32855'/>
<enum name='GL_RGB8' value='32849'/>
<enum name='GL_RGBA' value='6408'/>
<enum name='GL_RGBA12' value='32858'/>
<enum name='GL_RGBA16' value='32859'/>
<enum name='GL_RGBA2' value='32853'/>
<enum name='GL_RGBA4' value='32854'/>
<enum name='GL_RGBA8' value='32856'/>
<enum name='GL_RGBA_MODE' value='3121'/>
<enum name='GL_RGB_SCALE' value='34163'/>
<enum name='GL_RIGHT' value='1031'/>
<enum name='GL_S' value='8192'/>
<enum name='GL_SAMPLER_1D' value='35677'/>
<enum name='GL_SAMPLER_1D_SHADOW' value='35681'/>
<enum name='GL_SAMPLER_2D' value='35678'/>
<enum name='GL_SAMPLER_2D_SHADOW' value='35682'/>
<enum name='GL_SAMPLER_3D' value='35679'/>
<enum name='GL_SAMPLER_CUBE' value='35680'/>
<enum name='GL_SAMPLES' value='32937'/>
<enum name='GL_SAMPLES_PASSED' value='35092'/>
<enum name='GL_SAMPLE_ALPHA_TO_COVERAGE' value='32926'/>
<enum name='GL_SAMPLE_ALPHA_TO_ONE' value='32927'/>
<enum name='GL_SAMPLE_BUFFERS' value='32936'/>
<enum name='GL_SAMPLE_COVERAGE' value='32928'/>
<enum name='GL_SAMPLE_COVERAGE_INVERT' value='32939'/>
<enum name='GL_SAMPLE_COVERAGE_VALUE' value='32938'/>
<enum name='GL_SCISSOR_BIT' value='524288'/>
<enum name='GL_SCISSOR_BOX' value='3088'/>
<enum name='GL_SCISSOR_TEST' value='3089'/>
<enum name='GL_SECONDARY_COLOR_ARRAY' value='33886'/>
<enum name='GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING' value='34972'/>
<enum name='GL_SECONDARY_COLOR_ARRAY_POINTER' value='33885'/>
<enum name='GL_SECONDARY_COLOR_ARRAY_SIZE' value='33882'/>
<enum name='GL_SECONDARY_COLOR_ARRAY_STRIDE' value='33884'/>
<enum name='GL_SECONDARY_COLOR_ARRAY_TYPE' value='33883'/>
<enum name='GL_SELECT' value='7170'/>
<enum name='GL_SELECTION_BUFFER_POINTER' value='3571'/>
<enum name='GL_SELECTION_BUFFER_SIZE' value='3572'/>
<enum name='GL_SEPARABLE_2D' value='32786'/>
<enum name='GL_SEPARATE_SPECULAR_COLOR' value='33274'/>
<enum name='GL_SET' value='5391'/>
<enum name='GL_SHADER_SOURCE_LENGTH' value='35720'/>
<enum name='GL_SHADER_TYPE' value='35663'/>
<enum name='GL_SHADE_MODEL' value='2900'/>
<enum name='GL_SHADING_LANGUAGE_VERSION' value='35724'/>
<enum name='GL_SHININESS' value='5633'/>
<enum name='GL_SHORT' value='5122'/>
<enum name='GL_SINGLE_COLOR' value='33273'/>
<enum name='GL_SLUMINANCE' value='35910'/>
<enum name='GL_SLUMINANCE8' value='35911'/>
<enum name='GL_SLUMINANCE8_ALPHA8' value='35909'/>
<enum name='GL_SLUMINANCE_ALPHA' value='35908'/>
<enum name='GL_SMOOTH' value='7425'/>
<enum name='GL_SMOOTH_LINE_WIDTH_GRANULARITY' value='2851'/>
<enum name='GL_SMOOTH_LINE_WIDTH_RANGE' value='2850'/>
<enum name='GL_SMOOTH_POINT_SIZE_GRANULARITY' value='2835'/>
<enum name='GL_SMOOTH_POINT_SIZE_RANGE' value='2834'/>
<enum name='GL_SOURCE0_ALPHA' value='34184'/>
<enum name='GL_SOURCE0_RGB' value='34176'/>
<enum name='GL_SOURCE1_ALPHA' value='34185'/>
<enum name='GL_SOURCE1_RGB' value='34177'/>
<enum name='GL_SOURCE2_ALPHA' value='34186'/>
<enum name='GL_SOURCE2_RGB' value='34178'/>
<enum name='GL_SOURCE3_ALPHA' value='34187'/>
<enum name='GL_SOURCE3_RGB' value='34179'/>
<enum name='GL_SOURCE4_ALPHA' value='34188'/>
<enum name='GL_SOURCE4_RGB' value='34180'/>
<enum name='GL_SOURCE5_ALPHA' value='34189'/>
<enum name='GL_SOURCE5_RGB' value='34181'/>
<enum name='GL_SOURCE6_ALPHA' value='34190'/>
<enum name='GL_SOURCE6_RGB' value='34182'/>
<enum name='GL_SOURCE7_ALPHA' value='34191'/>
<enum name='GL_SOURCE7_RGB' value='34183'/>
<enum name='GL_SPECULAR' value='4610'/>
<enum name='GL_SPHERE_MAP' value='9218'/>
<enum name='GL_SPOT_CUTOFF' value='4614'/>
<enum name='GL_SPOT_DIRECTION' value='4612'/>
<enum name='GL_SPOT_EXPONENT' value='4613'/>
<enum name='GL_SRC0_ALPHA' value='34184'/>
<enum name='GL_SRC0_RGB' value='34176'/>
<enum name='GL_SRC1_ALPHA' value='34185'/>
<enum name='GL_SRC1_RGB' value='34177'/>
<enum name='GL_SRC2_ALPHA' value='34186'/>
<enum name='GL_SRC2_RGB' value='34178'/>
<enum name='GL_SRC3_ALPHA' value='34187'/>
<enum name='GL_SRC3_RGB' value='34179'/>
<enum name='GL_SRC4_ALPHA' value='34188'/>
<enum name='GL_SRC4_RGB' value='34180'/>
<enum name='GL_SRC5_ALPHA' value='34189'/>
<enum name='GL_SRC5_RGB' value='34181'/>
<enum name='GL_SRC6_ALPHA' value='34190'/>
<enum name='GL_SRC6_RGB' value='34182'/>
<enum name='GL_SRC7_ALPHA' value='34191'/>
<enum name='GL_SRC7_RGB' value='34183'/>
<enum name='GL_SRC_ALPHA' value='770'/>
<enum name='GL_SRC_ALPHA_SATURATE' value='776'/>
<enum name='GL_SRC_COLOR' value='768'/>
<enum name='GL_SRGB' value='35904'/>
<enum name='GL_SRGB8' value='35905'/>
<enum name='GL_SRGB8_ALPHA8' value='35907'/>
<enum name='GL_SRGB_ALPHA' value='35906'/>
<enum name='GL_STACK_OVERFLOW' value='1283'/>
<enum name='GL_STACK_UNDERFLOW' value='1284'/>
<enum name='GL_STATIC_COPY' value='35046'/>
<enum name='GL_STATIC_DRAW' value='35044'/>
<enum name='GL_STATIC_READ' value='35045'/>
<enum name='GL_STENCIL' value='6146'/>
<enum name='GL_STENCIL_BACK_FAIL' value='34817'/>
<enum name='GL_STENCIL_BACK_FUNC' value='34816'/>
<enum name='GL_STENCIL_BACK_PASS_DEPTH_FAIL' value='34818'/>
<enum name='GL_STENCIL_BACK_PASS_DEPTH_PASS' value='34819'/>
<enum name='GL_STENCIL_BACK_REF' value='36003'/>
<enum name='GL_STENCIL_BACK_VALUE_MASK' value='36004'/>
<enum name='GL_STENCIL_BACK_WRITEMASK' value='36005'/>
<enum name='GL_STENCIL_BITS' value='3415'/>
<enum name='GL_STENCIL_BUFFER_BIT' value='1024'/>
<enum name='GL_STENCIL_CLEAR_VALUE' value='2961'/>
<enum name='GL_STENCIL_FAIL' value='2964'/>
<enum name='GL_STENCIL_FUNC' value='2962'/>
<enum name='GL_STENCIL_INDEX' value='6401'/>
<enum name='GL_STENCIL_PASS_DEPTH_FAIL' value='2965'/>
<enum name='GL_STENCIL_PASS_DEPTH_PASS' value='2966'/>
<enum name='GL_STENCIL_REF' value='2967'/>
<enum name='GL_STENCIL_TEST' value='2960'/>
<enum name='GL_STENCIL_VALUE_MASK' value='2963'/>
<enum name='GL_STENCIL_WRITEMASK' value='2968'/>
<enum name='GL_STEREO' value='3123'/>
<enum name='GL_STREAM_COPY' value='35042'/>
<enum name='GL_STREAM_DRAW' value='35040'/>
<enum name='GL_STREAM_READ' value='35041'/>
<enum name='GL_SUBPIXEL_BITS' value='3408'/>
<enum name='GL_SUBTRACT' value='34023'/>
<enum name='GL_T' value='8193'/>
<enum name='GL_T2F_C3F_V3F' value='10794'/>
<enum name='GL_T2F_C4F_N3F_V3F' value='10796'/>
<enum name='GL_T2F_C4UB_V3F' value='10793'/>
<enum name='GL_T2F_N3F_V3F' value='10795'/>
<enum name='GL_T2F_V3F' value='10791'/>
<enum name='GL_T4F_C4F_N3F_V4F' value='10797'/>
<enum name='GL_T4F_V4F' value='10792'/>
<enum name='GL_TABLE_TOO_LARGE' value='32817'/>
<enum name='GL_TEXTURE' value='5890'/>
<enum name='GL_TEXTURE0' value='33984'/>
<enum name='GL_TEXTURE1' value='33985'/>
<enum name='GL_TEXTURE10' value='33994'/>
<enum name='GL_TEXTURE11' value='33995'/>
<enum name='GL_TEXTURE12' value='33996'/>
<enum name='GL_TEXTURE13' value='33997'/>
<enum name='GL_TEXTURE14' value='33998'/>
<enum name='GL_TEXTURE15' value='33999'/>
<enum name='GL_TEXTURE16' value='34000'/>
<enum name='GL_TEXTURE17' value='34001'/>
<enum name='GL_TEXTURE18' value='34002'/>
<enum name='GL_TEXTURE19' value='34003'/>
<enum name='GL_TEXTURE2' value='33986'/>
<enum name='GL_TEXTURE20' value='34004'/>
<enum name='GL_TEXTURE21' value='34005'/>
<enum name='GL_TEXTURE22' value='34006'/>
<enum name='GL_TEXTURE23' value='34007'/>
<enum name='GL_TEXTURE24' value='34008'/>
<enum name='GL_TEXTURE25' value='34009'/>
<enum name='GL_TEXTURE26' value='34010'/>
<enum name='GL_TEXTURE27' value='34011'/>
<enum name='GL_TEXTURE28' value='34012'/>
<enum name='GL_TEXTURE29' value='34013'/>
<enum name='GL_TEXTURE3' value='33987'/>
<enum name='GL_TEXTURE30' value='34014'/>
<enum name='GL_TEXTURE31' value='34015'/>
<enum name='GL_TEXTURE4' value='33988'/>
<enum name='GL_TEXTURE5' value='33989'/>
<enum name='GL_TEXTURE6' value='33990'/>
<enum name='GL_TEXTURE7' value='33991'/>
<enum name='GL_TEXTURE8' value='33992'/>
<enum name='GL_TEXTURE9' value='33993'/>
<enum name='GL_TEXTURE_1D' value='3552'/>
<enum name='GL_TEXTURE_2D' value='3553'/>
<enum name='GL_TEXTURE_3D' value='32879'/>
<enum name='GL_TEXTURE_ALPHA_SIZE' value='32863'/>
<enum name='GL_TEXTURE_BASE_LEVEL' value='33084'/>
<enum name='GL_TEXTURE_BINDING_1D' value='32872'/>
<enum name='GL_TEXTURE_BINDING_2D' value='32873'/>
<enum name='GL_TEXTURE_BINDING_3D' value='32874'/>
<enum name='GL_TEXTURE_BINDING_CUBE_MAP' value='34068'/>
<enum name='GL_TEXTURE_BIT' value='262144'/>
<enum name='GL_TEXTURE_BLUE_SIZE' value='32862'/>
<enum name='GL_TEXTURE_BORDER' value='4101'/>
<enum name='GL_TEXTURE_BORDER_COLOR' value='4100'/>
<enum name='GL_TEXTURE_COMPARE_FUNC' value='34893'/>
<enum name='GL_TEXTURE_COMPARE_MODE' value='34892'/>
<enum name='GL_TEXTURE_COMPONENTS' value='4099'/>
<enum name='GL_TEXTURE_COMPRESSED' value='34465'/>
<enum name='GL_TEXTURE_COMPRESSED_IMAGE_SIZE' value='34464'/>
<enum name='GL_TEXTURE_COMPRESSION_HINT' value='34031'/>
<enum name='GL_TEXTURE_COORD_ARRAY' value='32888'/>
<enum name='GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING' value='34970'/>
<enum name='GL_TEXTURE_COORD_ARRAY_POINTER' value='32914'/>
<enum name='GL_TEXTURE_COORD_ARRAY_SIZE' value='32904'/>
<enum name='GL_TEXTURE_COORD_ARRAY_STRIDE' value='32906'/>
<enum name='GL_TEXTURE_COORD_ARRAY_TYPE' value='32905'/>
<enum name='GL_TEXTURE_CUBE_MAP' value='34067'/>
<enum name='GL_TEXTURE_CUBE_MAP_NEGATIVE_X' value='34070'/>
<enum name='GL_TEXTURE_CUBE_MAP_NEGATIVE_Y' value='34072'/>
<enum name='GL_TEXTURE_CUBE_MAP_NEGATIVE_Z' value='34074'/>
<enum name='GL_TEXTURE_CUBE_MAP_POSITIVE_X' value='34069'/>
<enum name='GL_TEXTURE_CUBE_MAP_POSITIVE_Y' value='34071'/>
<enum name='GL_TEXTURE_CUBE_MAP_POSITIVE_Z' value='34073'/>
<enum name='GL_TEXTURE_DEPTH' value='32881'/>
<enum name='GL_TEXTURE_DEPTH_SIZE' value='34890'/>
<enum name='GL_TEXTURE_ENV' value='8960'/>
<enum name='GL_TEXTURE_ENV_COLOR' value='8705'/>
<enum name='GL_TEXTURE_ENV_MODE' value='8704'/>
<enum name='GL_TEXTURE_FILTER_CONTROL' value='34048'/>
<enum name='GL_TEXTURE_GEN_MODE' value='9472'/>
<enum name='GL_TEXTURE_GEN_Q' value='3171'/>
<enum name='GL_TEXTURE_GEN_R' value='3170'/>
<enum name='GL_TEXTURE_GEN_S' value='3168'/>
<enum name='GL_TEXTURE_GEN_T' value='3169'/>
<enum name='GL_TEXTURE_GREEN_SIZE' value='32861'/>
<enum name='GL_TEXTURE_HEIGHT' value='4097'/>
<enum name='GL_TEXTURE_INTENSITY_SIZE' value='32865'/>
<enum name='GL_TEXTURE_INTERNAL_FORMAT' value='4099'/>
<enum name='GL_TEXTURE_LOD_BIAS' value='34049'/>
<enum name='GL_TEXTURE_LUMINANCE_SIZE' value='32864'/>
<enum name='GL_TEXTURE_MAG_FILTER' value='10240'/>
<enum name='GL_TEXTURE_MATRIX' value='2984'/>
<enum name='GL_TEXTURE_MAX_LEVEL' value='33085'/>
<enum name='GL_TEXTURE_MAX_LOD' value='33083'/>
<enum name='GL_TEXTURE_MIN_FILTER' value='10241'/>
<enum name='GL_TEXTURE_MIN_LOD' value='33082'/>
<enum name='GL_TEXTURE_PRIORITY' value='32870'/>
<enum name='GL_TEXTURE_RED_SIZE' value='32860'/>
<enum name='GL_TEXTURE_RESIDENT' value='32871'/>
<enum name='GL_TEXTURE_STACK_DEPTH' value='2981'/>
<enum name='GL_TEXTURE_WIDTH' value='4096'/>
<enum name='GL_TEXTURE_WRAP_R' value='32882'/>
<enum name='GL_TEXTURE_WRAP_S' value='10242'/>
<enum name='GL_TEXTURE_WRAP_T' value='10243'/>
<enum name='GL_TRANSFORM_BIT' value='4096'/>
<enum name='GL_TRANSPOSE_COLOR_MATRIX' value='34022'/>
<enum name='GL_TRANSPOSE_MODELVIEW_MATRIX' value='34019'/>
<enum name='GL_TRANSPOSE_PROJECTION_MATRIX' value='34020'/>
<enum name='GL_TRANSPOSE_TEXTURE_MATRIX' value='34021'/>
<enum name='GL_TRIANGLES' value='4'/>
<enum name='GL_TRIANGLE_FAN' value='6'/>
<enum name='GL_TRIANGLE_STRIP' value='5'/>
<enum name='GL_TRUE' value='1'/>
<enum name='GL_UNPACK_ALIGNMENT' value='3317'/>
<enum name='GL_UNPACK_IMAGE_HEIGHT' value='32878'/>
<enum name='GL_UNPACK_LSB_FIRST' value='3313'/>
<enum name='GL_UNPACK_ROW_LENGTH' value='3314'/>
<enum name='GL_UNPACK_SKIP_IMAGES' value='32877'/>
<enum name='GL_UNPACK_SKIP_PIXELS' value='3316'/>
<enum name='GL_UNPACK_SKIP_ROWS' value='3315'/>
<enum name='GL_UNPACK_SWAP_BYTES' value='3312'/>
<enum name='GL_UNSIGNED_BYTE' value='5121'/>
<enum name='GL_UNSIGNED_BYTE_2_3_3_REV' value='33634'/>
<enum name='GL_UNSIGNED_BYTE_3_3_2' value='32818'/>
<enum name='GL_UNSIGNED_INT' value='5125'/>
<enum name='GL_UNSIGNED_INT_10_10_10_2' value='32822'/>
<enum name='GL_UNSIGNED_INT_2_10_10_10_REV' value='33640'/>
<enum name='GL_UNSIGNED_INT_8_8_8_8' value='32821'/>
<enum name='GL_UNSIGNED_INT_8_8_8_8_REV' value='33639'/>
<enum name='GL_UNSIGNED_SHORT' value='5123'/>
<enum name='GL_UNSIGNED_SHORT_1_5_5_5_REV' value='33638'/>
<enum name='GL_UNSIGNED_SHORT_4_4_4_4' value='32819'/>
<enum name='GL_UNSIGNED_SHORT_4_4_4_4_REV' value='33637'/>
<enum name='GL_UNSIGNED_SHORT_5_5_5_1' value='32820'/>
<enum name='GL_UNSIGNED_SHORT_5_6_5' value='33635'/>
<enum name='GL_UNSIGNED_SHORT_5_6_5_REV' value='33636'/>
<enum name='GL_UPPER_LEFT' value='36002'/>
<enum name='GL_V2F' value='10784'/>
<enum name='GL_V3F' value='10785'/>
<enum name='GL_VALIDATE_STATUS' value='35715'/>
<enum name='GL_VENDOR' value='7936'/>
<enum name='GL_VERSION' value='7938'/>
<enum name='GL_VERSION_1_1' value='1'/>
<enum name='GL_VERSION_1_2' value='1'/>
<enum name='GL_VERSION_1_3' value='1'/>
<enum name='GL_VERSION_1_4' value='1'/>
<enum name='GL_VERSION_1_5' value='1'/>
<enum name='GL_VERSION_2_0' value='1'/>
<enum name='GL_VERSION_2_1' value='1'/>
<enum name='GL_VERTEX_ARRAY' value='32884'/>
<enum name='GL_VERTEX_ARRAY_BUFFER_BINDING' value='34966'/>
<enum name='GL_VERTEX_ARRAY_POINTER' value='32910'/>
<enum name='GL_VERTEX_ARRAY_SIZE' value='32890'/>
<enum name='GL_VERTEX_ARRAY_STRIDE' value='32892'/>
<enum name='GL_VERTEX_ARRAY_TYPE' value='32891'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING' value='34975'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_ENABLED' value='34338'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_NORMALIZED' value='34922'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_POINTER' value='34373'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_SIZE' value='34339'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_STRIDE' value='34340'/>
<enum name='GL_VERTEX_ATTRIB_ARRAY_TYPE' value='34341'/>
<enum name='GL_VERTEX_PROGRAM_POINT_SIZE' value='34370'/>
<enum name='GL_VERTEX_PROGRAM_TWO_SIDE' value='34371'/>
<enum name='GL_VERTEX_SHADER' value='35633'/>
<enum name='GL_VIEWPORT' value='2978'/>
<enum name='GL_VIEWPORT_BIT' value='2048'/>
<enum name='GL_WEIGHT_ARRAY_BUFFER_BINDING' value='34974'/>
<enum name='GL_WRITE_ONLY' value='35001'/>
<enum name='GL_XOR' value='5382'/>
<enum name='GL_ZERO' value='0'/>
<enum name='GL_ZOOM_X' value='3350'/>
<enum name='GL_ZOOM_Y' value='3351'/>
<function name='aglChoosePixelFormat'>
<arg name='gdevs' declared_type='void*' type='^v' const='true'/>
<arg name='ndev' declared_type='GLint' type='i'/>
<arg name='attribs' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
</function>
<function name='aglConfigure'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglCopyContext'>
<arg name='src' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='dst' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglCreateContext'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<arg name='share' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{__AGLPrivateRec}}'/>
</function>
<function name='aglCreatePBuffer'>
<arg name='width' declared_type='GLint' type='i'/>
<arg name='height' declared_type='GLint' type='i'/>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLenum' type='I'/>
<arg name='max_level' declared_type='GLint' type='i'/>
<arg name='pbuffer' declared_type='AGLPbuffer*' type='^^{__AGLPBufferRec}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglCreatePixelFormat'>
<arg name='attribs' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
</function>
<function name='aglDescribePBuffer'>
<arg name='pbuffer' declared_type='AGLPbuffer' type='^{__AGLPBufferRec=}'/>
<arg name='width' declared_type='GLint*' type='^i'/>
<arg name='height' declared_type='GLint*' type='^i'/>
<arg name='target' declared_type='GLenum*' type='^I'/>
<arg name='internalFormat' declared_type='GLenum*' type='^I'/>
<arg name='max_level' declared_type='GLint*' type='^i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDescribePixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<arg name='attrib' declared_type='GLint' type='i'/>
<arg name='value' declared_type='GLint*' type='^i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDescribeRenderer'>
<arg name='rend' declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
<arg name='prop' declared_type='GLint' type='i'/>
<arg name='value' declared_type='GLint*' type='^i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDestroyContext'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDestroyPBuffer'>
<arg name='pbuffer' declared_type='AGLPbuffer' type='^{__AGLPBufferRec=}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDestroyPixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='aglDestroyRendererInfo'>
<arg name='rend' declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='aglDevicesOfPixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<arg name='ndevs' declared_type='GLint*' type='^i'/>
<retval declared_type='GDHandle*' type='^^^{GDevice}'/>
</function>
<function name='aglDisable'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglDisplaysOfPixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<arg name='ndevs' declared_type='GLint*' type='^i'/>
<retval declared_type='CGDirectDisplayID*' type='^I'/>
</function>
<function name='aglEnable'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglErrorString'>
<arg name='code' declared_type='GLenum' type='I'/>
<retval declared_type='GLubyte*' type='*' const='true'/>
</function>
<function name='aglGetCGLContext'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='cgl_ctx' declared_type='void**' type='^^v'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglGetCGLPixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<arg name='cgl_pix' declared_type='void**' type='^^v'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglGetCurrentContext'>
<retval declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
</function>
<function name='aglGetDrawable'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='AGLDrawable' type='^{OpaqueGrafPtr=}'/>
</function>
<function name='aglGetError'>
<retval declared_type='GLenum' type='I'/>
</function>
<function name='aglGetHIViewRef'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='HIViewRef' type='^{OpaqueControlRef=}'/>
</function>
<function name='aglGetInteger'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglGetPBuffer'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pbuffer' declared_type='AGLPbuffer*' type='^^{__AGLPBufferRec}'/>
<arg name='face' declared_type='GLint*' type='^i'/>
<arg name='level' declared_type='GLint*' type='^i'/>
<arg name='screen' declared_type='GLint*' type='^i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglGetVersion'>
<arg name='major' declared_type='GLint*' type='^i'/>
<arg name='minor' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='aglGetVirtualScreen'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='aglGetWindowRef'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{__AGLPrivateRec}}'/>
<retval declared_type='WindowRef' type='^{OpaqueWindowPtr=}'/>
</function>
<function name='aglIsEnabled'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglNextPixelFormat'>
<arg name='pix' declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
<retval declared_type='AGLPixelFormat' type='^{__AGLPixelFormatRec=}'/>
</function>
<function name='aglNextRendererInfo'>
<arg name='rend' declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
<retval declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
</function>
<function name='aglQueryRendererInfo'>
<arg name='gdevs' declared_type='AGLDevice*' type='^^^{GDevice}' const='true'/>
<arg name='ndev' declared_type='GLint' type='i'/>
<retval declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
</function>
<function name='aglQueryRendererInfoForCGDirectDisplayIDs'>
<arg name='dspIDs' declared_type='CGDirectDisplayID*' type='^I' const='true'/>
<arg name='ndev' declared_type='GLint' type='i'/>
<retval declared_type='AGLRendererInfo' type='^{__AGLRendererInfoRec=}'/>
</function>
<function name='aglResetLibrary'>
<retval declared_type='void' type='v'/>
</function>
<function name='aglSetCurrentContext'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetDrawable'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='draw' declared_type='AGLDrawable' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetFullScreen'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='freq' declared_type='GLsizei' type='i'/>
<arg name='device' declared_type='GLint' type='i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetHIViewRef'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='hiview' declared_type='HIViewRef' type='^{OpaqueControlRef=}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetInteger'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetOffScreen'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='rowbytes' declared_type='GLsizei' type='i'/>
<arg name='baseaddr' declared_type='GLvoid*' type='^v'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetPBuffer'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pbuffer' declared_type='AGLPbuffer' type='^{__AGLPBufferRec=}'/>
<arg name='face' declared_type='GLint' type='i'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='screen' declared_type='GLint' type='i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetVirtualScreen'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='screen' declared_type='GLint' type='i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSetWindowRef'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='window' declared_type='WindowRef' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglSurfaceTexture'>
<arg name='context' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='surfacecontext' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='aglSwapBuffers'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='aglTexImagePBuffer'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='pbuffer' declared_type='AGLPbuffer' type='^{__AGLPBufferRec=}'/>
<arg name='source' declared_type='GLint' type='i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglUpdateContext'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='aglUseFont'>
<arg name='ctx' declared_type='AGLContext' type='^{__AGLContextRec=^{__GLIContextRec}{__GLIFunctionDispatchRec}^{__AGLPrivateRec}}'/>
<arg name='fontID' declared_type='GLint' type='i'/>
<arg name='face' declared_type='Style' type='C'/>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='first' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLint' type='i'/>
<arg name='base' declared_type='GLint' type='i'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glAccum'>
<arg name='op' declared_type='GLenum' type='I'/>
<arg name='value' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glActiveTexture'>
<arg name='texture' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glAlphaFunc'>
<arg name='func' declared_type='GLenum' type='I'/>
<arg name='ref' declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glAreTexturesResident'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='textures' declared_type='GLuint*' type='^I' const='true'/>
<arg name='residences' declared_type='GLboolean*' type='*'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glArrayElement'>
<arg name='i' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glAttachShader'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='shader' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBegin'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBeginQuery'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='id' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBindAttribLocation'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='name' declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBindBuffer'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='buffer' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBindTexture'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='texture' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBitmap'>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='xorig' declared_type='GLfloat' type='f'/>
<arg name='yorig' declared_type='GLfloat' type='f'/>
<arg name='xmove' declared_type='GLfloat' type='f'/>
<arg name='ymove' declared_type='GLfloat' type='f'/>
<arg name='bitmap' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBlendColor'>
<arg name='red' declared_type='GLclampf' type='f'/>
<arg name='green' declared_type='GLclampf' type='f'/>
<arg name='blue' declared_type='GLclampf' type='f'/>
<arg name='alpha' declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBlendEquation'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBlendEquationSeparate'>
<arg name='modeRGB' declared_type='GLenum' type='I'/>
<arg name='modeAlpha' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBlendFunc'>
<arg name='sfactor' declared_type='GLenum' type='I'/>
<arg name='dfactor' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBlendFuncSeparate'>
<arg name='srcRGB' declared_type='GLenum' type='I'/>
<arg name='dstRGB' declared_type='GLenum' type='I'/>
<arg name='srcAlpha' declared_type='GLenum' type='I'/>
<arg name='dstAlpha' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBufferData'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='size' declared_type='GLsizeiptr' type='l' type64='q'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<arg name='usage' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glBufferSubData'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='offset' declared_type='GLintptr' type='l' type64='q'/>
<arg name='size' declared_type='GLsizeiptr' type='l' type64='q'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCallList'>
<arg name='list' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCallLists'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='lists' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClear'>
<arg name='mask' declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClearAccum'>
<arg name='red' declared_type='GLfloat' type='f'/>
<arg name='green' declared_type='GLfloat' type='f'/>
<arg name='blue' declared_type='GLfloat' type='f'/>
<arg name='alpha' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClearColor'>
<arg name='red' declared_type='GLclampf' type='f'/>
<arg name='green' declared_type='GLclampf' type='f'/>
<arg name='blue' declared_type='GLclampf' type='f'/>
<arg name='alpha' declared_type='GLclampf' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClearDepth'>
<arg name='depth' declared_type='GLclampd' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClearIndex'>
<arg name='c' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClearStencil'>
<arg name='s' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClientActiveTexture'>
<arg name='texture' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glClipPlane'>
<arg name='plane' declared_type='GLenum' type='I'/>
<arg name='equation' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3b'>
<arg name='red' declared_type='GLbyte' type='c'/>
<arg name='green' declared_type='GLbyte' type='c'/>
<arg name='blue' declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3bv'>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3d'>
<arg name='red' declared_type='GLdouble' type='d'/>
<arg name='green' declared_type='GLdouble' type='d'/>
<arg name='blue' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3f'>
<arg name='red' declared_type='GLfloat' type='f'/>
<arg name='green' declared_type='GLfloat' type='f'/>
<arg name='blue' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3i'>
<arg name='red' declared_type='GLint' type='i'/>
<arg name='green' declared_type='GLint' type='i'/>
<arg name='blue' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3s'>
<arg name='red' declared_type='GLshort' type='s'/>
<arg name='green' declared_type='GLshort' type='s'/>
<arg name='blue' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3ub'>
<arg name='red' declared_type='GLubyte' type='C'/>
<arg name='green' declared_type='GLubyte' type='C'/>
<arg name='blue' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3ubv'>
<arg name='v' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3ui'>
<arg name='red' declared_type='GLuint' type='I'/>
<arg name='green' declared_type='GLuint' type='I'/>
<arg name='blue' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3uiv'>
<arg name='v' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3us'>
<arg name='red' declared_type='GLushort' type='S'/>
<arg name='green' declared_type='GLushort' type='S'/>
<arg name='blue' declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor3usv'>
<arg name='v' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4b'>
<arg name='red' declared_type='GLbyte' type='c'/>
<arg name='green' declared_type='GLbyte' type='c'/>
<arg name='blue' declared_type='GLbyte' type='c'/>
<arg name='alpha' declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4bv'>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4d'>
<arg name='red' declared_type='GLdouble' type='d'/>
<arg name='green' declared_type='GLdouble' type='d'/>
<arg name='blue' declared_type='GLdouble' type='d'/>
<arg name='alpha' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4f'>
<arg name='red' declared_type='GLfloat' type='f'/>
<arg name='green' declared_type='GLfloat' type='f'/>
<arg name='blue' declared_type='GLfloat' type='f'/>
<arg name='alpha' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4i'>
<arg name='red' declared_type='GLint' type='i'/>
<arg name='green' declared_type='GLint' type='i'/>
<arg name='blue' declared_type='GLint' type='i'/>
<arg name='alpha' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4s'>
<arg name='red' declared_type='GLshort' type='s'/>
<arg name='green' declared_type='GLshort' type='s'/>
<arg name='blue' declared_type='GLshort' type='s'/>
<arg name='alpha' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4ub'>
<arg name='red' declared_type='GLubyte' type='C'/>
<arg name='green' declared_type='GLubyte' type='C'/>
<arg name='blue' declared_type='GLubyte' type='C'/>
<arg name='alpha' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4ubv'>
<arg name='v' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4ui'>
<arg name='red' declared_type='GLuint' type='I'/>
<arg name='green' declared_type='GLuint' type='I'/>
<arg name='blue' declared_type='GLuint' type='I'/>
<arg name='alpha' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4uiv'>
<arg name='v' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4us'>
<arg name='red' declared_type='GLushort' type='S'/>
<arg name='green' declared_type='GLushort' type='S'/>
<arg name='blue' declared_type='GLushort' type='S'/>
<arg name='alpha' declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColor4usv'>
<arg name='v' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorMask'>
<arg name='red' declared_type='GLboolean' type='C'/>
<arg name='green' declared_type='GLboolean' type='C'/>
<arg name='blue' declared_type='GLboolean' type='C'/>
<arg name='alpha' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorMaterial'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorPointer'>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorSubTable'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='start' declared_type='GLsizei' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorTable'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='table' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorTableParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glColorTableParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompileShader'>
<arg name='shader' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexImage3D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexSubImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexSubImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCompressedTexSubImage3D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='zoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='imageSize' declared_type='GLsizei' type='i'/>
<arg name='data' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionFilter1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='image' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionFilter2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='image' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionParameterf'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionParameteri'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glConvolutionParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyColorSubTable'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='start' declared_type='GLsizei' type='i'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyColorTable'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyConvolutionFilter1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyConvolutionFilter2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyPixels'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyTexImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyTexImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyTexSubImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyTexSubImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCopyTexSubImage3D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='zoffset' declared_type='GLint' type='i'/>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glCreateProgram'>
<retval declared_type='GLuint' type='I'/>
</function>
<function name='glCreateShader'>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='GLuint' type='I'/>
</function>
<function name='glCullFace'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteBuffers'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='buffers' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteLists'>
<arg name='list' declared_type='GLuint' type='I'/>
<arg name='range' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteQueries'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='ids' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteShader'>
<arg name='shader' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDeleteTextures'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='textures' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDepthFunc'>
<arg name='func' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDepthMask'>
<arg name='flag' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDepthRange'>
<arg name='zNear' declared_type='GLclampd' type='d'/>
<arg name='zFar' declared_type='GLclampd' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDetachShader'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='shader' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDisable'>
<arg name='cap' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDisableClientState'>
<arg name='array' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDisableVertexAttribArray'>
<arg name='index' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawArrays'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='first' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawBuffer'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawBuffers'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='bufs' declared_type='GLenum*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawElements'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='indices' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawPixels'>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glDrawRangeElements'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='start' declared_type='GLuint' type='I'/>
<arg name='end' declared_type='GLuint' type='I'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='indices' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEdgeFlag'>
<arg name='flag' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEdgeFlagPointer'>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEdgeFlagv'>
<arg name='flag' declared_type='GLboolean*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEnable'>
<arg name='cap' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEnableClientState'>
<arg name='array' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEnableVertexAttribArray'>
<arg name='index' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEnd'>
<retval declared_type='void' type='v'/>
</function>
<function name='glEndList'>
<retval declared_type='void' type='v'/>
</function>
<function name='glEndQuery'>
<arg name='target' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord1d'>
<arg name='u' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord1dv'>
<arg name='u' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord1f'>
<arg name='u' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord1fv'>
<arg name='u' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord2d'>
<arg name='u' declared_type='GLdouble' type='d'/>
<arg name='v' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord2dv'>
<arg name='u' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord2f'>
<arg name='u' declared_type='GLfloat' type='f'/>
<arg name='v' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalCoord2fv'>
<arg name='u' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalMesh1'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='i1' declared_type='GLint' type='i'/>
<arg name='i2' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalMesh2'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='i1' declared_type='GLint' type='i'/>
<arg name='i2' declared_type='GLint' type='i'/>
<arg name='j1' declared_type='GLint' type='i'/>
<arg name='j2' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalPoint1'>
<arg name='i' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glEvalPoint2'>
<arg name='i' declared_type='GLint' type='i'/>
<arg name='j' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFeedbackBuffer'>
<arg name='size' declared_type='GLsizei' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='buffer' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFinish'>
<retval declared_type='void' type='v'/>
</function>
<function name='glFlush'>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogCoordPointer'>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogCoordd'>
<arg name='coord' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogCoorddv'>
<arg name='coord' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogCoordf'>
<arg name='coord' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogCoordfv'>
<arg name='coord' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogf'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogfv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogi'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFogiv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFrontFace'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glFrustum'>
<arg name='left' declared_type='GLdouble' type='d'/>
<arg name='right' declared_type='GLdouble' type='d'/>
<arg name='bottom' declared_type='GLdouble' type='d'/>
<arg name='top' declared_type='GLdouble' type='d'/>
<arg name='zNear' declared_type='GLdouble' type='d'/>
<arg name='zFar' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGenBuffers'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='buffers' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGenLists'>
<arg name='range' declared_type='GLsizei' type='i'/>
<retval declared_type='GLuint' type='I'/>
</function>
<function name='glGenQueries'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='ids' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGenTextures'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='textures' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetActiveAttrib'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='bufSize' declared_type='GLsizei' type='i'/>
<arg name='length' declared_type='GLsizei*' type='^i'/>
<arg name='size' declared_type='GLint*' type='^i'/>
<arg name='type' declared_type='GLenum*' type='^I'/>
<arg name='name' declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetActiveUniform'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='bufSize' declared_type='GLsizei' type='i'/>
<arg name='length' declared_type='GLsizei*' type='^i'/>
<arg name='size' declared_type='GLint*' type='^i'/>
<arg name='type' declared_type='GLenum*' type='^I'/>
<arg name='name' declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetAttachedShaders'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='maxCount' declared_type='GLsizei' type='i'/>
<arg name='count' declared_type='GLsizei*' type='^i'/>
<arg name='shaders' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetAttribLocation'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='name' declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='glGetBooleanv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLboolean*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetBufferParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetBufferPointerv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetBufferSubData'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='offset' declared_type='GLintptr' type='l' type64='q'/>
<arg name='size' declared_type='GLsizeiptr' type='l' type64='q'/>
<arg name='data' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetClipPlane'>
<arg name='plane' declared_type='GLenum' type='I'/>
<arg name='equation' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetColorTable'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='table' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetColorTableParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetColorTableParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetCompressedTexImage'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='lod' declared_type='GLint' type='i'/>
<arg name='img' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetConvolutionFilter'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='image' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetConvolutionParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetConvolutionParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetDoublev'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetError'>
<retval declared_type='GLenum' type='I'/>
</function>
<function name='glGetFloatv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetHistogram'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='reset' declared_type='GLboolean' type='C'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='values' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetHistogramParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetHistogramParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetIntegerv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetLightfv'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetLightiv'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMapdv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='query' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMapfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='query' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMapiv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='query' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMaterialfv'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMaterialiv'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMinmax'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='reset' declared_type='GLboolean' type='C'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='values' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMinmaxParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetMinmaxParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetPixelMapfv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='values' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetPixelMapuiv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='values' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetPixelMapusv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='values' declared_type='GLushort*' type='^S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetPointerv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetPolygonStipple'>
<arg name='mask' declared_type='GLubyte*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetProgramInfoLog'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='bufSize' declared_type='GLsizei' type='i'/>
<arg name='length' declared_type='GLsizei*' type='^i'/>
<arg name='infoLog' declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetProgramiv'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetQueryObjectiv'>
<arg name='id' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetQueryObjectuiv'>
<arg name='id' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetQueryiv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetSeparableFilter'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='row' declared_type='GLvoid*' type='^v'/>
<arg name='column' declared_type='GLvoid*' type='^v'/>
<arg name='span' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetShaderInfoLog'>
<arg name='shader' declared_type='GLuint' type='I'/>
<arg name='bufSize' declared_type='GLsizei' type='i'/>
<arg name='length' declared_type='GLsizei*' type='^i'/>
<arg name='infoLog' declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetShaderSource'>
<arg name='shader' declared_type='GLuint' type='I'/>
<arg name='bufSize' declared_type='GLsizei' type='i'/>
<arg name='length' declared_type='GLsizei*' type='^i'/>
<arg name='source' declared_type='GLchar*' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetShaderiv'>
<arg name='shader' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetString'>
<arg name='name' declared_type='GLenum' type='I'/>
<retval declared_type='GLubyte*' type='*' const='true'/>
</function>
<function name='glGetTexEnvfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexEnviv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexGendv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexGenfv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexGeniv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexImage'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexLevelParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexLevelParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetTexParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetUniformLocation'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='name' declared_type='GLchar*' type='*' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='glGetUniformfv'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetUniformiv'>
<arg name='program' declared_type='GLuint' type='I'/>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetVertexAttribPointerv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='pointer' declared_type='GLvoid**' type='^^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetVertexAttribdv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetVertexAttribfv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glGetVertexAttribiv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glHint'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glHistogram'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='sink' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexMask'>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexPointer'>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexd'>
<arg name='c' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexdv'>
<arg name='c' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexf'>
<arg name='c' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexfv'>
<arg name='c' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexi'>
<arg name='c' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexiv'>
<arg name='c' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexs'>
<arg name='c' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexsv'>
<arg name='c' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexub'>
<arg name='c' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIndexubv'>
<arg name='c' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glInitNames'>
<retval declared_type='void' type='v'/>
</function>
<function name='glInterleavedArrays'>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glIsBuffer'>
<arg name='buffer' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsEnabled'>
<arg name='cap' declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsList'>
<arg name='list' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsQuery'>
<arg name='id' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsShader'>
<arg name='shader' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glIsTexture'>
<arg name='texture' declared_type='GLuint' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glLightModelf'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightModelfv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightModeli'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightModeliv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightf'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightfv'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLighti'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLightiv'>
<arg name='light' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLineStipple'>
<arg name='factor' declared_type='GLint' type='i'/>
<arg name='pattern' declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLineWidth'>
<arg name='width' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLinkProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glListBase'>
<arg name='base' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadIdentity'>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadMatrixd'>
<arg name='m' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadMatrixf'>
<arg name='m' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadName'>
<arg name='name' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadTransposeMatrixd'>
<arg name='m' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLoadTransposeMatrixf'>
<arg name='m' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glLogicOp'>
<arg name='opcode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMap1d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='u1' declared_type='GLdouble' type='d'/>
<arg name='u2' declared_type='GLdouble' type='d'/>
<arg name='stride' declared_type='GLint' type='i'/>
<arg name='order' declared_type='GLint' type='i'/>
<arg name='points' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMap1f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='u1' declared_type='GLfloat' type='f'/>
<arg name='u2' declared_type='GLfloat' type='f'/>
<arg name='stride' declared_type='GLint' type='i'/>
<arg name='order' declared_type='GLint' type='i'/>
<arg name='points' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMap2d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='u1' declared_type='GLdouble' type='d'/>
<arg name='u2' declared_type='GLdouble' type='d'/>
<arg name='ustride' declared_type='GLint' type='i'/>
<arg name='uorder' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLdouble' type='d'/>
<arg name='v2' declared_type='GLdouble' type='d'/>
<arg name='vstride' declared_type='GLint' type='i'/>
<arg name='vorder' declared_type='GLint' type='i'/>
<arg name='points' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMap2f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='u1' declared_type='GLfloat' type='f'/>
<arg name='u2' declared_type='GLfloat' type='f'/>
<arg name='ustride' declared_type='GLint' type='i'/>
<arg name='uorder' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLfloat' type='f'/>
<arg name='v2' declared_type='GLfloat' type='f'/>
<arg name='vstride' declared_type='GLint' type='i'/>
<arg name='vorder' declared_type='GLint' type='i'/>
<arg name='points' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMapBuffer'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='access' declared_type='GLenum' type='I'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glMapGrid1d'>
<arg name='un' declared_type='GLint' type='i'/>
<arg name='u1' declared_type='GLdouble' type='d'/>
<arg name='u2' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMapGrid1f'>
<arg name='un' declared_type='GLint' type='i'/>
<arg name='u1' declared_type='GLfloat' type='f'/>
<arg name='u2' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMapGrid2d'>
<arg name='un' declared_type='GLint' type='i'/>
<arg name='u1' declared_type='GLdouble' type='d'/>
<arg name='u2' declared_type='GLdouble' type='d'/>
<arg name='vn' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLdouble' type='d'/>
<arg name='v2' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMapGrid2f'>
<arg name='un' declared_type='GLint' type='i'/>
<arg name='u1' declared_type='GLfloat' type='f'/>
<arg name='u2' declared_type='GLfloat' type='f'/>
<arg name='vn' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLfloat' type='f'/>
<arg name='v2' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMaterialf'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMaterialfv'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMateriali'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMaterialiv'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMatrixMode'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMinmax'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='sink' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultMatrixd'>
<arg name='m' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultMatrixf'>
<arg name='m' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultTransposeMatrixd'>
<arg name='m' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultTransposeMatrixf'>
<arg name='m' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiDrawArrays'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='first' declared_type='GLint*' type='^i' const='true'/>
<arg name='count' declared_type='GLsizei*' type='^i' const='true'/>
<arg name='primcount' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiDrawElements'>
<arg name='mode' declared_type='GLenum' type='I'/>
<arg name='count' declared_type='GLsizei*' type='^i' const='true'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='indices' declared_type='GLvoid**' type='^^v' const='true'/>
<arg name='primcount' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1dv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1fv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1i'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1iv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1s'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord1sv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2dv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2fv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2i'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2iv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2s'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord2sv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<arg name='r' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3dv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<arg name='r' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3fv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3i'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<arg name='r' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3iv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3s'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<arg name='r' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord3sv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4d'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<arg name='r' declared_type='GLdouble' type='d'/>
<arg name='q' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4dv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4f'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<arg name='r' declared_type='GLfloat' type='f'/>
<arg name='q' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4fv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4i'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg declared_type='GLint' type='i'/>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<arg name='r' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4iv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4s'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<arg name='r' declared_type='GLshort' type='s'/>
<arg name='q' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glMultiTexCoord4sv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNewList'>
<arg name='list' declared_type='GLuint' type='I'/>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3b'>
<arg name='nx' declared_type='GLbyte' type='c'/>
<arg name='ny' declared_type='GLbyte' type='c'/>
<arg name='nz' declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3bv'>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3d'>
<arg name='nx' declared_type='GLdouble' type='d'/>
<arg name='ny' declared_type='GLdouble' type='d'/>
<arg name='nz' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3f'>
<arg name='nx' declared_type='GLfloat' type='f'/>
<arg name='ny' declared_type='GLfloat' type='f'/>
<arg name='nz' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3i'>
<arg name='nx' declared_type='GLint' type='i'/>
<arg name='ny' declared_type='GLint' type='i'/>
<arg name='nz' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3s'>
<arg name='nx' declared_type='GLshort' type='s'/>
<arg name='ny' declared_type='GLshort' type='s'/>
<arg name='nz' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormal3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glNormalPointer'>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glOrtho'>
<arg name='left' declared_type='GLdouble' type='d'/>
<arg name='right' declared_type='GLdouble' type='d'/>
<arg name='bottom' declared_type='GLdouble' type='d'/>
<arg name='top' declared_type='GLdouble' type='d'/>
<arg name='zNear' declared_type='GLdouble' type='d'/>
<arg name='zFar' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPassThrough'>
<arg name='token' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelMapfv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='mapsize' declared_type='GLint' type='i'/>
<arg name='values' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelMapuiv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='mapsize' declared_type='GLint' type='i'/>
<arg name='values' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelMapusv'>
<arg name='map' declared_type='GLenum' type='I'/>
<arg name='mapsize' declared_type='GLint' type='i'/>
<arg name='values' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelStoref'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelStorei'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelTransferf'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelTransferi'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPixelZoom'>
<arg name='xfactor' declared_type='GLfloat' type='f'/>
<arg name='yfactor' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPointParameterf'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPointParameterfv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPointParameteri'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPointParameteriv'>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPointSize'>
<arg name='size' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPolygonMode'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPolygonOffset'>
<arg name='factor' declared_type='GLfloat' type='f'/>
<arg name='units' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPolygonStipple'>
<arg name='mask' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPopAttrib'>
<retval declared_type='void' type='v'/>
</function>
<function name='glPopClientAttrib'>
<retval declared_type='void' type='v'/>
</function>
<function name='glPopMatrix'>
<retval declared_type='void' type='v'/>
</function>
<function name='glPopName'>
<retval declared_type='void' type='v'/>
</function>
<function name='glPrioritizeTextures'>
<arg name='n' declared_type='GLsizei' type='i'/>
<arg name='textures' declared_type='GLuint*' type='^I' const='true'/>
<arg name='priorities' declared_type='GLclampf*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPushAttrib'>
<arg name='mask' declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPushClientAttrib'>
<arg name='mask' declared_type='GLbitfield' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glPushMatrix'>
<retval declared_type='void' type='v'/>
</function>
<function name='glPushName'>
<arg name='name' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos2sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='z' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<arg name='w' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<arg name='w' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='z' declared_type='GLint' type='i'/>
<arg name='w' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<arg name='w' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRasterPos4sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glReadBuffer'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glReadPixels'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectd'>
<arg name='x1' declared_type='GLdouble' type='d'/>
<arg name='y1' declared_type='GLdouble' type='d'/>
<arg name='x2' declared_type='GLdouble' type='d'/>
<arg name='y2' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectdv'>
<arg name='v1' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='v2' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectf'>
<arg name='x1' declared_type='GLfloat' type='f'/>
<arg name='y1' declared_type='GLfloat' type='f'/>
<arg name='x2' declared_type='GLfloat' type='f'/>
<arg name='y2' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectfv'>
<arg name='v1' declared_type='GLfloat*' type='^f' const='true'/>
<arg name='v2' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRecti'>
<arg name='x1' declared_type='GLint' type='i'/>
<arg name='y1' declared_type='GLint' type='i'/>
<arg name='x2' declared_type='GLint' type='i'/>
<arg name='y2' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectiv'>
<arg name='v1' declared_type='GLint*' type='^i' const='true'/>
<arg name='v2' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRects'>
<arg name='x1' declared_type='GLshort' type='s'/>
<arg name='y1' declared_type='GLshort' type='s'/>
<arg name='x2' declared_type='GLshort' type='s'/>
<arg name='y2' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRectsv'>
<arg name='v1' declared_type='GLshort*' type='^s' const='true'/>
<arg name='v2' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRenderMode'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='glResetHistogram'>
<arg name='target' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glResetMinmax'>
<arg name='target' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRotated'>
<arg name='angle' declared_type='GLdouble' type='d'/>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glRotatef'>
<arg name='angle' declared_type='GLfloat' type='f'/>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSampleCoverage'>
<arg name='value' declared_type='GLclampf' type='f'/>
<arg name='invert' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSamplePass'>
<arg name='pass' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glScaled'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glScalef'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glScissor'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3b'>
<arg name='red' declared_type='GLbyte' type='c'/>
<arg name='green' declared_type='GLbyte' type='c'/>
<arg name='blue' declared_type='GLbyte' type='c'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3bv'>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3d'>
<arg name='red' declared_type='GLdouble' type='d'/>
<arg name='green' declared_type='GLdouble' type='d'/>
<arg name='blue' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3f'>
<arg name='red' declared_type='GLfloat' type='f'/>
<arg name='green' declared_type='GLfloat' type='f'/>
<arg name='blue' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3i'>
<arg name='red' declared_type='GLint' type='i'/>
<arg name='green' declared_type='GLint' type='i'/>
<arg name='blue' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3s'>
<arg name='red' declared_type='GLshort' type='s'/>
<arg name='green' declared_type='GLshort' type='s'/>
<arg name='blue' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3ub'>
<arg name='red' declared_type='GLubyte' type='C'/>
<arg name='green' declared_type='GLubyte' type='C'/>
<arg name='blue' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3ubv'>
<arg name='v' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3ui'>
<arg name='red' declared_type='GLuint' type='I'/>
<arg name='green' declared_type='GLuint' type='I'/>
<arg name='blue' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3uiv'>
<arg name='v' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3us'>
<arg name='red' declared_type='GLushort' type='S'/>
<arg name='green' declared_type='GLushort' type='S'/>
<arg name='blue' declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColor3usv'>
<arg name='v' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSecondaryColorPointer'>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSelectBuffer'>
<arg name='size' declared_type='GLsizei' type='i'/>
<arg name='buffer' declared_type='GLuint*' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glSeparableFilter2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='row' declared_type='GLvoid*' type='^v' const='true'/>
<arg name='column' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glShadeModel'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glShaderSource'>
<arg name='shader' declared_type='GLuint' type='I'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='string' declared_type='GLchar**' type='^*' const='true'/>
<arg name='length' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilFunc'>
<arg name='func' declared_type='GLenum' type='I'/>
<arg name='ref' declared_type='GLint' type='i'/>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilFuncSeparate'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='func' declared_type='GLenum' type='I'/>
<arg name='ref' declared_type='GLint' type='i'/>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilMask'>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilMaskSeparate'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='mask' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilOp'>
<arg name='fail' declared_type='GLenum' type='I'/>
<arg name='zfail' declared_type='GLenum' type='I'/>
<arg name='zpass' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glStencilOpSeparate'>
<arg name='face' declared_type='GLenum' type='I'/>
<arg name='fail' declared_type='GLenum' type='I'/>
<arg name='zfail' declared_type='GLenum' type='I'/>
<arg name='zpass' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1d'>
<arg name='s' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1f'>
<arg name='s' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1i'>
<arg name='s' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1s'>
<arg name='s' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord1sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2d'>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2f'>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2i'>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2s'>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord2sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3d'>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<arg name='r' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3f'>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<arg name='r' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3i'>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<arg name='r' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3s'>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<arg name='r' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4d'>
<arg name='s' declared_type='GLdouble' type='d'/>
<arg name='t' declared_type='GLdouble' type='d'/>
<arg name='r' declared_type='GLdouble' type='d'/>
<arg name='q' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4f'>
<arg name='s' declared_type='GLfloat' type='f'/>
<arg name='t' declared_type='GLfloat' type='f'/>
<arg name='r' declared_type='GLfloat' type='f'/>
<arg name='q' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4i'>
<arg name='s' declared_type='GLint' type='i'/>
<arg name='t' declared_type='GLint' type='i'/>
<arg name='r' declared_type='GLint' type='i'/>
<arg name='q' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4s'>
<arg name='s' declared_type='GLshort' type='s'/>
<arg name='t' declared_type='GLshort' type='s'/>
<arg name='r' declared_type='GLshort' type='s'/>
<arg name='q' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoord4sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexCoordPointer'>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexEnvf'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexEnvfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexEnvi'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexEnviv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGend'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGendv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGenf'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGenfv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGeni'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexGeniv'>
<arg name='coord' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexImage3D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='internalformat' declared_type='GLenum' type='I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='border' declared_type='GLint' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexParameterf'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexParameterfv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexParameteri'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='param' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexParameteriv'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='pname' declared_type='GLenum' type='I'/>
<arg name='params' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexSubImage1D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexSubImage2D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTexSubImage3D'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='xoffset' declared_type='GLint' type='i'/>
<arg name='yoffset' declared_type='GLint' type='i'/>
<arg name='zoffset' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='pixels' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTranslated'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glTranslatef'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform1f'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform1fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform1i'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform1iv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform2f'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLfloat' type='f'/>
<arg name='v1' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform2fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform2i'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform2iv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform3f'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLfloat' type='f'/>
<arg name='v1' declared_type='GLfloat' type='f'/>
<arg name='v2' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform3fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform3i'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLint' type='i'/>
<arg name='v2' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform3iv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform4f'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLfloat' type='f'/>
<arg name='v1' declared_type='GLfloat' type='f'/>
<arg name='v2' declared_type='GLfloat' type='f'/>
<arg name='v3' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform4fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform4i'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='v0' declared_type='GLint' type='i'/>
<arg name='v1' declared_type='GLint' type='i'/>
<arg name='v2' declared_type='GLint' type='i'/>
<arg name='v3' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniform4iv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix2fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix2x3fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix2x4fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix3fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix3x2fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix3x4fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix4fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix4x2fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUniformMatrix4x3fv'>
<arg name='location' declared_type='GLint' type='i'/>
<arg name='count' declared_type='GLsizei' type='i'/>
<arg name='transpose' declared_type='GLboolean' type='C'/>
<arg name='value' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glUnmapBuffer'>
<arg name='target' declared_type='GLenum' type='I'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='glUseProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glValidateProgram'>
<arg name='program' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex2sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='z' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<arg name='w' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<arg name='w' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='z' declared_type='GLint' type='i'/>
<arg name='w' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<arg name='w' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertex4sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1d'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1dv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1f'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1fv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1s'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib1sv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2d'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2dv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2f'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2fv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2s'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib2sv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3d'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3dv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3f'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3fv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3s'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib3sv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nbv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Niv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nsv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nub'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLubyte' type='C'/>
<arg name='y' declared_type='GLubyte' type='C'/>
<arg name='z' declared_type='GLubyte' type='C'/>
<arg name='w' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nubv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nuiv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4Nusv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4bv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLbyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4d'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<arg name='w' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4dv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4f'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<arg name='w' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4fv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4iv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4s'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<arg name='w' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4sv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4ubv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4uiv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLuint*' type='^I' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttrib4usv'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='v' declared_type='GLushort*' type='^S' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexAttribPointer'>
<arg name='index' declared_type='GLuint' type='I'/>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='normalized' declared_type='GLboolean' type='C'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glVertexPointer'>
<arg name='size' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='stride' declared_type='GLsizei' type='i'/>
<arg name='pointer' declared_type='GLvoid*' type='^v' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glViewport'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos2sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3d'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='z' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3dv'>
<arg name='v' declared_type='GLdouble*' type='^d' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3f'>
<arg name='x' declared_type='GLfloat' type='f'/>
<arg name='y' declared_type='GLfloat' type='f'/>
<arg name='z' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3fv'>
<arg name='v' declared_type='GLfloat*' type='^f' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3i'>
<arg name='x' declared_type='GLint' type='i'/>
<arg name='y' declared_type='GLint' type='i'/>
<arg name='z' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3iv'>
<arg name='v' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3s'>
<arg name='x' declared_type='GLshort' type='s'/>
<arg name='y' declared_type='GLshort' type='s'/>
<arg name='z' declared_type='GLshort' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glWindowPos3sv'>
<arg name='v' declared_type='GLshort*' type='^s' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmCalloc'>
<arg name='nmemb' declared_type='GLsizei' type='i'/>
<arg name='size' declared_type='GLsizei' type='i'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glmCopy'>
<arg name='src' declared_type='GLubyte*' type='*' const='true'/>
<arg name='dst' declared_type='GLubyte*' type='*'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='src_rowbytes' declared_type='GLsizei' type='i'/>
<arg name='dst_rowbytes' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmDCBAlloc'>
<arg name='size' declared_type='GLsizei' type='i'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glmDCBFree'>
<arg name='ptr' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmFree'>
<arg name='ptr' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmGetError'>
<retval declared_type='GLenum' type='I'/>
</function>
<function name='glmGetInteger'>
<arg name='param' declared_type='GLenum' type='I'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='glmMalloc'>
<arg name='size' declared_type='GLsizei' type='i'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glmPageFreeAll'>
<retval declared_type='void' type='v'/>
</function>
<function name='glmRealloc'>
<arg name='ptr' declared_type='GLvoid*' type='^v'/>
<arg name='size' declared_type='GLsizei' type='i'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glmSetDouble'>
<arg name='buffer' declared_type='GLdouble*' type='^d'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='row_elems' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetFunc'>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='func' declared_type='GLMfunctions' type='(?=^?^?^?^?^?^?^?^?)'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetInteger'>
<arg name='param' declared_type='GLenum' type='I'/>
<arg name='value' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetMode'>
<arg name='mode' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetUByte'>
<arg name='buffer' declared_type='GLubyte*' type='*'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='row_elems' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLubyte' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetUInt'>
<arg name='buffer' declared_type='GLuint*' type='^I'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='row_elems' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLuint' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmSetUShort'>
<arg name='buffer' declared_type='GLushort*' type='^S'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='row_elems' declared_type='GLsizei' type='i'/>
<arg name='value' declared_type='GLushort' type='S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmVecAlloc'>
<arg name='size' declared_type='GLsizei' type='i'/>
<retval declared_type='GLvoid*' type='^v'/>
</function>
<function name='glmVecFree'>
<arg name='ptr' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='glmZero'>
<arg name='buffer' declared_type='GLubyte*' type='*'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='rowbytes' declared_type='GLsizei' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluBeginCurve'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluBeginPolygon'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluBeginSurface'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluBeginTrim'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluBuild1DMipmapLevels'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='base' declared_type='GLint' type='i'/>
<arg name='max' declared_type='GLint' type='i'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluBuild1DMipmaps'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluBuild2DMipmapLevels'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='base' declared_type='GLint' type='i'/>
<arg name='max' declared_type='GLint' type='i'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluBuild2DMipmaps'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluBuild3DMipmapLevels'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='level' declared_type='GLint' type='i'/>
<arg name='base' declared_type='GLint' type='i'/>
<arg name='max' declared_type='GLint' type='i'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluBuild3DMipmaps'>
<arg name='target' declared_type='GLenum' type='I'/>
<arg name='internalFormat' declared_type='GLint' type='i'/>
<arg name='width' declared_type='GLsizei' type='i'/>
<arg name='height' declared_type='GLsizei' type='i'/>
<arg name='depth' declared_type='GLsizei' type='i'/>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='type' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='void*' type='^v' const='true'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluCheckExtension'>
<arg name='extName' declared_type='GLubyte*' type='*' const='true'/>
<arg name='extString' declared_type='GLubyte*' type='*' const='true'/>
<retval declared_type='GLboolean' type='C'/>
</function>
<function name='gluCylinder'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='base' declared_type='GLdouble' type='d'/>
<arg name='top' declared_type='GLdouble' type='d'/>
<arg name='height' declared_type='GLdouble' type='d'/>
<arg name='slices' declared_type='GLint' type='i'/>
<arg name='stacks' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluDeleteNurbsRenderer'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluDeleteQuadric'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluDeleteTess'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluDisk'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='inner' declared_type='GLdouble' type='d'/>
<arg name='outer' declared_type='GLdouble' type='d'/>
<arg name='slices' declared_type='GLint' type='i'/>
<arg name='loops' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluEndCurve'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluEndPolygon'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluEndSurface'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluEndTrim'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluErrorString'>
<arg name='error' declared_type='GLenum' type='I'/>
<retval declared_type='GLubyte*' type='*' const='true'/>
</function>
<function name='gluGetNurbsProperty'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='property' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='GLfloat*' type='^f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluGetString'>
<arg name='name' declared_type='GLenum' type='I'/>
<retval declared_type='GLubyte*' type='*' const='true'/>
</function>
<function name='gluGetTessProperty'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='which' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='GLdouble*' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluLoadSamplingMatrices'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='model' declared_type='GLfloat*' type='^f' const='true'/>
<arg name='perspective' declared_type='GLfloat*' type='^f' const='true'/>
<arg name='view' declared_type='GLint*' type='^i' const='true'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluLookAt'>
<arg name='eyeX' declared_type='GLdouble' type='d'/>
<arg name='eyeY' declared_type='GLdouble' type='d'/>
<arg name='eyeZ' declared_type='GLdouble' type='d'/>
<arg name='centerX' declared_type='GLdouble' type='d'/>
<arg name='centerY' declared_type='GLdouble' type='d'/>
<arg name='centerZ' declared_type='GLdouble' type='d'/>
<arg name='upX' declared_type='GLdouble' type='d'/>
<arg name='upY' declared_type='GLdouble' type='d'/>
<arg name='upZ' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNewNurbsRenderer'>
<retval declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
</function>
<function name='gluNewQuadric'>
<retval declared_type='GLUquadric*' type='^{GLUquadric=}'/>
</function>
<function name='gluNewTess'>
<retval declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
</function>
<function name='gluNextContour'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsCallback'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='which' declared_type='GLenum' type='I'/>
<arg name='CallBackFunc' function_pointer='true' declared_type='GLvoid (*)()' type='^?'>
<retval declared_type='GLvoid' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsCallbackData'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='userData' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsCallbackDataEXT'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='userData' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsCurve'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='knotCount' declared_type='GLint' type='i'/>
<arg name='knots' declared_type='GLfloat*' type='^f'/>
<arg name='stride' declared_type='GLint' type='i'/>
<arg name='control' declared_type='GLfloat*' type='^f'/>
<arg name='order' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsProperty'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='property' declared_type='GLenum' type='I'/>
<arg name='value' declared_type='GLfloat' type='f'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluNurbsSurface'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='sKnotCount' declared_type='GLint' type='i'/>
<arg name='sKnots' declared_type='GLfloat*' type='^f'/>
<arg name='tKnotCount' declared_type='GLint' type='i'/>
<arg name='tKnots' declared_type='GLfloat*' type='^f'/>
<arg name='sStride' declared_type='GLint' type='i'/>
<arg name='tStride' declared_type='GLint' type='i'/>
<arg name='control' declared_type='GLfloat*' type='^f'/>
<arg name='sOrder' declared_type='GLint' type='i'/>
<arg name='tOrder' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluOrtho2D'>
<arg name='left' declared_type='GLdouble' type='d'/>
<arg name='right' declared_type='GLdouble' type='d'/>
<arg name='bottom' declared_type='GLdouble' type='d'/>
<arg name='top' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluPartialDisk'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='inner' declared_type='GLdouble' type='d'/>
<arg name='outer' declared_type='GLdouble' type='d'/>
<arg name='slices' declared_type='GLint' type='i'/>
<arg name='loops' declared_type='GLint' type='i'/>
<arg name='start' declared_type='GLdouble' type='d'/>
<arg name='sweep' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluPerspective'>
<arg name='fovy' declared_type='GLdouble' type='d'/>
<arg name='aspect' declared_type='GLdouble' type='d'/>
<arg name='zNear' declared_type='GLdouble' type='d'/>
<arg name='zFar' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluPickMatrix'>
<arg name='x' declared_type='GLdouble' type='d'/>
<arg name='y' declared_type='GLdouble' type='d'/>
<arg name='delX' declared_type='GLdouble' type='d'/>
<arg name='delY' declared_type='GLdouble' type='d'/>
<arg name='viewport' declared_type='GLint*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluProject'>
<arg name='objX' declared_type='GLdouble' type='d'/>
<arg name='objY' declared_type='GLdouble' type='d'/>
<arg name='objZ' declared_type='GLdouble' type='d'/>
<arg name='model' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='proj' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='view' declared_type='GLint*' type='^i' const='true'/>
<arg name='winX' declared_type='GLdouble*' type='^d'/>
<arg name='winY' declared_type='GLdouble*' type='^d'/>
<arg name='winZ' declared_type='GLdouble*' type='^d'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluPwlCurve'>
<arg name='nurb' declared_type='GLUnurbs*' type='^{GLUnurbs=}'/>
<arg name='count' declared_type='GLint' type='i'/>
<arg name='data' declared_type='GLfloat*' type='^f'/>
<arg name='stride' declared_type='GLint' type='i'/>
<arg name='type' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluQuadricCallback'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='which' declared_type='GLenum' type='I'/>
<arg name='CallBackFunc' function_pointer='true' declared_type='GLvoid (*)()' type='^?'>
<retval declared_type='GLvoid' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='gluQuadricDrawStyle'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='draw' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluQuadricNormals'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='normal' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluQuadricOrientation'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='orientation' declared_type='GLenum' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluQuadricTexture'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='texture' declared_type='GLboolean' type='C'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluScaleImage'>
<arg name='format' declared_type='GLenum' type='I'/>
<arg name='wIn' declared_type='GLsizei' type='i'/>
<arg name='hIn' declared_type='GLsizei' type='i'/>
<arg name='typeIn' declared_type='GLenum' type='I'/>
<arg name='dataIn' declared_type='void*' type='^v' const='true'/>
<arg name='wOut' declared_type='GLsizei' type='i'/>
<arg name='hOut' declared_type='GLsizei' type='i'/>
<arg name='typeOut' declared_type='GLenum' type='I'/>
<arg name='dataOut' declared_type='GLvoid*' type='^v'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluSphere'>
<arg name='quad' declared_type='GLUquadric*' type='^{GLUquadric=}'/>
<arg name='radius' declared_type='GLdouble' type='d'/>
<arg name='slices' declared_type='GLint' type='i'/>
<arg name='stacks' declared_type='GLint' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessBeginContour'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessBeginPolygon'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='data' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessCallback'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='which' declared_type='GLenum' type='I'/>
<arg name='CallBackFunc' function_pointer='true' declared_type='GLvoid (*)()' type='^?'>
<retval declared_type='GLvoid' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessEndContour'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessEndPolygon'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessNormal'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='valueX' declared_type='GLdouble' type='d'/>
<arg name='valueY' declared_type='GLdouble' type='d'/>
<arg name='valueZ' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessProperty'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='which' declared_type='GLenum' type='I'/>
<arg name='data' declared_type='GLdouble' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluTessVertex'>
<arg name='tess' declared_type='GLUtesselator*' type='^{GLUtesselator=}'/>
<arg name='location' declared_type='GLdouble*' type='^d'/>
<arg name='data' declared_type='GLvoid*' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='gluUnProject'>
<arg name='winX' declared_type='GLdouble' type='d'/>
<arg name='winY' declared_type='GLdouble' type='d'/>
<arg name='winZ' declared_type='GLdouble' type='d'/>
<arg name='model' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='proj' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='view' declared_type='GLint*' type='^i' const='true'/>
<arg name='objX' declared_type='GLdouble*' type='^d'/>
<arg name='objY' declared_type='GLdouble*' type='^d'/>
<arg name='objZ' declared_type='GLdouble*' type='^d'/>
<retval declared_type='GLint' type='i'/>
</function>
<function name='gluUnProject4'>
<arg name='winX' declared_type='GLdouble' type='d'/>
<arg name='winY' declared_type='GLdouble' type='d'/>
<arg name='winZ' declared_type='GLdouble' type='d'/>
<arg name='clipW' declared_type='GLdouble' type='d'/>
<arg name='model' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='proj' declared_type='GLdouble*' type='^d' const='true'/>
<arg name='view' declared_type='GLint*' type='^i' const='true'/>
<arg name='nearPlane' declared_type='GLdouble' type='d'/>
<arg name='farPlane' declared_type='GLdouble' type='d'/>
<arg name='objX' declared_type='GLdouble*' type='^d'/>
<arg name='objY' declared_type='GLdouble*' type='^d'/>
<arg name='objZ' declared_type='GLdouble*' type='^d'/>
<arg name='objW' declared_type='GLdouble*' type='^d'/>
<retval declared_type='GLint' type='i'/>
</function>
<function_alias name='glActiveTextureARB' original='glActiveTexture'/>
<function_alias name='glBeginQueryARB' original='glBeginQuery'/>
<function_alias name='glBindBufferARB' original='glBindBuffer'/>
<function_alias name='glBlendColorEXT' original='glBlendColor'/>
<function_alias name='glBlendEquationEXT' original='glBlendEquation'/>
<function_alias name='glBlendEquationSeparate' original='glBlendEquationSeparateEXT'/>
<function_alias name='glBlendEquationSeparateATI' original='glBlendEquationSeparateEXT'/>
<function_alias name='glBlendFuncSeparateEXT' original='glBlendFuncSeparate'/>
<function_alias name='glBufferDataARB' original='glBufferData'/>
<function_alias name='glBufferSubDataARB' original='glBufferSubData'/>
<function_alias name='glClientActiveTextureARB' original='glClientActiveTexture'/>
<function_alias name='glColorSubTableEXT' original='glColorSubTable'/>
<function_alias name='glColorTableEXT' original='glColorTable'/>
<function_alias name='glCompressedTexImage1DARB' original='glCompressedTexImage1D'/>
<function_alias name='glCompressedTexImage2DARB' original='glCompressedTexImage2D'/>
<function_alias name='glCompressedTexImage3DARB' original='glCompressedTexImage3D'/>
<function_alias name='glCompressedTexSubImage1DARB' original='glCompressedTexSubImage1D'/>
<function_alias name='glCompressedTexSubImage2DARB' original='glCompressedTexSubImage2D'/>
<function_alias name='glCompressedTexSubImage3DARB' original='glCompressedTexSubImage3D'/>
<function_alias name='glDeleteBuffersARB' original='glDeleteBuffers'/>
<function_alias name='glDeleteQueriesARB' original='glDeleteQueries'/>
<function_alias name='glDrawRangeElementsEXT' original='glDrawRangeElements'/>
<function_alias name='glEndQueryARB' original='glEndQuery'/>
<function_alias name='glFogCoordPointerEXT' original='glFogCoordPointer'/>
<function_alias name='glFogCoorddEXT' original='glFogCoordd'/>
<function_alias name='glFogCoorddvEXT' original='glFogCoorddv'/>
<function_alias name='glFogCoordfEXT' original='glFogCoordf'/>
<function_alias name='glFogCoordfvEXT' original='glFogCoordfv'/>
<function_alias name='glGenBuffersARB' original='glGenBuffers'/>
<function_alias name='glGenQueriesARB' original='glGenQueries'/>
<function_alias name='glGetBufferParameterivARB' original='glGetBufferParameteriv'/>
<function_alias name='glGetBufferPointervARB' original='glGetBufferPointerv'/>
<function_alias name='glGetBufferSubDataARB' original='glGetBufferSubData'/>
<function_alias name='glGetColorTableEXT' original='glGetColorTable'/>
<function_alias name='glGetColorTableParameterfvEXT' original='glGetColorTableParameterfv'/>
<function_alias name='glGetColorTableParameterivEXT' original='glGetColorTableParameteriv'/>
<function_alias name='glGetCompressedTexImageARB' original='glGetCompressedTexImage'/>
<function_alias name='glGetQueryObjectivARB' original='glGetQueryObjectiv'/>
<function_alias name='glGetQueryObjectuivARB' original='glGetQueryObjectuiv'/>
<function_alias name='glGetQueryivARB' original='glGetQueryiv'/>
<function_alias name='glIsBufferARB' original='glIsBuffer'/>
<function_alias name='glIsQueryARB' original='glIsQuery'/>
<function_alias name='glLoadTransposeMatrixdARB' original='glLoadTransposeMatrixd'/>
<function_alias name='glLoadTransposeMatrixfARB' original='glLoadTransposeMatrixf'/>
<function_alias name='glMapBufferARB' original='glMapBuffer'/>
<function_alias name='glMultTransposeMatrixdARB' original='glMultTransposeMatrixd'/>
<function_alias name='glMultTransposeMatrixfARB' original='glMultTransposeMatrixf'/>
<function_alias name='glMultiDrawArraysEXT' original='glMultiDrawArrays'/>
<function_alias name='glMultiDrawElementsEXT' original='glMultiDrawElements'/>
<function_alias name='glMultiTexCoord1dARB' original='glMultiTexCoord1d'/>
<function_alias name='glMultiTexCoord1dvARB' original='glMultiTexCoord1dv'/>
<function_alias name='glMultiTexCoord1fARB' original='glMultiTexCoord1f'/>
<function_alias name='glMultiTexCoord1fvARB' original='glMultiTexCoord1fv'/>
<function_alias name='glMultiTexCoord1iARB' original='glMultiTexCoord1i'/>
<function_alias name='glMultiTexCoord1ivARB' original='glMultiTexCoord1iv'/>
<function_alias name='glMultiTexCoord1sARB' original='glMultiTexCoord1s'/>
<function_alias name='glMultiTexCoord1svARB' original='glMultiTexCoord1sv'/>
<function_alias name='glMultiTexCoord2dARB' original='glMultiTexCoord2d'/>
<function_alias name='glMultiTexCoord2dvARB' original='glMultiTexCoord2dv'/>
<function_alias name='glMultiTexCoord2fARB' original='glMultiTexCoord2f'/>
<function_alias name='glMultiTexCoord2fvARB' original='glMultiTexCoord2fv'/>
<function_alias name='glMultiTexCoord2iARB' original='glMultiTexCoord2i'/>
<function_alias name='glMultiTexCoord2ivARB' original='glMultiTexCoord2iv'/>
<function_alias name='glMultiTexCoord2sARB' original='glMultiTexCoord2s'/>
<function_alias name='glMultiTexCoord2svARB' original='glMultiTexCoord2sv'/>
<function_alias name='glMultiTexCoord3dARB' original='glMultiTexCoord3d'/>
<function_alias name='glMultiTexCoord3dvARB' original='glMultiTexCoord3dv'/>
<function_alias name='glMultiTexCoord3fARB' original='glMultiTexCoord3f'/>
<function_alias name='glMultiTexCoord3fvARB' original='glMultiTexCoord3fv'/>
<function_alias name='glMultiTexCoord3iARB' original='glMultiTexCoord3i'/>
<function_alias name='glMultiTexCoord3ivARB' original='glMultiTexCoord3iv'/>
<function_alias name='glMultiTexCoord3sARB' original='glMultiTexCoord3s'/>
<function_alias name='glMultiTexCoord3svARB' original='glMultiTexCoord3sv'/>
<function_alias name='glMultiTexCoord4dARB' original='glMultiTexCoord4d'/>
<function_alias name='glMultiTexCoord4dvARB' original='glMultiTexCoord4dv'/>
<function_alias name='glMultiTexCoord4fARB' original='glMultiTexCoord4f'/>
<function_alias name='glMultiTexCoord4fvARB' original='glMultiTexCoord4fv'/>
<function_alias name='glMultiTexCoord4iARB' original='glMultiTexCoord4i'/>
<function_alias name='glMultiTexCoord4ivARB' original='glMultiTexCoord4iv'/>
<function_alias name='glMultiTexCoord4sARB' original='glMultiTexCoord4s'/>
<function_alias name='glMultiTexCoord4svARB' original='glMultiTexCoord4sv'/>
<function_alias name='glPNTrianglesfATIX' original='glPNTrianglesfATI'/>
<function_alias name='glPNTrianglesiATIX' original='glPNTrianglesiATI'/>
<function_alias name='glPointParameterfARB' original='glPointParameterf'/>
<function_alias name='glPointParameterfvARB' original='glPointParameterfv'/>
<function_alias name='glSampleCoverageARB' original='glSampleCoverage'/>
<function_alias name='glSamplePassARB' original='glSamplePass'/>
<function_alias name='glSecondaryColor3bEXT' original='glSecondaryColor3b'/>
<function_alias name='glSecondaryColor3bvEXT' original='glSecondaryColor3bv'/>
<function_alias name='glSecondaryColor3dEXT' original='glSecondaryColor3d'/>
<function_alias name='glSecondaryColor3dvEXT' original='glSecondaryColor3dv'/>
<function_alias name='glSecondaryColor3fEXT' original='glSecondaryColor3f'/>
<function_alias name='glSecondaryColor3fvEXT' original='glSecondaryColor3fv'/>
<function_alias name='glSecondaryColor3iEXT' original='glSecondaryColor3i'/>
<function_alias name='glSecondaryColor3ivEXT' original='glSecondaryColor3iv'/>
<function_alias name='glSecondaryColor3sEXT' original='glSecondaryColor3s'/>
<function_alias name='glSecondaryColor3svEXT' original='glSecondaryColor3sv'/>
<function_alias name='glSecondaryColor3ubEXT' original='glSecondaryColor3ub'/>
<function_alias name='glSecondaryColor3ubvEXT' original='glSecondaryColor3ubv'/>
<function_alias name='glSecondaryColor3uiEXT' original='glSecondaryColor3ui'/>
<function_alias name='glSecondaryColor3uivEXT' original='glSecondaryColor3uiv'/>
<function_alias name='glSecondaryColor3usEXT' original='glSecondaryColor3us'/>
<function_alias name='glSecondaryColor3usvEXT' original='glSecondaryColor3usv'/>
<function_alias name='glSecondaryColorPointerEXT' original='glSecondaryColorPointer'/>
<function_alias name='glUnmapBufferARB' original='glUnmapBuffer'/>
<function_alias name='glWindowPos2dARB' original='glWindowPos2d'/>
<function_alias name='glWindowPos2dvARB' original='glWindowPos2dv'/>
<function_alias name='glWindowPos2fARB' original='glWindowPos2f'/>
<function_alias name='glWindowPos2fvARB' original='glWindowPos2fv'/>
<function_alias name='glWindowPos2iARB' original='glWindowPos2i'/>
<function_alias name='glWindowPos2ivARB' original='glWindowPos2iv'/>
<function_alias name='glWindowPos2sARB' original='glWindowPos2s'/>
<function_alias name='glWindowPos2svARB' original='glWindowPos2sv'/>
<function_alias name='glWindowPos3dARB' original='glWindowPos3d'/>
<function_alias name='glWindowPos3dvARB' original='glWindowPos3dv'/>
<function_alias name='glWindowPos3fARB' original='glWindowPos3f'/>
<function_alias name='glWindowPos3fvARB' original='glWindowPos3fv'/>
<function_alias name='glWindowPos3iARB' original='glWindowPos3i'/>
<function_alias name='glWindowPos3ivARB' original='glWindowPos3iv'/>
<function_alias name='glWindowPos3sARB' original='glWindowPos3s'/>
<function_alias name='glWindowPos3svARB' original='glWindowPos3sv'/>
</signatures>
